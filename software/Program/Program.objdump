
Program.elf:     file format elf32-littlenios2
Program.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001cb88 memsz 0x0001cb88 flags r-x
    LOAD off    0x0001dba8 vaddr 0x0001cba8 paddr 0x0001e720 align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x00020298 vaddr 0x00020298 paddr 0x00020298 align 2**12
         filesz 0x00000000 memsz 0x00005424 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c300  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000678  0001c530  0001c530  0001d530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  0001cba8  0001e720  0001dba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00005424  00020298  00020298  00020298  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000256bc  000256bc  0001f720  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001f720  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001270  00000000  00000000  0001f748  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f9c9  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bc62  00000000  00000000  00050381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000fcb5  00000000  00000000  0005bfe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000035cc  00000000  00000000  0006bc98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000523b  00000000  00000000  0006f264  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b4eb  00000000  00000000  0007449f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0008f98c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001b18  00000000  00000000  0008f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000962aa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000962b0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000962bc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000962bd  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000962be  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000962c2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000962c6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000962ca  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000962d3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000962dc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  000962e5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  000962ec  2**0
                  CONTENTS, READONLY
 29 .jdi          00003e04  00000000  00000000  00096318  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004f39b  00000000  00000000  0009a11c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0001c530 l    d  .rodata	00000000 .rodata
0001cba8 l    d  .rwdata	00000000 .rwdata
00020298 l    d  .bss	00000000 .bss
000256bc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Program_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0001c624 l     O .rodata	00000108 two_over_pi
0001c5a4 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0001c76c l     O .rodata	00000010 init_jk
0001c72c l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0001c77c l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0001cba8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001c8d6 l     O .rodata	00000010 zeroes.4404
00009c18 l     F .text	000000bc __sbprintf
0001c8e6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00009e28 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000b980 l     F .text	00000008 __fp_unlock
0000b994 l     F .text	0000019c __sinit.part.1
0000bb30 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0001cfec l     O .rwdata	00000020 lc_ctype_charset
0001cfcc l     O .rwdata	00000020 lc_message_charset
0001d00c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001c914 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000ef90 l     F .text	000000fc __sprint_r.part.0
0001ca38 l     O .rodata	00000010 zeroes.4349
000105cc l     F .text	000000bc __sbprintf
0001ca48 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00011c3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00011d50 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00011d7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00011e70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00011f58 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012044 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00012218 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001e694 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001248c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001e698 l     O .rwdata	00000004 lockid
000202c4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001e69c l     O .rwdata	00000004 lockid
000202cc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00013ec4 l     F .text	00000048 OS_InitMisc
00013f0c l     F .text	0000006c OS_InitRdyList
00014078 l     F .text	000000e4 OS_InitTCBList
00013de4 l     F .text	000000e0 OS_InitEventList
00013f78 l     F .text	00000080 OS_InitTaskIdle
00013ff8 l     F .text	00000080 OS_InitTaskStat
000142e8 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00015ff8 l     F .text	000000f4 OS_FlagTaskRdy
00015db8 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a0d4 l     F .text	00000034 alt_dev_reg
0001d5f4 l     O .rwdata	0000106c JTAG_UART
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001a450 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0001a6f4 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001aed0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b110 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001b570 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001b6d0 l     F .text	0000003c alt_get_errno
0001b70c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00020330 g     O .bss	00000004 alt_instruction_exception_handler
0000e648 g     F .text	00000074 _mprec_log10
0001e6ea g     O .rwdata	00000002 OSTaskNameSize
0000e734 g     F .text	0000008c __any_on
00010b80 g     F .text	00000054 _isatty_r
0001c920 g     O .rodata	00000028 __mprec_tinytens
0001215c g     F .text	000000bc alt_main
000077b4 g     F .text	000000c0 _puts_r
000255bc g     O .bss	00000100 alt_irq
00004718 g     F .text	00000014 fabs
00010bd4 g     F .text	00000060 _lseek_r
00016818 g     F .text	000000d8 OS_MemInit
00001648 g     F .text	00000130 sqrt
0001e720 g       *ABS*	00000000 __flash_rwdata_start
0001a074 g     F .text	00000060 OSTimeSet
000061b8 g     F .text	00000088 .hidden __eqdf2
00012b38 g     F .text	00000610 OSEventPendMulti
000256bc g       *ABS*	00000000 __alt_heap_start
0001bd48 g     F .text	00000024 OSTaskCreateHook
00007778 g     F .text	0000003c printf
0001e6c2 g     O .rwdata	00000002 OSMboxEn
000131a0 g     F .text	0000004c OSIntEnter
00010dec g     F .text	0000009c _wcrtomb_r
0000ee50 g     F .text	0000005c __sseek
0000bce0 g     F .text	00000010 __sinit
00010c94 g     F .text	00000140 __swbuf_r
0001e6d2 g     O .rwdata	00000002 OSQEn
0000c7b4 g     F .text	0000007c _setlocale_r
0000bb38 g     F .text	00000078 __sfmoreglue
0001280c g     F .text	000000cc __malloc_unlock
0001bdb0 g     F .text	00000020 OSTaskStatHook
0002035c g     O .bss	00000018 triangle_angles
000202d4 g     O .bss	00000001 OSLockNesting
0001e710 g     O .rwdata	00000002 OSDataSize
000202d5 g     O .bss	00000001 OSRunning
0000d484 g     F .text	0000015c memmove
0001bdf0 g     F .text	00000020 OSInitHookBegin
0001e708 g     O .rwdata	00000002 OSTmrSize
0000bcc8 g     F .text	00000018 _cleanup
0000d708 g     F .text	000000a8 _Balloc
000202d8 g     O .bss	00000004 OSIdleCtr
00006240 g     F .text	000000dc .hidden __gtdf2
0001baf8 g     F .text	00000024 altera_nios2_gen2_irq_init
0001bbc8 g       .text	00000000 OSStartTsk
00007738 g     F .text	00000010 __errno
00014618 g     F .text	000002d4 OS_TCBInit
00020374 g     O .bss	00000018 triangle
00000000 g     F .entry	0000000c __reset
0001e70e g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001e6ae g     O .rwdata	00000002 OSEventSize
000202dc g     O .bss	00000001 OSPrioHighRdy
00010b24 g     F .text	0000005c _fstat_r
0001bd6c g     F .text	00000024 OSTaskDelHook
000202b0 g     O .bss	00000004 errno
00004748 g     F .text	000001ec floor
0000edcc g     F .text	00000008 __seofread
0001bba8 g       .text	00000000 OSStartHighRdy
00018af0 g     F .text	000001e4 OSTaskCreateExt
00015900 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001e6ee g     O .rwdata	00000002 OSTaskStatStkSize
00014a7c g     F .text	00000308 OSFlagAccept
00016e5c g     F .text	000000b8 OSQFlush
000168f0 g     F .text	00000140 OSQAccept
000202bc g     O .bss	00000004 alt_argv
00026660 g       *ABS*	00000000 _gp
00018944 g     F .text	000001ac OSTaskCreate
00018454 g     F .text	000004f0 OSTaskChangePrio
000202d0 g     O .bss	00000004 alt_heapsem
000148ec g     F .text	00000190 OSDebugInit
00018cd4 g     F .text	00000344 OSTaskDel
0001d474 g     O .rwdata	00000180 alt_fd_list
00022398 g     O .bss	00000370 OSFlagTbl
0000281c g     F .text	0000076c __ieee754_rem_pio2
00013bc4 g     F .text	000000b8 OS_EventTaskRemove
0001be74 g     F .text	00000090 alt_find_dev
0000d33c g     F .text	00000148 memcpy
0001e6d8 g     O .rwdata	00000002 OSRdyTblSize
0000b988 g     F .text	0000000c _cleanup_r
000075f8 g     F .text	000000dc .hidden __floatsidf
0001b654 g     F .text	0000007c alt_io_redirect
0000631c g     F .text	000000f4 .hidden __ltdf2
0001c530 g       *ABS*	00000000 __DTOR_END__
00007874 g     F .text	00000014 puts
0001c100 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000128d8 g     F .text	00000120 OSEventNameGet
0001e6bc g     O .rwdata	00000002 OSFlagMax
00004934 g     F .text	00000074 __fpclassifyd
0000e5a4 g     F .text	000000a4 __ratio
000131ec g     F .text	000000f8 OSIntExit
000105b0 g     F .text	0000001c __vfiprintf_internal
0001e6f6 g     O .rwdata	00000002 OSTCBSize
000202dd g     O .bss	00000001 OSPrioCur
0001a950 g     F .text	000002bc altera_avalon_jtag_uart_read
00007748 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004e58 g     F .text	00000064 .hidden __udivsi3
00011eac g     F .text	000000ac isatty
0001e6dc g     O .rwdata	00000002 OSStkWidth
0001c970 g     O .rodata	000000c8 __mprec_tens
0001e6d0 g     O .rwdata	00000002 OSPtrSize
0000c830 g     F .text	0000000c __locale_charset
00003210 g     F .text	000004a4 __kernel_cos
0001e6b0 g     O .rwdata	00000002 OSEventTblSize
0001bb1c g       .text	00000000 OSCtxSw
000202ac g     O .bss	00000004 __malloc_top_pad
000202e0 g     O .bss	00000004 OSTCBList
000202b4 g     O .bss	00000004 alt_fd_list_lock
0001e66c g     O .rwdata	00000004 __mb_cur_max
0000c860 g     F .text	0000000c _localeconv_r
0000db3c g     F .text	0000003c __i2b
0000c164 g     F .text	000004c8 __sfvwrite_r
00022708 g     O .bss	00000c30 OSMemTbl
000202e4 g     O .bss	00000001 OSTickStepState
0000ed24 g     F .text	00000054 _sbrk_r
0001e6d4 g     O .rwdata	00000002 OSQMax
00023338 g     O .bss	00000800 OSTaskStatStk
00016454 g     F .text	000000f0 OSMemNameGet
0001e6b4 g     O .rwdata	00000002 OSFlagEn
00010c34 g     F .text	00000060 _read_r
0001e6fa g     O .rwdata	00000002 OSTimeTickHookEn
0001730c g     F .text	00000168 OSQPost
000160ec g     F .text	000000a4 OS_FlagUnlink
0001e68c g     O .rwdata	00000004 alt_max_fd
000141b0 g     F .text	00000068 OS_MemCopy
00014218 g     F .text	000000d0 OS_Sched
00010818 g     F .text	000000f0 _fclose_r
00016364 g     F .text	000000f0 OSMemGet
00019300 g     F .text	000001b4 OSTaskNameSet
0000b950 g     F .text	00000030 fflush
000202a8 g     O .bss	00000004 __malloc_max_sbrked_mem
000202e8 g     O .bss	00000004 OSCtxSwCtr
0001bdd0 g     F .text	00000020 OSTimeTickHook
0001e6be g     O .rwdata	00000002 OSFlagNameSize
0000444c g     F .text	000002cc __kernel_sin
00013c7c g     F .text	00000100 OS_EventTaskRemoveMulti
00004f3c g     F .text	000008ac .hidden __adddf3
00013a74 g     F .text	00000150 OS_EventTaskWaitMulti
0000e34c g     F .text	0000010c __b2d
0001e6d6 g     O .rwdata	00000002 OSQSize
000115d0 g     F .text	000005c4 .hidden __umoddi3
00012080 g     F .text	000000dc lseek
00017dbc g     F .text	0000020c OSSemPend
0001e660 g     O .rwdata	00000004 __fdlib_version
0001e664 g     O .rwdata	00000004 _global_impure_ptr
0000e7c0 g     F .text	00000564 _realloc_r
0001e6c0 g     O .rwdata	00000002 OSLowestPrio
000256bc g       *ABS*	00000000 __bss_end
0001b480 g     F .text	000000f0 alt_iic_isr_register
0001be50 g     F .text	00000024 OSTCBInitHook
0001e706 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001b9f0 g     F .text	00000108 alt_tick
00010fd4 g     F .text	000005fc .hidden __udivdi3
00010a80 g     F .text	00000024 _fputwc_r
0001e6a8 g     O .rwdata	00000002 OSEventEn
0001c948 g     O .rodata	00000028 __mprec_bigtens
0000d920 g     F .text	00000104 __s2b
0001e702 g     O .rwdata	00000002 OSTmrCfgNameSize
00011b94 g     F .text	000000a8 .hidden __floatunsidf
0000e08c g     F .text	00000060 __mcmp
0000bd00 g     F .text	00000018 __fp_lock_all
0001b434 g     F .text	0000004c alt_ic_irq_enabled
00015f18 g     F .text	000000e0 OS_FlagInit
0001b954 g     F .text	0000009c alt_alarm_stop
0002038c g     O .bss	0000000c triangle_sides
0001e6e4 g     O .rwdata	00000002 OSTaskIdleStkSize
00020324 g     O .bss	00000004 alt_irq_active
000179f4 g     F .text	000000b0 OSSemAccept
00016658 g     F .text	000000d8 OSMemPut
00016190 g     F .text	000001d4 OSMemCreate
000202ec g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001d44c g     O .rwdata	00000028 alt_dev_null
0001e6f8 g     O .rwdata	00000002 OSTicksPerSec
000036b4 g     F .text	00000d98 __kernel_rem_pio2
000049bc g     F .text	000001ec rint
0001bb1c g       .text	00000000 OSIntCtxSw
0001b0f0 g     F .text	00000020 alt_dcache_flush_all
0000da24 g     F .text	00000068 __hi0bits
00007578 g     F .text	00000080 .hidden __fixdfsi
00000eb4 g     F .text	00000178 calc_angle
000202f0 g     O .bss	00000004 OSTCBFreeList
0001e720 g       *ABS*	00000000 __ram_rwdata_end
00017fc8 g     F .text	0000016c OSSemPendAbort
0001e684 g     O .rwdata	00000008 alt_dev_list
000124c8 g     F .text	00000100 write
0001e6fc g     O .rwdata	00000002 OSVersionNbr
0001cba8 g       *ABS*	00000000 __ram_rodata_end
00011db8 g     F .text	000000b8 fstat
0000631c g     F .text	000000f4 .hidden __ledf2
0001e6a4 g     O .rwdata	00000004 OSEndiannessTest
0000de04 g     F .text	00000140 __pow5mult
0000f0a4 g     F .text	0000150c ___vfiprintf_internal_r
000202a0 g     O .bss	00000004 __nlocale_changed
00004ebc g     F .text	00000058 .hidden __umodsi3
0001e6b6 g     O .rwdata	00000002 OSFlagGrpSize
000256bc g       *ABS*	00000000 end
0001a308 g     F .text	00000148 altera_avalon_jtag_uart_init
00014480 g     F .text	000000cc OS_TaskStat
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001c530 g       *ABS*	00000000 __CTOR_LIST__
00030d40 g       *ABS*	00000000 __alt_stack_pointer
0001af48 g     F .text	0000007c alt_avalon_timer_sc_init
000076d4 g     F .text	00000064 .hidden __clzsi2
0001ac0c g     F .text	000002c4 altera_avalon_jtag_uart_write
00001098 g     F .text	000000ec cos
0000bcf0 g     F .text	00000004 __sfp_lock_acquire
0000d258 g     F .text	000000e4 memchr
0001415c g     F .text	00000054 OS_MemClr
00007920 g     F .text	000022dc ___vfprintf_internal_r
0001bbec g     F .text	0000015c OSTaskStkInit
0000be54 g     F .text	00000310 _free_r
0000c83c g     F .text	00000010 __locale_mb_cur_max
000137cc g     F .text	00000198 OS_EventTaskRdy
0001c37c g     F .text	00000180 __call_exitprocs
000202f4 g     O .bss	00000001 OSCPUUsage
0002029c g     O .bss	00000004 __mlocale_changed
0001e670 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00020328 g     O .bss	00000004 _alt_tick_rate
00016f14 g     F .text	0000028c OSQPend
00019bc0 g     F .text	00000104 OSTimeDly
0000df44 g     F .text	00000148 __lshift
0002032c g     O .bss	00000004 _alt_nticks
00012254 g     F .text	00000104 read
0001a140 g     F .text	00000064 alt_sys_init
0001c264 g     F .text	00000118 __register_exitproc
000202f5 g     O .bss	00000001 OSTaskCtr
00019cc4 g     F .text	00000180 OSTimeDlyHMSM
0000db78 g     F .text	0000028c __multiply
00001778 g     F .text	000010a4 __ieee754_pow
0001a7f8 g     F .text	00000068 altera_avalon_jtag_uart_close
00001184 g     F .text	000004c4 pow
00004f14 g     F .text	00000028 .hidden __mulsi3
0001cba8 g       *ABS*	00000000 __ram_rwdata_start
0001c530 g       *ABS*	00000000 __ram_rodata_start
00020334 g     O .bss	00000028 __malloc_current_mallinfo
0001e6aa g     O .rwdata	00000002 OSEventMax
0000e458 g     F .text	0000014c __d2b
00018134 g     F .text	00000110 OSSemPost
00013370 g     F .text	000000dc OSSchedUnlock
0001a1a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001c00c g     F .text	000000f4 alt_get_fd
000202f8 g     O .bss	00000004 OSMemFreeList
000134bc g     F .text	000000b0 OSStatInit
00015cf4 g     F .text	000000c4 OSFlagQuery
0001e6e0 g     O .rwdata	00000002 OSTaskCreateExtEn
000106e8 g     F .text	00000054 _close_r
0001c1e8 g     F .text	0000007c memcmp
000137ac g     F .text	00000020 OS_Dummy
0001a264 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000256bc g       *ABS*	00000000 __alt_stack_base
0001a2b4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00009cd4 g     F .text	00000154 __swsetup_r
00023b38 g     O .bss	000001e0 OSQTbl
000057e8 g     F .text	000009d0 .hidden __divdf3
0000bbb0 g     F .text	00000118 __sfp
0000e6bc g     F .text	00000078 __copybits
0001d044 g     O .rwdata	00000408 __malloc_av_
0000bcfc g     F .text	00000004 __sinit_lock_release
000202fc g     O .bss	00000004 OSTCBHighRdy
00006410 g     F .text	0000086c .hidden __muldf3
0000ed78 g     F .text	00000054 __sread
00020300 g     O .bss	00000004 OSQFreeList
0001bf04 g     F .text	00000108 alt_find_file
0001b14c g     F .text	000000a4 alt_dev_llist_insert
000126ec g     F .text	00000120 __malloc_lock
000123dc g     F .text	000000b0 sbrk
000129f8 g     F .text	00000140 OSEventNameSet
0000b8f4 g     F .text	0000005c _fflush_r
0001073c g     F .text	000000dc _calloc_r
00020304 g     O .bss	00000001 OSRdyGrp
00020298 g       *ABS*	00000000 __bss_start
0000d5e0 g     F .text	00000128 memset
0000102c g     F .text	0000006c main
000202c0 g     O .bss	00000004 alt_envp
000202a4 g     O .bss	00000004 __malloc_max_total_mem
0001a204 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010dd4 g     F .text	00000018 __swbuf
0001ca74 g     O .rodata	00000100 OSUnMapTbl
0001e6da g     O .rwdata	00000002 OSSemEn
00020398 g     O .bss	00002000 find_leds_stk
00015960 g     F .text	00000394 OSFlagPost
0000026c g     F .text	00000aec find_leds
0000eeac g     F .text	00000008 __sclose
000049a8 g     F .text	00000008 matherr
00030d40 g       *ABS*	00000000 __alt_heap_limit
00010908 g     F .text	00000014 fclose
00013964 g     F .text	00000110 OS_EventTaskWait
0001454c g     F .text	000000cc OS_TaskStatStkChk
00019018 g     F .text	00000150 OSTaskDelReq
0000a050 g     F .text	00001688 _dtoa_r
0000ca4c g     F .text	0000080c _malloc_r
00010f48 g     F .text	00000030 __ascii_wctomb
0001e690 g     O .rwdata	00000004 alt_errno
0001344c g     F .text	00000070 OSStart
0001268c g     F .text	00000060 __env_unlock
0000c62c g     F .text	000000c4 _fwalk
000194b4 g     F .text	000001d4 OSTaskResume
00016730 g     F .text	000000e8 OSMemQuery
0001e6ec g     O .rwdata	00000002 OSTaskStatEn
0001e6c6 g     O .rwdata	00000002 OSMemMax
00017474 g     F .text	00000170 OSQPostFront
00004d60 g     F .text	00000084 .hidden __divsi3
00020305 g     O .bss	00000003 OSRdyTbl
0001e6a0 g     O .rwdata	00000002 OSDebugEn
0000bd30 g     F .text	00000124 _malloc_trim_r
0001c530 g       *ABS*	00000000 __CTOR_END__
0000472c g     F .text	0000001c finite
0001e6b8 g     O .rwdata	00000002 OSFlagNodeSize
0001e700 g     O .rwdata	00000002 OSTmrCfgMax
0000eeb4 g     F .text	000000dc strcmp
00016a30 g     F .text	000001ac OSQCreate
00019168 g     F .text	00000198 OSTaskNameGet
0001c530 g       *ABS*	00000000 __flash_rodata_start
000175e4 g     F .text	0000020c OSQPostOpt
0001356c g     F .text	00000220 OSTimeTick
0001e6e8 g     O .rwdata	00000002 OSTaskMax
0001c530 g       *ABS*	00000000 __DTOR_LIST__
00017aa4 g     F .text	000000d8 OSSemCreate
0001e70c g     O .rwdata	00000002 OSTmrWheelSize
00004d44 g     F .text	0000001c copysign
000061b8 g     F .text	00000088 .hidden __nedf2
0001e6e2 g     O .rwdata	00000002 OSTaskDelEn
00018244 g     F .text	00000110 OSSemQuery
00016bdc g     F .text	00000280 OSQDel
000171a0 g     F .text	0000016c OSQPendAbort
0001a108 g     F .text	00000038 alt_irq_init
00012358 g     F .text	00000084 alt_release_fd
0001c78c g     O .rodata	00000100 .hidden __clz_tab
00020298 g     O .bss	00000004 _PathLocale
0001c19c g     F .text	00000014 atexit
00010688 g     F .text	00000060 _write_r
000132e4 g     F .text	0000008c OSSchedLock
0000c86c g     F .text	00000018 setlocale
00014d84 g     F .text	00000108 OSFlagCreate
0001e668 g     O .rwdata	00000004 _impure_ptr
000202b8 g     O .bss	00000004 alt_argc
0000b6d8 g     F .text	0000021c __sflush_r
00004ba8 g     F .text	0000019c scalbn
0001b250 g     F .text	00000060 _do_dtors
0000c858 g     F .text	00000008 __locale_cjk_lang
0001e6b2 g     O .rwdata	00000002 OSEventMultiEn
00014e8c g     F .text	00000248 OSFlagDel
00020308 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000e2e8 g     F .text	00000064 __ulp
00015348 g     F .text	000005b8 OSFlagPend
0001e6fe g     O .rwdata	00000002 OSTmrEn
0000bd18 g     F .text	00000018 __fp_unlock_all
0001e67c g     O .rwdata	00000008 alt_fs_list
0001435c g     F .text	00000074 OS_StrCopy
0001e6c8 g     O .rwdata	00000002 OSMemNameSize
000049b0 g     F .text	0000000c nan
0001be10 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001e6f4 g     O .rwdata	00000002 OSTCBPrioTblMax
0000c884 g     F .text	0000000c localeconv
00002f88 g     F .text	00000288 __ieee754_sqrt
0001e6f0 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001b2d0 g     F .text	00000050 alt_ic_isr_register
0001e6c4 g     O .rwdata	00000002 OSMemEn
0001e6ce g     O .rwdata	00000002 OSMutexEn
0001e720 g       *ABS*	00000000 _edata
000256bc g       *ABS*	00000000 _end
0002030c g     O .bss	00000001 OSIntNesting
0001091c g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0001a860 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00019e44 g     F .text	000001d4 OSTimeDlyResume
000151fc g     F .text	0000014c OSFlagNameSet
00019688 g     F .text	000001c0 OSTaskStkChk
0001b3a8 g     F .text	0000008c alt_ic_irq_disable
0001e6ca g     O .rwdata	00000002 OSMemSize
0000edd4 g     F .text	0000007c __swrite
0001e674 g     O .rwdata	00000004 __malloc_trim_threshold
0000c84c g     F .text	0000000c __locale_msgcharset
00020310 g     O .bss	00000004 OSTCBCur
0001c1b0 g     F .text	00000038 exit
0001e6cc g     O .rwdata	00000002 OSMemTblSize
0000c6f0 g     F .text	000000c4 _fwalk_reent
0000e0ec g     F .text	000001fc __mdiff
00004de4 g     F .text	00000074 .hidden __modsi3
00030d40 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000bcf4 g     F .text	00000004 __sfp_lock_release
00013148 g     F .text	00000058 OSInit
00019a2c g     F .text	00000124 OSTaskQuery
0001794c g     F .text	000000a8 OS_QInit
000143d0 g     F .text	00000054 OS_StrLen
00016544 g     F .text	00000114 OSMemNameSet
0001e6e6 g     O .rwdata	00000002 OSTaskProfileEn
00020314 g     O .bss	00000004 OSTime
00023d18 g     O .bss	00000800 OSTaskIdleStk
0001c4fc g     F .text	00000034 _exit
0001afc4 g     F .text	0000012c alt_alarm_start
000150d4 g     F .text	00000128 OSFlagNameGet
0001a018 g     F .text	0000005c OSTimeGet
0000c890 g     F .text	000001bc __smakebuf_r
00007888 g     F .text	00000098 strlen
0001bd90 g     F .text	00000020 OSTaskSwHook
0001b7f8 g     F .text	0000015c open
00024518 g     O .bss	00000b40 OSEventTbl
00006240 g     F .text	000000dc .hidden __gedf2
00025058 g     O .bss	00000510 OSTCBTbl
00018354 g     F .text	00000100 OSSemSet
0001e678 g     O .rwdata	00000004 __wctomb
0000f08c g     F .text	00000018 __sprint_r
0001b2b0 g     F .text	00000020 alt_icache_flush_all
0001e714 g     O .rwdata	00000004 alt_priority_mask
00017b7c g     F .text	00000240 OSSemDel
00020318 g     O .bss	00000004 OSFlagFreeList
0001b320 g     F .text	00000088 alt_ic_irq_enable
0001e6ac g     O .rwdata	00000002 OSEventNameSize
00009bfc g     F .text	0000001c __vfprintf_internal
0002031c g     O .bss	00000001 OSStatRdy
00025568 g     O .bss	00000054 OSTCBPrioTbl
00010f78 g     F .text	0000005c _wctomb_r
000125c8 g     F .text	000000c4 __env_lock
0001e6f2 g     O .rwdata	00000002 OSTaskSwHookEn
00006c7c g     F .text	000008fc .hidden __subdf3
0000da8c g     F .text	000000b0 __lo0bits
0001e718 g     O .rwdata	00000008 alt_alarm_list
0001e6ba g     O .rwdata	00000002 OSFlagWidth
0001b1f0 g     F .text	00000060 _do_ctors
00010e88 g     F .text	000000c0 wcrtomb
00011c78 g     F .text	000000d8 close
000202c8 g     O .bss	00000004 alt_envsem
00020320 g     O .bss	00000004 OSIdleCtrRun
0001378c g     F .text	00000020 OSVersion
0001e704 g     O .rwdata	00000002 OSTmrCfgWheelSize
00011fc0 g     F .text	00000084 alt_load
00019b50 g     F .text	00000070 OS_TaskStkClr
0001e6de g     O .rwdata	00000002 OSTaskCreateEn
00000d58 g     F .text	0000015c calc_side
00013d7c g     F .text	00000068 OS_EventWaitListInit
00010aa4 g     F .text	00000080 fputwc
0001be30 g     F .text	00000020 OSTaskIdleHook
0000bcf8 g     F .text	00000004 __sinit_lock_acquire
0000d7d8 g     F .text	00000148 __multadd
00019848 g     F .text	000001e4 OSTaskSuspend
0000d7b0 g     F .text	00000028 _Bfree
00014424 g     F .text	0000005c OS_TaskIdle
0001e70a g     O .rwdata	00000002 OSTmrTblSize
000177f0 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00131a00 	call	131a0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10956f04 	addi	r2,r2,21948
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10956f04 	addi	r2,r2,21948
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffcf3ec>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffcf3e0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	00131ec0 	call	131ec <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a73417 	ldw	r2,-25392(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a73417 	ldw	r2,-25392(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
     238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     23c:	d6999814 	ori	gp,gp,26208
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     244:	1080a614 	ori	r2,r2,664

    movhi r3, %hi(__bss_end)
     248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     24c:	18d5af14 	ori	r3,r3,22204

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffcf514>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	0011fc00 	call	11fc0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001215c0 	call	1215c <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffcf528>

0000026c <find_leds>:
int calc_side(int x1, int x2, int y1, int y2);
double calc_angle(int s1, int s2, int s3);

/* Prints "Hello World" and sleeps for three seconds */
void find_leds(void* pdata)
{
     26c:	defff204 	addi	sp,sp,-56
     270:	dfc00d15 	stw	ra,52(sp)
     274:	df000c15 	stw	fp,48(sp)
     278:	df000c04 	addi	fp,sp,48
     27c:	e13fff15 	stw	r4,-4(fp)
	printf("Gestart");
     280:	010000b4 	movhi	r4,2
     284:	21314c04 	addi	r4,r4,-15056
     288:	00077780 	call	7778 <printf>
	*leds = 0xFFFF;
     28c:	00800134 	movhi	r2,4
     290:	10840c04 	addi	r2,r2,4144
     294:	00ffffd4 	movui	r3,65535
     298:	10c00015 	stw	r3,0(r2)
  while (1)
  { 
	int a = *ledA_center;
     29c:	00800134 	movhi	r2,4
     2a0:	10841804 	addi	r2,r2,4192
     2a4:	10800017 	ldw	r2,0(r2)
     2a8:	e0bff415 	stw	r2,-48(fp)
	int xPos_a = a % 320;
     2ac:	e0bff417 	ldw	r2,-48(fp)
     2b0:	01405004 	movi	r5,320
     2b4:	1009883a 	mov	r4,r2
     2b8:	0004de40 	call	4de4 <__modsi3>
     2bc:	e0bff515 	stw	r2,-44(fp)
	int yPos_a = (a-xPos_a)/320;
     2c0:	e0fff417 	ldw	r3,-48(fp)
     2c4:	e0bff517 	ldw	r2,-44(fp)
     2c8:	1885c83a 	sub	r2,r3,r2
     2cc:	01405004 	movi	r5,320
     2d0:	1009883a 	mov	r4,r2
     2d4:	0004d600 	call	4d60 <__divsi3>
     2d8:	e0bff615 	stw	r2,-40(fp)
	triangle[0][0] = xPos_a;
     2dc:	008000b4 	movhi	r2,2
     2e0:	1080dd04 	addi	r2,r2,884
     2e4:	e0fff517 	ldw	r3,-44(fp)
     2e8:	10c00015 	stw	r3,0(r2)
	triangle[0][1] = yPos_a;
     2ec:	008000b4 	movhi	r2,2
     2f0:	1080dd04 	addi	r2,r2,884
     2f4:	e0fff617 	ldw	r3,-40(fp)
     2f8:	10c00115 	stw	r3,4(r2)

	int b = *ledB_center;
     2fc:	00800134 	movhi	r2,4
     300:	10841404 	addi	r2,r2,4176
     304:	10800017 	ldw	r2,0(r2)
     308:	e0bff715 	stw	r2,-36(fp)
	int xPos_b = b % 320;
     30c:	e0bff717 	ldw	r2,-36(fp)
     310:	01405004 	movi	r5,320
     314:	1009883a 	mov	r4,r2
     318:	0004de40 	call	4de4 <__modsi3>
     31c:	e0bff815 	stw	r2,-32(fp)
	int yPos_b = (b-xPos_b)/320;
     320:	e0fff717 	ldw	r3,-36(fp)
     324:	e0bff817 	ldw	r2,-32(fp)
     328:	1885c83a 	sub	r2,r3,r2
     32c:	01405004 	movi	r5,320
     330:	1009883a 	mov	r4,r2
     334:	0004d600 	call	4d60 <__divsi3>
     338:	e0bff915 	stw	r2,-28(fp)
	triangle[1][0] = xPos_b;
     33c:	008000b4 	movhi	r2,2
     340:	1080dd04 	addi	r2,r2,884
     344:	e0fff817 	ldw	r3,-32(fp)
     348:	10c00215 	stw	r3,8(r2)
	triangle[1][1] = yPos_b;
     34c:	008000b4 	movhi	r2,2
     350:	1080dd04 	addi	r2,r2,884
     354:	e0fff917 	ldw	r3,-28(fp)
     358:	10c00315 	stw	r3,12(r2)

	int c = *ledC_center;
     35c:	00800134 	movhi	r2,4
     360:	10841004 	addi	r2,r2,4160
     364:	10800017 	ldw	r2,0(r2)
     368:	e0bffa15 	stw	r2,-24(fp)
	int xPos_c = c % 320;
     36c:	e0bffa17 	ldw	r2,-24(fp)
     370:	01405004 	movi	r5,320
     374:	1009883a 	mov	r4,r2
     378:	0004de40 	call	4de4 <__modsi3>
     37c:	e0bffb15 	stw	r2,-20(fp)
	int yPos_c = (c-xPos_c)/320;
     380:	e0fffa17 	ldw	r3,-24(fp)
     384:	e0bffb17 	ldw	r2,-20(fp)
     388:	1885c83a 	sub	r2,r3,r2
     38c:	01405004 	movi	r5,320
     390:	1009883a 	mov	r4,r2
     394:	0004d600 	call	4d60 <__divsi3>
     398:	e0bffc15 	stw	r2,-16(fp)
	triangle[2][0] = xPos_c;
     39c:	008000b4 	movhi	r2,2
     3a0:	1080dd04 	addi	r2,r2,884
     3a4:	e0fffb17 	ldw	r3,-20(fp)
     3a8:	10c00415 	stw	r3,16(r2)
	triangle[2][1] = yPos_c;
     3ac:	008000b4 	movhi	r2,2
     3b0:	1080dd04 	addi	r2,r2,884
     3b4:	e0fffc17 	ldw	r3,-16(fp)
     3b8:	10c00515 	stw	r3,20(r2)

	//BA
	triangle_sides[0] = calc_side(triangle[1][0],triangle[0][0],triangle[1][1],triangle[0][1]);
     3bc:	008000b4 	movhi	r2,2
     3c0:	1080dd04 	addi	r2,r2,884
     3c4:	10c00217 	ldw	r3,8(r2)
     3c8:	008000b4 	movhi	r2,2
     3cc:	1080dd04 	addi	r2,r2,884
     3d0:	11000017 	ldw	r4,0(r2)
     3d4:	008000b4 	movhi	r2,2
     3d8:	1080dd04 	addi	r2,r2,884
     3dc:	11400317 	ldw	r5,12(r2)
     3e0:	008000b4 	movhi	r2,2
     3e4:	1080dd04 	addi	r2,r2,884
     3e8:	10800117 	ldw	r2,4(r2)
     3ec:	100f883a 	mov	r7,r2
     3f0:	280d883a 	mov	r6,r5
     3f4:	200b883a 	mov	r5,r4
     3f8:	1809883a 	mov	r4,r3
     3fc:	0000d580 	call	d58 <calc_side>
     400:	1007883a 	mov	r3,r2
     404:	008000b4 	movhi	r2,2
     408:	1080e304 	addi	r2,r2,908
     40c:	10c00015 	stw	r3,0(r2)
	//AC
	triangle_sides[1] = calc_side(triangle[0][0],triangle[2][0],triangle[0][1],triangle[2][1]);
     410:	008000b4 	movhi	r2,2
     414:	1080dd04 	addi	r2,r2,884
     418:	10c00017 	ldw	r3,0(r2)
     41c:	008000b4 	movhi	r2,2
     420:	1080dd04 	addi	r2,r2,884
     424:	11000417 	ldw	r4,16(r2)
     428:	008000b4 	movhi	r2,2
     42c:	1080dd04 	addi	r2,r2,884
     430:	11400117 	ldw	r5,4(r2)
     434:	008000b4 	movhi	r2,2
     438:	1080dd04 	addi	r2,r2,884
     43c:	10800517 	ldw	r2,20(r2)
     440:	100f883a 	mov	r7,r2
     444:	280d883a 	mov	r6,r5
     448:	200b883a 	mov	r5,r4
     44c:	1809883a 	mov	r4,r3
     450:	0000d580 	call	d58 <calc_side>
     454:	1007883a 	mov	r3,r2
     458:	008000b4 	movhi	r2,2
     45c:	1080e304 	addi	r2,r2,908
     460:	10c00115 	stw	r3,4(r2)
	//BC
	triangle_sides[2] = calc_side(triangle[1][0],triangle[2][0],triangle[1][1],triangle[2][1]);
     464:	008000b4 	movhi	r2,2
     468:	1080dd04 	addi	r2,r2,884
     46c:	10c00217 	ldw	r3,8(r2)
     470:	008000b4 	movhi	r2,2
     474:	1080dd04 	addi	r2,r2,884
     478:	11000417 	ldw	r4,16(r2)
     47c:	008000b4 	movhi	r2,2
     480:	1080dd04 	addi	r2,r2,884
     484:	11400317 	ldw	r5,12(r2)
     488:	008000b4 	movhi	r2,2
     48c:	1080dd04 	addi	r2,r2,884
     490:	10800517 	ldw	r2,20(r2)
     494:	100f883a 	mov	r7,r2
     498:	280d883a 	mov	r6,r5
     49c:	200b883a 	mov	r5,r4
     4a0:	1809883a 	mov	r4,r3
     4a4:	0000d580 	call	d58 <calc_side>
     4a8:	1007883a 	mov	r3,r2
     4ac:	008000b4 	movhi	r2,2
     4b0:	1080e304 	addi	r2,r2,908
     4b4:	10c00215 	stw	r3,8(r2)

	//A
	triangle_angles[0] = calc_angle(triangle_sides[0], triangle_sides[1], triangle_sides[2]);
     4b8:	008000b4 	movhi	r2,2
     4bc:	1080e304 	addi	r2,r2,908
     4c0:	10c00017 	ldw	r3,0(r2)
     4c4:	008000b4 	movhi	r2,2
     4c8:	1080e304 	addi	r2,r2,908
     4cc:	11000117 	ldw	r4,4(r2)
     4d0:	008000b4 	movhi	r2,2
     4d4:	1080e304 	addi	r2,r2,908
     4d8:	10800217 	ldw	r2,8(r2)
     4dc:	100d883a 	mov	r6,r2
     4e0:	200b883a 	mov	r5,r4
     4e4:	1809883a 	mov	r4,r3
     4e8:	0000eb40 	call	eb4 <calc_angle>
     4ec:	1009883a 	mov	r4,r2
     4f0:	180b883a 	mov	r5,r3
     4f4:	008000b4 	movhi	r2,2
     4f8:	1080d704 	addi	r2,r2,860
     4fc:	11000015 	stw	r4,0(r2)
     500:	11400115 	stw	r5,4(r2)
	//B
	triangle_angles[1] = calc_angle(triangle_sides[0], triangle_sides[2], triangle_sides[1]);
     504:	008000b4 	movhi	r2,2
     508:	1080e304 	addi	r2,r2,908
     50c:	10c00017 	ldw	r3,0(r2)
     510:	008000b4 	movhi	r2,2
     514:	1080e304 	addi	r2,r2,908
     518:	11000217 	ldw	r4,8(r2)
     51c:	008000b4 	movhi	r2,2
     520:	1080e304 	addi	r2,r2,908
     524:	10800117 	ldw	r2,4(r2)
     528:	100d883a 	mov	r6,r2
     52c:	200b883a 	mov	r5,r4
     530:	1809883a 	mov	r4,r3
     534:	0000eb40 	call	eb4 <calc_angle>
     538:	1009883a 	mov	r4,r2
     53c:	180b883a 	mov	r5,r3
     540:	008000b4 	movhi	r2,2
     544:	1080d704 	addi	r2,r2,860
     548:	11000215 	stw	r4,8(r2)
     54c:	11400315 	stw	r5,12(r2)
	//C
	triangle_angles[2] = calc_angle(triangle_sides[1], triangle_sides[2], triangle_sides[0]);
     550:	008000b4 	movhi	r2,2
     554:	1080e304 	addi	r2,r2,908
     558:	10c00117 	ldw	r3,4(r2)
     55c:	008000b4 	movhi	r2,2
     560:	1080e304 	addi	r2,r2,908
     564:	11000217 	ldw	r4,8(r2)
     568:	008000b4 	movhi	r2,2
     56c:	1080e304 	addi	r2,r2,908
     570:	10800017 	ldw	r2,0(r2)
     574:	100d883a 	mov	r6,r2
     578:	200b883a 	mov	r5,r4
     57c:	1809883a 	mov	r4,r3
     580:	0000eb40 	call	eb4 <calc_angle>
     584:	1009883a 	mov	r4,r2
     588:	180b883a 	mov	r5,r3
     58c:	008000b4 	movhi	r2,2
     590:	1080d704 	addi	r2,r2,860
     594:	11000415 	stw	r4,16(r2)
     598:	11400515 	stw	r5,20(r2)
	double difference = triangle_angles[1] - triangle_angles[2];
     59c:	010000b4 	movhi	r4,2
     5a0:	2100d704 	addi	r4,r4,860
     5a4:	20800217 	ldw	r2,8(r4)
     5a8:	20c00317 	ldw	r3,12(r4)
     5ac:	018000b4 	movhi	r6,2
     5b0:	3180d704 	addi	r6,r6,860
     5b4:	31000417 	ldw	r4,16(r6)
     5b8:	31400517 	ldw	r5,20(r6)
     5bc:	200d883a 	mov	r6,r4
     5c0:	280f883a 	mov	r7,r5
     5c4:	1009883a 	mov	r4,r2
     5c8:	180b883a 	mov	r5,r3
     5cc:	0006c7c0 	call	6c7c <__subdf3>
     5d0:	1009883a 	mov	r4,r2
     5d4:	180b883a 	mov	r5,r3
     5d8:	e13ffd15 	stw	r4,-12(fp)
     5dc:	e17ffe15 	stw	r5,-8(fp)
	printf("Lengths\n");
     5e0:	010000b4 	movhi	r4,2
     5e4:	21314e04 	addi	r4,r4,-15048
     5e8:	00078740 	call	7874 <puts>
    printf("BA: %i\n", triangle_sides[0]);
     5ec:	008000b4 	movhi	r2,2
     5f0:	1080e304 	addi	r2,r2,908
     5f4:	10800017 	ldw	r2,0(r2)
     5f8:	100b883a 	mov	r5,r2
     5fc:	010000b4 	movhi	r4,2
     600:	21315004 	addi	r4,r4,-15040
     604:	00077780 	call	7778 <printf>
    printf("AC: %i\n", triangle_sides[1]);
     608:	008000b4 	movhi	r2,2
     60c:	1080e304 	addi	r2,r2,908
     610:	10800117 	ldw	r2,4(r2)
     614:	100b883a 	mov	r5,r2
     618:	010000b4 	movhi	r4,2
     61c:	21315204 	addi	r4,r4,-15032
     620:	00077780 	call	7778 <printf>
    printf("BC: %i\n", triangle_sides[2]);
     624:	008000b4 	movhi	r2,2
     628:	1080e304 	addi	r2,r2,908
     62c:	10800217 	ldw	r2,8(r2)
     630:	100b883a 	mov	r5,r2
     634:	010000b4 	movhi	r4,2
     638:	21315404 	addi	r4,r4,-15024
     63c:	00077780 	call	7778 <printf>
    printf("Angles\n");
     640:	010000b4 	movhi	r4,2
     644:	21315604 	addi	r4,r4,-15016
     648:	00078740 	call	7874 <puts>
    printf("A: %f\n", triangle_angles[0]);
     64c:	010000b4 	movhi	r4,2
     650:	2100d704 	addi	r4,r4,860
     654:	20800017 	ldw	r2,0(r4)
     658:	20c00117 	ldw	r3,4(r4)
     65c:	100b883a 	mov	r5,r2
     660:	180d883a 	mov	r6,r3
     664:	010000b4 	movhi	r4,2
     668:	21315804 	addi	r4,r4,-15008
     66c:	00077780 	call	7778 <printf>
    printf("B: %f\n", triangle_angles[1]);
     670:	010000b4 	movhi	r4,2
     674:	2100d704 	addi	r4,r4,860
     678:	20800217 	ldw	r2,8(r4)
     67c:	20c00317 	ldw	r3,12(r4)
     680:	100b883a 	mov	r5,r2
     684:	180d883a 	mov	r6,r3
     688:	010000b4 	movhi	r4,2
     68c:	21315a04 	addi	r4,r4,-15000
     690:	00077780 	call	7778 <printf>
    printf("C: %f\n", triangle_angles[2]);
     694:	010000b4 	movhi	r4,2
     698:	2100d704 	addi	r4,r4,860
     69c:	20800417 	ldw	r2,16(r4)
     6a0:	20c00517 	ldw	r3,20(r4)
     6a4:	100b883a 	mov	r5,r2
     6a8:	180d883a 	mov	r6,r3
     6ac:	010000b4 	movhi	r4,2
     6b0:	21315c04 	addi	r4,r4,-14992
     6b4:	00077780 	call	7778 <printf>
    printf("Difference: %f\n", difference);
     6b8:	e17ffd17 	ldw	r5,-12(fp)
     6bc:	e1bffe17 	ldw	r6,-8(fp)
     6c0:	010000b4 	movhi	r4,2
     6c4:	21315e04 	addi	r4,r4,-14984
     6c8:	00077780 	call	7778 <printf>
    printf("---------------\n");
     6cc:	010000b4 	movhi	r4,2
     6d0:	21316204 	addi	r4,r4,-14968
     6d4:	00078740 	call	7874 <puts>

    if(difference == 0) {
     6d8:	000d883a 	mov	r6,zero
     6dc:	000f883a 	mov	r7,zero
     6e0:	e13ffd17 	ldw	r4,-12(fp)
     6e4:	e17ffe17 	ldw	r5,-8(fp)
     6e8:	00061b80 	call	61b8 <__eqdf2>
     6ec:	1000081e 	bne	r2,zero,710 <find_leds+0x4a4>
    	*leds = 256;
     6f0:	00800134 	movhi	r2,4
     6f4:	10840c04 	addi	r2,r2,4144
     6f8:	00c04004 	movi	r3,256
     6fc:	10c00015 	stw	r3,0(r2)
    	PS2_loc = 0;
     700:	00800134 	movhi	r2,4
     704:	10840804 	addi	r2,r2,4128
     708:	10000015 	stw	zero,0(r2)
     70c:	00018c06 	br	d40 <find_leds+0xad4>
    } else if (difference < 0.02 && difference > 0){
     710:	0191ebb4 	movhi	r6,18350
     714:	31851ec4 	addi	r6,r6,5243
     718:	01cfe534 	movhi	r7,16276
     71c:	39deb844 	addi	r7,r7,31457
     720:	e13ffd17 	ldw	r4,-12(fp)
     724:	e17ffe17 	ldw	r5,-8(fp)
     728:	000631c0 	call	631c <__ledf2>
     72c:	10000f0e 	bge	r2,zero,76c <find_leds+0x500>
     730:	000d883a 	mov	r6,zero
     734:	000f883a 	mov	r7,zero
     738:	e13ffd17 	ldw	r4,-12(fp)
     73c:	e17ffe17 	ldw	r5,-8(fp)
     740:	00062400 	call	6240 <__gedf2>
     744:	0080090e 	bge	zero,r2,76c <find_leds+0x500>
    	*leds = 512;
     748:	00800134 	movhi	r2,4
     74c:	10840c04 	addi	r2,r2,4144
     750:	00c08004 	movi	r3,512
     754:	10c00015 	stw	r3,0(r2)
    	PS2_loc = 1;
     758:	00800134 	movhi	r2,4
     75c:	10840804 	addi	r2,r2,4128
     760:	00c00044 	movi	r3,1
     764:	10c00015 	stw	r3,0(r2)
     768:	00017506 	br	d40 <find_leds+0xad4>
    } else if (difference < 0.04 && difference > 0.02) {
     76c:	0191ebb4 	movhi	r6,18350
     770:	31851ec4 	addi	r6,r6,5243
     774:	01cfe934 	movhi	r7,16292
     778:	39deb844 	addi	r7,r7,31457
     77c:	e13ffd17 	ldw	r4,-12(fp)
     780:	e17ffe17 	ldw	r5,-8(fp)
     784:	000631c0 	call	631c <__ledf2>
     788:	1000110e 	bge	r2,zero,7d0 <find_leds+0x564>
     78c:	0191ebb4 	movhi	r6,18350
     790:	31851ec4 	addi	r6,r6,5243
     794:	01cfe534 	movhi	r7,16276
     798:	39deb844 	addi	r7,r7,31457
     79c:	e13ffd17 	ldw	r4,-12(fp)
     7a0:	e17ffe17 	ldw	r5,-8(fp)
     7a4:	00062400 	call	6240 <__gedf2>
     7a8:	0080090e 	bge	zero,r2,7d0 <find_leds+0x564>
    	*leds = 1536;
     7ac:	00800134 	movhi	r2,4
     7b0:	10840c04 	addi	r2,r2,4144
     7b4:	00c18004 	movi	r3,1536
     7b8:	10c00015 	stw	r3,0(r2)
    	PS2_loc = 3;
     7bc:	00800134 	movhi	r2,4
     7c0:	10840804 	addi	r2,r2,4128
     7c4:	00c000c4 	movi	r3,3
     7c8:	10c00015 	stw	r3,0(r2)
     7cc:	00015c06 	br	d40 <find_leds+0xad4>
    } else if (difference < 0.06 && difference > 0.04) {
     7d0:	01bae174 	movhi	r6,60293
     7d4:	3187ae04 	addi	r6,r6,7864
     7d8:	01cfebf4 	movhi	r7,16303
     7dc:	39ee1444 	addi	r7,r7,-18351
     7e0:	e13ffd17 	ldw	r4,-12(fp)
     7e4:	e17ffe17 	ldw	r5,-8(fp)
     7e8:	000631c0 	call	631c <__ledf2>
     7ec:	1000110e 	bge	r2,zero,834 <find_leds+0x5c8>
     7f0:	0191ebb4 	movhi	r6,18350
     7f4:	31851ec4 	addi	r6,r6,5243
     7f8:	01cfe934 	movhi	r7,16292
     7fc:	39deb844 	addi	r7,r7,31457
     800:	e13ffd17 	ldw	r4,-12(fp)
     804:	e17ffe17 	ldw	r5,-8(fp)
     808:	00062400 	call	6240 <__gedf2>
     80c:	0080090e 	bge	zero,r2,834 <find_leds+0x5c8>
    	*leds = 3584;
     810:	00800134 	movhi	r2,4
     814:	10840c04 	addi	r2,r2,4144
     818:	00c38004 	movi	r3,3584
     81c:	10c00015 	stw	r3,0(r2)
    	PS2_loc = 5;
     820:	00800134 	movhi	r2,4
     824:	10840804 	addi	r2,r2,4128
     828:	00c00144 	movi	r3,5
     82c:	10c00015 	stw	r3,0(r2)
     830:	00014306 	br	d40 <find_leds+0xad4>
    } else if (difference < 0.08 && difference > 0.06) {
     834:	0191ebb4 	movhi	r6,18350
     838:	31851ec4 	addi	r6,r6,5243
     83c:	01cfed34 	movhi	r7,16308
     840:	39deb844 	addi	r7,r7,31457
     844:	e13ffd17 	ldw	r4,-12(fp)
     848:	e17ffe17 	ldw	r5,-8(fp)
     84c:	000631c0 	call	631c <__ledf2>
     850:	1000110e 	bge	r2,zero,898 <find_leds+0x62c>
     854:	01bae174 	movhi	r6,60293
     858:	3187ae04 	addi	r6,r6,7864
     85c:	01cfebf4 	movhi	r7,16303
     860:	39ee1444 	addi	r7,r7,-18351
     864:	e13ffd17 	ldw	r4,-12(fp)
     868:	e17ffe17 	ldw	r5,-8(fp)
     86c:	00062400 	call	6240 <__gedf2>
     870:	0080090e 	bge	zero,r2,898 <find_leds+0x62c>
    	*leds = 7680;
     874:	00800134 	movhi	r2,4
     878:	10840c04 	addi	r2,r2,4144
     87c:	00c78004 	movi	r3,7680
     880:	10c00015 	stw	r3,0(r2)
    	PS2_loc = 7;
     884:	00800134 	movhi	r2,4
     888:	10840804 	addi	r2,r2,4128
     88c:	00c001c4 	movi	r3,7
     890:	10c00015 	stw	r3,0(r2)
     894:	00012a06 	br	d40 <find_leds+0xad4>
    } else if (difference < 0.10 && difference > 0.08) {
     898:	01a666b4 	movhi	r6,39322
     89c:	31a66684 	addi	r6,r6,-26214
     8a0:	01cfeeb4 	movhi	r7,16314
     8a4:	39e66644 	addi	r7,r7,-26215
     8a8:	e13ffd17 	ldw	r4,-12(fp)
     8ac:	e17ffe17 	ldw	r5,-8(fp)
     8b0:	000631c0 	call	631c <__ledf2>
     8b4:	1000110e 	bge	r2,zero,8fc <find_leds+0x690>
     8b8:	0191ebb4 	movhi	r6,18350
     8bc:	31851ec4 	addi	r6,r6,5243
     8c0:	01cfed34 	movhi	r7,16308
     8c4:	39deb844 	addi	r7,r7,31457
     8c8:	e13ffd17 	ldw	r4,-12(fp)
     8cc:	e17ffe17 	ldw	r5,-8(fp)
     8d0:	00062400 	call	6240 <__gedf2>
     8d4:	0080090e 	bge	zero,r2,8fc <find_leds+0x690>
    	*leds = 15872;
     8d8:	00800134 	movhi	r2,4
     8dc:	10840c04 	addi	r2,r2,4144
     8e0:	00cf8004 	movi	r3,15872
     8e4:	10c00015 	stw	r3,0(r2)
    	PS2_loc = 9;
     8e8:	00800134 	movhi	r2,4
     8ec:	10840804 	addi	r2,r2,4128
     8f0:	00c00244 	movi	r3,9
     8f4:	10c00015 	stw	r3,0(r2)
     8f8:	00011106 	br	d40 <find_leds+0xad4>
    } else if (difference < 0.12 && difference > 0.10) {
     8fc:	01bae174 	movhi	r6,60293
     900:	3187ae04 	addi	r6,r6,7864
     904:	01cfeff4 	movhi	r7,16319
     908:	39ee1444 	addi	r7,r7,-18351
     90c:	e13ffd17 	ldw	r4,-12(fp)
     910:	e17ffe17 	ldw	r5,-8(fp)
     914:	000631c0 	call	631c <__ledf2>
     918:	1000110e 	bge	r2,zero,960 <find_leds+0x6f4>
     91c:	01a666b4 	movhi	r6,39322
     920:	31a66684 	addi	r6,r6,-26214
     924:	01cfeeb4 	movhi	r7,16314
     928:	39e66644 	addi	r7,r7,-26215
     92c:	e13ffd17 	ldw	r4,-12(fp)
     930:	e17ffe17 	ldw	r5,-8(fp)
     934:	00062400 	call	6240 <__gedf2>
     938:	0080090e 	bge	zero,r2,960 <find_leds+0x6f4>
    	*leds = 32256;
     93c:	00800134 	movhi	r2,4
     940:	10840c04 	addi	r2,r2,4144
     944:	00df8004 	movi	r3,32256
     948:	10c00015 	stw	r3,0(r2)
    	PS2_loc = 11;
     94c:	00800134 	movhi	r2,4
     950:	10840804 	addi	r2,r2,4128
     954:	00c002c4 	movi	r3,11
     958:	10c00015 	stw	r3,0(r2)
     95c:	0000f806 	br	d40 <find_leds+0xad4>
    } else if (difference < 0.14 && difference > 0.12) {
     960:	0187ae34 	movhi	r6,7864
     964:	31947b04 	addi	r6,r6,20972
     968:	01cff0b4 	movhi	r7,16322
     96c:	39fae144 	addi	r7,r7,-5243
     970:	e13ffd17 	ldw	r4,-12(fp)
     974:	e17ffe17 	ldw	r5,-8(fp)
     978:	000631c0 	call	631c <__ledf2>
     97c:	1000110e 	bge	r2,zero,9c4 <find_leds+0x758>
     980:	01bae174 	movhi	r6,60293
     984:	3187ae04 	addi	r6,r6,7864
     988:	01cfeff4 	movhi	r7,16319
     98c:	39ee1444 	addi	r7,r7,-18351
     990:	e13ffd17 	ldw	r4,-12(fp)
     994:	e17ffe17 	ldw	r5,-8(fp)
     998:	00062400 	call	6240 <__gedf2>
     99c:	0080090e 	bge	zero,r2,9c4 <find_leds+0x758>
    	*leds = 65024;
     9a0:	00800134 	movhi	r2,4
     9a4:	10840c04 	addi	r2,r2,4144
     9a8:	00ff8014 	movui	r3,65024
     9ac:	10c00015 	stw	r3,0(r2)
    	PS2_loc = 13;
     9b0:	00800134 	movhi	r2,4
     9b4:	10840804 	addi	r2,r2,4128
     9b8:	00c00344 	movi	r3,13
     9bc:	10c00015 	stw	r3,0(r2)
     9c0:	0000df06 	br	d40 <find_leds+0xad4>
    } else if (difference < 0.16 && difference > 0.14) {
     9c4:	0191ebb4 	movhi	r6,18350
     9c8:	31851ec4 	addi	r6,r6,5243
     9cc:	01cff134 	movhi	r7,16324
     9d0:	39deb844 	addi	r7,r7,31457
     9d4:	e13ffd17 	ldw	r4,-12(fp)
     9d8:	e17ffe17 	ldw	r5,-8(fp)
     9dc:	000631c0 	call	631c <__ledf2>
     9e0:	1000120e 	bge	r2,zero,a2c <find_leds+0x7c0>
     9e4:	0187ae34 	movhi	r6,7864
     9e8:	31947b04 	addi	r6,r6,20972
     9ec:	01cff0b4 	movhi	r7,16322
     9f0:	39fae144 	addi	r7,r7,-5243
     9f4:	e13ffd17 	ldw	r4,-12(fp)
     9f8:	e17ffe17 	ldw	r5,-8(fp)
     9fc:	00062400 	call	6240 <__gedf2>
     a00:	00800a0e 	bge	zero,r2,a2c <find_leds+0x7c0>
    	*leds = 130560;
     a04:	00800134 	movhi	r2,4
     a08:	10840c04 	addi	r2,r2,4144
     a0c:	00c000b4 	movhi	r3,2
     a10:	18ff8004 	addi	r3,r3,-512
     a14:	10c00015 	stw	r3,0(r2)
    	PS2_loc = 15;
     a18:	00800134 	movhi	r2,4
     a1c:	10840804 	addi	r2,r2,4128
     a20:	00c003c4 	movi	r3,15
     a24:	10c00015 	stw	r3,0(r2)
     a28:	0000c506 	br	d40 <find_leds+0xad4>
    } else if (difference > -0.02 && difference < 0) {
     a2c:	0191ebb4 	movhi	r6,18350
     a30:	31851ec4 	addi	r6,r6,5243
     a34:	01efe534 	movhi	r7,49044
     a38:	39deb844 	addi	r7,r7,31457
     a3c:	e13ffd17 	ldw	r4,-12(fp)
     a40:	e17ffe17 	ldw	r5,-8(fp)
     a44:	00062400 	call	6240 <__gedf2>
     a48:	00800f0e 	bge	zero,r2,a88 <find_leds+0x81c>
     a4c:	000d883a 	mov	r6,zero
     a50:	000f883a 	mov	r7,zero
     a54:	e13ffd17 	ldw	r4,-12(fp)
     a58:	e17ffe17 	ldw	r5,-8(fp)
     a5c:	000631c0 	call	631c <__ledf2>
     a60:	1000090e 	bge	r2,zero,a88 <find_leds+0x81c>
    	*leds = 128;
     a64:	00800134 	movhi	r2,4
     a68:	10840c04 	addi	r2,r2,4144
     a6c:	00c02004 	movi	r3,128
     a70:	10c00015 	stw	r3,0(r2)
    	PS2_loc = -1;
     a74:	00800134 	movhi	r2,4
     a78:	10840804 	addi	r2,r2,4128
     a7c:	00ffffc4 	movi	r3,-1
     a80:	10c00015 	stw	r3,0(r2)
     a84:	0000ae06 	br	d40 <find_leds+0xad4>
    } else if (difference > -0.04 && difference < -0.02) {
     a88:	0191ebb4 	movhi	r6,18350
     a8c:	31851ec4 	addi	r6,r6,5243
     a90:	01efe934 	movhi	r7,49060
     a94:	39deb844 	addi	r7,r7,31457
     a98:	e13ffd17 	ldw	r4,-12(fp)
     a9c:	e17ffe17 	ldw	r5,-8(fp)
     aa0:	00062400 	call	6240 <__gedf2>
     aa4:	0080110e 	bge	zero,r2,aec <find_leds+0x880>
     aa8:	0191ebb4 	movhi	r6,18350
     aac:	31851ec4 	addi	r6,r6,5243
     ab0:	01efe534 	movhi	r7,49044
     ab4:	39deb844 	addi	r7,r7,31457
     ab8:	e13ffd17 	ldw	r4,-12(fp)
     abc:	e17ffe17 	ldw	r5,-8(fp)
     ac0:	000631c0 	call	631c <__ledf2>
     ac4:	1000090e 	bge	r2,zero,aec <find_leds+0x880>
    	*leds = 192;
     ac8:	00800134 	movhi	r2,4
     acc:	10840c04 	addi	r2,r2,4144
     ad0:	00c03004 	movi	r3,192
     ad4:	10c00015 	stw	r3,0(r2)
    	PS2_loc = -3;
     ad8:	00800134 	movhi	r2,4
     adc:	10840804 	addi	r2,r2,4128
     ae0:	00ffff44 	movi	r3,-3
     ae4:	10c00015 	stw	r3,0(r2)
     ae8:	00009506 	br	d40 <find_leds+0xad4>
    } else if (difference > -0.06 && difference < -0.04) {
     aec:	01bae174 	movhi	r6,60293
     af0:	3187ae04 	addi	r6,r6,7864
     af4:	01efebf4 	movhi	r7,49071
     af8:	39ee1444 	addi	r7,r7,-18351
     afc:	e13ffd17 	ldw	r4,-12(fp)
     b00:	e17ffe17 	ldw	r5,-8(fp)
     b04:	00062400 	call	6240 <__gedf2>
     b08:	0080110e 	bge	zero,r2,b50 <find_leds+0x8e4>
     b0c:	0191ebb4 	movhi	r6,18350
     b10:	31851ec4 	addi	r6,r6,5243
     b14:	01efe934 	movhi	r7,49060
     b18:	39deb844 	addi	r7,r7,31457
     b1c:	e13ffd17 	ldw	r4,-12(fp)
     b20:	e17ffe17 	ldw	r5,-8(fp)
     b24:	000631c0 	call	631c <__ledf2>
     b28:	1000090e 	bge	r2,zero,b50 <find_leds+0x8e4>
    	*leds = 224;
     b2c:	00800134 	movhi	r2,4
     b30:	10840c04 	addi	r2,r2,4144
     b34:	00c03804 	movi	r3,224
     b38:	10c00015 	stw	r3,0(r2)
    	PS2_loc = -5;
     b3c:	00800134 	movhi	r2,4
     b40:	10840804 	addi	r2,r2,4128
     b44:	00fffec4 	movi	r3,-5
     b48:	10c00015 	stw	r3,0(r2)
     b4c:	00007c06 	br	d40 <find_leds+0xad4>
    } else if (difference > -0.08 && difference < -0.06) {
     b50:	0191ebb4 	movhi	r6,18350
     b54:	31851ec4 	addi	r6,r6,5243
     b58:	01efed34 	movhi	r7,49076
     b5c:	39deb844 	addi	r7,r7,31457
     b60:	e13ffd17 	ldw	r4,-12(fp)
     b64:	e17ffe17 	ldw	r5,-8(fp)
     b68:	00062400 	call	6240 <__gedf2>
     b6c:	0080110e 	bge	zero,r2,bb4 <find_leds+0x948>
     b70:	01bae174 	movhi	r6,60293
     b74:	3187ae04 	addi	r6,r6,7864
     b78:	01efebf4 	movhi	r7,49071
     b7c:	39ee1444 	addi	r7,r7,-18351
     b80:	e13ffd17 	ldw	r4,-12(fp)
     b84:	e17ffe17 	ldw	r5,-8(fp)
     b88:	000631c0 	call	631c <__ledf2>
     b8c:	1000090e 	bge	r2,zero,bb4 <find_leds+0x948>
    	*leds = 240;
     b90:	00800134 	movhi	r2,4
     b94:	10840c04 	addi	r2,r2,4144
     b98:	00c03c04 	movi	r3,240
     b9c:	10c00015 	stw	r3,0(r2)
    	PS2_loc = -7;
     ba0:	00800134 	movhi	r2,4
     ba4:	10840804 	addi	r2,r2,4128
     ba8:	00fffe44 	movi	r3,-7
     bac:	10c00015 	stw	r3,0(r2)
     bb0:	00006306 	br	d40 <find_leds+0xad4>
    } else if (difference > -0.10 && difference < -0.08) {
     bb4:	01a666b4 	movhi	r6,39322
     bb8:	31a66684 	addi	r6,r6,-26214
     bbc:	01efeeb4 	movhi	r7,49082
     bc0:	39e66644 	addi	r7,r7,-26215
     bc4:	e13ffd17 	ldw	r4,-12(fp)
     bc8:	e17ffe17 	ldw	r5,-8(fp)
     bcc:	00062400 	call	6240 <__gedf2>
     bd0:	0080110e 	bge	zero,r2,c18 <find_leds+0x9ac>
     bd4:	0191ebb4 	movhi	r6,18350
     bd8:	31851ec4 	addi	r6,r6,5243
     bdc:	01efed34 	movhi	r7,49076
     be0:	39deb844 	addi	r7,r7,31457
     be4:	e13ffd17 	ldw	r4,-12(fp)
     be8:	e17ffe17 	ldw	r5,-8(fp)
     bec:	000631c0 	call	631c <__ledf2>
     bf0:	1000090e 	bge	r2,zero,c18 <find_leds+0x9ac>
    	*leds = 248;
     bf4:	00800134 	movhi	r2,4
     bf8:	10840c04 	addi	r2,r2,4144
     bfc:	00c03e04 	movi	r3,248
     c00:	10c00015 	stw	r3,0(r2)
    	PS2_loc = -9;
     c04:	00800134 	movhi	r2,4
     c08:	10840804 	addi	r2,r2,4128
     c0c:	00fffdc4 	movi	r3,-9
     c10:	10c00015 	stw	r3,0(r2)
     c14:	00004a06 	br	d40 <find_leds+0xad4>
    } else if (difference > -0.12 && difference < -0.10) {
     c18:	01bae174 	movhi	r6,60293
     c1c:	3187ae04 	addi	r6,r6,7864
     c20:	01efeff4 	movhi	r7,49087
     c24:	39ee1444 	addi	r7,r7,-18351
     c28:	e13ffd17 	ldw	r4,-12(fp)
     c2c:	e17ffe17 	ldw	r5,-8(fp)
     c30:	00062400 	call	6240 <__gedf2>
     c34:	0080110e 	bge	zero,r2,c7c <find_leds+0xa10>
     c38:	01a666b4 	movhi	r6,39322
     c3c:	31a66684 	addi	r6,r6,-26214
     c40:	01efeeb4 	movhi	r7,49082
     c44:	39e66644 	addi	r7,r7,-26215
     c48:	e13ffd17 	ldw	r4,-12(fp)
     c4c:	e17ffe17 	ldw	r5,-8(fp)
     c50:	000631c0 	call	631c <__ledf2>
     c54:	1000090e 	bge	r2,zero,c7c <find_leds+0xa10>
    	*leds = 252;
     c58:	00800134 	movhi	r2,4
     c5c:	10840c04 	addi	r2,r2,4144
     c60:	00c03f04 	movi	r3,252
     c64:	10c00015 	stw	r3,0(r2)
    	PS2_loc = -11;
     c68:	00800134 	movhi	r2,4
     c6c:	10840804 	addi	r2,r2,4128
     c70:	00fffd44 	movi	r3,-11
     c74:	10c00015 	stw	r3,0(r2)
     c78:	00003106 	br	d40 <find_leds+0xad4>
    } else if (difference > -0.14 && difference < -0.12) {
     c7c:	0187ae34 	movhi	r6,7864
     c80:	31947b04 	addi	r6,r6,20972
     c84:	01eff0b4 	movhi	r7,49090
     c88:	39fae144 	addi	r7,r7,-5243
     c8c:	e13ffd17 	ldw	r4,-12(fp)
     c90:	e17ffe17 	ldw	r5,-8(fp)
     c94:	00062400 	call	6240 <__gedf2>
     c98:	0080110e 	bge	zero,r2,ce0 <find_leds+0xa74>
     c9c:	01bae174 	movhi	r6,60293
     ca0:	3187ae04 	addi	r6,r6,7864
     ca4:	01efeff4 	movhi	r7,49087
     ca8:	39ee1444 	addi	r7,r7,-18351
     cac:	e13ffd17 	ldw	r4,-12(fp)
     cb0:	e17ffe17 	ldw	r5,-8(fp)
     cb4:	000631c0 	call	631c <__ledf2>
     cb8:	1000090e 	bge	r2,zero,ce0 <find_leds+0xa74>
    	*leds = 254;
     cbc:	00800134 	movhi	r2,4
     cc0:	10840c04 	addi	r2,r2,4144
     cc4:	00c03f84 	movi	r3,254
     cc8:	10c00015 	stw	r3,0(r2)
    	PS2_loc = -13;
     ccc:	00800134 	movhi	r2,4
     cd0:	10840804 	addi	r2,r2,4128
     cd4:	00fffcc4 	movi	r3,-13
     cd8:	10c00015 	stw	r3,0(r2)
     cdc:	00001806 	br	d40 <find_leds+0xad4>
    } else if (difference > -0.16 && difference < -0.14) {
     ce0:	0191ebb4 	movhi	r6,18350
     ce4:	31851ec4 	addi	r6,r6,5243
     ce8:	01eff134 	movhi	r7,49092
     cec:	39deb844 	addi	r7,r7,31457
     cf0:	e13ffd17 	ldw	r4,-12(fp)
     cf4:	e17ffe17 	ldw	r5,-8(fp)
     cf8:	00062400 	call	6240 <__gedf2>
     cfc:	0080100e 	bge	zero,r2,d40 <find_leds+0xad4>
     d00:	0187ae34 	movhi	r6,7864
     d04:	31947b04 	addi	r6,r6,20972
     d08:	01eff0b4 	movhi	r7,49090
     d0c:	39fae144 	addi	r7,r7,-5243
     d10:	e13ffd17 	ldw	r4,-12(fp)
     d14:	e17ffe17 	ldw	r5,-8(fp)
     d18:	000631c0 	call	631c <__ledf2>
     d1c:	1000080e 	bge	r2,zero,d40 <find_leds+0xad4>
    	*leds = 255;
     d20:	00800134 	movhi	r2,4
     d24:	10840c04 	addi	r2,r2,4144
     d28:	00c03fc4 	movi	r3,255
     d2c:	10c00015 	stw	r3,0(r2)
    	PS2_loc = -15;
     d30:	00800134 	movhi	r2,4
     d34:	10840804 	addi	r2,r2,4128
     d38:	00fffc44 	movi	r3,-15
     d3c:	10c00015 	stw	r3,0(r2)
    }

    OSTimeDlyHMSM(0, 0, 0, 5);
     d40:	01c00144 	movi	r7,5
     d44:	000d883a 	mov	r6,zero
     d48:	000b883a 	mov	r5,zero
     d4c:	0009883a 	mov	r4,zero
     d50:	0019cc40 	call	19cc4 <OSTimeDlyHMSM>
  }
     d54:	003d5106 	br	29c <__alt_data_end+0xfffcf55c>

00000d58 <calc_side>:
}

int calc_side(int x1, int x2, int y1, int y2)
{
     d58:	defff504 	addi	sp,sp,-44
     d5c:	dfc00a15 	stw	ra,40(sp)
     d60:	df000915 	stw	fp,36(sp)
     d64:	dc400815 	stw	r17,32(sp)
     d68:	dc000715 	stw	r16,28(sp)
     d6c:	df000904 	addi	fp,sp,36
     d70:	e13ffa15 	stw	r4,-24(fp)
     d74:	e17ffb15 	stw	r5,-20(fp)
     d78:	e1bffc15 	stw	r6,-16(fp)
     d7c:	e1fffd15 	stw	r7,-12(fp)
	int x_diff = x1 - x2;
     d80:	e0fffa17 	ldw	r3,-24(fp)
     d84:	e0bffb17 	ldw	r2,-20(fp)
     d88:	1885c83a 	sub	r2,r3,r2
     d8c:	e0bff715 	stw	r2,-36(fp)
	int y_diff = y1 - y2;
     d90:	e0fffc17 	ldw	r3,-16(fp)
     d94:	e0bffd17 	ldw	r2,-12(fp)
     d98:	1885c83a 	sub	r2,r3,r2
     d9c:	e0bff815 	stw	r2,-32(fp)
	if(y_diff < 0)
     da0:	e0bff817 	ldw	r2,-32(fp)
     da4:	1000030e 	bge	r2,zero,db4 <calc_side+0x5c>
		y_diff = (y_diff)*(-1);
     da8:	e0bff817 	ldw	r2,-32(fp)
     dac:	0085c83a 	sub	r2,zero,r2
     db0:	e0bff815 	stw	r2,-32(fp)
	if(x_diff < 0)
     db4:	e0bff717 	ldw	r2,-36(fp)
     db8:	1000030e 	bge	r2,zero,dc8 <calc_side+0x70>
		x_diff = (x_diff)*(-1);
     dbc:	e0bff717 	ldw	r2,-36(fp)
     dc0:	0085c83a 	sub	r2,zero,r2
     dc4:	e0bff715 	stw	r2,-36(fp)
	int powed = pow(y_diff, 2) + pow(x_diff, 2);
     dc8:	e13ff817 	ldw	r4,-32(fp)
     dcc:	00075f80 	call	75f8 <__floatsidf>
     dd0:	1011883a 	mov	r8,r2
     dd4:	1813883a 	mov	r9,r3
     dd8:	000d883a 	mov	r6,zero
     ddc:	01d00034 	movhi	r7,16384
     de0:	4009883a 	mov	r4,r8
     de4:	480b883a 	mov	r5,r9
     de8:	00011840 	call	1184 <pow>
     dec:	1021883a 	mov	r16,r2
     df0:	1823883a 	mov	r17,r3
     df4:	e13ff717 	ldw	r4,-36(fp)
     df8:	00075f80 	call	75f8 <__floatsidf>
     dfc:	1011883a 	mov	r8,r2
     e00:	1813883a 	mov	r9,r3
     e04:	000d883a 	mov	r6,zero
     e08:	01d00034 	movhi	r7,16384
     e0c:	4009883a 	mov	r4,r8
     e10:	480b883a 	mov	r5,r9
     e14:	00011840 	call	1184 <pow>
     e18:	1009883a 	mov	r4,r2
     e1c:	180b883a 	mov	r5,r3
     e20:	200d883a 	mov	r6,r4
     e24:	280f883a 	mov	r7,r5
     e28:	8009883a 	mov	r4,r16
     e2c:	880b883a 	mov	r5,r17
     e30:	0004f3c0 	call	4f3c <__adddf3>
     e34:	1009883a 	mov	r4,r2
     e38:	180b883a 	mov	r5,r3
     e3c:	2005883a 	mov	r2,r4
     e40:	2807883a 	mov	r3,r5
     e44:	1009883a 	mov	r4,r2
     e48:	180b883a 	mov	r5,r3
     e4c:	00075780 	call	7578 <__fixdfsi>
     e50:	e0bff915 	stw	r2,-28(fp)
	if(powed < 0)
     e54:	e0bff917 	ldw	r2,-28(fp)
     e58:	1000030e 	bge	r2,zero,e68 <calc_side+0x110>
		powed = (powed)*(-1);
     e5c:	e0bff917 	ldw	r2,-28(fp)
     e60:	0085c83a 	sub	r2,zero,r2
     e64:	e0bff915 	stw	r2,-28(fp)
	return sqrt(powed);
     e68:	e13ff917 	ldw	r4,-28(fp)
     e6c:	00075f80 	call	75f8 <__floatsidf>
     e70:	100b883a 	mov	r5,r2
     e74:	180d883a 	mov	r6,r3
     e78:	2809883a 	mov	r4,r5
     e7c:	300b883a 	mov	r5,r6
     e80:	00016480 	call	1648 <sqrt>
     e84:	100b883a 	mov	r5,r2
     e88:	180d883a 	mov	r6,r3
     e8c:	2809883a 	mov	r4,r5
     e90:	300b883a 	mov	r5,r6
     e94:	00075780 	call	7578 <__fixdfsi>
}
     e98:	e6fffe04 	addi	sp,fp,-8
     e9c:	dfc00317 	ldw	ra,12(sp)
     ea0:	df000217 	ldw	fp,8(sp)
     ea4:	dc400117 	ldw	r17,4(sp)
     ea8:	dc000017 	ldw	r16,0(sp)
     eac:	dec00404 	addi	sp,sp,16
     eb0:	f800283a 	ret

00000eb4 <calc_angle>:

double calc_angle(int s1, int s2, int s3)
{
     eb4:	defff904 	addi	sp,sp,-28
     eb8:	dfc00615 	stw	ra,24(sp)
     ebc:	df000515 	stw	fp,20(sp)
     ec0:	dc400415 	stw	r17,16(sp)
     ec4:	dc000315 	stw	r16,12(sp)
     ec8:	df000504 	addi	fp,sp,20
     ecc:	e13ffb15 	stw	r4,-20(fp)
     ed0:	e17ffc15 	stw	r5,-16(fp)
     ed4:	e1bffd15 	stw	r6,-12(fp)
	return cos((pow(s1, 2)+pow(s2, 2)-pow(s3, 2))/(2*s1*s2));
     ed8:	e13ffb17 	ldw	r4,-20(fp)
     edc:	00075f80 	call	75f8 <__floatsidf>
     ee0:	1011883a 	mov	r8,r2
     ee4:	1813883a 	mov	r9,r3
     ee8:	000d883a 	mov	r6,zero
     eec:	01d00034 	movhi	r7,16384
     ef0:	4009883a 	mov	r4,r8
     ef4:	480b883a 	mov	r5,r9
     ef8:	00011840 	call	1184 <pow>
     efc:	1021883a 	mov	r16,r2
     f00:	1823883a 	mov	r17,r3
     f04:	e13ffc17 	ldw	r4,-16(fp)
     f08:	00075f80 	call	75f8 <__floatsidf>
     f0c:	1011883a 	mov	r8,r2
     f10:	1813883a 	mov	r9,r3
     f14:	000d883a 	mov	r6,zero
     f18:	01d00034 	movhi	r7,16384
     f1c:	4009883a 	mov	r4,r8
     f20:	480b883a 	mov	r5,r9
     f24:	00011840 	call	1184 <pow>
     f28:	1009883a 	mov	r4,r2
     f2c:	180b883a 	mov	r5,r3
     f30:	200d883a 	mov	r6,r4
     f34:	280f883a 	mov	r7,r5
     f38:	8009883a 	mov	r4,r16
     f3c:	880b883a 	mov	r5,r17
     f40:	0004f3c0 	call	4f3c <__adddf3>
     f44:	1009883a 	mov	r4,r2
     f48:	180b883a 	mov	r5,r3
     f4c:	2021883a 	mov	r16,r4
     f50:	2823883a 	mov	r17,r5
     f54:	e13ffd17 	ldw	r4,-12(fp)
     f58:	00075f80 	call	75f8 <__floatsidf>
     f5c:	1011883a 	mov	r8,r2
     f60:	1813883a 	mov	r9,r3
     f64:	000d883a 	mov	r6,zero
     f68:	01d00034 	movhi	r7,16384
     f6c:	4009883a 	mov	r4,r8
     f70:	480b883a 	mov	r5,r9
     f74:	00011840 	call	1184 <pow>
     f78:	1009883a 	mov	r4,r2
     f7c:	180b883a 	mov	r5,r3
     f80:	200d883a 	mov	r6,r4
     f84:	280f883a 	mov	r7,r5
     f88:	8009883a 	mov	r4,r16
     f8c:	880b883a 	mov	r5,r17
     f90:	0006c7c0 	call	6c7c <__subdf3>
     f94:	1009883a 	mov	r4,r2
     f98:	180b883a 	mov	r5,r3
     f9c:	2021883a 	mov	r16,r4
     fa0:	2823883a 	mov	r17,r5
     fa4:	e0bffb17 	ldw	r2,-20(fp)
     fa8:	1085883a 	add	r2,r2,r2
     fac:	e17ffc17 	ldw	r5,-16(fp)
     fb0:	1009883a 	mov	r4,r2
     fb4:	0004f140 	call	4f14 <__mulsi3>
     fb8:	1009883a 	mov	r4,r2
     fbc:	00075f80 	call	75f8 <__floatsidf>
     fc0:	1009883a 	mov	r4,r2
     fc4:	180b883a 	mov	r5,r3
     fc8:	200d883a 	mov	r6,r4
     fcc:	280f883a 	mov	r7,r5
     fd0:	8009883a 	mov	r4,r16
     fd4:	880b883a 	mov	r5,r17
     fd8:	00057e80 	call	57e8 <__divdf3>
     fdc:	1009883a 	mov	r4,r2
     fe0:	180b883a 	mov	r5,r3
     fe4:	2005883a 	mov	r2,r4
     fe8:	2807883a 	mov	r3,r5
     fec:	1009883a 	mov	r4,r2
     ff0:	180b883a 	mov	r5,r3
     ff4:	00010980 	call	1098 <cos>
     ff8:	100b883a 	mov	r5,r2
     ffc:	180d883a 	mov	r6,r3
    1000:	2807883a 	mov	r3,r5
    1004:	3009883a 	mov	r4,r6
}
    1008:	1805883a 	mov	r2,r3
    100c:	2007883a 	mov	r3,r4
    1010:	e6fffe04 	addi	sp,fp,-8
    1014:	dfc00317 	ldw	ra,12(sp)
    1018:	df000217 	ldw	fp,8(sp)
    101c:	dc400117 	ldw	r17,4(sp)
    1020:	dc000017 	ldw	r16,0(sp)
    1024:	dec00404 	addi	sp,sp,16
    1028:	f800283a 	ret

0000102c <main>:

int main(void)
{
    102c:	defff904 	addi	sp,sp,-28
    1030:	dfc00615 	stw	ra,24(sp)
    1034:	df000515 	stw	fp,20(sp)
    1038:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(find_leds,
    103c:	d8000415 	stw	zero,16(sp)
    1040:	d8000315 	stw	zero,12(sp)
    1044:	00820004 	movi	r2,2048
    1048:	d8800215 	stw	r2,8(sp)
    104c:	008000b4 	movhi	r2,2
    1050:	1080e604 	addi	r2,r2,920
    1054:	d8800115 	stw	r2,4(sp)
    1058:	00800044 	movi	r2,1
    105c:	d8800015 	stw	r2,0(sp)
    1060:	01c00044 	movi	r7,1
    1064:	018000b4 	movhi	r6,2
    1068:	3188e504 	addi	r6,r6,9108
    106c:	000b883a 	mov	r5,zero
    1070:	01000034 	movhi	r4,0
    1074:	21009b04 	addi	r4,r4,620
    1078:	0018af00 	call	18af0 <OSTaskCreateExt>
                  find_leds_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSStart();
    107c:	001344c0 	call	1344c <OSStart>
  return 0;
    1080:	0005883a 	mov	r2,zero
}
    1084:	e037883a 	mov	sp,fp
    1088:	dfc00117 	ldw	ra,4(sp)
    108c:	df000017 	ldw	fp,0(sp)
    1090:	dec00204 	addi	sp,sp,8
    1094:	f800283a 	ret

00001098 <cos>:
    1098:	00a00034 	movhi	r2,32768
    109c:	defffa04 	addi	sp,sp,-24
    10a0:	10bfffc4 	addi	r2,r2,-1
    10a4:	00cffa74 	movhi	r3,16361
    10a8:	dfc00515 	stw	ra,20(sp)
    10ac:	2884703a 	and	r2,r5,r2
    10b0:	18c87ec4 	addi	r3,r3,8699
    10b4:	1880180e 	bge	r3,r2,1118 <cos+0x80>
    10b8:	00dffc34 	movhi	r3,32752
    10bc:	18ffffc4 	addi	r3,r3,-1
    10c0:	1880060e 	bge	r3,r2,10dc <cos+0x44>
    10c4:	280f883a 	mov	r7,r5
    10c8:	200d883a 	mov	r6,r4
    10cc:	0006c7c0 	call	6c7c <__subdf3>
    10d0:	dfc00517 	ldw	ra,20(sp)
    10d4:	dec00604 	addi	sp,sp,24
    10d8:	f800283a 	ret
    10dc:	d9800104 	addi	r6,sp,4
    10e0:	000281c0 	call	281c <__ieee754_rem_pio2>
    10e4:	108000cc 	andi	r2,r2,3
    10e8:	00c00044 	movi	r3,1
    10ec:	10c01726 	beq	r2,r3,114c <cos+0xb4>
    10f0:	01000084 	movi	r4,2
    10f4:	11000e26 	beq	r2,r4,1130 <cos+0x98>
    10f8:	10001c26 	beq	r2,zero,116c <cos+0xd4>
    10fc:	d9800317 	ldw	r6,12(sp)
    1100:	d9c00417 	ldw	r7,16(sp)
    1104:	d9000117 	ldw	r4,4(sp)
    1108:	d9400217 	ldw	r5,8(sp)
    110c:	d8c00015 	stw	r3,0(sp)
    1110:	000444c0 	call	444c <__kernel_sin>
    1114:	003fee06 	br	10d0 <__alt_data_end+0xfffd0390>
    1118:	000d883a 	mov	r6,zero
    111c:	000f883a 	mov	r7,zero
    1120:	00032100 	call	3210 <__kernel_cos>
    1124:	dfc00517 	ldw	ra,20(sp)
    1128:	dec00604 	addi	sp,sp,24
    112c:	f800283a 	ret
    1130:	d9800317 	ldw	r6,12(sp)
    1134:	d9c00417 	ldw	r7,16(sp)
    1138:	d9000117 	ldw	r4,4(sp)
    113c:	d9400217 	ldw	r5,8(sp)
    1140:	00032100 	call	3210 <__kernel_cos>
    1144:	18e0003c 	xorhi	r3,r3,32768
    1148:	003fe106 	br	10d0 <__alt_data_end+0xfffd0390>
    114c:	d9800317 	ldw	r6,12(sp)
    1150:	d9c00417 	ldw	r7,16(sp)
    1154:	d9000117 	ldw	r4,4(sp)
    1158:	d9400217 	ldw	r5,8(sp)
    115c:	d8800015 	stw	r2,0(sp)
    1160:	000444c0 	call	444c <__kernel_sin>
    1164:	18e0003c 	xorhi	r3,r3,32768
    1168:	003fd906 	br	10d0 <__alt_data_end+0xfffd0390>
    116c:	d9800317 	ldw	r6,12(sp)
    1170:	d9c00417 	ldw	r7,16(sp)
    1174:	d9000117 	ldw	r4,4(sp)
    1178:	d9400217 	ldw	r5,8(sp)
    117c:	00032100 	call	3210 <__kernel_cos>
    1180:	003fd306 	br	10d0 <__alt_data_end+0xfffd0390>

00001184 <pow>:
    1184:	deffee04 	addi	sp,sp,-72
    1188:	dc800b15 	stw	r18,44(sp)
    118c:	048000b4 	movhi	r18,2
    1190:	ddc01015 	stw	r23,64(sp)
    1194:	dd800f15 	stw	r22,60(sp)
    1198:	dd400e15 	stw	r21,56(sp)
    119c:	dd000d15 	stw	r20,52(sp)
    11a0:	dcc00c15 	stw	r19,48(sp)
    11a4:	dc400a15 	stw	r17,40(sp)
    11a8:	dc000915 	stw	r16,36(sp)
    11ac:	dfc01115 	stw	ra,68(sp)
    11b0:	94b99804 	addi	r18,r18,-6560
    11b4:	202f883a 	mov	r23,r4
    11b8:	282d883a 	mov	r22,r5
    11bc:	302b883a 	mov	r21,r6
    11c0:	3829883a 	mov	r20,r7
    11c4:	00017780 	call	1778 <__ieee754_pow>
    11c8:	1023883a 	mov	r17,r2
    11cc:	90800017 	ldw	r2,0(r18)
    11d0:	04ffffc4 	movi	r19,-1
    11d4:	1821883a 	mov	r16,r3
    11d8:	14c00426 	beq	r2,r19,11ec <pow+0x68>
    11dc:	a809883a 	mov	r4,r21
    11e0:	a00b883a 	mov	r5,r20
    11e4:	00049340 	call	4934 <__fpclassifyd>
    11e8:	10000d1e 	bne	r2,zero,1220 <pow+0x9c>
    11ec:	8805883a 	mov	r2,r17
    11f0:	8007883a 	mov	r3,r16
    11f4:	dfc01117 	ldw	ra,68(sp)
    11f8:	ddc01017 	ldw	r23,64(sp)
    11fc:	dd800f17 	ldw	r22,60(sp)
    1200:	dd400e17 	ldw	r21,56(sp)
    1204:	dd000d17 	ldw	r20,52(sp)
    1208:	dcc00c17 	ldw	r19,48(sp)
    120c:	dc800b17 	ldw	r18,44(sp)
    1210:	dc400a17 	ldw	r17,40(sp)
    1214:	dc000917 	ldw	r16,36(sp)
    1218:	dec01204 	addi	sp,sp,72
    121c:	f800283a 	ret
    1220:	b809883a 	mov	r4,r23
    1224:	b00b883a 	mov	r5,r22
    1228:	00049340 	call	4934 <__fpclassifyd>
    122c:	000d883a 	mov	r6,zero
    1230:	000f883a 	mov	r7,zero
    1234:	1000201e 	bne	r2,zero,12b8 <pow+0x134>
    1238:	a809883a 	mov	r4,r21
    123c:	a00b883a 	mov	r5,r20
    1240:	00061b80 	call	61b8 <__eqdf2>
    1244:	103fe91e 	bne	r2,zero,11ec <__alt_data_end+0xfffd04ac>
    1248:	01000044 	movi	r4,1
    124c:	d9000015 	stw	r4,0(sp)
    1250:	90800017 	ldw	r2,0(r18)
    1254:	010000b4 	movhi	r4,2
    1258:	00cffc34 	movhi	r3,16368
    125c:	21316604 	addi	r4,r4,-14952
    1260:	d9000115 	stw	r4,4(sp)
    1264:	d8000815 	stw	zero,32(sp)
    1268:	ddc00215 	stw	r23,8(sp)
    126c:	dd800315 	stw	r22,12(sp)
    1270:	dd400415 	stw	r21,16(sp)
    1274:	dd000515 	stw	r20,20(sp)
    1278:	d8000615 	stw	zero,24(sp)
    127c:	d8c00715 	stw	r3,28(sp)
    1280:	14c02826 	beq	r2,r19,1324 <pow+0x1a0>
    1284:	01000084 	movi	r4,2
    1288:	11002626 	beq	r2,r4,1324 <pow+0x1a0>
    128c:	d809883a 	mov	r4,sp
    1290:	00049a80 	call	49a8 <matherr>
    1294:	10006b26 	beq	r2,zero,1444 <pow+0x2c0>
    1298:	d8800817 	ldw	r2,32(sp)
    129c:	10000326 	beq	r2,zero,12ac <pow+0x128>
    12a0:	00077380 	call	7738 <__errno>
    12a4:	d8c00817 	ldw	r3,32(sp)
    12a8:	10c00015 	stw	r3,0(r2)
    12ac:	d8800617 	ldw	r2,24(sp)
    12b0:	d8c00717 	ldw	r3,28(sp)
    12b4:	003fcf06 	br	11f4 <__alt_data_end+0xfffd04b4>
    12b8:	b809883a 	mov	r4,r23
    12bc:	b00b883a 	mov	r5,r22
    12c0:	00061b80 	call	61b8 <__eqdf2>
    12c4:	1000191e 	bne	r2,zero,132c <pow+0x1a8>
    12c8:	000d883a 	mov	r6,zero
    12cc:	000f883a 	mov	r7,zero
    12d0:	a809883a 	mov	r4,r21
    12d4:	a00b883a 	mov	r5,r20
    12d8:	00061b80 	call	61b8 <__eqdf2>
    12dc:	10003a1e 	bne	r2,zero,13c8 <pow+0x244>
    12e0:	00c00044 	movi	r3,1
    12e4:	d8c00015 	stw	r3,0(sp)
    12e8:	90800017 	ldw	r2,0(r18)
    12ec:	00c000b4 	movhi	r3,2
    12f0:	18f16604 	addi	r3,r3,-14952
    12f4:	d8c00115 	stw	r3,4(sp)
    12f8:	d8000815 	stw	zero,32(sp)
    12fc:	ddc00215 	stw	r23,8(sp)
    1300:	dd800315 	stw	r22,12(sp)
    1304:	dd400415 	stw	r21,16(sp)
    1308:	dd000515 	stw	r20,20(sp)
    130c:	d8000615 	stw	zero,24(sp)
    1310:	d8000715 	stw	zero,28(sp)
    1314:	103fdd26 	beq	r2,zero,128c <__alt_data_end+0xfffd054c>
    1318:	0005883a 	mov	r2,zero
    131c:	00cffc34 	movhi	r3,16368
    1320:	003fb406 	br	11f4 <__alt_data_end+0xfffd04b4>
    1324:	0005883a 	mov	r2,zero
    1328:	003fb206 	br	11f4 <__alt_data_end+0xfffd04b4>
    132c:	8809883a 	mov	r4,r17
    1330:	800b883a 	mov	r5,r16
    1334:	000472c0 	call	472c <finite>
    1338:	10004626 	beq	r2,zero,1454 <pow+0x2d0>
    133c:	000d883a 	mov	r6,zero
    1340:	000f883a 	mov	r7,zero
    1344:	8809883a 	mov	r4,r17
    1348:	800b883a 	mov	r5,r16
    134c:	00061b80 	call	61b8 <__eqdf2>
    1350:	103fa61e 	bne	r2,zero,11ec <__alt_data_end+0xfffd04ac>
    1354:	b809883a 	mov	r4,r23
    1358:	b00b883a 	mov	r5,r22
    135c:	000472c0 	call	472c <finite>
    1360:	103fa226 	beq	r2,zero,11ec <__alt_data_end+0xfffd04ac>
    1364:	a809883a 	mov	r4,r21
    1368:	a00b883a 	mov	r5,r20
    136c:	000472c0 	call	472c <finite>
    1370:	103f9e26 	beq	r2,zero,11ec <__alt_data_end+0xfffd04ac>
    1374:	00800104 	movi	r2,4
    1378:	d8800015 	stw	r2,0(sp)
    137c:	90c00017 	ldw	r3,0(r18)
    1380:	008000b4 	movhi	r2,2
    1384:	10b16604 	addi	r2,r2,-14952
    1388:	d8800115 	stw	r2,4(sp)
    138c:	d8000815 	stw	zero,32(sp)
    1390:	ddc00215 	stw	r23,8(sp)
    1394:	dd800315 	stw	r22,12(sp)
    1398:	dd400415 	stw	r21,16(sp)
    139c:	dd000515 	stw	r20,20(sp)
    13a0:	d8000615 	stw	zero,24(sp)
    13a4:	d8000715 	stw	zero,28(sp)
    13a8:	00800084 	movi	r2,2
    13ac:	18804726 	beq	r3,r2,14cc <pow+0x348>
    13b0:	d809883a 	mov	r4,sp
    13b4:	00049a80 	call	49a8 <matherr>
    13b8:	10004426 	beq	r2,zero,14cc <pow+0x348>
    13bc:	d8800817 	ldw	r2,32(sp)
    13c0:	103fba26 	beq	r2,zero,12ac <__alt_data_end+0xfffd056c>
    13c4:	003fb606 	br	12a0 <__alt_data_end+0xfffd0560>
    13c8:	a809883a 	mov	r4,r21
    13cc:	a00b883a 	mov	r5,r20
    13d0:	000472c0 	call	472c <finite>
    13d4:	103f8526 	beq	r2,zero,11ec <__alt_data_end+0xfffd04ac>
    13d8:	000d883a 	mov	r6,zero
    13dc:	000f883a 	mov	r7,zero
    13e0:	a809883a 	mov	r4,r21
    13e4:	a00b883a 	mov	r5,r20
    13e8:	000631c0 	call	631c <__ledf2>
    13ec:	103f7f0e 	bge	r2,zero,11ec <__alt_data_end+0xfffd04ac>
    13f0:	00c00044 	movi	r3,1
    13f4:	d8c00015 	stw	r3,0(sp)
    13f8:	90800017 	ldw	r2,0(r18)
    13fc:	00c000b4 	movhi	r3,2
    1400:	18f16604 	addi	r3,r3,-14952
    1404:	d8c00115 	stw	r3,4(sp)
    1408:	d8000815 	stw	zero,32(sp)
    140c:	ddc00215 	stw	r23,8(sp)
    1410:	dd800315 	stw	r22,12(sp)
    1414:	dd400415 	stw	r21,16(sp)
    1418:	dd000515 	stw	r20,20(sp)
    141c:	d8000615 	stw	zero,24(sp)
    1420:	10002526 	beq	r2,zero,14b8 <pow+0x334>
    1424:	00fffc34 	movhi	r3,65520
    1428:	d8c00715 	stw	r3,28(sp)
    142c:	00c00084 	movi	r3,2
    1430:	10c0221e 	bne	r2,r3,14bc <pow+0x338>
    1434:	00077380 	call	7738 <__errno>
    1438:	00c00844 	movi	r3,33
    143c:	10c00015 	stw	r3,0(r2)
    1440:	003fde06 	br	13bc <__alt_data_end+0xfffd067c>
    1444:	00077380 	call	7738 <__errno>
    1448:	00c00844 	movi	r3,33
    144c:	10c00015 	stw	r3,0(r2)
    1450:	003f9106 	br	1298 <__alt_data_end+0xfffd0558>
    1454:	b809883a 	mov	r4,r23
    1458:	b00b883a 	mov	r5,r22
    145c:	000472c0 	call	472c <finite>
    1460:	103fb626 	beq	r2,zero,133c <__alt_data_end+0xfffd05fc>
    1464:	a809883a 	mov	r4,r21
    1468:	a00b883a 	mov	r5,r20
    146c:	000472c0 	call	472c <finite>
    1470:	103fb226 	beq	r2,zero,133c <__alt_data_end+0xfffd05fc>
    1474:	8809883a 	mov	r4,r17
    1478:	800b883a 	mov	r5,r16
    147c:	00049340 	call	4934 <__fpclassifyd>
    1480:	1000161e 	bne	r2,zero,14dc <pow+0x358>
    1484:	00800044 	movi	r2,1
    1488:	d8800015 	stw	r2,0(sp)
    148c:	94000017 	ldw	r16,0(r18)
    1490:	008000b4 	movhi	r2,2
    1494:	10b16604 	addi	r2,r2,-14952
    1498:	d8800115 	stw	r2,4(sp)
    149c:	d8000815 	stw	zero,32(sp)
    14a0:	ddc00215 	stw	r23,8(sp)
    14a4:	dd800315 	stw	r22,12(sp)
    14a8:	dd400415 	stw	r21,16(sp)
    14ac:	dd000515 	stw	r20,20(sp)
    14b0:	8000281e 	bne	r16,zero,1554 <pow+0x3d0>
    14b4:	d8000615 	stw	zero,24(sp)
    14b8:	d8000715 	stw	zero,28(sp)
    14bc:	d809883a 	mov	r4,sp
    14c0:	00049a80 	call	49a8 <matherr>
    14c4:	103fbd1e 	bne	r2,zero,13bc <__alt_data_end+0xfffd067c>
    14c8:	003fda06 	br	1434 <__alt_data_end+0xfffd06f4>
    14cc:	00077380 	call	7738 <__errno>
    14d0:	00c00884 	movi	r3,34
    14d4:	10c00015 	stw	r3,0(r2)
    14d8:	003fb806 	br	13bc <__alt_data_end+0xfffd067c>
    14dc:	00c000c4 	movi	r3,3
    14e0:	d8c00015 	stw	r3,0(sp)
    14e4:	90800017 	ldw	r2,0(r18)
    14e8:	00c000b4 	movhi	r3,2
    14ec:	18f16604 	addi	r3,r3,-14952
    14f0:	d8c00115 	stw	r3,4(sp)
    14f4:	d8000815 	stw	zero,32(sp)
    14f8:	ddc00215 	stw	r23,8(sp)
    14fc:	dd800315 	stw	r22,12(sp)
    1500:	dd400415 	stw	r21,16(sp)
    1504:	dd000515 	stw	r20,20(sp)
    1508:	000d883a 	mov	r6,zero
    150c:	000f883a 	mov	r7,zero
    1510:	b809883a 	mov	r4,r23
    1514:	b00b883a 	mov	r5,r22
    1518:	1000181e 	bne	r2,zero,157c <pow+0x3f8>
    151c:	00b80034 	movhi	r2,57344
    1520:	d8800615 	stw	r2,24(sp)
    1524:	0091fc34 	movhi	r2,18416
    1528:	10bfffc4 	addi	r2,r2,-1
    152c:	d8800715 	stw	r2,28(sp)
    1530:	000631c0 	call	631c <__ledf2>
    1534:	10001a16 	blt	r2,zero,15a0 <pow+0x41c>
    1538:	d809883a 	mov	r4,sp
    153c:	00049a80 	call	49a8 <matherr>
    1540:	103f551e 	bne	r2,zero,1298 <__alt_data_end+0xfffd0558>
    1544:	00077380 	call	7738 <__errno>
    1548:	00c00884 	movi	r3,34
    154c:	10c00015 	stw	r3,0(r2)
    1550:	003f5106 	br	1298 <__alt_data_end+0xfffd0558>
    1554:	000d883a 	mov	r6,zero
    1558:	000f883a 	mov	r7,zero
    155c:	0009883a 	mov	r4,zero
    1560:	000b883a 	mov	r5,zero
    1564:	00057e80 	call	57e8 <__divdf3>
    1568:	d8800615 	stw	r2,24(sp)
    156c:	d8c00715 	stw	r3,28(sp)
    1570:	00800084 	movi	r2,2
    1574:	80bfaf26 	beq	r16,r2,1434 <__alt_data_end+0xfffd06f4>
    1578:	003fd006 	br	14bc <__alt_data_end+0xfffd077c>
    157c:	009ffc34 	movhi	r2,32752
    1580:	d8000615 	stw	zero,24(sp)
    1584:	d8800715 	stw	r2,28(sp)
    1588:	000631c0 	call	631c <__ledf2>
    158c:	10001a16 	blt	r2,zero,15f8 <pow+0x474>
    1590:	90c00017 	ldw	r3,0(r18)
    1594:	00800084 	movi	r2,2
    1598:	18bfe71e 	bne	r3,r2,1538 <__alt_data_end+0xfffd07f8>
    159c:	003fe906 	br	1544 <__alt_data_end+0xfffd0804>
    15a0:	000d883a 	mov	r6,zero
    15a4:	01cff834 	movhi	r7,16352
    15a8:	a809883a 	mov	r4,r21
    15ac:	a00b883a 	mov	r5,r20
    15b0:	00064100 	call	6410 <__muldf3>
    15b4:	1009883a 	mov	r4,r2
    15b8:	180b883a 	mov	r5,r3
    15bc:	1023883a 	mov	r17,r2
    15c0:	1821883a 	mov	r16,r3
    15c4:	00049bc0 	call	49bc <rint>
    15c8:	100d883a 	mov	r6,r2
    15cc:	180f883a 	mov	r7,r3
    15d0:	8809883a 	mov	r4,r17
    15d4:	800b883a 	mov	r5,r16
    15d8:	00061b80 	call	61b8 <__eqdf2>
    15dc:	103fec26 	beq	r2,zero,1590 <__alt_data_end+0xfffd0850>
    15e0:	00b80034 	movhi	r2,57344
    15e4:	d8800615 	stw	r2,24(sp)
    15e8:	00b1fc34 	movhi	r2,51184
    15ec:	10bfffc4 	addi	r2,r2,-1
    15f0:	d8800715 	stw	r2,28(sp)
    15f4:	003fe606 	br	1590 <__alt_data_end+0xfffd0850>
    15f8:	000d883a 	mov	r6,zero
    15fc:	01cff834 	movhi	r7,16352
    1600:	a809883a 	mov	r4,r21
    1604:	a00b883a 	mov	r5,r20
    1608:	00064100 	call	6410 <__muldf3>
    160c:	1009883a 	mov	r4,r2
    1610:	180b883a 	mov	r5,r3
    1614:	1023883a 	mov	r17,r2
    1618:	1821883a 	mov	r16,r3
    161c:	00049bc0 	call	49bc <rint>
    1620:	100d883a 	mov	r6,r2
    1624:	180f883a 	mov	r7,r3
    1628:	8809883a 	mov	r4,r17
    162c:	800b883a 	mov	r5,r16
    1630:	00061b80 	call	61b8 <__eqdf2>
    1634:	103fd626 	beq	r2,zero,1590 <__alt_data_end+0xfffd0850>
    1638:	00bffc34 	movhi	r2,65520
    163c:	d8000615 	stw	zero,24(sp)
    1640:	d8800715 	stw	r2,28(sp)
    1644:	003fd206 	br	1590 <__alt_data_end+0xfffd0850>

00001648 <sqrt>:
    1648:	defff104 	addi	sp,sp,-60
    164c:	dd000d15 	stw	r20,52(sp)
    1650:	050000b4 	movhi	r20,2
    1654:	dcc00c15 	stw	r19,48(sp)
    1658:	dc800b15 	stw	r18,44(sp)
    165c:	dc400a15 	stw	r17,40(sp)
    1660:	dc000915 	stw	r16,36(sp)
    1664:	dfc00e15 	stw	ra,56(sp)
    1668:	a5399804 	addi	r20,r20,-6560
    166c:	2027883a 	mov	r19,r4
    1670:	2825883a 	mov	r18,r5
    1674:	0002f880 	call	2f88 <__ieee754_sqrt>
    1678:	1821883a 	mov	r16,r3
    167c:	a0c00017 	ldw	r3,0(r20)
    1680:	1023883a 	mov	r17,r2
    1684:	00bfffc4 	movi	r2,-1
    1688:	18800a26 	beq	r3,r2,16b4 <sqrt+0x6c>
    168c:	9809883a 	mov	r4,r19
    1690:	900b883a 	mov	r5,r18
    1694:	00049340 	call	4934 <__fpclassifyd>
    1698:	10000626 	beq	r2,zero,16b4 <sqrt+0x6c>
    169c:	000d883a 	mov	r6,zero
    16a0:	000f883a 	mov	r7,zero
    16a4:	9809883a 	mov	r4,r19
    16a8:	900b883a 	mov	r5,r18
    16ac:	000631c0 	call	631c <__ledf2>
    16b0:	10000a16 	blt	r2,zero,16dc <sqrt+0x94>
    16b4:	8805883a 	mov	r2,r17
    16b8:	8007883a 	mov	r3,r16
    16bc:	dfc00e17 	ldw	ra,56(sp)
    16c0:	dd000d17 	ldw	r20,52(sp)
    16c4:	dcc00c17 	ldw	r19,48(sp)
    16c8:	dc800b17 	ldw	r18,44(sp)
    16cc:	dc400a17 	ldw	r17,40(sp)
    16d0:	dc000917 	ldw	r16,36(sp)
    16d4:	dec00f04 	addi	sp,sp,60
    16d8:	f800283a 	ret
    16dc:	00800044 	movi	r2,1
    16e0:	d8800015 	stw	r2,0(sp)
    16e4:	a4000017 	ldw	r16,0(r20)
    16e8:	008000b4 	movhi	r2,2
    16ec:	10b16704 	addi	r2,r2,-14948
    16f0:	d8800115 	stw	r2,4(sp)
    16f4:	d8000815 	stw	zero,32(sp)
    16f8:	dcc00415 	stw	r19,16(sp)
    16fc:	dc800515 	stw	r18,20(sp)
    1700:	dcc00215 	stw	r19,8(sp)
    1704:	dc800315 	stw	r18,12(sp)
    1708:	80000a1e 	bne	r16,zero,1734 <sqrt+0xec>
    170c:	d8000615 	stw	zero,24(sp)
    1710:	d8000715 	stw	zero,28(sp)
    1714:	d809883a 	mov	r4,sp
    1718:	00049a80 	call	49a8 <matherr>
    171c:	10000e26 	beq	r2,zero,1758 <sqrt+0x110>
    1720:	d8800817 	ldw	r2,32(sp)
    1724:	1000101e 	bne	r2,zero,1768 <sqrt+0x120>
    1728:	d8800617 	ldw	r2,24(sp)
    172c:	d8c00717 	ldw	r3,28(sp)
    1730:	003fe206 	br	16bc <__alt_data_end+0xfffd097c>
    1734:	000d883a 	mov	r6,zero
    1738:	000f883a 	mov	r7,zero
    173c:	0009883a 	mov	r4,zero
    1740:	000b883a 	mov	r5,zero
    1744:	00057e80 	call	57e8 <__divdf3>
    1748:	d8800615 	stw	r2,24(sp)
    174c:	d8c00715 	stw	r3,28(sp)
    1750:	00800084 	movi	r2,2
    1754:	80bfef1e 	bne	r16,r2,1714 <__alt_data_end+0xfffd09d4>
    1758:	00077380 	call	7738 <__errno>
    175c:	00c00844 	movi	r3,33
    1760:	10c00015 	stw	r3,0(r2)
    1764:	003fee06 	br	1720 <__alt_data_end+0xfffd09e0>
    1768:	00077380 	call	7738 <__errno>
    176c:	d8c00817 	ldw	r3,32(sp)
    1770:	10c00015 	stw	r3,0(r2)
    1774:	003fec06 	br	1728 <__alt_data_end+0xfffd09e8>

00001778 <__ieee754_pow>:
    1778:	00a00034 	movhi	r2,32768
    177c:	deffea04 	addi	sp,sp,-88
    1780:	10bfffc4 	addi	r2,r2,-1
    1784:	dc800e15 	stw	r18,56(sp)
    1788:	38a4703a 	and	r18,r7,r2
    178c:	dfc01515 	stw	ra,84(sp)
    1790:	df001415 	stw	fp,80(sp)
    1794:	ddc01315 	stw	r23,76(sp)
    1798:	dd801215 	stw	r22,72(sp)
    179c:	dd401115 	stw	r21,68(sp)
    17a0:	dd001015 	stw	r20,64(sp)
    17a4:	dcc00f15 	stw	r19,60(sp)
    17a8:	dc400d15 	stw	r17,52(sp)
    17ac:	dc000c15 	stw	r16,48(sp)
    17b0:	9186b03a 	or	r3,r18,r6
    17b4:	18002a26 	beq	r3,zero,1860 <__ieee754_pow+0xe8>
    17b8:	28a2703a 	and	r17,r5,r2
    17bc:	009ffc34 	movhi	r2,32752
    17c0:	14402316 	blt	r2,r17,1850 <__ieee754_pow+0xd8>
    17c4:	88802126 	beq	r17,r2,184c <__ieee754_pow+0xd4>
    17c8:	14802116 	blt	r2,r18,1850 <__ieee754_pow+0xd8>
    17cc:	009ffc34 	movhi	r2,32752
    17d0:	90807326 	beq	r18,r2,19a0 <__ieee754_pow+0x228>
    17d4:	2827883a 	mov	r19,r5
    17d8:	2021883a 	mov	r16,r4
    17dc:	302d883a 	mov	r22,r6
    17e0:	3839883a 	mov	fp,r7
    17e4:	28007016 	blt	r5,zero,19a8 <__ieee754_pow+0x230>
    17e8:	002b883a 	mov	r21,zero
    17ec:	b0003a1e 	bne	r22,zero,18d8 <__ieee754_pow+0x160>
    17f0:	009ffc34 	movhi	r2,32752
    17f4:	90807f26 	beq	r18,r2,19f4 <__ieee754_pow+0x27c>
    17f8:	008ffc34 	movhi	r2,16368
    17fc:	90805426 	beq	r18,r2,1950 <__ieee754_pow+0x1d8>
    1800:	00900034 	movhi	r2,16384
    1804:	e0833b26 	beq	fp,r2,24f4 <__ieee754_pow+0xd7c>
    1808:	008ff834 	movhi	r2,16352
    180c:	e080321e 	bne	fp,r2,18d8 <__ieee754_pow+0x160>
    1810:	98003116 	blt	r19,zero,18d8 <__ieee754_pow+0x160>
    1814:	8009883a 	mov	r4,r16
    1818:	980b883a 	mov	r5,r19
    181c:	dfc01517 	ldw	ra,84(sp)
    1820:	df001417 	ldw	fp,80(sp)
    1824:	ddc01317 	ldw	r23,76(sp)
    1828:	dd801217 	ldw	r22,72(sp)
    182c:	dd401117 	ldw	r21,68(sp)
    1830:	dd001017 	ldw	r20,64(sp)
    1834:	dcc00f17 	ldw	r19,60(sp)
    1838:	dc800e17 	ldw	r18,56(sp)
    183c:	dc400d17 	ldw	r17,52(sp)
    1840:	dc000c17 	ldw	r16,48(sp)
    1844:	dec01604 	addi	sp,sp,88
    1848:	0002f881 	jmpi	2f88 <__ieee754_sqrt>
    184c:	20001226 	beq	r4,zero,1898 <__ieee754_pow+0x120>
    1850:	00b00434 	movhi	r2,49168
    1854:	8885883a 	add	r2,r17,r2
    1858:	1108b03a 	or	r4,r2,r4
    185c:	20000f1e 	bne	r4,zero,189c <__ieee754_pow+0x124>
    1860:	0005883a 	mov	r2,zero
    1864:	00cffc34 	movhi	r3,16368
    1868:	dfc01517 	ldw	ra,84(sp)
    186c:	df001417 	ldw	fp,80(sp)
    1870:	ddc01317 	ldw	r23,76(sp)
    1874:	dd801217 	ldw	r22,72(sp)
    1878:	dd401117 	ldw	r21,68(sp)
    187c:	dd001017 	ldw	r20,64(sp)
    1880:	dcc00f17 	ldw	r19,60(sp)
    1884:	dc800e17 	ldw	r18,56(sp)
    1888:	dc400d17 	ldw	r17,52(sp)
    188c:	dc000c17 	ldw	r16,48(sp)
    1890:	dec01604 	addi	sp,sp,88
    1894:	f800283a 	ret
    1898:	8cbfcc0e 	bge	r17,r18,17cc <__alt_data_end+0xfffd0a8c>
    189c:	010000b4 	movhi	r4,2
    18a0:	21322d04 	addi	r4,r4,-14156
    18a4:	dfc01517 	ldw	ra,84(sp)
    18a8:	df001417 	ldw	fp,80(sp)
    18ac:	ddc01317 	ldw	r23,76(sp)
    18b0:	dd801217 	ldw	r22,72(sp)
    18b4:	dd401117 	ldw	r21,68(sp)
    18b8:	dd001017 	ldw	r20,64(sp)
    18bc:	dcc00f17 	ldw	r19,60(sp)
    18c0:	dc800e17 	ldw	r18,56(sp)
    18c4:	dc400d17 	ldw	r17,52(sp)
    18c8:	dc000c17 	ldw	r16,48(sp)
    18cc:	dec01604 	addi	sp,sp,88
    18d0:	00049b01 	jmpi	49b0 <nan>
    18d4:	002b883a 	mov	r21,zero
    18d8:	8009883a 	mov	r4,r16
    18dc:	980b883a 	mov	r5,r19
    18e0:	00047180 	call	4718 <fabs>
    18e4:	102f883a 	mov	r23,r2
    18e8:	80000f26 	beq	r16,zero,1928 <__ieee754_pow+0x1b0>
    18ec:	9816d7fa 	srli	r11,r19,31
    18f0:	5affffc4 	addi	r11,r11,-1
    18f4:	aac4b03a 	or	r2,r21,r11
    18f8:	10004b26 	beq	r2,zero,1a28 <__ieee754_pow+0x2b0>
    18fc:	00907834 	movhi	r2,16864
    1900:	1480540e 	bge	r2,r18,1a54 <__ieee754_pow+0x2dc>
    1904:	0090fc34 	movhi	r2,17392
    1908:	14832d0e 	bge	r2,r18,25c0 <__ieee754_pow+0xe48>
    190c:	008ffc34 	movhi	r2,16368
    1910:	10bfffc4 	addi	r2,r2,-1
    1914:	14401916 	blt	r2,r17,197c <__ieee754_pow+0x204>
    1918:	e0001916 	blt	fp,zero,1980 <__ieee754_pow+0x208>
    191c:	0005883a 	mov	r2,zero
    1920:	0007883a 	mov	r3,zero
    1924:	003fd006 	br	1868 <__alt_data_end+0xfffd0b28>
    1928:	88000526 	beq	r17,zero,1940 <__ieee754_pow+0x1c8>
    192c:	00900034 	movhi	r2,16384
    1930:	10bfffc4 	addi	r2,r2,-1
    1934:	9884703a 	and	r2,r19,r2
    1938:	010ffc34 	movhi	r4,16368
    193c:	113feb1e 	bne	r2,r4,18ec <__alt_data_end+0xfffd0bac>
    1940:	e0000716 	blt	fp,zero,1960 <__ieee754_pow+0x1e8>
    1944:	9802e216 	blt	r19,zero,24d0 <__ieee754_pow+0xd58>
    1948:	b805883a 	mov	r2,r23
    194c:	003fc606 	br	1868 <__alt_data_end+0xfffd0b28>
    1950:	e0037516 	blt	fp,zero,2728 <__ieee754_pow+0xfb0>
    1954:	8005883a 	mov	r2,r16
    1958:	9807883a 	mov	r3,r19
    195c:	003fc206 	br	1868 <__alt_data_end+0xfffd0b28>
    1960:	b80d883a 	mov	r6,r23
    1964:	180f883a 	mov	r7,r3
    1968:	0009883a 	mov	r4,zero
    196c:	014ffc34 	movhi	r5,16368
    1970:	00057e80 	call	57e8 <__divdf3>
    1974:	102f883a 	mov	r23,r2
    1978:	003ff206 	br	1944 <__alt_data_end+0xfffd0c04>
    197c:	073fe70e 	bge	zero,fp,191c <__alt_data_end+0xfffd0bdc>
    1980:	01a20034 	movhi	r6,34816
    1984:	01df8e34 	movhi	r7,32312
    1988:	319d6704 	addi	r6,r6,30108
    198c:	39f90f04 	addi	r7,r7,-7108
    1990:	3009883a 	mov	r4,r6
    1994:	380b883a 	mov	r5,r7
    1998:	00064100 	call	6410 <__muldf3>
    199c:	003fb206 	br	1868 <__alt_data_end+0xfffd0b28>
    19a0:	303f8c26 	beq	r6,zero,17d4 <__alt_data_end+0xfffd0a94>
    19a4:	003faa06 	br	1850 <__alt_data_end+0xfffd0b10>
    19a8:	0090d034 	movhi	r2,17216
    19ac:	10bfffc4 	addi	r2,r2,-1
    19b0:	14801b16 	blt	r2,r18,1a20 <__ieee754_pow+0x2a8>
    19b4:	008ffc34 	movhi	r2,16368
    19b8:	10bfffc4 	addi	r2,r2,-1
    19bc:	14bf8a0e 	bge	r2,r18,17e8 <__alt_data_end+0xfffd0aa8>
    19c0:	9005d53a 	srai	r2,r18,20
    19c4:	00c00504 	movi	r3,20
    19c8:	10bf0044 	addi	r2,r2,-1023
    19cc:	18836b0e 	bge	r3,r2,277c <__ieee754_pow+0x1004>
    19d0:	00c00d04 	movi	r3,52
    19d4:	1885c83a 	sub	r2,r3,r2
    19d8:	3086d83a 	srl	r3,r6,r2
    19dc:	1884983a 	sll	r2,r3,r2
    19e0:	30bf811e 	bne	r6,r2,17e8 <__alt_data_end+0xfffd0aa8>
    19e4:	18c0004c 	andi	r3,r3,1
    19e8:	02800084 	movi	r10,2
    19ec:	50ebc83a 	sub	r21,r10,r3
    19f0:	003f7e06 	br	17ec <__alt_data_end+0xfffd0aac>
    19f4:	01300434 	movhi	r4,49168
    19f8:	8909883a 	add	r4,r17,r4
    19fc:	2408b03a 	or	r4,r4,r16
    1a00:	203f9726 	beq	r4,zero,1860 <__alt_data_end+0xfffd0b20>
    1a04:	008ffc34 	movhi	r2,16368
    1a08:	10bfffc4 	addi	r2,r2,-1
    1a0c:	1442e60e 	bge	r2,r17,25a8 <__ieee754_pow+0xe30>
    1a10:	e03fc216 	blt	fp,zero,191c <__alt_data_end+0xfffd0bdc>
    1a14:	0005883a 	mov	r2,zero
    1a18:	e007883a 	mov	r3,fp
    1a1c:	003f9206 	br	1868 <__alt_data_end+0xfffd0b28>
    1a20:	05400084 	movi	r21,2
    1a24:	003f7106 	br	17ec <__alt_data_end+0xfffd0aac>
    1a28:	800d883a 	mov	r6,r16
    1a2c:	980f883a 	mov	r7,r19
    1a30:	3009883a 	mov	r4,r6
    1a34:	380b883a 	mov	r5,r7
    1a38:	0006c7c0 	call	6c7c <__subdf3>
    1a3c:	100d883a 	mov	r6,r2
    1a40:	180f883a 	mov	r7,r3
    1a44:	1009883a 	mov	r4,r2
    1a48:	180b883a 	mov	r5,r3
    1a4c:	00057e80 	call	57e8 <__divdf3>
    1a50:	003f8506 	br	1868 <__alt_data_end+0xfffd0b28>
    1a54:	00800434 	movhi	r2,16
    1a58:	10bfffc4 	addi	r2,r2,-1
    1a5c:	1442d616 	blt	r2,r17,25b8 <__ieee754_pow+0xe40>
    1a60:	b809883a 	mov	r4,r23
    1a64:	000d883a 	mov	r6,zero
    1a68:	01d0d034 	movhi	r7,17216
    1a6c:	180b883a 	mov	r5,r3
    1a70:	dac00b15 	stw	r11,44(sp)
    1a74:	00064100 	call	6410 <__muldf3>
    1a78:	dac00b17 	ldw	r11,44(sp)
    1a7c:	102f883a 	mov	r23,r2
    1a80:	1823883a 	mov	r17,r3
    1a84:	033ff2c4 	movi	r12,-53
    1a88:	8807d53a 	srai	r3,r17,20
    1a8c:	00800434 	movhi	r2,16
    1a90:	10bfffc4 	addi	r2,r2,-1
    1a94:	18ff0044 	addi	r3,r3,-1023
    1a98:	1b19883a 	add	r12,r3,r12
    1a9c:	00c00134 	movhi	r3,4
    1aa0:	8884703a 	and	r2,r17,r2
    1aa4:	18e62384 	addi	r3,r3,-26482
    1aa8:	150ffc34 	orhi	r20,r2,16368
    1aac:	1880060e 	bge	r3,r2,1ac8 <__ieee754_pow+0x350>
    1ab0:	00c00334 	movhi	r3,12
    1ab4:	18ed9e44 	addi	r3,r3,-18823
    1ab8:	18833f0e 	bge	r3,r2,27b8 <__ieee754_pow+0x1040>
    1abc:	00bffc34 	movhi	r2,65520
    1ac0:	63000044 	addi	r12,r12,1
    1ac4:	a0a9883a 	add	r20,r20,r2
    1ac8:	0027883a 	mov	r19,zero
    1acc:	d8000215 	stw	zero,8(sp)
    1ad0:	0013883a 	mov	r9,zero
    1ad4:	0011883a 	mov	r8,zero
    1ad8:	0015883a 	mov	r10,zero
    1adc:	048ffc34 	movhi	r18,16368
    1ae0:	900f883a 	mov	r7,r18
    1ae4:	b809883a 	mov	r4,r23
    1ae8:	a00b883a 	mov	r5,r20
    1aec:	000d883a 	mov	r6,zero
    1af0:	da000a15 	stw	r8,40(sp)
    1af4:	da400815 	stw	r9,32(sp)
    1af8:	dac00b15 	stw	r11,44(sp)
    1afc:	db000915 	stw	r12,36(sp)
    1b00:	da800515 	stw	r10,20(sp)
    1b04:	0006c7c0 	call	6c7c <__subdf3>
    1b08:	b809883a 	mov	r4,r23
    1b0c:	a00b883a 	mov	r5,r20
    1b10:	900f883a 	mov	r7,r18
    1b14:	000d883a 	mov	r6,zero
    1b18:	d8800015 	stw	r2,0(sp)
    1b1c:	d8c00115 	stw	r3,4(sp)
    1b20:	0004f3c0 	call	4f3c <__adddf3>
    1b24:	100d883a 	mov	r6,r2
    1b28:	180f883a 	mov	r7,r3
    1b2c:	0009883a 	mov	r4,zero
    1b30:	014ffc34 	movhi	r5,16368
    1b34:	00057e80 	call	57e8 <__divdf3>
    1b38:	d9000017 	ldw	r4,0(sp)
    1b3c:	d9400117 	ldw	r5,4(sp)
    1b40:	100d883a 	mov	r6,r2
    1b44:	180f883a 	mov	r7,r3
    1b48:	d8c00715 	stw	r3,28(sp)
    1b4c:	d8800615 	stw	r2,24(sp)
    1b50:	00064100 	call	6410 <__muldf3>
    1b54:	1023883a 	mov	r17,r2
    1b58:	a005d07a 	srai	r2,r20,1
    1b5c:	da800517 	ldw	r10,20(sp)
    1b60:	1821883a 	mov	r16,r3
    1b64:	10c80034 	orhi	r3,r2,8192
    1b68:	00800234 	movhi	r2,8
    1b6c:	1885883a 	add	r2,r3,r2
    1b70:	1295883a 	add	r10,r2,r10
    1b74:	500f883a 	mov	r7,r10
    1b78:	800b883a 	mov	r5,r16
    1b7c:	000d883a 	mov	r6,zero
    1b80:	0009883a 	mov	r4,zero
    1b84:	da800515 	stw	r10,20(sp)
    1b88:	00064100 	call	6410 <__muldf3>
    1b8c:	d9000017 	ldw	r4,0(sp)
    1b90:	d9400117 	ldw	r5,4(sp)
    1b94:	100d883a 	mov	r6,r2
    1b98:	180f883a 	mov	r7,r3
    1b9c:	0006c7c0 	call	6c7c <__subdf3>
    1ba0:	da800517 	ldw	r10,20(sp)
    1ba4:	900f883a 	mov	r7,r18
    1ba8:	000d883a 	mov	r6,zero
    1bac:	500b883a 	mov	r5,r10
    1bb0:	0009883a 	mov	r4,zero
    1bb4:	d8800015 	stw	r2,0(sp)
    1bb8:	d8c00515 	stw	r3,20(sp)
    1bbc:	0006c7c0 	call	6c7c <__subdf3>
    1bc0:	b809883a 	mov	r4,r23
    1bc4:	a00b883a 	mov	r5,r20
    1bc8:	100d883a 	mov	r6,r2
    1bcc:	180f883a 	mov	r7,r3
    1bd0:	0006c7c0 	call	6c7c <__subdf3>
    1bd4:	800f883a 	mov	r7,r16
    1bd8:	000d883a 	mov	r6,zero
    1bdc:	1009883a 	mov	r4,r2
    1be0:	180b883a 	mov	r5,r3
    1be4:	00064100 	call	6410 <__muldf3>
    1be8:	db400517 	ldw	r13,20(sp)
    1bec:	d9000017 	ldw	r4,0(sp)
    1bf0:	100d883a 	mov	r6,r2
    1bf4:	680b883a 	mov	r5,r13
    1bf8:	180f883a 	mov	r7,r3
    1bfc:	0006c7c0 	call	6c7c <__subdf3>
    1c00:	dbc00617 	ldw	r15,24(sp)
    1c04:	db800717 	ldw	r14,28(sp)
    1c08:	1009883a 	mov	r4,r2
    1c0c:	780d883a 	mov	r6,r15
    1c10:	700f883a 	mov	r7,r14
    1c14:	180b883a 	mov	r5,r3
    1c18:	00064100 	call	6410 <__muldf3>
    1c1c:	880d883a 	mov	r6,r17
    1c20:	800f883a 	mov	r7,r16
    1c24:	8809883a 	mov	r4,r17
    1c28:	800b883a 	mov	r5,r16
    1c2c:	d8800015 	stw	r2,0(sp)
    1c30:	d8c00115 	stw	r3,4(sp)
    1c34:	00064100 	call	6410 <__muldf3>
    1c38:	01929174 	movhi	r6,19013
    1c3c:	01cff2b4 	movhi	r7,16330
    1c40:	3193bbc4 	addi	r6,r6,20207
    1c44:	39df8a04 	addi	r7,r7,32296
    1c48:	1009883a 	mov	r4,r2
    1c4c:	180b883a 	mov	r5,r3
    1c50:	102f883a 	mov	r23,r2
    1c54:	1829883a 	mov	r20,r3
    1c58:	00064100 	call	6410 <__muldf3>
    1c5c:	01a4f2b4 	movhi	r6,37834
    1c60:	01cff3b4 	movhi	r7,16334
    1c64:	31b6d944 	addi	r6,r6,-9371
    1c68:	39e19284 	addi	r7,r7,-31158
    1c6c:	1009883a 	mov	r4,r2
    1c70:	180b883a 	mov	r5,r3
    1c74:	0004f3c0 	call	4f3c <__adddf3>
    1c78:	b80d883a 	mov	r6,r23
    1c7c:	a00f883a 	mov	r7,r20
    1c80:	1009883a 	mov	r4,r2
    1c84:	180b883a 	mov	r5,r3
    1c88:	00064100 	call	6410 <__muldf3>
    1c8c:	01aa4774 	movhi	r6,43293
    1c90:	01cff474 	movhi	r7,16337
    1c94:	31904044 	addi	r6,r6,16641
    1c98:	39dd1804 	addi	r7,r7,29792
    1c9c:	1009883a 	mov	r4,r2
    1ca0:	180b883a 	mov	r5,r3
    1ca4:	0004f3c0 	call	4f3c <__adddf3>
    1ca8:	b80d883a 	mov	r6,r23
    1cac:	a00f883a 	mov	r7,r20
    1cb0:	1009883a 	mov	r4,r2
    1cb4:	180b883a 	mov	r5,r3
    1cb8:	00064100 	call	6410 <__muldf3>
    1cbc:	019463f4 	movhi	r6,20879
    1cc0:	01cff574 	movhi	r7,16341
    1cc4:	31899344 	addi	r6,r6,9805
    1cc8:	39d55544 	addi	r7,r7,21845
    1ccc:	1009883a 	mov	r4,r2
    1cd0:	180b883a 	mov	r5,r3
    1cd4:	0004f3c0 	call	4f3c <__adddf3>
    1cd8:	b80d883a 	mov	r6,r23
    1cdc:	a00f883a 	mov	r7,r20
    1ce0:	1009883a 	mov	r4,r2
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	00064100 	call	6410 <__muldf3>
    1cec:	01b6dc34 	movhi	r6,56176
    1cf0:	01cff6f4 	movhi	r7,16347
    1cf4:	31aaffc4 	addi	r6,r6,-21505
    1cf8:	39db6d84 	addi	r7,r7,28086
    1cfc:	1009883a 	mov	r4,r2
    1d00:	180b883a 	mov	r5,r3
    1d04:	0004f3c0 	call	4f3c <__adddf3>
    1d08:	b80d883a 	mov	r6,r23
    1d0c:	a00f883a 	mov	r7,r20
    1d10:	1009883a 	mov	r4,r2
    1d14:	180b883a 	mov	r5,r3
    1d18:	00064100 	call	6410 <__muldf3>
    1d1c:	018cccf4 	movhi	r6,13107
    1d20:	01cff8f4 	movhi	r7,16355
    1d24:	318cc0c4 	addi	r6,r6,13059
    1d28:	39ccccc4 	addi	r7,r7,13107
    1d2c:	1009883a 	mov	r4,r2
    1d30:	180b883a 	mov	r5,r3
    1d34:	0004f3c0 	call	4f3c <__adddf3>
    1d38:	b80d883a 	mov	r6,r23
    1d3c:	a00f883a 	mov	r7,r20
    1d40:	b809883a 	mov	r4,r23
    1d44:	a00b883a 	mov	r5,r20
    1d48:	1825883a 	mov	r18,r3
    1d4c:	d8800515 	stw	r2,20(sp)
    1d50:	00064100 	call	6410 <__muldf3>
    1d54:	db400517 	ldw	r13,20(sp)
    1d58:	900b883a 	mov	r5,r18
    1d5c:	100d883a 	mov	r6,r2
    1d60:	6809883a 	mov	r4,r13
    1d64:	180f883a 	mov	r7,r3
    1d68:	00064100 	call	6410 <__muldf3>
    1d6c:	800f883a 	mov	r7,r16
    1d70:	8809883a 	mov	r4,r17
    1d74:	800b883a 	mov	r5,r16
    1d78:	000d883a 	mov	r6,zero
    1d7c:	102f883a 	mov	r23,r2
    1d80:	1829883a 	mov	r20,r3
    1d84:	0004f3c0 	call	4f3c <__adddf3>
    1d88:	d9800017 	ldw	r6,0(sp)
    1d8c:	d9c00117 	ldw	r7,4(sp)
    1d90:	1009883a 	mov	r4,r2
    1d94:	180b883a 	mov	r5,r3
    1d98:	00064100 	call	6410 <__muldf3>
    1d9c:	b80d883a 	mov	r6,r23
    1da0:	a00f883a 	mov	r7,r20
    1da4:	1009883a 	mov	r4,r2
    1da8:	180b883a 	mov	r5,r3
    1dac:	0004f3c0 	call	4f3c <__adddf3>
    1db0:	800f883a 	mov	r7,r16
    1db4:	800b883a 	mov	r5,r16
    1db8:	000d883a 	mov	r6,zero
    1dbc:	0009883a 	mov	r4,zero
    1dc0:	1025883a 	mov	r18,r2
    1dc4:	182f883a 	mov	r23,r3
    1dc8:	00064100 	call	6410 <__muldf3>
    1dcc:	000d883a 	mov	r6,zero
    1dd0:	01d00234 	movhi	r7,16392
    1dd4:	1009883a 	mov	r4,r2
    1dd8:	180b883a 	mov	r5,r3
    1ddc:	d8c00715 	stw	r3,28(sp)
    1de0:	d8800615 	stw	r2,24(sp)
    1de4:	0004f3c0 	call	4f3c <__adddf3>
    1de8:	900d883a 	mov	r6,r18
    1dec:	b80f883a 	mov	r7,r23
    1df0:	1009883a 	mov	r4,r2
    1df4:	180b883a 	mov	r5,r3
    1df8:	0004f3c0 	call	4f3c <__adddf3>
    1dfc:	800b883a 	mov	r5,r16
    1e00:	000d883a 	mov	r6,zero
    1e04:	180f883a 	mov	r7,r3
    1e08:	0009883a 	mov	r4,zero
    1e0c:	1829883a 	mov	r20,r3
    1e10:	00064100 	call	6410 <__muldf3>
    1e14:	a00b883a 	mov	r5,r20
    1e18:	000d883a 	mov	r6,zero
    1e1c:	01d00234 	movhi	r7,16392
    1e20:	0009883a 	mov	r4,zero
    1e24:	d8800315 	stw	r2,12(sp)
    1e28:	d8c00415 	stw	r3,16(sp)
    1e2c:	0006c7c0 	call	6c7c <__subdf3>
    1e30:	dbc00617 	ldw	r15,24(sp)
    1e34:	db800717 	ldw	r14,28(sp)
    1e38:	1009883a 	mov	r4,r2
    1e3c:	780d883a 	mov	r6,r15
    1e40:	700f883a 	mov	r7,r14
    1e44:	180b883a 	mov	r5,r3
    1e48:	0006c7c0 	call	6c7c <__subdf3>
    1e4c:	9009883a 	mov	r4,r18
    1e50:	b80b883a 	mov	r5,r23
    1e54:	100d883a 	mov	r6,r2
    1e58:	180f883a 	mov	r7,r3
    1e5c:	0006c7c0 	call	6c7c <__subdf3>
    1e60:	880d883a 	mov	r6,r17
    1e64:	800f883a 	mov	r7,r16
    1e68:	1009883a 	mov	r4,r2
    1e6c:	180b883a 	mov	r5,r3
    1e70:	00064100 	call	6410 <__muldf3>
    1e74:	d9000017 	ldw	r4,0(sp)
    1e78:	d9400117 	ldw	r5,4(sp)
    1e7c:	a00f883a 	mov	r7,r20
    1e80:	000d883a 	mov	r6,zero
    1e84:	1023883a 	mov	r17,r2
    1e88:	1821883a 	mov	r16,r3
    1e8c:	00064100 	call	6410 <__muldf3>
    1e90:	8809883a 	mov	r4,r17
    1e94:	800b883a 	mov	r5,r16
    1e98:	100d883a 	mov	r6,r2
    1e9c:	180f883a 	mov	r7,r3
    1ea0:	0004f3c0 	call	4f3c <__adddf3>
    1ea4:	d9000317 	ldw	r4,12(sp)
    1ea8:	d9400417 	ldw	r5,16(sp)
    1eac:	100d883a 	mov	r6,r2
    1eb0:	180f883a 	mov	r7,r3
    1eb4:	102f883a 	mov	r23,r2
    1eb8:	1823883a 	mov	r17,r3
    1ebc:	0004f3c0 	call	4f3c <__adddf3>
    1ec0:	01cffbf4 	movhi	r7,16367
    1ec4:	39f1c244 	addi	r7,r7,-14583
    1ec8:	0009883a 	mov	r4,zero
    1ecc:	180b883a 	mov	r5,r3
    1ed0:	01b80034 	movhi	r6,57344
    1ed4:	1821883a 	mov	r16,r3
    1ed8:	00064100 	call	6410 <__muldf3>
    1edc:	d9800317 	ldw	r6,12(sp)
    1ee0:	d9c00417 	ldw	r7,16(sp)
    1ee4:	800b883a 	mov	r5,r16
    1ee8:	0009883a 	mov	r4,zero
    1eec:	1825883a 	mov	r18,r3
    1ef0:	d8800015 	stw	r2,0(sp)
    1ef4:	0006c7c0 	call	6c7c <__subdf3>
    1ef8:	b809883a 	mov	r4,r23
    1efc:	880b883a 	mov	r5,r17
    1f00:	100d883a 	mov	r6,r2
    1f04:	180f883a 	mov	r7,r3
    1f08:	0006c7c0 	call	6c7c <__subdf3>
    1f0c:	01b70eb4 	movhi	r6,56378
    1f10:	01cffbf4 	movhi	r7,16367
    1f14:	3180ff44 	addi	r6,r6,1021
    1f18:	39f1c244 	addi	r7,r7,-14583
    1f1c:	1009883a 	mov	r4,r2
    1f20:	180b883a 	mov	r5,r3
    1f24:	00064100 	call	6410 <__muldf3>
    1f28:	018516f4 	movhi	r6,5211
    1f2c:	01ef8fb4 	movhi	r7,48702
    1f30:	800b883a 	mov	r5,r16
    1f34:	31807d44 	addi	r6,r6,501
    1f38:	39cbf804 	addi	r7,r7,12256
    1f3c:	0009883a 	mov	r4,zero
    1f40:	1029883a 	mov	r20,r2
    1f44:	1823883a 	mov	r17,r3
    1f48:	00064100 	call	6410 <__muldf3>
    1f4c:	a009883a 	mov	r4,r20
    1f50:	880b883a 	mov	r5,r17
    1f54:	100d883a 	mov	r6,r2
    1f58:	180f883a 	mov	r7,r3
    1f5c:	0004f3c0 	call	4f3c <__adddf3>
    1f60:	da400817 	ldw	r9,32(sp)
    1f64:	da000a17 	ldw	r8,40(sp)
    1f68:	180b883a 	mov	r5,r3
    1f6c:	480d883a 	mov	r6,r9
    1f70:	400f883a 	mov	r7,r8
    1f74:	1009883a 	mov	r4,r2
    1f78:	0004f3c0 	call	4f3c <__adddf3>
    1f7c:	db000917 	ldw	r12,36(sp)
    1f80:	1029883a 	mov	r20,r2
    1f84:	1823883a 	mov	r17,r3
    1f88:	6009883a 	mov	r4,r12
    1f8c:	00075f80 	call	75f8 <__floatsidf>
    1f90:	d9000017 	ldw	r4,0(sp)
    1f94:	a00d883a 	mov	r6,r20
    1f98:	880f883a 	mov	r7,r17
    1f9c:	900b883a 	mov	r5,r18
    1fa0:	182f883a 	mov	r23,r3
    1fa4:	d8800115 	stw	r2,4(sp)
    1fa8:	0004f3c0 	call	4f3c <__adddf3>
    1fac:	d9c00217 	ldw	r7,8(sp)
    1fb0:	980d883a 	mov	r6,r19
    1fb4:	1009883a 	mov	r4,r2
    1fb8:	180b883a 	mov	r5,r3
    1fbc:	0004f3c0 	call	4f3c <__adddf3>
    1fc0:	d9800117 	ldw	r6,4(sp)
    1fc4:	b80f883a 	mov	r7,r23
    1fc8:	1009883a 	mov	r4,r2
    1fcc:	180b883a 	mov	r5,r3
    1fd0:	0004f3c0 	call	4f3c <__adddf3>
    1fd4:	d9800117 	ldw	r6,4(sp)
    1fd8:	b80f883a 	mov	r7,r23
    1fdc:	0009883a 	mov	r4,zero
    1fe0:	180b883a 	mov	r5,r3
    1fe4:	1821883a 	mov	r16,r3
    1fe8:	0006c7c0 	call	6c7c <__subdf3>
    1fec:	d9c00217 	ldw	r7,8(sp)
    1ff0:	980d883a 	mov	r6,r19
    1ff4:	1009883a 	mov	r4,r2
    1ff8:	180b883a 	mov	r5,r3
    1ffc:	0006c7c0 	call	6c7c <__subdf3>
    2000:	d9800017 	ldw	r6,0(sp)
    2004:	900f883a 	mov	r7,r18
    2008:	1009883a 	mov	r4,r2
    200c:	180b883a 	mov	r5,r3
    2010:	0006c7c0 	call	6c7c <__subdf3>
    2014:	880b883a 	mov	r5,r17
    2018:	100d883a 	mov	r6,r2
    201c:	180f883a 	mov	r7,r3
    2020:	a009883a 	mov	r4,r20
    2024:	0006c7c0 	call	6c7c <__subdf3>
    2028:	dac00b17 	ldw	r11,44(sp)
    202c:	aabfffc4 	addi	r10,r21,-1
    2030:	1025883a 	mov	r18,r2
    2034:	52d6b03a 	or	r11,r10,r11
    2038:	1823883a 	mov	r17,r3
    203c:	58015826 	beq	r11,zero,25a0 <__ieee754_pow+0xe28>
    2040:	04cffc34 	movhi	r19,16368
    2044:	b009883a 	mov	r4,r22
    2048:	000d883a 	mov	r6,zero
    204c:	e00f883a 	mov	r7,fp
    2050:	e00b883a 	mov	r5,fp
    2054:	0006c7c0 	call	6c7c <__subdf3>
    2058:	800f883a 	mov	r7,r16
    205c:	000d883a 	mov	r6,zero
    2060:	1009883a 	mov	r4,r2
    2064:	180b883a 	mov	r5,r3
    2068:	00064100 	call	6410 <__muldf3>
    206c:	b00d883a 	mov	r6,r22
    2070:	9009883a 	mov	r4,r18
    2074:	880b883a 	mov	r5,r17
    2078:	e00f883a 	mov	r7,fp
    207c:	1829883a 	mov	r20,r3
    2080:	102b883a 	mov	r21,r2
    2084:	00064100 	call	6410 <__muldf3>
    2088:	a00b883a 	mov	r5,r20
    208c:	100d883a 	mov	r6,r2
    2090:	180f883a 	mov	r7,r3
    2094:	a809883a 	mov	r4,r21
    2098:	0004f3c0 	call	4f3c <__adddf3>
    209c:	800b883a 	mov	r5,r16
    20a0:	000d883a 	mov	r6,zero
    20a4:	e00f883a 	mov	r7,fp
    20a8:	0009883a 	mov	r4,zero
    20ac:	102d883a 	mov	r22,r2
    20b0:	1829883a 	mov	r20,r3
    20b4:	00064100 	call	6410 <__muldf3>
    20b8:	100d883a 	mov	r6,r2
    20bc:	180f883a 	mov	r7,r3
    20c0:	b009883a 	mov	r4,r22
    20c4:	a00b883a 	mov	r5,r20
    20c8:	1025883a 	mov	r18,r2
    20cc:	1823883a 	mov	r17,r3
    20d0:	0004f3c0 	call	4f3c <__adddf3>
    20d4:	102f883a 	mov	r23,r2
    20d8:	00902434 	movhi	r2,16528
    20dc:	10bfffc4 	addi	r2,r2,-1
    20e0:	1821883a 	mov	r16,r3
    20e4:	9013883a 	mov	r9,r18
    20e8:	8811883a 	mov	r8,r17
    20ec:	10c1070e 	bge	r2,r3,250c <__ieee754_pow+0xd94>
    20f0:	00afdc34 	movhi	r2,49008
    20f4:	1885883a 	add	r2,r3,r2
    20f8:	15c4b03a 	or	r2,r2,r23
    20fc:	1001901e 	bne	r2,zero,2740 <__ieee754_pow+0xfc8>
    2100:	01994b34 	movhi	r6,25900
    2104:	01cf25f4 	movhi	r7,15511
    2108:	31a0bf84 	addi	r6,r6,-32002
    210c:	39c551c4 	addi	r7,r7,5447
    2110:	b009883a 	mov	r4,r22
    2114:	a00b883a 	mov	r5,r20
    2118:	0004f3c0 	call	4f3c <__adddf3>
    211c:	900d883a 	mov	r6,r18
    2120:	880f883a 	mov	r7,r17
    2124:	b809883a 	mov	r4,r23
    2128:	800b883a 	mov	r5,r16
    212c:	1039883a 	mov	fp,r2
    2130:	182b883a 	mov	r21,r3
    2134:	0006c7c0 	call	6c7c <__subdf3>
    2138:	100d883a 	mov	r6,r2
    213c:	180f883a 	mov	r7,r3
    2140:	e009883a 	mov	r4,fp
    2144:	a80b883a 	mov	r5,r21
    2148:	00062400 	call	6240 <__gedf2>
    214c:	00817c16 	blt	zero,r2,2740 <__ieee754_pow+0xfc8>
    2150:	802b883a 	mov	r21,r16
    2154:	a805d53a 	srai	r2,r21,20
    2158:	00c00434 	movhi	r3,16
    215c:	01000434 	movhi	r4,16
    2160:	10bf0084 	addi	r2,r2,-1022
    2164:	1885d83a 	sra	r2,r3,r2
    2168:	213fffc4 	addi	r4,r4,-1
    216c:	1405883a 	add	r2,r2,r16
    2170:	1006907a 	slli	r3,r2,1
    2174:	112a703a 	and	r21,r2,r4
    2178:	ad400434 	orhi	r21,r21,16
    217c:	1806d57a 	srli	r3,r3,21
    2180:	18ff0044 	addi	r3,r3,-1023
    2184:	20cfd83a 	sra	r7,r4,r3
    2188:	01000504 	movi	r4,20
    218c:	20c7c83a 	sub	r3,r4,r3
    2190:	a8c7d83a 	sra	r3,r21,r3
    2194:	01ce303a 	nor	r7,zero,r7
    2198:	388e703a 	and	r7,r7,r2
    219c:	d8c00015 	stw	r3,0(sp)
    21a0:	80019016 	blt	r16,zero,27e4 <__ieee754_pow+0x106c>
    21a4:	000d883a 	mov	r6,zero
    21a8:	9009883a 	mov	r4,r18
    21ac:	880b883a 	mov	r5,r17
    21b0:	0006c7c0 	call	6c7c <__subdf3>
    21b4:	100d883a 	mov	r6,r2
    21b8:	180f883a 	mov	r7,r3
    21bc:	b009883a 	mov	r4,r22
    21c0:	a00b883a 	mov	r5,r20
    21c4:	d8c00a15 	stw	r3,40(sp)
    21c8:	d8800815 	stw	r2,32(sp)
    21cc:	0004f3c0 	call	4f3c <__adddf3>
    21d0:	d8800017 	ldw	r2,0(sp)
    21d4:	da000a17 	ldw	r8,40(sp)
    21d8:	da400817 	ldw	r9,32(sp)
    21dc:	1004953a 	slli	r2,r2,20
    21e0:	1821883a 	mov	r16,r3
    21e4:	d8800215 	stw	r2,8(sp)
    21e8:	01cff9b4 	movhi	r7,16358
    21ec:	800b883a 	mov	r5,r16
    21f0:	39cb90c4 	addi	r7,r7,11843
    21f4:	0009883a 	mov	r4,zero
    21f8:	000d883a 	mov	r6,zero
    21fc:	da000a15 	stw	r8,40(sp)
    2200:	da400815 	stw	r9,32(sp)
    2204:	00064100 	call	6410 <__muldf3>
    2208:	da400817 	ldw	r9,32(sp)
    220c:	da000a17 	ldw	r8,40(sp)
    2210:	800b883a 	mov	r5,r16
    2214:	480d883a 	mov	r6,r9
    2218:	400f883a 	mov	r7,r8
    221c:	0009883a 	mov	r4,zero
    2220:	1039883a 	mov	fp,r2
    2224:	182f883a 	mov	r23,r3
    2228:	0006c7c0 	call	6c7c <__subdf3>
    222c:	b009883a 	mov	r4,r22
    2230:	a00b883a 	mov	r5,r20
    2234:	100d883a 	mov	r6,r2
    2238:	180f883a 	mov	r7,r3
    223c:	0006c7c0 	call	6c7c <__subdf3>
    2240:	01bfbeb4 	movhi	r6,65274
    2244:	01cff9b4 	movhi	r7,16358
    2248:	318e7bc4 	addi	r6,r6,14831
    224c:	39cb9084 	addi	r7,r7,11842
    2250:	1009883a 	mov	r4,r2
    2254:	180b883a 	mov	r5,r3
    2258:	00064100 	call	6410 <__muldf3>
    225c:	01832a34 	movhi	r6,3240
    2260:	01ef8834 	movhi	r7,48672
    2264:	800b883a 	mov	r5,r16
    2268:	319b0e44 	addi	r6,r6,27705
    226c:	39d71844 	addi	r7,r7,23649
    2270:	0009883a 	mov	r4,zero
    2274:	1029883a 	mov	r20,r2
    2278:	1823883a 	mov	r17,r3
    227c:	00064100 	call	6410 <__muldf3>
    2280:	a009883a 	mov	r4,r20
    2284:	880b883a 	mov	r5,r17
    2288:	100d883a 	mov	r6,r2
    228c:	180f883a 	mov	r7,r3
    2290:	0004f3c0 	call	4f3c <__adddf3>
    2294:	e009883a 	mov	r4,fp
    2298:	b80b883a 	mov	r5,r23
    229c:	100d883a 	mov	r6,r2
    22a0:	180f883a 	mov	r7,r3
    22a4:	102d883a 	mov	r22,r2
    22a8:	1829883a 	mov	r20,r3
    22ac:	0004f3c0 	call	4f3c <__adddf3>
    22b0:	e00d883a 	mov	r6,fp
    22b4:	b80f883a 	mov	r7,r23
    22b8:	1009883a 	mov	r4,r2
    22bc:	180b883a 	mov	r5,r3
    22c0:	1023883a 	mov	r17,r2
    22c4:	1821883a 	mov	r16,r3
    22c8:	0006c7c0 	call	6c7c <__subdf3>
    22cc:	b009883a 	mov	r4,r22
    22d0:	a00b883a 	mov	r5,r20
    22d4:	100d883a 	mov	r6,r2
    22d8:	180f883a 	mov	r7,r3
    22dc:	0006c7c0 	call	6c7c <__subdf3>
    22e0:	880d883a 	mov	r6,r17
    22e4:	800f883a 	mov	r7,r16
    22e8:	8809883a 	mov	r4,r17
    22ec:	800b883a 	mov	r5,r16
    22f0:	1039883a 	mov	fp,r2
    22f4:	182f883a 	mov	r23,r3
    22f8:	00064100 	call	6410 <__muldf3>
    22fc:	019caff4 	movhi	r6,29375
    2300:	01cf99b4 	movhi	r7,15974
    2304:	31a93404 	addi	r6,r6,-23344
    2308:	39cdda44 	addi	r7,r7,14185
    230c:	1009883a 	mov	r4,r2
    2310:	180b883a 	mov	r5,r3
    2314:	102d883a 	mov	r22,r2
    2318:	1829883a 	mov	r20,r3
    231c:	00064100 	call	6410 <__muldf3>
    2320:	01b174b4 	movhi	r6,50642
    2324:	01cfaf34 	movhi	r7,16060
    2328:	319afc44 	addi	r6,r6,27633
    232c:	39ef5044 	addi	r7,r7,-17087
    2330:	1009883a 	mov	r4,r2
    2334:	180b883a 	mov	r5,r3
    2338:	0006c7c0 	call	6c7c <__subdf3>
    233c:	b00d883a 	mov	r6,r22
    2340:	a00f883a 	mov	r7,r20
    2344:	1009883a 	mov	r4,r2
    2348:	180b883a 	mov	r5,r3
    234c:	00064100 	call	6410 <__muldf3>
    2350:	01abc9b4 	movhi	r6,44838
    2354:	01cfc474 	movhi	r7,16145
    2358:	31b78b04 	addi	r6,r6,-8660
    235c:	39d59a84 	addi	r7,r7,22122
    2360:	1009883a 	mov	r4,r2
    2364:	180b883a 	mov	r5,r3
    2368:	0004f3c0 	call	4f3c <__adddf3>
    236c:	b00d883a 	mov	r6,r22
    2370:	a00f883a 	mov	r7,r20
    2374:	1009883a 	mov	r4,r2
    2378:	180b883a 	mov	r5,r3
    237c:	00064100 	call	6410 <__muldf3>
    2380:	0185aff4 	movhi	r6,5823
    2384:	01cfd9f4 	movhi	r7,16231
    2388:	31af64c4 	addi	r6,r6,-17005
    238c:	39f05b04 	addi	r7,r7,-16020
    2390:	1009883a 	mov	r4,r2
    2394:	180b883a 	mov	r5,r3
    2398:	0006c7c0 	call	6c7c <__subdf3>
    239c:	b00d883a 	mov	r6,r22
    23a0:	a00f883a 	mov	r7,r20
    23a4:	1009883a 	mov	r4,r2
    23a8:	180b883a 	mov	r5,r3
    23ac:	00064100 	call	6410 <__muldf3>
    23b0:	01955574 	movhi	r6,21845
    23b4:	01cff174 	movhi	r7,16325
    23b8:	31954f84 	addi	r6,r6,21822
    23bc:	39d55544 	addi	r7,r7,21845
    23c0:	1009883a 	mov	r4,r2
    23c4:	180b883a 	mov	r5,r3
    23c8:	0004f3c0 	call	4f3c <__adddf3>
    23cc:	b00d883a 	mov	r6,r22
    23d0:	a00f883a 	mov	r7,r20
    23d4:	1009883a 	mov	r4,r2
    23d8:	180b883a 	mov	r5,r3
    23dc:	00064100 	call	6410 <__muldf3>
    23e0:	100d883a 	mov	r6,r2
    23e4:	180f883a 	mov	r7,r3
    23e8:	8809883a 	mov	r4,r17
    23ec:	800b883a 	mov	r5,r16
    23f0:	0006c7c0 	call	6c7c <__subdf3>
    23f4:	100d883a 	mov	r6,r2
    23f8:	180f883a 	mov	r7,r3
    23fc:	8809883a 	mov	r4,r17
    2400:	800b883a 	mov	r5,r16
    2404:	102d883a 	mov	r22,r2
    2408:	1829883a 	mov	r20,r3
    240c:	00064100 	call	6410 <__muldf3>
    2410:	b009883a 	mov	r4,r22
    2414:	a00b883a 	mov	r5,r20
    2418:	000d883a 	mov	r6,zero
    241c:	01d00034 	movhi	r7,16384
    2420:	1025883a 	mov	r18,r2
    2424:	182b883a 	mov	r21,r3
    2428:	0006c7c0 	call	6c7c <__subdf3>
    242c:	100d883a 	mov	r6,r2
    2430:	180f883a 	mov	r7,r3
    2434:	9009883a 	mov	r4,r18
    2438:	a80b883a 	mov	r5,r21
    243c:	00057e80 	call	57e8 <__divdf3>
    2440:	e00d883a 	mov	r6,fp
    2444:	b80f883a 	mov	r7,r23
    2448:	8809883a 	mov	r4,r17
    244c:	800b883a 	mov	r5,r16
    2450:	102d883a 	mov	r22,r2
    2454:	1829883a 	mov	r20,r3
    2458:	00064100 	call	6410 <__muldf3>
    245c:	e00d883a 	mov	r6,fp
    2460:	b80f883a 	mov	r7,r23
    2464:	1009883a 	mov	r4,r2
    2468:	180b883a 	mov	r5,r3
    246c:	0004f3c0 	call	4f3c <__adddf3>
    2470:	100d883a 	mov	r6,r2
    2474:	180f883a 	mov	r7,r3
    2478:	b009883a 	mov	r4,r22
    247c:	a00b883a 	mov	r5,r20
    2480:	0006c7c0 	call	6c7c <__subdf3>
    2484:	880d883a 	mov	r6,r17
    2488:	800f883a 	mov	r7,r16
    248c:	1009883a 	mov	r4,r2
    2490:	180b883a 	mov	r5,r3
    2494:	0006c7c0 	call	6c7c <__subdf3>
    2498:	0009883a 	mov	r4,zero
    249c:	014ffc34 	movhi	r5,16368
    24a0:	100d883a 	mov	r6,r2
    24a4:	180f883a 	mov	r7,r3
    24a8:	0006c7c0 	call	6c7c <__subdf3>
    24ac:	d9000217 	ldw	r4,8(sp)
    24b0:	190b883a 	add	r5,r3,r4
    24b4:	2809d53a 	srai	r4,r5,20
    24b8:	0100cd0e 	bge	zero,r4,27f0 <__ieee754_pow+0x1078>
    24bc:	1009883a 	mov	r4,r2
    24c0:	000d883a 	mov	r6,zero
    24c4:	980f883a 	mov	r7,r19
    24c8:	00064100 	call	6410 <__muldf3>
    24cc:	003ce606 	br	1868 <__alt_data_end+0xfffd0b28>
    24d0:	00b00434 	movhi	r2,49168
    24d4:	8885883a 	add	r2,r17,r2
    24d8:	1544b03a 	or	r2,r2,r21
    24dc:	1000b326 	beq	r2,zero,27ac <__ieee754_pow+0x1034>
    24e0:	00800044 	movi	r2,1
    24e4:	a8bd181e 	bne	r21,r2,1948 <__alt_data_end+0xfffd0c08>
    24e8:	18e0003c 	xorhi	r3,r3,32768
    24ec:	b805883a 	mov	r2,r23
    24f0:	003cdd06 	br	1868 <__alt_data_end+0xfffd0b28>
    24f4:	800d883a 	mov	r6,r16
    24f8:	980f883a 	mov	r7,r19
    24fc:	8009883a 	mov	r4,r16
    2500:	980b883a 	mov	r5,r19
    2504:	00064100 	call	6410 <__muldf3>
    2508:	003cd706 	br	1868 <__alt_data_end+0xfffd0b28>
    250c:	05600034 	movhi	r21,32768
    2510:	ad7fffc4 	addi	r21,r21,-1
    2514:	00902474 	movhi	r2,16529
    2518:	1d6a703a 	and	r21,r3,r21
    251c:	10b2ffc4 	addi	r2,r2,-13313
    2520:	15409d0e 	bge	r2,r21,2798 <__ieee754_pow+0x1020>
    2524:	008fdbf4 	movhi	r2,16239
    2528:	108d0004 	addi	r2,r2,13312
    252c:	1885883a 	add	r2,r3,r2
    2530:	15c4b03a 	or	r2,r2,r23
    2534:	10000b1e 	bne	r2,zero,2564 <__ieee754_pow+0xdec>
    2538:	900d883a 	mov	r6,r18
    253c:	880f883a 	mov	r7,r17
    2540:	b809883a 	mov	r4,r23
    2544:	180b883a 	mov	r5,r3
    2548:	0006c7c0 	call	6c7c <__subdf3>
    254c:	100d883a 	mov	r6,r2
    2550:	180f883a 	mov	r7,r3
    2554:	b009883a 	mov	r4,r22
    2558:	a00b883a 	mov	r5,r20
    255c:	000631c0 	call	631c <__ledf2>
    2560:	00befc16 	blt	zero,r2,2154 <__alt_data_end+0xfffd1414>
    2564:	01b0be74 	movhi	r6,49913
    2568:	01c06974 	movhi	r7,421
    256c:	980b883a 	mov	r5,r19
    2570:	31bcd644 	addi	r6,r6,-3239
    2574:	39db87c4 	addi	r7,r7,28191
    2578:	0009883a 	mov	r4,zero
    257c:	00064100 	call	6410 <__muldf3>
    2580:	01b0be74 	movhi	r6,49913
    2584:	01c06974 	movhi	r7,421
    2588:	31bcd644 	addi	r6,r6,-3239
    258c:	39db87c4 	addi	r7,r7,28191
    2590:	1009883a 	mov	r4,r2
    2594:	180b883a 	mov	r5,r3
    2598:	00064100 	call	6410 <__muldf3>
    259c:	003cb206 	br	1868 <__alt_data_end+0xfffd0b28>
    25a0:	04effc34 	movhi	r19,49136
    25a4:	003ea706 	br	2044 <__alt_data_end+0xfffd1304>
    25a8:	e03cdc0e 	bge	fp,zero,191c <__alt_data_end+0xfffd0bdc>
    25ac:	0005883a 	mov	r2,zero
    25b0:	e0e0003c 	xorhi	r3,fp,32768
    25b4:	003cac06 	br	1868 <__alt_data_end+0xfffd0b28>
    25b8:	0019883a 	mov	r12,zero
    25bc:	003d3206 	br	1a88 <__alt_data_end+0xfffd0d48>
    25c0:	008ffc34 	movhi	r2,16368
    25c4:	10bfff84 	addi	r2,r2,-2
    25c8:	147cd30e 	bge	r2,r17,1918 <__alt_data_end+0xfffd0bd8>
    25cc:	01cffc34 	movhi	r7,16368
    25d0:	3c7cea16 	blt	r7,r17,197c <__alt_data_end+0xfffd0c3c>
    25d4:	b809883a 	mov	r4,r23
    25d8:	000d883a 	mov	r6,zero
    25dc:	180b883a 	mov	r5,r3
    25e0:	dac00b15 	stw	r11,44(sp)
    25e4:	0006c7c0 	call	6c7c <__subdf3>
    25e8:	01cffdf4 	movhi	r7,16375
    25ec:	39c551c4 	addi	r7,r7,5447
    25f0:	01980034 	movhi	r6,24576
    25f4:	1009883a 	mov	r4,r2
    25f8:	180b883a 	mov	r5,r3
    25fc:	1023883a 	mov	r17,r2
    2600:	1821883a 	mov	r16,r3
    2604:	00064100 	call	6410 <__muldf3>
    2608:	01be17b4 	movhi	r6,63582
    260c:	01cf9574 	movhi	r7,15957
    2610:	8809883a 	mov	r4,r17
    2614:	800b883a 	mov	r5,r16
    2618:	31b7d104 	addi	r6,r6,-8380
    261c:	39eb82c4 	addi	r7,r7,-20981
    2620:	1027883a 	mov	r19,r2
    2624:	1825883a 	mov	r18,r3
    2628:	00064100 	call	6410 <__muldf3>
    262c:	8809883a 	mov	r4,r17
    2630:	800b883a 	mov	r5,r16
    2634:	000d883a 	mov	r6,zero
    2638:	01cff434 	movhi	r7,16336
    263c:	1829883a 	mov	r20,r3
    2640:	d8800a15 	stw	r2,40(sp)
    2644:	00064100 	call	6410 <__muldf3>
    2648:	01155574 	movhi	r4,21845
    264c:	014ff574 	movhi	r5,16341
    2650:	100d883a 	mov	r6,r2
    2654:	180f883a 	mov	r7,r3
    2658:	21155544 	addi	r4,r4,21845
    265c:	29555544 	addi	r5,r5,21845
    2660:	0006c7c0 	call	6c7c <__subdf3>
    2664:	880d883a 	mov	r6,r17
    2668:	800f883a 	mov	r7,r16
    266c:	1009883a 	mov	r4,r2
    2670:	180b883a 	mov	r5,r3
    2674:	00064100 	call	6410 <__muldf3>
    2678:	100d883a 	mov	r6,r2
    267c:	180f883a 	mov	r7,r3
    2680:	0009883a 	mov	r4,zero
    2684:	014ff834 	movhi	r5,16352
    2688:	0006c7c0 	call	6c7c <__subdf3>
    268c:	880d883a 	mov	r6,r17
    2690:	800f883a 	mov	r7,r16
    2694:	8809883a 	mov	r4,r17
    2698:	800b883a 	mov	r5,r16
    269c:	102f883a 	mov	r23,r2
    26a0:	d8c00815 	stw	r3,32(sp)
    26a4:	00064100 	call	6410 <__muldf3>
    26a8:	da400817 	ldw	r9,32(sp)
    26ac:	100d883a 	mov	r6,r2
    26b0:	180f883a 	mov	r7,r3
    26b4:	480b883a 	mov	r5,r9
    26b8:	b809883a 	mov	r4,r23
    26bc:	00064100 	call	6410 <__muldf3>
    26c0:	01994b34 	movhi	r6,25900
    26c4:	01cffdf4 	movhi	r7,16375
    26c8:	31a0bf84 	addi	r6,r6,-32002
    26cc:	39c551c4 	addi	r7,r7,5447
    26d0:	1009883a 	mov	r4,r2
    26d4:	180b883a 	mov	r5,r3
    26d8:	00064100 	call	6410 <__muldf3>
    26dc:	da000a17 	ldw	r8,40(sp)
    26e0:	a00b883a 	mov	r5,r20
    26e4:	100d883a 	mov	r6,r2
    26e8:	4009883a 	mov	r4,r8
    26ec:	180f883a 	mov	r7,r3
    26f0:	0006c7c0 	call	6c7c <__subdf3>
    26f4:	100d883a 	mov	r6,r2
    26f8:	180f883a 	mov	r7,r3
    26fc:	9809883a 	mov	r4,r19
    2700:	900b883a 	mov	r5,r18
    2704:	1029883a 	mov	r20,r2
    2708:	1823883a 	mov	r17,r3
    270c:	0004f3c0 	call	4f3c <__adddf3>
    2710:	1821883a 	mov	r16,r3
    2714:	980d883a 	mov	r6,r19
    2718:	900f883a 	mov	r7,r18
    271c:	0009883a 	mov	r4,zero
    2720:	180b883a 	mov	r5,r3
    2724:	003e3a06 	br	2010 <__alt_data_end+0xfffd12d0>
    2728:	800d883a 	mov	r6,r16
    272c:	980f883a 	mov	r7,r19
    2730:	0009883a 	mov	r4,zero
    2734:	900b883a 	mov	r5,r18
    2738:	00057e80 	call	57e8 <__divdf3>
    273c:	003c4a06 	br	1868 <__alt_data_end+0xfffd0b28>
    2740:	01a20034 	movhi	r6,34816
    2744:	01df8e34 	movhi	r7,32312
    2748:	980b883a 	mov	r5,r19
    274c:	319d6704 	addi	r6,r6,30108
    2750:	39f90f04 	addi	r7,r7,-7108
    2754:	0009883a 	mov	r4,zero
    2758:	00064100 	call	6410 <__muldf3>
    275c:	01a20034 	movhi	r6,34816
    2760:	01df8e34 	movhi	r7,32312
    2764:	319d6704 	addi	r6,r6,30108
    2768:	39f90f04 	addi	r7,r7,-7108
    276c:	1009883a 	mov	r4,r2
    2770:	180b883a 	mov	r5,r3
    2774:	00064100 	call	6410 <__muldf3>
    2778:	003c3b06 	br	1868 <__alt_data_end+0xfffd0b28>
    277c:	303c551e 	bne	r6,zero,18d4 <__alt_data_end+0xfffd0b94>
    2780:	1885c83a 	sub	r2,r3,r2
    2784:	9087d83a 	sra	r3,r18,r2
    2788:	1884983a 	sll	r2,r3,r2
    278c:	90801f26 	beq	r18,r2,280c <__ieee754_pow+0x1094>
    2790:	002b883a 	mov	r21,zero
    2794:	003c1806 	br	17f8 <__alt_data_end+0xfffd0ab8>
    2798:	008ff834 	movhi	r2,16352
    279c:	157e6d16 	blt	r2,r21,2154 <__alt_data_end+0xfffd1414>
    27a0:	d8000215 	stw	zero,8(sp)
    27a4:	d8000015 	stw	zero,0(sp)
    27a8:	003e8f06 	br	21e8 <__alt_data_end+0xfffd14a8>
    27ac:	b80d883a 	mov	r6,r23
    27b0:	180f883a 	mov	r7,r3
    27b4:	003c9e06 	br	1a30 <__alt_data_end+0xfffd0cf0>
    27b8:	008ff8f4 	movhi	r2,16355
    27bc:	10ae00c4 	addi	r2,r2,-18429
    27c0:	0250f434 	movhi	r9,17360
    27c4:	020f9374 	movhi	r8,15949
    27c8:	d8800215 	stw	r2,8(sp)
    27cc:	4a740184 	addi	r9,r9,-12282
    27d0:	423f7ac4 	addi	r8,r8,-533
    27d4:	04d00034 	movhi	r19,16384
    27d8:	02800134 	movhi	r10,4
    27dc:	048ffe34 	movhi	r18,16376
    27e0:	003cbf06 	br	1ae0 <__alt_data_end+0xfffd0da0>
    27e4:	00c9c83a 	sub	r4,zero,r3
    27e8:	d9000015 	stw	r4,0(sp)
    27ec:	003e6d06 	br	21a4 <__alt_data_end+0xfffd1464>
    27f0:	d9800017 	ldw	r6,0(sp)
    27f4:	1009883a 	mov	r4,r2
    27f8:	180b883a 	mov	r5,r3
    27fc:	0004ba80 	call	4ba8 <scalbn>
    2800:	1009883a 	mov	r4,r2
    2804:	180b883a 	mov	r5,r3
    2808:	003f2d06 	br	24c0 <__alt_data_end+0xfffd1780>
    280c:	18c0004c 	andi	r3,r3,1
    2810:	02800084 	movi	r10,2
    2814:	50ebc83a 	sub	r21,r10,r3
    2818:	003bf706 	br	17f8 <__alt_data_end+0xfffd0ab8>

0000281c <__ieee754_rem_pio2>:
    281c:	02200034 	movhi	r8,32768
    2820:	deffea04 	addi	sp,sp,-88
    2824:	423fffc4 	addi	r8,r8,-1
    2828:	00cffa74 	movhi	r3,16361
    282c:	ddc01315 	stw	r23,76(sp)
    2830:	dc400d15 	stw	r17,52(sp)
    2834:	dfc01515 	stw	ra,84(sp)
    2838:	df001415 	stw	fp,80(sp)
    283c:	dd801215 	stw	r22,72(sp)
    2840:	dd401115 	stw	r21,68(sp)
    2844:	dd001015 	stw	r20,64(sp)
    2848:	dcc00f15 	stw	r19,60(sp)
    284c:	dc800e15 	stw	r18,56(sp)
    2850:	dc000c15 	stw	r16,48(sp)
    2854:	2a2e703a 	and	r23,r5,r8
    2858:	18c87ec4 	addi	r3,r3,8699
    285c:	2823883a 	mov	r17,r5
    2860:	1dc0790e 	bge	r3,r23,2a48 <__ieee754_rem_pio2+0x22c>
    2864:	009000f4 	movhi	r2,16387
    2868:	10b65ec4 	addi	r2,r2,-9861
    286c:	3021883a 	mov	r16,r6
    2870:	2027883a 	mov	r19,r4
    2874:	15c02316 	blt	r2,r23,2904 <__ieee754_rem_pio2+0xe8>
    2878:	01cffe74 	movhi	r7,16377
    287c:	39c87ec4 	addi	r7,r7,8699
    2880:	01951034 	movhi	r6,21568
    2884:	01417a0e 	bge	zero,r5,2e70 <__ieee754_rem_pio2+0x654>
    2888:	0006c7c0 	call	6c7c <__subdf3>
    288c:	1025883a 	mov	r18,r2
    2890:	008ffe74 	movhi	r2,16377
    2894:	10887ec4 	addi	r2,r2,8699
    2898:	1823883a 	mov	r17,r3
    289c:	b8808426 	beq	r23,r2,2ab0 <__ieee754_rem_pio2+0x294>
    28a0:	018698b4 	movhi	r6,6754
    28a4:	01cf7474 	movhi	r7,15825
    28a8:	3198cc44 	addi	r6,r6,25393
    28ac:	39ed1844 	addi	r7,r7,-19359
    28b0:	9009883a 	mov	r4,r18
    28b4:	180b883a 	mov	r5,r3
    28b8:	0006c7c0 	call	6c7c <__subdf3>
    28bc:	100d883a 	mov	r6,r2
    28c0:	180f883a 	mov	r7,r3
    28c4:	9009883a 	mov	r4,r18
    28c8:	880b883a 	mov	r5,r17
    28cc:	80800015 	stw	r2,0(r16)
    28d0:	80c00115 	stw	r3,4(r16)
    28d4:	0006c7c0 	call	6c7c <__subdf3>
    28d8:	018698b4 	movhi	r6,6754
    28dc:	01cf7474 	movhi	r7,15825
    28e0:	3198cc44 	addi	r6,r6,25393
    28e4:	39ed1844 	addi	r7,r7,-19359
    28e8:	1009883a 	mov	r4,r2
    28ec:	180b883a 	mov	r5,r3
    28f0:	0006c7c0 	call	6c7c <__subdf3>
    28f4:	80800215 	stw	r2,8(r16)
    28f8:	80c00315 	stw	r3,12(r16)
    28fc:	00800044 	movi	r2,1
    2900:	00005606 	br	2a5c <__ieee754_rem_pio2+0x240>
    2904:	00904e74 	movhi	r2,16697
    2908:	10887ec4 	addi	r2,r2,8699
    290c:	15c0830e 	bge	r2,r23,2b1c <__ieee754_rem_pio2+0x300>
    2910:	009ffc34 	movhi	r2,32752
    2914:	10bfffc4 	addi	r2,r2,-1
    2918:	15c05c16 	blt	r2,r23,2a8c <__ieee754_rem_pio2+0x270>
    291c:	b829d53a 	srai	r20,r23,20
    2920:	a53efa84 	addi	r20,r20,-1046
    2924:	a024953a 	slli	r18,r20,20
    2928:	bca5c83a 	sub	r18,r23,r18
    292c:	900b883a 	mov	r5,r18
    2930:	00075780 	call	7578 <__fixdfsi>
    2934:	1009883a 	mov	r4,r2
    2938:	00075f80 	call	75f8 <__floatsidf>
    293c:	9809883a 	mov	r4,r19
    2940:	900b883a 	mov	r5,r18
    2944:	100d883a 	mov	r6,r2
    2948:	180f883a 	mov	r7,r3
    294c:	d8800215 	stw	r2,8(sp)
    2950:	d8c00315 	stw	r3,12(sp)
    2954:	0006c7c0 	call	6c7c <__subdf3>
    2958:	000d883a 	mov	r6,zero
    295c:	01d05c34 	movhi	r7,16752
    2960:	1009883a 	mov	r4,r2
    2964:	180b883a 	mov	r5,r3
    2968:	00064100 	call	6410 <__muldf3>
    296c:	180b883a 	mov	r5,r3
    2970:	1009883a 	mov	r4,r2
    2974:	182b883a 	mov	r21,r3
    2978:	102d883a 	mov	r22,r2
    297c:	00075780 	call	7578 <__fixdfsi>
    2980:	1009883a 	mov	r4,r2
    2984:	00075f80 	call	75f8 <__floatsidf>
    2988:	100d883a 	mov	r6,r2
    298c:	180f883a 	mov	r7,r3
    2990:	b009883a 	mov	r4,r22
    2994:	a80b883a 	mov	r5,r21
    2998:	1027883a 	mov	r19,r2
    299c:	1825883a 	mov	r18,r3
    29a0:	d8800415 	stw	r2,16(sp)
    29a4:	d8c00515 	stw	r3,20(sp)
    29a8:	0006c7c0 	call	6c7c <__subdf3>
    29ac:	000d883a 	mov	r6,zero
    29b0:	01d05c34 	movhi	r7,16752
    29b4:	1009883a 	mov	r4,r2
    29b8:	180b883a 	mov	r5,r3
    29bc:	00064100 	call	6410 <__muldf3>
    29c0:	000d883a 	mov	r6,zero
    29c4:	000f883a 	mov	r7,zero
    29c8:	1009883a 	mov	r4,r2
    29cc:	180b883a 	mov	r5,r3
    29d0:	d8800615 	stw	r2,24(sp)
    29d4:	d8c00715 	stw	r3,28(sp)
    29d8:	00061b80 	call	61b8 <__eqdf2>
    29dc:	1001431e 	bne	r2,zero,2eec <__ieee754_rem_pio2+0x6d0>
    29e0:	000f883a 	mov	r7,zero
    29e4:	000d883a 	mov	r6,zero
    29e8:	9809883a 	mov	r4,r19
    29ec:	900b883a 	mov	r5,r18
    29f0:	00061b80 	call	61b8 <__eqdf2>
    29f4:	100f003a 	cmpeq	r7,r2,zero
    29f8:	00800084 	movi	r2,2
    29fc:	11cfc83a 	sub	r7,r2,r7
    2a00:	00800084 	movi	r2,2
    2a04:	d8800015 	stw	r2,0(sp)
    2a08:	008000b4 	movhi	r2,2
    2a0c:	10b18904 	addi	r2,r2,-14812
    2a10:	d8800115 	stw	r2,4(sp)
    2a14:	a00d883a 	mov	r6,r20
    2a18:	800b883a 	mov	r5,r16
    2a1c:	d9000204 	addi	r4,sp,8
    2a20:	00036b40 	call	36b4 <__kernel_rem_pio2>
    2a24:	88000d0e 	bge	r17,zero,2a5c <__ieee754_rem_pio2+0x240>
    2a28:	81000117 	ldw	r4,4(r16)
    2a2c:	80c00317 	ldw	r3,12(r16)
    2a30:	0085c83a 	sub	r2,zero,r2
    2a34:	2120003c 	xorhi	r4,r4,32768
    2a38:	18e0003c 	xorhi	r3,r3,32768
    2a3c:	81000115 	stw	r4,4(r16)
    2a40:	80c00315 	stw	r3,12(r16)
    2a44:	00000506 	br	2a5c <__ieee754_rem_pio2+0x240>
    2a48:	31000015 	stw	r4,0(r6)
    2a4c:	31400115 	stw	r5,4(r6)
    2a50:	30000215 	stw	zero,8(r6)
    2a54:	30000315 	stw	zero,12(r6)
    2a58:	0005883a 	mov	r2,zero
    2a5c:	dfc01517 	ldw	ra,84(sp)
    2a60:	df001417 	ldw	fp,80(sp)
    2a64:	ddc01317 	ldw	r23,76(sp)
    2a68:	dd801217 	ldw	r22,72(sp)
    2a6c:	dd401117 	ldw	r21,68(sp)
    2a70:	dd001017 	ldw	r20,64(sp)
    2a74:	dcc00f17 	ldw	r19,60(sp)
    2a78:	dc800e17 	ldw	r18,56(sp)
    2a7c:	dc400d17 	ldw	r17,52(sp)
    2a80:	dc000c17 	ldw	r16,48(sp)
    2a84:	dec01604 	addi	sp,sp,88
    2a88:	f800283a 	ret
    2a8c:	200d883a 	mov	r6,r4
    2a90:	280f883a 	mov	r7,r5
    2a94:	0006c7c0 	call	6c7c <__subdf3>
    2a98:	80800215 	stw	r2,8(r16)
    2a9c:	80800015 	stw	r2,0(r16)
    2aa0:	80c00315 	stw	r3,12(r16)
    2aa4:	80c00115 	stw	r3,4(r16)
    2aa8:	0005883a 	mov	r2,zero
    2aac:	003feb06 	br	2a5c <__alt_data_end+0xfffd1d1c>
    2ab0:	01cf7474 	movhi	r7,15825
    2ab4:	9009883a 	mov	r4,r18
    2ab8:	39ed1844 	addi	r7,r7,-19359
    2abc:	01869834 	movhi	r6,6752
    2ac0:	180b883a 	mov	r5,r3
    2ac4:	0006c7c0 	call	6c7c <__subdf3>
    2ac8:	018b80f4 	movhi	r6,11779
    2acc:	01cee8f4 	movhi	r7,15267
    2ad0:	319c1cc4 	addi	r6,r6,28787
    2ad4:	39c66284 	addi	r7,r7,6538
    2ad8:	1009883a 	mov	r4,r2
    2adc:	180b883a 	mov	r5,r3
    2ae0:	1025883a 	mov	r18,r2
    2ae4:	1823883a 	mov	r17,r3
    2ae8:	0006c7c0 	call	6c7c <__subdf3>
    2aec:	100d883a 	mov	r6,r2
    2af0:	180f883a 	mov	r7,r3
    2af4:	9009883a 	mov	r4,r18
    2af8:	880b883a 	mov	r5,r17
    2afc:	80800015 	stw	r2,0(r16)
    2b00:	80c00115 	stw	r3,4(r16)
    2b04:	0006c7c0 	call	6c7c <__subdf3>
    2b08:	018b80f4 	movhi	r6,11779
    2b0c:	01cee8f4 	movhi	r7,15267
    2b10:	319c1cc4 	addi	r6,r6,28787
    2b14:	39c66284 	addi	r7,r7,6538
    2b18:	003f7306 	br	28e8 <__alt_data_end+0xfffd1ba8>
    2b1c:	00047180 	call	4718 <fabs>
    2b20:	019b72b4 	movhi	r6,28106
    2b24:	01cff934 	movhi	r7,16356
    2b28:	31b220c4 	addi	r6,r6,-14205
    2b2c:	39d7cc04 	addi	r7,r7,24368
    2b30:	1009883a 	mov	r4,r2
    2b34:	180b883a 	mov	r5,r3
    2b38:	102d883a 	mov	r22,r2
    2b3c:	182b883a 	mov	r21,r3
    2b40:	00064100 	call	6410 <__muldf3>
    2b44:	000d883a 	mov	r6,zero
    2b48:	01cff834 	movhi	r7,16352
    2b4c:	1009883a 	mov	r4,r2
    2b50:	180b883a 	mov	r5,r3
    2b54:	0004f3c0 	call	4f3c <__adddf3>
    2b58:	180b883a 	mov	r5,r3
    2b5c:	1009883a 	mov	r4,r2
    2b60:	00075780 	call	7578 <__fixdfsi>
    2b64:	1009883a 	mov	r4,r2
    2b68:	1025883a 	mov	r18,r2
    2b6c:	00075f80 	call	75f8 <__floatsidf>
    2b70:	01cffe74 	movhi	r7,16377
    2b74:	39c87ec4 	addi	r7,r7,8699
    2b78:	01951034 	movhi	r6,21568
    2b7c:	1009883a 	mov	r4,r2
    2b80:	180b883a 	mov	r5,r3
    2b84:	1029883a 	mov	r20,r2
    2b88:	1827883a 	mov	r19,r3
    2b8c:	00064100 	call	6410 <__muldf3>
    2b90:	b009883a 	mov	r4,r22
    2b94:	a80b883a 	mov	r5,r21
    2b98:	100d883a 	mov	r6,r2
    2b9c:	180f883a 	mov	r7,r3
    2ba0:	0006c7c0 	call	6c7c <__subdf3>
    2ba4:	018698b4 	movhi	r6,6754
    2ba8:	01cf7474 	movhi	r7,15825
    2bac:	a009883a 	mov	r4,r20
    2bb0:	3198cc44 	addi	r6,r6,25393
    2bb4:	39ed1844 	addi	r7,r7,-19359
    2bb8:	980b883a 	mov	r5,r19
    2bbc:	1039883a 	mov	fp,r2
    2bc0:	d8c00815 	stw	r3,32(sp)
    2bc4:	00064100 	call	6410 <__muldf3>
    2bc8:	010007c4 	movi	r4,31
    2bcc:	e017883a 	mov	r11,fp
    2bd0:	da800817 	ldw	r10,32(sp)
    2bd4:	102d883a 	mov	r22,r2
    2bd8:	182b883a 	mov	r21,r3
    2bdc:	24802816 	blt	r4,r18,2c80 <__ieee754_rem_pio2+0x464>
    2be0:	913fffc4 	addi	r4,r18,-1
    2be4:	2109883a 	add	r4,r4,r4
    2be8:	014000b4 	movhi	r5,2
    2bec:	2109883a 	add	r4,r4,r4
    2bf0:	29716904 	addi	r5,r5,-14940
    2bf4:	2909883a 	add	r4,r5,r4
    2bf8:	21000017 	ldw	r4,0(r4)
    2bfc:	b9002026 	beq	r23,r4,2c80 <__ieee754_rem_pio2+0x464>
    2c00:	100d883a 	mov	r6,r2
    2c04:	180f883a 	mov	r7,r3
    2c08:	e009883a 	mov	r4,fp
    2c0c:	500b883a 	mov	r5,r10
    2c10:	da800b15 	stw	r10,44(sp)
    2c14:	df000a15 	stw	fp,40(sp)
    2c18:	0006c7c0 	call	6c7c <__subdf3>
    2c1c:	da800b17 	ldw	r10,44(sp)
    2c20:	dac00a17 	ldw	r11,40(sp)
    2c24:	1019883a 	mov	r12,r2
    2c28:	1813883a 	mov	r9,r3
    2c2c:	80800015 	stw	r2,0(r16)
    2c30:	80c00115 	stw	r3,4(r16)
    2c34:	600d883a 	mov	r6,r12
    2c38:	480f883a 	mov	r7,r9
    2c3c:	5809883a 	mov	r4,r11
    2c40:	500b883a 	mov	r5,r10
    2c44:	da400b15 	stw	r9,44(sp)
    2c48:	db000a15 	stw	r12,40(sp)
    2c4c:	0006c7c0 	call	6c7c <__subdf3>
    2c50:	b00d883a 	mov	r6,r22
    2c54:	a80f883a 	mov	r7,r21
    2c58:	1009883a 	mov	r4,r2
    2c5c:	180b883a 	mov	r5,r3
    2c60:	0006c7c0 	call	6c7c <__subdf3>
    2c64:	80800215 	stw	r2,8(r16)
    2c68:	80c00315 	stw	r3,12(r16)
    2c6c:	da400b17 	ldw	r9,44(sp)
    2c70:	db000a17 	ldw	r12,40(sp)
    2c74:	88009f16 	blt	r17,zero,2ef4 <__ieee754_rem_pio2+0x6d8>
    2c78:	9005883a 	mov	r2,r18
    2c7c:	003f7706 	br	2a5c <__alt_data_end+0xfffd1d1c>
    2c80:	d9400817 	ldw	r5,32(sp)
    2c84:	100d883a 	mov	r6,r2
    2c88:	180f883a 	mov	r7,r3
    2c8c:	e009883a 	mov	r4,fp
    2c90:	da800b15 	stw	r10,44(sp)
    2c94:	dac00a15 	stw	r11,40(sp)
    2c98:	0006c7c0 	call	6c7c <__subdf3>
    2c9c:	1019883a 	mov	r12,r2
    2ca0:	1804d53a 	srli	r2,r3,20
    2ca4:	b811d53a 	srai	r8,r23,20
    2ca8:	1813883a 	mov	r9,r3
    2cac:	1081ffcc 	andi	r2,r2,2047
    2cb0:	80c00115 	stw	r3,4(r16)
    2cb4:	83000015 	stw	r12,0(r16)
    2cb8:	4085c83a 	sub	r2,r8,r2
    2cbc:	00c00404 	movi	r3,16
    2cc0:	da800b17 	ldw	r10,44(sp)
    2cc4:	dac00a17 	ldw	r11,40(sp)
    2cc8:	18bfda0e 	bge	r3,r2,2c34 <__alt_data_end+0xfffd1ef4>
    2ccc:	01cf7474 	movhi	r7,15825
    2cd0:	39ed1844 	addi	r7,r7,-19359
    2cd4:	01869834 	movhi	r6,6752
    2cd8:	a009883a 	mov	r4,r20
    2cdc:	980b883a 	mov	r5,r19
    2ce0:	da000a15 	stw	r8,40(sp)
    2ce4:	00064100 	call	6410 <__muldf3>
    2ce8:	d9400817 	ldw	r5,32(sp)
    2cec:	100d883a 	mov	r6,r2
    2cf0:	180f883a 	mov	r7,r3
    2cf4:	e009883a 	mov	r4,fp
    2cf8:	102d883a 	mov	r22,r2
    2cfc:	182b883a 	mov	r21,r3
    2d00:	0006c7c0 	call	6c7c <__subdf3>
    2d04:	d9400817 	ldw	r5,32(sp)
    2d08:	100d883a 	mov	r6,r2
    2d0c:	180f883a 	mov	r7,r3
    2d10:	e009883a 	mov	r4,fp
    2d14:	182f883a 	mov	r23,r3
    2d18:	d8800915 	stw	r2,36(sp)
    2d1c:	0006c7c0 	call	6c7c <__subdf3>
    2d20:	b00d883a 	mov	r6,r22
    2d24:	a80f883a 	mov	r7,r21
    2d28:	1009883a 	mov	r4,r2
    2d2c:	180b883a 	mov	r5,r3
    2d30:	0006c7c0 	call	6c7c <__subdf3>
    2d34:	018b80f4 	movhi	r6,11779
    2d38:	01cee8f4 	movhi	r7,15267
    2d3c:	319c1cc4 	addi	r6,r6,28787
    2d40:	39c66284 	addi	r7,r7,6538
    2d44:	a009883a 	mov	r4,r20
    2d48:	980b883a 	mov	r5,r19
    2d4c:	102d883a 	mov	r22,r2
    2d50:	182b883a 	mov	r21,r3
    2d54:	00064100 	call	6410 <__muldf3>
    2d58:	b00d883a 	mov	r6,r22
    2d5c:	a80f883a 	mov	r7,r21
    2d60:	1009883a 	mov	r4,r2
    2d64:	180b883a 	mov	r5,r3
    2d68:	0006c7c0 	call	6c7c <__subdf3>
    2d6c:	d9000917 	ldw	r4,36(sp)
    2d70:	100d883a 	mov	r6,r2
    2d74:	180f883a 	mov	r7,r3
    2d78:	b80b883a 	mov	r5,r23
    2d7c:	102d883a 	mov	r22,r2
    2d80:	182b883a 	mov	r21,r3
    2d84:	0006c7c0 	call	6c7c <__subdf3>
    2d88:	1019883a 	mov	r12,r2
    2d8c:	1804d53a 	srli	r2,r3,20
    2d90:	da000a17 	ldw	r8,40(sp)
    2d94:	83000015 	stw	r12,0(r16)
    2d98:	1081ffcc 	andi	r2,r2,2047
    2d9c:	4091c83a 	sub	r8,r8,r2
    2da0:	80c00115 	stw	r3,4(r16)
    2da4:	00800c44 	movi	r2,49
    2da8:	1813883a 	mov	r9,r3
    2dac:	1200730e 	bge	r2,r8,2f7c <__ieee754_rem_pio2+0x760>
    2db0:	01cee8f4 	movhi	r7,15267
    2db4:	39c66284 	addi	r7,r7,6538
    2db8:	018b8034 	movhi	r6,11776
    2dbc:	a009883a 	mov	r4,r20
    2dc0:	980b883a 	mov	r5,r19
    2dc4:	00064100 	call	6410 <__muldf3>
    2dc8:	d9000917 	ldw	r4,36(sp)
    2dcc:	100d883a 	mov	r6,r2
    2dd0:	180f883a 	mov	r7,r3
    2dd4:	b80b883a 	mov	r5,r23
    2dd8:	102d883a 	mov	r22,r2
    2ddc:	182b883a 	mov	r21,r3
    2de0:	0006c7c0 	call	6c7c <__subdf3>
    2de4:	d9000917 	ldw	r4,36(sp)
    2de8:	100d883a 	mov	r6,r2
    2dec:	180f883a 	mov	r7,r3
    2df0:	b80b883a 	mov	r5,r23
    2df4:	d8c00b15 	stw	r3,44(sp)
    2df8:	d8800a15 	stw	r2,40(sp)
    2dfc:	0006c7c0 	call	6c7c <__subdf3>
    2e00:	b00d883a 	mov	r6,r22
    2e04:	a80f883a 	mov	r7,r21
    2e08:	1009883a 	mov	r4,r2
    2e0c:	180b883a 	mov	r5,r3
    2e10:	0006c7c0 	call	6c7c <__subdf3>
    2e14:	01894834 	movhi	r6,9504
    2e18:	01ce5f34 	movhi	r7,14716
    2e1c:	31927044 	addi	r6,r6,18881
    2e20:	39e0e684 	addi	r7,r7,-31846
    2e24:	a009883a 	mov	r4,r20
    2e28:	980b883a 	mov	r5,r19
    2e2c:	102d883a 	mov	r22,r2
    2e30:	182b883a 	mov	r21,r3
    2e34:	00064100 	call	6410 <__muldf3>
    2e38:	b00d883a 	mov	r6,r22
    2e3c:	a80f883a 	mov	r7,r21
    2e40:	1009883a 	mov	r4,r2
    2e44:	180b883a 	mov	r5,r3
    2e48:	0006c7c0 	call	6c7c <__subdf3>
    2e4c:	dac00a17 	ldw	r11,40(sp)
    2e50:	da800b17 	ldw	r10,44(sp)
    2e54:	102d883a 	mov	r22,r2
    2e58:	182b883a 	mov	r21,r3
    2e5c:	100d883a 	mov	r6,r2
    2e60:	180f883a 	mov	r7,r3
    2e64:	5809883a 	mov	r4,r11
    2e68:	500b883a 	mov	r5,r10
    2e6c:	003f6a06 	br	2c18 <__alt_data_end+0xfffd1ed8>
    2e70:	0004f3c0 	call	4f3c <__adddf3>
    2e74:	1025883a 	mov	r18,r2
    2e78:	008ffe74 	movhi	r2,16377
    2e7c:	10887ec4 	addi	r2,r2,8699
    2e80:	1823883a 	mov	r17,r3
    2e84:	b8802226 	beq	r23,r2,2f10 <__ieee754_rem_pio2+0x6f4>
    2e88:	018698b4 	movhi	r6,6754
    2e8c:	01cf7474 	movhi	r7,15825
    2e90:	3198cc44 	addi	r6,r6,25393
    2e94:	39ed1844 	addi	r7,r7,-19359
    2e98:	9009883a 	mov	r4,r18
    2e9c:	180b883a 	mov	r5,r3
    2ea0:	0004f3c0 	call	4f3c <__adddf3>
    2ea4:	100d883a 	mov	r6,r2
    2ea8:	180f883a 	mov	r7,r3
    2eac:	9009883a 	mov	r4,r18
    2eb0:	880b883a 	mov	r5,r17
    2eb4:	80800015 	stw	r2,0(r16)
    2eb8:	80c00115 	stw	r3,4(r16)
    2ebc:	0006c7c0 	call	6c7c <__subdf3>
    2ec0:	018698b4 	movhi	r6,6754
    2ec4:	01cf7474 	movhi	r7,15825
    2ec8:	3198cc44 	addi	r6,r6,25393
    2ecc:	39ed1844 	addi	r7,r7,-19359
    2ed0:	1009883a 	mov	r4,r2
    2ed4:	180b883a 	mov	r5,r3
    2ed8:	0004f3c0 	call	4f3c <__adddf3>
    2edc:	80800215 	stw	r2,8(r16)
    2ee0:	80c00315 	stw	r3,12(r16)
    2ee4:	00bfffc4 	movi	r2,-1
    2ee8:	003edc06 	br	2a5c <__alt_data_end+0xfffd1d1c>
    2eec:	01c000c4 	movi	r7,3
    2ef0:	003ec306 	br	2a00 <__alt_data_end+0xfffd1cc0>
    2ef4:	4a60003c 	xorhi	r9,r9,32768
    2ef8:	18e0003c 	xorhi	r3,r3,32768
    2efc:	83000015 	stw	r12,0(r16)
    2f00:	82400115 	stw	r9,4(r16)
    2f04:	80c00315 	stw	r3,12(r16)
    2f08:	0485c83a 	sub	r2,zero,r18
    2f0c:	003ed306 	br	2a5c <__alt_data_end+0xfffd1d1c>
    2f10:	01cf7474 	movhi	r7,15825
    2f14:	9009883a 	mov	r4,r18
    2f18:	39ed1844 	addi	r7,r7,-19359
    2f1c:	01869834 	movhi	r6,6752
    2f20:	180b883a 	mov	r5,r3
    2f24:	0004f3c0 	call	4f3c <__adddf3>
    2f28:	018b80f4 	movhi	r6,11779
    2f2c:	01cee8f4 	movhi	r7,15267
    2f30:	319c1cc4 	addi	r6,r6,28787
    2f34:	39c66284 	addi	r7,r7,6538
    2f38:	1009883a 	mov	r4,r2
    2f3c:	180b883a 	mov	r5,r3
    2f40:	1025883a 	mov	r18,r2
    2f44:	1823883a 	mov	r17,r3
    2f48:	0004f3c0 	call	4f3c <__adddf3>
    2f4c:	100d883a 	mov	r6,r2
    2f50:	180f883a 	mov	r7,r3
    2f54:	9009883a 	mov	r4,r18
    2f58:	880b883a 	mov	r5,r17
    2f5c:	80800015 	stw	r2,0(r16)
    2f60:	80c00115 	stw	r3,4(r16)
    2f64:	0006c7c0 	call	6c7c <__subdf3>
    2f68:	018b80f4 	movhi	r6,11779
    2f6c:	01cee8f4 	movhi	r7,15267
    2f70:	319c1cc4 	addi	r6,r6,28787
    2f74:	39c66284 	addi	r7,r7,6538
    2f78:	003fd506 	br	2ed0 <__alt_data_end+0xfffd2190>
    2f7c:	dac00917 	ldw	r11,36(sp)
    2f80:	b815883a 	mov	r10,r23
    2f84:	003f2b06 	br	2c34 <__alt_data_end+0xfffd1ef4>

00002f88 <__ieee754_sqrt>:
    2f88:	defffd04 	addi	sp,sp,-12
    2f8c:	dc400115 	stw	r17,4(sp)
    2f90:	dc000015 	stw	r16,0(sp)
    2f94:	dfc00215 	stw	ra,8(sp)
    2f98:	28dffc2c 	andhi	r3,r5,32752
    2f9c:	009ffc34 	movhi	r2,32752
    2fa0:	2821883a 	mov	r16,r5
    2fa4:	2023883a 	mov	r17,r4
    2fa8:	200d883a 	mov	r6,r4
    2fac:	18807b26 	beq	r3,r2,319c <__ieee754_sqrt+0x214>
    2fb0:	01405f0e 	bge	zero,r5,3130 <__ieee754_sqrt+0x1a8>
    2fb4:	2815d53a 	srai	r10,r5,20
    2fb8:	50006a26 	beq	r10,zero,3164 <__ieee754_sqrt+0x1dc>
    2fbc:	00c00434 	movhi	r3,16
    2fc0:	52bf0044 	addi	r10,r10,-1023
    2fc4:	18ffffc4 	addi	r3,r3,-1
    2fc8:	80c6703a 	and	r3,r16,r3
    2fcc:	5080004c 	andi	r2,r10,1
    2fd0:	18c00434 	orhi	r3,r3,16
    2fd4:	1000511e 	bne	r2,zero,311c <__ieee754_sqrt+0x194>
    2fd8:	3004d7fa 	srli	r2,r6,31
    2fdc:	5015d07a 	srai	r10,r10,1
    2fe0:	18c7883a 	add	r3,r3,r3
    2fe4:	10c5883a 	add	r2,r2,r3
    2fe8:	01400584 	movi	r5,22
    2fec:	3187883a 	add	r3,r6,r6
    2ff0:	0013883a 	mov	r9,zero
    2ff4:	000f883a 	mov	r7,zero
    2ff8:	01000834 	movhi	r4,32
    2ffc:	390d883a 	add	r6,r7,r4
    3000:	1810d7fa 	srli	r8,r3,31
    3004:	297fffc4 	addi	r5,r5,-1
    3008:	11800316 	blt	r2,r6,3018 <__ieee754_sqrt+0x90>
    300c:	1185c83a 	sub	r2,r2,r6
    3010:	310f883a 	add	r7,r6,r4
    3014:	4913883a 	add	r9,r9,r4
    3018:	1085883a 	add	r2,r2,r2
    301c:	4085883a 	add	r2,r8,r2
    3020:	18c7883a 	add	r3,r3,r3
    3024:	2008d07a 	srli	r4,r4,1
    3028:	283ff41e 	bne	r5,zero,2ffc <__alt_data_end+0xfffd22bc>
    302c:	01200034 	movhi	r4,32768
    3030:	01800804 	movi	r6,32
    3034:	0011883a 	mov	r8,zero
    3038:	0019883a 	mov	r12,zero
    303c:	201b883a 	mov	r13,r4
    3040:	00000806 	br	3064 <__ieee754_sqrt+0xdc>
    3044:	38801726 	beq	r7,r2,30a4 <__ieee754_sqrt+0x11c>
    3048:	180ad7fa 	srli	r5,r3,31
    304c:	1085883a 	add	r2,r2,r2
    3050:	31bfffc4 	addi	r6,r6,-1
    3054:	2885883a 	add	r2,r5,r2
    3058:	18c7883a 	add	r3,r3,r3
    305c:	2008d07a 	srli	r4,r4,1
    3060:	30001726 	beq	r6,zero,30c0 <__ieee754_sqrt+0x138>
    3064:	230b883a 	add	r5,r4,r12
    3068:	38bff60e 	bge	r7,r2,3044 <__alt_data_end+0xfffd2304>
    306c:	2ae0002c 	andhi	r11,r5,32768
    3070:	2919883a 	add	r12,r5,r4
    3074:	5b400826 	beq	r11,r13,3098 <__ieee754_sqrt+0x110>
    3078:	3817883a 	mov	r11,r7
    307c:	11c5c83a 	sub	r2,r2,r7
    3080:	1940012e 	bgeu	r3,r5,3088 <__ieee754_sqrt+0x100>
    3084:	10bfffc4 	addi	r2,r2,-1
    3088:	1947c83a 	sub	r3,r3,r5
    308c:	4111883a 	add	r8,r8,r4
    3090:	580f883a 	mov	r7,r11
    3094:	003fec06 	br	3048 <__alt_data_end+0xfffd2308>
    3098:	603ff716 	blt	r12,zero,3078 <__alt_data_end+0xfffd2338>
    309c:	3ac00044 	addi	r11,r7,1
    30a0:	003ff606 	br	307c <__alt_data_end+0xfffd233c>
    30a4:	19401936 	bltu	r3,r5,310c <__ieee754_sqrt+0x184>
    30a8:	2ae0002c 	andhi	r11,r5,32768
    30ac:	2919883a 	add	r12,r5,r4
    30b0:	5b404526 	beq	r11,r13,31c8 <__ieee754_sqrt+0x240>
    30b4:	1017883a 	mov	r11,r2
    30b8:	0005883a 	mov	r2,zero
    30bc:	003ff206 	br	3088 <__alt_data_end+0xfffd2348>
    30c0:	10c4b03a 	or	r2,r2,r3
    30c4:	10000426 	beq	r2,zero,30d8 <__ieee754_sqrt+0x150>
    30c8:	00bfffc4 	movi	r2,-1
    30cc:	40804026 	beq	r8,r2,31d0 <__ieee754_sqrt+0x248>
    30d0:	4080004c 	andi	r2,r8,1
    30d4:	4091883a 	add	r8,r8,r2
    30d8:	4004d07a 	srli	r2,r8,1
    30dc:	4807d07a 	srai	r3,r9,1
    30e0:	010ff834 	movhi	r4,16352
    30e4:	4a40004c 	andi	r9,r9,1
    30e8:	1909883a 	add	r4,r3,r4
    30ec:	4800091e 	bne	r9,zero,3114 <__ieee754_sqrt+0x18c>
    30f0:	5006953a 	slli	r3,r10,20
    30f4:	1907883a 	add	r3,r3,r4
    30f8:	dfc00217 	ldw	ra,8(sp)
    30fc:	dc400117 	ldw	r17,4(sp)
    3100:	dc000017 	ldw	r16,0(sp)
    3104:	dec00304 	addi	sp,sp,12
    3108:	f800283a 	ret
    310c:	3805883a 	mov	r2,r7
    3110:	003fcd06 	br	3048 <__alt_data_end+0xfffd2308>
    3114:	10a00034 	orhi	r2,r2,32768
    3118:	003ff506 	br	30f0 <__alt_data_end+0xfffd23b0>
    311c:	3004d7fa 	srli	r2,r6,31
    3120:	18c7883a 	add	r3,r3,r3
    3124:	318d883a 	add	r6,r6,r6
    3128:	10c7883a 	add	r3,r2,r3
    312c:	003faa06 	br	2fd8 <__alt_data_end+0xfffd2298>
    3130:	00a00034 	movhi	r2,32768
    3134:	10bfffc4 	addi	r2,r2,-1
    3138:	2884703a 	and	r2,r5,r2
    313c:	1104b03a 	or	r2,r2,r4
    3140:	10001e26 	beq	r2,zero,31bc <__ieee754_sqrt+0x234>
    3144:	2800291e 	bne	r5,zero,31ec <__ieee754_sqrt+0x264>
    3148:	0015883a 	mov	r10,zero
    314c:	3020d2fa 	srli	r16,r6,11
    3150:	52bffac4 	addi	r10,r10,-21
    3154:	300c957a 	slli	r6,r6,21
    3158:	803ffc26 	beq	r16,zero,314c <__alt_data_end+0xfffd240c>
    315c:	8080042c 	andhi	r2,r16,16
    3160:	10001e1e 	bne	r2,zero,31dc <__ieee754_sqrt+0x254>
    3164:	0005883a 	mov	r2,zero
    3168:	00000106 	br	3170 <__ieee754_sqrt+0x1e8>
    316c:	1805883a 	mov	r2,r3
    3170:	8421883a 	add	r16,r16,r16
    3174:	8100042c 	andhi	r4,r16,16
    3178:	10c00044 	addi	r3,r2,1
    317c:	203ffb26 	beq	r4,zero,316c <__alt_data_end+0xfffd242c>
    3180:	01000804 	movi	r4,32
    3184:	20c9c83a 	sub	r4,r4,r3
    3188:	3108d83a 	srl	r4,r6,r4
    318c:	5095c83a 	sub	r10,r10,r2
    3190:	30cc983a 	sll	r6,r6,r3
    3194:	2420b03a 	or	r16,r4,r16
    3198:	003f8806 	br	2fbc <__alt_data_end+0xfffd227c>
    319c:	280f883a 	mov	r7,r5
    31a0:	00064100 	call	6410 <__muldf3>
    31a4:	880d883a 	mov	r6,r17
    31a8:	800f883a 	mov	r7,r16
    31ac:	1009883a 	mov	r4,r2
    31b0:	180b883a 	mov	r5,r3
    31b4:	0004f3c0 	call	4f3c <__adddf3>
    31b8:	003fcf06 	br	30f8 <__alt_data_end+0xfffd23b8>
    31bc:	2005883a 	mov	r2,r4
    31c0:	2807883a 	mov	r3,r5
    31c4:	003fcc06 	br	30f8 <__alt_data_end+0xfffd23b8>
    31c8:	603fba16 	blt	r12,zero,30b4 <__alt_data_end+0xfffd2374>
    31cc:	003fb306 	br	309c <__alt_data_end+0xfffd235c>
    31d0:	4a400044 	addi	r9,r9,1
    31d4:	0005883a 	mov	r2,zero
    31d8:	003fc006 	br	30dc <__alt_data_end+0xfffd239c>
    31dc:	01000804 	movi	r4,32
    31e0:	00bfffc4 	movi	r2,-1
    31e4:	0007883a 	mov	r3,zero
    31e8:	003fe706 	br	3188 <__alt_data_end+0xfffd2448>
    31ec:	200d883a 	mov	r6,r4
    31f0:	280f883a 	mov	r7,r5
    31f4:	0006c7c0 	call	6c7c <__subdf3>
    31f8:	100d883a 	mov	r6,r2
    31fc:	180f883a 	mov	r7,r3
    3200:	1009883a 	mov	r4,r2
    3204:	180b883a 	mov	r5,r3
    3208:	00057e80 	call	57e8 <__divdf3>
    320c:	003fba06 	br	30f8 <__alt_data_end+0xfffd23b8>

00003210 <__kernel_cos>:
    3210:	defff304 	addi	sp,sp,-52
    3214:	dc000315 	stw	r16,12(sp)
    3218:	04200034 	movhi	r16,32768
    321c:	843fffc4 	addi	r16,r16,-1
    3220:	008f9034 	movhi	r2,15936
    3224:	df000b15 	stw	fp,44(sp)
    3228:	ddc00a15 	stw	r23,40(sp)
    322c:	dd800915 	stw	r22,36(sp)
    3230:	dcc00615 	stw	r19,24(sp)
    3234:	dfc00c15 	stw	ra,48(sp)
    3238:	dd400815 	stw	r21,32(sp)
    323c:	dd000715 	stw	r20,28(sp)
    3240:	dc800515 	stw	r18,20(sp)
    3244:	dc400415 	stw	r17,16(sp)
    3248:	2c20703a 	and	r16,r5,r16
    324c:	10bfffc4 	addi	r2,r2,-1
    3250:	2827883a 	mov	r19,r5
    3254:	202d883a 	mov	r22,r4
    3258:	302f883a 	mov	r23,r6
    325c:	3839883a 	mov	fp,r7
    3260:	14007516 	blt	r2,r16,3438 <__kernel_cos+0x228>
    3264:	00075780 	call	7578 <__fixdfsi>
    3268:	10010f26 	beq	r2,zero,36a8 <__kernel_cos+0x498>
    326c:	b00d883a 	mov	r6,r22
    3270:	980f883a 	mov	r7,r19
    3274:	b009883a 	mov	r4,r22
    3278:	980b883a 	mov	r5,r19
    327c:	00064100 	call	6410 <__muldf3>
    3280:	01afa234 	movhi	r6,48776
    3284:	01ef6a74 	movhi	r7,48553
    3288:	318e3504 	addi	r6,r6,14548
    328c:	39feba44 	addi	r7,r7,-1303
    3290:	1009883a 	mov	r4,r2
    3294:	180b883a 	mov	r5,r3
    3298:	102b883a 	mov	r21,r2
    329c:	1829883a 	mov	r20,r3
    32a0:	00064100 	call	6410 <__muldf3>
    32a4:	01af6d74 	movhi	r6,48565
    32a8:	01cf88b4 	movhi	r7,15906
    32ac:	31ac7104 	addi	r6,r6,-20028
    32b0:	39fba784 	addi	r7,r7,-4450
    32b4:	1009883a 	mov	r4,r2
    32b8:	180b883a 	mov	r5,r3
    32bc:	0004f3c0 	call	4f3c <__adddf3>
    32c0:	a80d883a 	mov	r6,r21
    32c4:	a00f883a 	mov	r7,r20
    32c8:	1009883a 	mov	r4,r2
    32cc:	180b883a 	mov	r5,r3
    32d0:	00064100 	call	6410 <__muldf3>
    32d4:	01a02734 	movhi	r6,32924
    32d8:	01cfa4b4 	movhi	r7,16018
    32dc:	3194ab44 	addi	r6,r6,21165
    32e0:	39df93c4 	addi	r7,r7,32335
    32e4:	1009883a 	mov	r4,r2
    32e8:	180b883a 	mov	r5,r3
    32ec:	0006c7c0 	call	6c7c <__subdf3>
    32f0:	a80d883a 	mov	r6,r21
    32f4:	a00f883a 	mov	r7,r20
    32f8:	1009883a 	mov	r4,r2
    32fc:	180b883a 	mov	r5,r3
    3300:	00064100 	call	6410 <__muldf3>
    3304:	018672f4 	movhi	r6,6603
    3308:	01cfbeb4 	movhi	r7,16122
    330c:	31856404 	addi	r6,r6,5520
    3310:	39c06804 	addi	r7,r7,416
    3314:	1009883a 	mov	r4,r2
    3318:	180b883a 	mov	r5,r3
    331c:	0004f3c0 	call	4f3c <__adddf3>
    3320:	a80d883a 	mov	r6,r21
    3324:	a00f883a 	mov	r7,r20
    3328:	1009883a 	mov	r4,r2
    332c:	180b883a 	mov	r5,r3
    3330:	00064100 	call	6410 <__muldf3>
    3334:	0185b074 	movhi	r6,5825
    3338:	01cfd5f4 	movhi	r7,16215
    333c:	31945dc4 	addi	r6,r6,20855
    3340:	39f05b04 	addi	r7,r7,-16020
    3344:	1009883a 	mov	r4,r2
    3348:	180b883a 	mov	r5,r3
    334c:	0006c7c0 	call	6c7c <__subdf3>
    3350:	a80d883a 	mov	r6,r21
    3354:	a00f883a 	mov	r7,r20
    3358:	1009883a 	mov	r4,r2
    335c:	180b883a 	mov	r5,r3
    3360:	00064100 	call	6410 <__muldf3>
    3364:	01955574 	movhi	r6,21845
    3368:	01cfe974 	movhi	r7,16293
    336c:	31955304 	addi	r6,r6,21836
    3370:	39d55544 	addi	r7,r7,21845
    3374:	1009883a 	mov	r4,r2
    3378:	180b883a 	mov	r5,r3
    337c:	0004f3c0 	call	4f3c <__adddf3>
    3380:	a80d883a 	mov	r6,r21
    3384:	a00f883a 	mov	r7,r20
    3388:	1009883a 	mov	r4,r2
    338c:	180b883a 	mov	r5,r3
    3390:	00064100 	call	6410 <__muldf3>
    3394:	1017883a 	mov	r11,r2
    3398:	1815883a 	mov	r10,r3
    339c:	a809883a 	mov	r4,r21
    33a0:	a00b883a 	mov	r5,r20
    33a4:	000d883a 	mov	r6,zero
    33a8:	01cff834 	movhi	r7,16352
    33ac:	da800215 	stw	r10,8(sp)
    33b0:	dac00115 	stw	r11,4(sp)
    33b4:	00064100 	call	6410 <__muldf3>
    33b8:	dac00117 	ldw	r11,4(sp)
    33bc:	da800217 	ldw	r10,8(sp)
    33c0:	a809883a 	mov	r4,r21
    33c4:	580d883a 	mov	r6,r11
    33c8:	500f883a 	mov	r7,r10
    33cc:	a00b883a 	mov	r5,r20
    33d0:	1023883a 	mov	r17,r2
    33d4:	1821883a 	mov	r16,r3
    33d8:	00064100 	call	6410 <__muldf3>
    33dc:	b80d883a 	mov	r6,r23
    33e0:	e00f883a 	mov	r7,fp
    33e4:	b009883a 	mov	r4,r22
    33e8:	980b883a 	mov	r5,r19
    33ec:	1029883a 	mov	r20,r2
    33f0:	1825883a 	mov	r18,r3
    33f4:	00064100 	call	6410 <__muldf3>
    33f8:	a009883a 	mov	r4,r20
    33fc:	900b883a 	mov	r5,r18
    3400:	100d883a 	mov	r6,r2
    3404:	180f883a 	mov	r7,r3
    3408:	0006c7c0 	call	6c7c <__subdf3>
    340c:	8809883a 	mov	r4,r17
    3410:	800b883a 	mov	r5,r16
    3414:	100d883a 	mov	r6,r2
    3418:	180f883a 	mov	r7,r3
    341c:	0006c7c0 	call	6c7c <__subdf3>
    3420:	100d883a 	mov	r6,r2
    3424:	180f883a 	mov	r7,r3
    3428:	0009883a 	mov	r4,zero
    342c:	014ffc34 	movhi	r5,16368
    3430:	0006c7c0 	call	6c7c <__subdf3>
    3434:	00008b06 	br	3664 <__kernel_cos+0x454>
    3438:	200d883a 	mov	r6,r4
    343c:	280f883a 	mov	r7,r5
    3440:	00064100 	call	6410 <__muldf3>
    3444:	01afa234 	movhi	r6,48776
    3448:	01ef6a74 	movhi	r7,48553
    344c:	318e3504 	addi	r6,r6,14548
    3450:	39feba44 	addi	r7,r7,-1303
    3454:	1009883a 	mov	r4,r2
    3458:	180b883a 	mov	r5,r3
    345c:	1025883a 	mov	r18,r2
    3460:	1823883a 	mov	r17,r3
    3464:	00064100 	call	6410 <__muldf3>
    3468:	01af6d74 	movhi	r6,48565
    346c:	01cf88b4 	movhi	r7,15906
    3470:	31ac7104 	addi	r6,r6,-20028
    3474:	39fba784 	addi	r7,r7,-4450
    3478:	1009883a 	mov	r4,r2
    347c:	180b883a 	mov	r5,r3
    3480:	0004f3c0 	call	4f3c <__adddf3>
    3484:	900d883a 	mov	r6,r18
    3488:	880f883a 	mov	r7,r17
    348c:	1009883a 	mov	r4,r2
    3490:	180b883a 	mov	r5,r3
    3494:	00064100 	call	6410 <__muldf3>
    3498:	01a02734 	movhi	r6,32924
    349c:	01cfa4b4 	movhi	r7,16018
    34a0:	3194ab44 	addi	r6,r6,21165
    34a4:	39df93c4 	addi	r7,r7,32335
    34a8:	1009883a 	mov	r4,r2
    34ac:	180b883a 	mov	r5,r3
    34b0:	0006c7c0 	call	6c7c <__subdf3>
    34b4:	900d883a 	mov	r6,r18
    34b8:	880f883a 	mov	r7,r17
    34bc:	1009883a 	mov	r4,r2
    34c0:	180b883a 	mov	r5,r3
    34c4:	00064100 	call	6410 <__muldf3>
    34c8:	018672f4 	movhi	r6,6603
    34cc:	01cfbeb4 	movhi	r7,16122
    34d0:	31856404 	addi	r6,r6,5520
    34d4:	39c06804 	addi	r7,r7,416
    34d8:	1009883a 	mov	r4,r2
    34dc:	180b883a 	mov	r5,r3
    34e0:	0004f3c0 	call	4f3c <__adddf3>
    34e4:	900d883a 	mov	r6,r18
    34e8:	880f883a 	mov	r7,r17
    34ec:	1009883a 	mov	r4,r2
    34f0:	180b883a 	mov	r5,r3
    34f4:	00064100 	call	6410 <__muldf3>
    34f8:	0185b074 	movhi	r6,5825
    34fc:	01cfd5f4 	movhi	r7,16215
    3500:	31945dc4 	addi	r6,r6,20855
    3504:	39f05b04 	addi	r7,r7,-16020
    3508:	1009883a 	mov	r4,r2
    350c:	180b883a 	mov	r5,r3
    3510:	0006c7c0 	call	6c7c <__subdf3>
    3514:	900d883a 	mov	r6,r18
    3518:	880f883a 	mov	r7,r17
    351c:	1009883a 	mov	r4,r2
    3520:	180b883a 	mov	r5,r3
    3524:	00064100 	call	6410 <__muldf3>
    3528:	01955574 	movhi	r6,21845
    352c:	01cfe974 	movhi	r7,16293
    3530:	31955304 	addi	r6,r6,21836
    3534:	39d55544 	addi	r7,r7,21845
    3538:	1009883a 	mov	r4,r2
    353c:	180b883a 	mov	r5,r3
    3540:	0004f3c0 	call	4f3c <__adddf3>
    3544:	900d883a 	mov	r6,r18
    3548:	880f883a 	mov	r7,r17
    354c:	1009883a 	mov	r4,r2
    3550:	180b883a 	mov	r5,r3
    3554:	00064100 	call	6410 <__muldf3>
    3558:	1013883a 	mov	r9,r2
    355c:	1017883a 	mov	r11,r2
    3560:	008ff4f4 	movhi	r2,16339
    3564:	108ccc84 	addi	r2,r2,13106
    3568:	1811883a 	mov	r8,r3
    356c:	902b883a 	mov	r21,r18
    3570:	8829883a 	mov	r20,r17
    3574:	1815883a 	mov	r10,r3
    3578:	143f880e 	bge	r2,r16,339c <__alt_data_end+0xfffd265c>
    357c:	008ffa74 	movhi	r2,16361
    3580:	14004416 	blt	r2,r16,3694 <__kernel_cos+0x484>
    3584:	00bff834 	movhi	r2,65504
    3588:	80a1883a 	add	r16,r16,r2
    358c:	000d883a 	mov	r6,zero
    3590:	800f883a 	mov	r7,r16
    3594:	0009883a 	mov	r4,zero
    3598:	014ffc34 	movhi	r5,16368
    359c:	da400115 	stw	r9,4(sp)
    35a0:	d8c00215 	stw	r3,8(sp)
    35a4:	0006c7c0 	call	6c7c <__subdf3>
    35a8:	da000217 	ldw	r8,8(sp)
    35ac:	da400117 	ldw	r9,4(sp)
    35b0:	102b883a 	mov	r21,r2
    35b4:	d8c00015 	stw	r3,0(sp)
    35b8:	9009883a 	mov	r4,r18
    35bc:	880b883a 	mov	r5,r17
    35c0:	000d883a 	mov	r6,zero
    35c4:	01cff834 	movhi	r7,16352
    35c8:	da000215 	stw	r8,8(sp)
    35cc:	da400115 	stw	r9,4(sp)
    35d0:	00064100 	call	6410 <__muldf3>
    35d4:	800f883a 	mov	r7,r16
    35d8:	000d883a 	mov	r6,zero
    35dc:	1009883a 	mov	r4,r2
    35e0:	180b883a 	mov	r5,r3
    35e4:	0006c7c0 	call	6c7c <__subdf3>
    35e8:	da400117 	ldw	r9,4(sp)
    35ec:	da000217 	ldw	r8,8(sp)
    35f0:	9009883a 	mov	r4,r18
    35f4:	480d883a 	mov	r6,r9
    35f8:	400f883a 	mov	r7,r8
    35fc:	880b883a 	mov	r5,r17
    3600:	1029883a 	mov	r20,r2
    3604:	1821883a 	mov	r16,r3
    3608:	00064100 	call	6410 <__muldf3>
    360c:	b80d883a 	mov	r6,r23
    3610:	e00f883a 	mov	r7,fp
    3614:	b009883a 	mov	r4,r22
    3618:	980b883a 	mov	r5,r19
    361c:	1025883a 	mov	r18,r2
    3620:	1823883a 	mov	r17,r3
    3624:	00064100 	call	6410 <__muldf3>
    3628:	100d883a 	mov	r6,r2
    362c:	180f883a 	mov	r7,r3
    3630:	9009883a 	mov	r4,r18
    3634:	880b883a 	mov	r5,r17
    3638:	0006c7c0 	call	6c7c <__subdf3>
    363c:	100d883a 	mov	r6,r2
    3640:	180f883a 	mov	r7,r3
    3644:	a009883a 	mov	r4,r20
    3648:	800b883a 	mov	r5,r16
    364c:	0006c7c0 	call	6c7c <__subdf3>
    3650:	d9400017 	ldw	r5,0(sp)
    3654:	100d883a 	mov	r6,r2
    3658:	180f883a 	mov	r7,r3
    365c:	a809883a 	mov	r4,r21
    3660:	0006c7c0 	call	6c7c <__subdf3>
    3664:	dfc00c17 	ldw	ra,48(sp)
    3668:	df000b17 	ldw	fp,44(sp)
    366c:	ddc00a17 	ldw	r23,40(sp)
    3670:	dd800917 	ldw	r22,36(sp)
    3674:	dd400817 	ldw	r21,32(sp)
    3678:	dd000717 	ldw	r20,28(sp)
    367c:	dcc00617 	ldw	r19,24(sp)
    3680:	dc800517 	ldw	r18,20(sp)
    3684:	dc400417 	ldw	r17,16(sp)
    3688:	dc000317 	ldw	r16,12(sp)
    368c:	dec00d04 	addi	sp,sp,52
    3690:	f800283a 	ret
    3694:	008ff9f4 	movhi	r2,16359
    3698:	002b883a 	mov	r21,zero
    369c:	d8800015 	stw	r2,0(sp)
    36a0:	040ff4b4 	movhi	r16,16338
    36a4:	003fc406 	br	35b8 <__alt_data_end+0xfffd2878>
    36a8:	0005883a 	mov	r2,zero
    36ac:	00cffc34 	movhi	r3,16368
    36b0:	003fec06 	br	3664 <__alt_data_end+0xfffd2924>

000036b4 <__kernel_rem_pio2>:
    36b4:	deff5a04 	addi	sp,sp,-664
    36b8:	da00a617 	ldw	r8,664(sp)
    36bc:	00c000b4 	movhi	r3,2
    36c0:	18f1db04 	addi	r3,r3,-14484
    36c4:	4205883a 	add	r2,r8,r8
    36c8:	1085883a 	add	r2,r2,r2
    36cc:	1885883a 	add	r2,r3,r2
    36d0:	d9008e15 	stw	r4,568(sp)
    36d4:	d9408f15 	stw	r5,572(sp)
    36d8:	313fff44 	addi	r4,r6,-3
    36dc:	01400604 	movi	r5,24
    36e0:	dd80a215 	stw	r22,648(sp)
    36e4:	dc009c15 	stw	r16,624(sp)
    36e8:	dfc0a515 	stw	ra,660(sp)
    36ec:	df00a415 	stw	fp,656(sp)
    36f0:	ddc0a315 	stw	r23,652(sp)
    36f4:	dd40a115 	stw	r21,644(sp)
    36f8:	dd00a015 	stw	r20,640(sp)
    36fc:	dcc09f15 	stw	r19,636(sp)
    3700:	dc809e15 	stw	r18,632(sp)
    3704:	dc409d15 	stw	r17,628(sp)
    3708:	3021883a 	mov	r16,r6
    370c:	d9c09315 	stw	r7,588(sp)
    3710:	15800017 	ldw	r22,0(r2)
    3714:	0004d600 	call	4d60 <__divsi3>
    3718:	da009317 	ldw	r8,588(sp)
    371c:	d8809215 	stw	r2,584(sp)
    3720:	423fffc4 	addi	r8,r8,-1
    3724:	da008d15 	stw	r8,564(sp)
    3728:	10033d16 	blt	r2,zero,4420 <__kernel_rem_pio2+0xd6c>
    372c:	da009217 	ldw	r8,584(sp)
    3730:	017ffa04 	movi	r5,-24
    3734:	42000044 	addi	r8,r8,1
    3738:	4009883a 	mov	r4,r8
    373c:	da009515 	stw	r8,596(sp)
    3740:	0004f140 	call	4f14 <__mulsi3>
    3744:	da008d17 	ldw	r8,564(sp)
    3748:	1421883a 	add	r16,r2,r16
    374c:	d8809217 	ldw	r2,584(sp)
    3750:	b207883a 	add	r3,r22,r8
    3754:	dc009015 	stw	r16,576(sp)
    3758:	1223c83a 	sub	r17,r2,r8
    375c:	18001016 	blt	r3,zero,37a0 <__kernel_rem_pio2+0xec>
    3760:	da00a717 	ldw	r8,668(sp)
    3764:	8c65883a 	add	r18,r17,r17
    3768:	94a5883a 	add	r18,r18,r18
    376c:	1c47883a 	add	r3,r3,r17
    3770:	dcc05004 	addi	r19,sp,320
    3774:	44a5883a 	add	r18,r8,r18
    3778:	1c000044 	addi	r16,r3,1
    377c:	88015316 	blt	r17,zero,3ccc <__kernel_rem_pio2+0x618>
    3780:	91000017 	ldw	r4,0(r18)
    3784:	00075f80 	call	75f8 <__floatsidf>
    3788:	98800015 	stw	r2,0(r19)
    378c:	98c00115 	stw	r3,4(r19)
    3790:	8c400044 	addi	r17,r17,1
    3794:	9cc00204 	addi	r19,r19,8
    3798:	94800104 	addi	r18,r18,4
    379c:	8c3ff71e 	bne	r17,r16,377c <__alt_data_end+0xfffd2a3c>
    37a0:	b0002816 	blt	r22,zero,3844 <__kernel_rem_pio2+0x190>
    37a4:	da008d17 	ldw	r8,564(sp)
    37a8:	b4c00044 	addi	r19,r22,1
    37ac:	982690fa 	slli	r19,r19,3
    37b0:	402490fa 	slli	r18,r8,3
    37b4:	da008e17 	ldw	r8,568(sp)
    37b8:	d8805004 	addi	r2,sp,320
    37bc:	94000204 	addi	r16,r18,8
    37c0:	d823883a 	mov	r17,sp
    37c4:	14a5883a 	add	r18,r2,r18
    37c8:	dcef883a 	add	r23,sp,r19
    37cc:	4421883a 	add	r16,r8,r16
    37d0:	dd809115 	stw	r22,580(sp)
    37d4:	4039883a 	mov	fp,r8
    37d8:	da008d17 	ldw	r8,564(sp)
    37dc:	40016016 	blt	r8,zero,3d60 <__kernel_rem_pio2+0x6ac>
    37e0:	e027883a 	mov	r19,fp
    37e4:	9029883a 	mov	r20,r18
    37e8:	002d883a 	mov	r22,zero
    37ec:	002b883a 	mov	r21,zero
    37f0:	a1800017 	ldw	r6,0(r20)
    37f4:	a1c00117 	ldw	r7,4(r20)
    37f8:	99000017 	ldw	r4,0(r19)
    37fc:	99400117 	ldw	r5,4(r19)
    3800:	9cc00204 	addi	r19,r19,8
    3804:	a53ffe04 	addi	r20,r20,-8
    3808:	00064100 	call	6410 <__muldf3>
    380c:	b009883a 	mov	r4,r22
    3810:	a80b883a 	mov	r5,r21
    3814:	100d883a 	mov	r6,r2
    3818:	180f883a 	mov	r7,r3
    381c:	0004f3c0 	call	4f3c <__adddf3>
    3820:	102d883a 	mov	r22,r2
    3824:	182b883a 	mov	r21,r3
    3828:	9c3ff11e 	bne	r19,r16,37f0 <__alt_data_end+0xfffd2ab0>
    382c:	8d800015 	stw	r22,0(r17)
    3830:	8d400115 	stw	r21,4(r17)
    3834:	8c400204 	addi	r17,r17,8
    3838:	94800204 	addi	r18,r18,8
    383c:	8dffe61e 	bne	r17,r23,37d8 <__alt_data_end+0xfffd2a98>
    3840:	dd809117 	ldw	r22,580(sp)
    3844:	00d00034 	movhi	r3,16384
    3848:	da009317 	ldw	r8,588(sp)
    384c:	18ffff84 	addi	r3,r3,-2
    3850:	b0c7883a 	add	r3,r22,r3
    3854:	18c7883a 	add	r3,r3,r3
    3858:	402090fa 	slli	r16,r8,3
    385c:	18c7883a 	add	r3,r3,r3
    3860:	da007804 	addi	r8,sp,480
    3864:	40d1883a 	add	r8,r8,r3
    3868:	b0bfffc4 	addi	r2,r22,-1
    386c:	da009615 	stw	r8,600(sp)
    3870:	da008e17 	ldw	r8,568(sp)
    3874:	1085883a 	add	r2,r2,r2
    3878:	1085883a 	add	r2,r2,r2
    387c:	19000104 	addi	r4,r3,4
    3880:	d885883a 	add	r2,sp,r2
    3884:	4421883a 	add	r16,r8,r16
    3888:	da007804 	addi	r8,sp,480
    388c:	4111883a 	add	r8,r8,r4
    3890:	10807804 	addi	r2,r2,480
    3894:	da009715 	stw	r8,604(sp)
    3898:	b025883a 	mov	r18,r22
    389c:	d8809815 	stw	r2,608(sp)
    38a0:	dd809415 	stw	r22,592(sp)
    38a4:	900490fa 	slli	r2,r18,3
    38a8:	d885883a 	add	r2,sp,r2
    38ac:	17000017 	ldw	fp,0(r2)
    38b0:	15400117 	ldw	r21,4(r2)
    38b4:	04802b0e 	bge	zero,r18,3964 <__kernel_rem_pio2+0x2b0>
    38b8:	00880034 	movhi	r2,8192
    38bc:	10bfffc4 	addi	r2,r2,-1
    38c0:	90a9883a 	add	r20,r18,r2
    38c4:	a02890fa 	slli	r20,r20,3
    38c8:	dc407804 	addi	r17,sp,480
    38cc:	dcfffe04 	addi	r19,sp,-8
    38d0:	dd29883a 	add	r20,sp,r20
    38d4:	000d883a 	mov	r6,zero
    38d8:	01cf9c34 	movhi	r7,15984
    38dc:	e009883a 	mov	r4,fp
    38e0:	a80b883a 	mov	r5,r21
    38e4:	00064100 	call	6410 <__muldf3>
    38e8:	180b883a 	mov	r5,r3
    38ec:	1009883a 	mov	r4,r2
    38f0:	00075780 	call	7578 <__fixdfsi>
    38f4:	1009883a 	mov	r4,r2
    38f8:	00075f80 	call	75f8 <__floatsidf>
    38fc:	000d883a 	mov	r6,zero
    3900:	01d05c34 	movhi	r7,16752
    3904:	1009883a 	mov	r4,r2
    3908:	180b883a 	mov	r5,r3
    390c:	102f883a 	mov	r23,r2
    3910:	182d883a 	mov	r22,r3
    3914:	00064100 	call	6410 <__muldf3>
    3918:	100d883a 	mov	r6,r2
    391c:	180f883a 	mov	r7,r3
    3920:	e009883a 	mov	r4,fp
    3924:	a80b883a 	mov	r5,r21
    3928:	0006c7c0 	call	6c7c <__subdf3>
    392c:	180b883a 	mov	r5,r3
    3930:	1009883a 	mov	r4,r2
    3934:	00075780 	call	7578 <__fixdfsi>
    3938:	a1800017 	ldw	r6,0(r20)
    393c:	a1c00117 	ldw	r7,4(r20)
    3940:	88800015 	stw	r2,0(r17)
    3944:	b809883a 	mov	r4,r23
    3948:	b00b883a 	mov	r5,r22
    394c:	0004f3c0 	call	4f3c <__adddf3>
    3950:	a53ffe04 	addi	r20,r20,-8
    3954:	1039883a 	mov	fp,r2
    3958:	182b883a 	mov	r21,r3
    395c:	8c400104 	addi	r17,r17,4
    3960:	a4ffdc1e 	bne	r20,r19,38d4 <__alt_data_end+0xfffd2b94>
    3964:	d9809017 	ldw	r6,576(sp)
    3968:	a80b883a 	mov	r5,r21
    396c:	e009883a 	mov	r4,fp
    3970:	0004ba80 	call	4ba8 <scalbn>
    3974:	000d883a 	mov	r6,zero
    3978:	01cff034 	movhi	r7,16320
    397c:	1009883a 	mov	r4,r2
    3980:	180b883a 	mov	r5,r3
    3984:	1027883a 	mov	r19,r2
    3988:	1823883a 	mov	r17,r3
    398c:	00064100 	call	6410 <__muldf3>
    3990:	1009883a 	mov	r4,r2
    3994:	180b883a 	mov	r5,r3
    3998:	00047480 	call	4748 <floor>
    399c:	000d883a 	mov	r6,zero
    39a0:	01d00834 	movhi	r7,16416
    39a4:	1009883a 	mov	r4,r2
    39a8:	180b883a 	mov	r5,r3
    39ac:	00064100 	call	6410 <__muldf3>
    39b0:	100d883a 	mov	r6,r2
    39b4:	180f883a 	mov	r7,r3
    39b8:	9809883a 	mov	r4,r19
    39bc:	880b883a 	mov	r5,r17
    39c0:	0006c7c0 	call	6c7c <__subdf3>
    39c4:	180b883a 	mov	r5,r3
    39c8:	1009883a 	mov	r4,r2
    39cc:	1827883a 	mov	r19,r3
    39d0:	1029883a 	mov	r20,r2
    39d4:	00075780 	call	7578 <__fixdfsi>
    39d8:	1009883a 	mov	r4,r2
    39dc:	1023883a 	mov	r17,r2
    39e0:	00075f80 	call	75f8 <__floatsidf>
    39e4:	a009883a 	mov	r4,r20
    39e8:	100d883a 	mov	r6,r2
    39ec:	180f883a 	mov	r7,r3
    39f0:	980b883a 	mov	r5,r19
    39f4:	0006c7c0 	call	6c7c <__subdf3>
    39f8:	d9009017 	ldw	r4,576(sp)
    39fc:	1013883a 	mov	r9,r2
    3a00:	102b883a 	mov	r21,r2
    3a04:	1811883a 	mov	r8,r3
    3a08:	0100b30e 	bge	zero,r4,3cd8 <__kernel_rem_pio2+0x624>
    3a0c:	90bfffc4 	addi	r2,r18,-1
    3a10:	1085883a 	add	r2,r2,r2
    3a14:	1085883a 	add	r2,r2,r2
    3a18:	d885883a 	add	r2,sp,r2
    3a1c:	10807804 	addi	r2,r2,480
    3a20:	d9809017 	ldw	r6,576(sp)
    3a24:	11400017 	ldw	r5,0(r2)
    3a28:	01000604 	movi	r4,24
    3a2c:	2189c83a 	sub	r4,r4,r6
    3a30:	290dd83a 	sra	r6,r5,r4
    3a34:	d9c09017 	ldw	r7,576(sp)
    3a38:	04c005c4 	movi	r19,23
    3a3c:	3108983a 	sll	r4,r6,r4
    3a40:	99e7c83a 	sub	r19,r19,r7
    3a44:	89a3883a 	add	r17,r17,r6
    3a48:	2909c83a 	sub	r4,r5,r4
    3a4c:	24e7d83a 	sra	r19,r4,r19
    3a50:	11000015 	stw	r4,0(r2)
    3a54:	04c02a0e 	bge	zero,r19,3b00 <__kernel_rem_pio2+0x44c>
    3a58:	8c400044 	addi	r17,r17,1
    3a5c:	0481570e 	bge	zero,r18,3fbc <__kernel_rem_pio2+0x908>
    3a60:	02804034 	movhi	r10,256
    3a64:	52bfffc4 	addi	r10,r10,-1
    3a68:	d8807804 	addi	r2,sp,480
    3a6c:	000b883a 	mov	r5,zero
    3a70:	0029883a 	mov	r20,zero
    3a74:	01c04034 	movhi	r7,256
    3a78:	00000706 	br	3a98 <__kernel_rem_pio2+0x3e4>
    3a7c:	390dc83a 	sub	r6,r7,r4
    3a80:	20000226 	beq	r4,zero,3a8c <__kernel_rem_pio2+0x3d8>
    3a84:	11800015 	stw	r6,0(r2)
    3a88:	05000044 	movi	r20,1
    3a8c:	29400044 	addi	r5,r5,1
    3a90:	10800104 	addi	r2,r2,4
    3a94:	2c80080e 	bge	r5,r18,3ab8 <__kernel_rem_pio2+0x404>
    3a98:	11000017 	ldw	r4,0(r2)
    3a9c:	a03ff726 	beq	r20,zero,3a7c <__alt_data_end+0xfffd2d3c>
    3aa0:	5109c83a 	sub	r4,r10,r4
    3aa4:	11000015 	stw	r4,0(r2)
    3aa8:	29400044 	addi	r5,r5,1
    3aac:	05000044 	movi	r20,1
    3ab0:	10800104 	addi	r2,r2,4
    3ab4:	2cbff816 	blt	r5,r18,3a98 <__alt_data_end+0xfffd2d58>
    3ab8:	d9009017 	ldw	r4,576(sp)
    3abc:	01000e0e 	bge	zero,r4,3af8 <__kernel_rem_pio2+0x444>
    3ac0:	00800044 	movi	r2,1
    3ac4:	20808d26 	beq	r4,r2,3cfc <__kernel_rem_pio2+0x648>
    3ac8:	00800084 	movi	r2,2
    3acc:	20800a1e 	bne	r4,r2,3af8 <__kernel_rem_pio2+0x444>
    3ad0:	90bfffc4 	addi	r2,r18,-1
    3ad4:	1085883a 	add	r2,r2,r2
    3ad8:	1085883a 	add	r2,r2,r2
    3adc:	d885883a 	add	r2,sp,r2
    3ae0:	10807804 	addi	r2,r2,480
    3ae4:	11400017 	ldw	r5,0(r2)
    3ae8:	01001034 	movhi	r4,64
    3aec:	213fffc4 	addi	r4,r4,-1
    3af0:	2908703a 	and	r4,r5,r4
    3af4:	11000015 	stw	r4,0(r2)
    3af8:	00800084 	movi	r2,2
    3afc:	98805d26 	beq	r19,r2,3c74 <__kernel_rem_pio2+0x5c0>
    3b00:	400b883a 	mov	r5,r8
    3b04:	000d883a 	mov	r6,zero
    3b08:	000f883a 	mov	r7,zero
    3b0c:	a809883a 	mov	r4,r21
    3b10:	da009b15 	stw	r8,620(sp)
    3b14:	00061b80 	call	61b8 <__eqdf2>
    3b18:	da009b17 	ldw	r8,620(sp)
    3b1c:	10012b1e 	bne	r2,zero,3fcc <__kernel_rem_pio2+0x918>
    3b20:	da009417 	ldw	r8,592(sp)
    3b24:	917fffc4 	addi	r5,r18,-1
    3b28:	2a000e16 	blt	r5,r8,3b64 <__kernel_rem_pio2+0x4b0>
    3b2c:	00900034 	movhi	r2,16384
    3b30:	10bfffc4 	addi	r2,r2,-1
    3b34:	9085883a 	add	r2,r18,r2
    3b38:	1085883a 	add	r2,r2,r2
    3b3c:	d9809717 	ldw	r6,604(sp)
    3b40:	1085883a 	add	r2,r2,r2
    3b44:	d9007804 	addi	r4,sp,480
    3b48:	0007883a 	mov	r3,zero
    3b4c:	2085883a 	add	r2,r4,r2
    3b50:	11000017 	ldw	r4,0(r2)
    3b54:	10bfff04 	addi	r2,r2,-4
    3b58:	1906b03a 	or	r3,r3,r4
    3b5c:	11bffc1e 	bne	r2,r6,3b50 <__alt_data_end+0xfffd2e10>
    3b60:	1800821e 	bne	r3,zero,3d6c <__kernel_rem_pio2+0x6b8>
    3b64:	da009817 	ldw	r8,608(sp)
    3b68:	40800017 	ldw	r2,0(r8)
    3b6c:	1001151e 	bne	r2,zero,3fc4 <__kernel_rem_pio2+0x910>
    3b70:	d8809617 	ldw	r2,600(sp)
    3b74:	05000044 	movi	r20,1
    3b78:	10bfff04 	addi	r2,r2,-4
    3b7c:	10c00117 	ldw	r3,4(r2)
    3b80:	a5000044 	addi	r20,r20,1
    3b84:	183ffc26 	beq	r3,zero,3b78 <__alt_data_end+0xfffd2e38>
    3b88:	9529883a 	add	r20,r18,r20
    3b8c:	90800044 	addi	r2,r18,1
    3b90:	dd009115 	stw	r20,580(sp)
    3b94:	a0803216 	blt	r20,r2,3c60 <__kernel_rem_pio2+0x5ac>
    3b98:	da009317 	ldw	r8,588(sp)
    3b9c:	d8c09117 	ldw	r3,580(sp)
    3ba0:	44a3883a 	add	r17,r8,r18
    3ba4:	da009217 	ldw	r8,584(sp)
    3ba8:	882290fa 	slli	r17,r17,3
    3bac:	40a5883a 	add	r18,r8,r2
    3bb0:	da009517 	ldw	r8,596(sp)
    3bb4:	100490fa 	slli	r2,r2,3
    3bb8:	94a5883a 	add	r18,r18,r18
    3bbc:	40eb883a 	add	r21,r8,r3
    3bc0:	da00a717 	ldw	r8,668(sp)
    3bc4:	ad6b883a 	add	r21,r21,r21
    3bc8:	94a5883a 	add	r18,r18,r18
    3bcc:	ad6b883a 	add	r21,r21,r21
    3bd0:	d8c05004 	addi	r3,sp,320
    3bd4:	44a5883a 	add	r18,r8,r18
    3bd8:	1c63883a 	add	r17,r3,r17
    3bdc:	d8a7883a 	add	r19,sp,r2
    3be0:	456b883a 	add	r21,r8,r21
    3be4:	91000017 	ldw	r4,0(r18)
    3be8:	00075f80 	call	75f8 <__floatsidf>
    3bec:	da008d17 	ldw	r8,564(sp)
    3bf0:	88800015 	stw	r2,0(r17)
    3bf4:	88c00115 	stw	r3,4(r17)
    3bf8:	40001b16 	blt	r8,zero,3c68 <__kernel_rem_pio2+0x5b4>
    3bfc:	dd008e17 	ldw	r20,568(sp)
    3c00:	882d883a 	mov	r22,r17
    3c04:	002f883a 	mov	r23,zero
    3c08:	0039883a 	mov	fp,zero
    3c0c:	b1800017 	ldw	r6,0(r22)
    3c10:	b1c00117 	ldw	r7,4(r22)
    3c14:	a1000017 	ldw	r4,0(r20)
    3c18:	a1400117 	ldw	r5,4(r20)
    3c1c:	a5000204 	addi	r20,r20,8
    3c20:	b5bffe04 	addi	r22,r22,-8
    3c24:	00064100 	call	6410 <__muldf3>
    3c28:	b809883a 	mov	r4,r23
    3c2c:	e00b883a 	mov	r5,fp
    3c30:	100d883a 	mov	r6,r2
    3c34:	180f883a 	mov	r7,r3
    3c38:	0004f3c0 	call	4f3c <__adddf3>
    3c3c:	102f883a 	mov	r23,r2
    3c40:	1839883a 	mov	fp,r3
    3c44:	a43ff11e 	bne	r20,r16,3c0c <__alt_data_end+0xfffd2ecc>
    3c48:	9dc00015 	stw	r23,0(r19)
    3c4c:	9f000115 	stw	fp,4(r19)
    3c50:	94800104 	addi	r18,r18,4
    3c54:	8c400204 	addi	r17,r17,8
    3c58:	9cc00204 	addi	r19,r19,8
    3c5c:	957fe11e 	bne	r18,r21,3be4 <__alt_data_end+0xfffd2ea4>
    3c60:	dc809117 	ldw	r18,580(sp)
    3c64:	003f0f06 	br	38a4 <__alt_data_end+0xfffd2b64>
    3c68:	002f883a 	mov	r23,zero
    3c6c:	0039883a 	mov	fp,zero
    3c70:	003ff506 	br	3c48 <__alt_data_end+0xfffd2f08>
    3c74:	480d883a 	mov	r6,r9
    3c78:	180f883a 	mov	r7,r3
    3c7c:	0009883a 	mov	r4,zero
    3c80:	014ffc34 	movhi	r5,16368
    3c84:	0006c7c0 	call	6c7c <__subdf3>
    3c88:	102b883a 	mov	r21,r2
    3c8c:	1811883a 	mov	r8,r3
    3c90:	a03f9b26 	beq	r20,zero,3b00 <__alt_data_end+0xfffd2dc0>
    3c94:	d9809017 	ldw	r6,576(sp)
    3c98:	0009883a 	mov	r4,zero
    3c9c:	014ffc34 	movhi	r5,16368
    3ca0:	d8c09b15 	stw	r3,620(sp)
    3ca4:	0004ba80 	call	4ba8 <scalbn>
    3ca8:	da009b17 	ldw	r8,620(sp)
    3cac:	a809883a 	mov	r4,r21
    3cb0:	100d883a 	mov	r6,r2
    3cb4:	400b883a 	mov	r5,r8
    3cb8:	180f883a 	mov	r7,r3
    3cbc:	0006c7c0 	call	6c7c <__subdf3>
    3cc0:	102b883a 	mov	r21,r2
    3cc4:	1811883a 	mov	r8,r3
    3cc8:	003f8d06 	br	3b00 <__alt_data_end+0xfffd2dc0>
    3ccc:	0005883a 	mov	r2,zero
    3cd0:	0007883a 	mov	r3,zero
    3cd4:	003eac06 	br	3788 <__alt_data_end+0xfffd2a48>
    3cd8:	d8809017 	ldw	r2,576(sp)
    3cdc:	1000121e 	bne	r2,zero,3d28 <__kernel_rem_pio2+0x674>
    3ce0:	90bfffc4 	addi	r2,r18,-1
    3ce4:	1085883a 	add	r2,r2,r2
    3ce8:	1085883a 	add	r2,r2,r2
    3cec:	d885883a 	add	r2,sp,r2
    3cf0:	14c07817 	ldw	r19,480(r2)
    3cf4:	9827d5fa 	srai	r19,r19,23
    3cf8:	003f5606 	br	3a54 <__alt_data_end+0xfffd2d14>
    3cfc:	90bfffc4 	addi	r2,r18,-1
    3d00:	1085883a 	add	r2,r2,r2
    3d04:	1085883a 	add	r2,r2,r2
    3d08:	d885883a 	add	r2,sp,r2
    3d0c:	10807804 	addi	r2,r2,480
    3d10:	11000017 	ldw	r4,0(r2)
    3d14:	01402034 	movhi	r5,128
    3d18:	297fffc4 	addi	r5,r5,-1
    3d1c:	2148703a 	and	r4,r4,r5
    3d20:	11000015 	stw	r4,0(r2)
    3d24:	003f7406 	br	3af8 <__alt_data_end+0xfffd2db8>
    3d28:	4809883a 	mov	r4,r9
    3d2c:	180b883a 	mov	r5,r3
    3d30:	000d883a 	mov	r6,zero
    3d34:	01cff834 	movhi	r7,16352
    3d38:	d8c09a15 	stw	r3,616(sp)
    3d3c:	d8c09b15 	stw	r3,620(sp)
    3d40:	da409915 	stw	r9,612(sp)
    3d44:	00062400 	call	6240 <__gedf2>
    3d48:	d8c09a17 	ldw	r3,616(sp)
    3d4c:	da009b17 	ldw	r8,620(sp)
    3d50:	da409917 	ldw	r9,612(sp)
    3d54:	1000920e 	bge	r2,zero,3fa0 <__kernel_rem_pio2+0x8ec>
    3d58:	0027883a 	mov	r19,zero
    3d5c:	003f6806 	br	3b00 <__alt_data_end+0xfffd2dc0>
    3d60:	002d883a 	mov	r22,zero
    3d64:	002b883a 	mov	r21,zero
    3d68:	003eb006 	br	382c <__alt_data_end+0xfffd2aec>
    3d6c:	2945883a 	add	r2,r5,r5
    3d70:	da009017 	ldw	r8,576(sp)
    3d74:	1085883a 	add	r2,r2,r2
    3d78:	d885883a 	add	r2,sp,r2
    3d7c:	10807817 	ldw	r2,480(r2)
    3d80:	423ffa04 	addi	r8,r8,-24
    3d84:	dc409115 	stw	r17,580(sp)
    3d88:	dcc08d15 	stw	r19,564(sp)
    3d8c:	da009015 	stw	r8,576(sp)
    3d90:	dd809417 	ldw	r22,592(sp)
    3d94:	2823883a 	mov	r17,r5
    3d98:	10000e1e 	bne	r2,zero,3dd4 <__kernel_rem_pio2+0x720>
    3d9c:	00900034 	movhi	r2,16384
    3da0:	10bfffc4 	addi	r2,r2,-1
    3da4:	2885883a 	add	r2,r5,r2
    3da8:	1085883a 	add	r2,r2,r2
    3dac:	d8c07804 	addi	r3,sp,480
    3db0:	1085883a 	add	r2,r2,r2
    3db4:	1885883a 	add	r2,r3,r2
    3db8:	4007883a 	mov	r3,r8
    3dbc:	10bfff04 	addi	r2,r2,-4
    3dc0:	11000117 	ldw	r4,4(r2)
    3dc4:	8c7fffc4 	addi	r17,r17,-1
    3dc8:	18fffa04 	addi	r3,r3,-24
    3dcc:	203ffb26 	beq	r4,zero,3dbc <__alt_data_end+0xfffd307c>
    3dd0:	d8c09015 	stw	r3,576(sp)
    3dd4:	d9809017 	ldw	r6,576(sp)
    3dd8:	0009883a 	mov	r4,zero
    3ddc:	014ffc34 	movhi	r5,16368
    3de0:	0004ba80 	call	4ba8 <scalbn>
    3de4:	1029883a 	mov	r20,r2
    3de8:	182b883a 	mov	r21,r3
    3dec:	88018416 	blt	r17,zero,4400 <__kernel_rem_pio2+0xd4c>
    3df0:	881090fa 	slli	r8,r17,3
    3df4:	d8c07804 	addi	r3,sp,480
    3df8:	da008e15 	stw	r8,568(sp)
    3dfc:	d8808e17 	ldw	r2,568(sp)
    3e00:	8c51883a 	add	r8,r17,r17
    3e04:	4211883a 	add	r8,r8,r8
    3e08:	d8a1883a 	add	r16,sp,r2
    3e0c:	1a25883a 	add	r18,r3,r8
    3e10:	da3ffe04 	addi	r8,sp,-8
    3e14:	da008c15 	stw	r8,560(sp)
    3e18:	8039883a 	mov	fp,r16
    3e1c:	91000017 	ldw	r4,0(r18)
    3e20:	e73ffe04 	addi	fp,fp,-8
    3e24:	94bfff04 	addi	r18,r18,-4
    3e28:	00075f80 	call	75f8 <__floatsidf>
    3e2c:	a00d883a 	mov	r6,r20
    3e30:	a80f883a 	mov	r7,r21
    3e34:	1009883a 	mov	r4,r2
    3e38:	180b883a 	mov	r5,r3
    3e3c:	00064100 	call	6410 <__muldf3>
    3e40:	a009883a 	mov	r4,r20
    3e44:	a80b883a 	mov	r5,r21
    3e48:	e0800215 	stw	r2,8(fp)
    3e4c:	e0c00315 	stw	r3,12(fp)
    3e50:	000d883a 	mov	r6,zero
    3e54:	01cf9c34 	movhi	r7,15984
    3e58:	00064100 	call	6410 <__muldf3>
    3e5c:	da008c17 	ldw	r8,560(sp)
    3e60:	1029883a 	mov	r20,r2
    3e64:	182b883a 	mov	r21,r3
    3e68:	e23fec1e 	bne	fp,r8,3e1c <__alt_data_end+0xfffd30dc>
    3e6c:	0029883a 	mov	r20,zero
    3e70:	b0004f16 	blt	r22,zero,3fb0 <__kernel_rem_pio2+0x8fc>
    3e74:	054000b4 	movhi	r21,2
    3e78:	014ffe74 	movhi	r5,16377
    3e7c:	ad71cd04 	addi	r21,r21,-14540
    3e80:	8027883a 	mov	r19,r16
    3e84:	01100034 	movhi	r4,16384
    3e88:	29487ec4 	addi	r5,r5,8699
    3e8c:	0039883a 	mov	fp,zero
    3e90:	002f883a 	mov	r23,zero
    3e94:	0025883a 	mov	r18,zero
    3e98:	00000506 	br	3eb0 <__kernel_rem_pio2+0x7fc>
    3e9c:	9cc00204 	addi	r19,r19,8
    3ea0:	a4800f16 	blt	r20,r18,3ee0 <__kernel_rem_pio2+0x82c>
    3ea4:	a9000017 	ldw	r4,0(r21)
    3ea8:	a9400117 	ldw	r5,4(r21)
    3eac:	ad400204 	addi	r21,r21,8
    3eb0:	99800017 	ldw	r6,0(r19)
    3eb4:	99c00117 	ldw	r7,4(r19)
    3eb8:	94800044 	addi	r18,r18,1
    3ebc:	00064100 	call	6410 <__muldf3>
    3ec0:	e009883a 	mov	r4,fp
    3ec4:	b80b883a 	mov	r5,r23
    3ec8:	100d883a 	mov	r6,r2
    3ecc:	180f883a 	mov	r7,r3
    3ed0:	0004f3c0 	call	4f3c <__adddf3>
    3ed4:	1039883a 	mov	fp,r2
    3ed8:	182f883a 	mov	r23,r3
    3edc:	b4bfef0e 	bge	r22,r18,3e9c <__alt_data_end+0xfffd315c>
    3ee0:	a00490fa 	slli	r2,r20,3
    3ee4:	da008c17 	ldw	r8,560(sp)
    3ee8:	843ffe04 	addi	r16,r16,-8
    3eec:	d885883a 	add	r2,sp,r2
    3ef0:	10802804 	addi	r2,r2,160
    3ef4:	17000015 	stw	fp,0(r2)
    3ef8:	15c00115 	stw	r23,4(r2)
    3efc:	a5000044 	addi	r20,r20,1
    3f00:	823fdb1e 	bne	r16,r8,3e70 <__alt_data_end+0xfffd3130>
    3f04:	da00a617 	ldw	r8,664(sp)
    3f08:	00800084 	movi	r2,2
    3f0c:	12006616 	blt	r2,r8,40a8 <__kernel_rem_pio2+0x9f4>
    3f10:	0200de16 	blt	zero,r8,428c <__kernel_rem_pio2+0xbd8>
    3f14:	4000141e 	bne	r8,zero,3f68 <__kernel_rem_pio2+0x8b4>
    3f18:	da008e17 	ldw	r8,568(sp)
    3f1c:	d8802804 	addi	r2,sp,160
    3f20:	0007883a 	mov	r3,zero
    3f24:	1225883a 	add	r18,r2,r8
    3f28:	043fffc4 	movi	r16,-1
    3f2c:	0005883a 	mov	r2,zero
    3f30:	91800017 	ldw	r6,0(r18)
    3f34:	91c00117 	ldw	r7,4(r18)
    3f38:	1009883a 	mov	r4,r2
    3f3c:	180b883a 	mov	r5,r3
    3f40:	8c7fffc4 	addi	r17,r17,-1
    3f44:	0004f3c0 	call	4f3c <__adddf3>
    3f48:	94bffe04 	addi	r18,r18,-8
    3f4c:	8c3ff81e 	bne	r17,r16,3f30 <__alt_data_end+0xfffd31f0>
    3f50:	da008d17 	ldw	r8,564(sp)
    3f54:	40000126 	beq	r8,zero,3f5c <__kernel_rem_pio2+0x8a8>
    3f58:	18e0003c 	xorhi	r3,r3,32768
    3f5c:	da008f17 	ldw	r8,572(sp)
    3f60:	40800015 	stw	r2,0(r8)
    3f64:	40c00115 	stw	r3,4(r8)
    3f68:	da009117 	ldw	r8,580(sp)
    3f6c:	408001cc 	andi	r2,r8,7
    3f70:	dfc0a517 	ldw	ra,660(sp)
    3f74:	df00a417 	ldw	fp,656(sp)
    3f78:	ddc0a317 	ldw	r23,652(sp)
    3f7c:	dd80a217 	ldw	r22,648(sp)
    3f80:	dd40a117 	ldw	r21,644(sp)
    3f84:	dd00a017 	ldw	r20,640(sp)
    3f88:	dcc09f17 	ldw	r19,636(sp)
    3f8c:	dc809e17 	ldw	r18,632(sp)
    3f90:	dc409d17 	ldw	r17,628(sp)
    3f94:	dc009c17 	ldw	r16,624(sp)
    3f98:	dec0a604 	addi	sp,sp,664
    3f9c:	f800283a 	ret
    3fa0:	8c400044 	addi	r17,r17,1
    3fa4:	04810d0e 	bge	zero,r18,43dc <__kernel_rem_pio2+0xd28>
    3fa8:	04c00084 	movi	r19,2
    3fac:	003eac06 	br	3a60 <__alt_data_end+0xfffd2d20>
    3fb0:	0039883a 	mov	fp,zero
    3fb4:	002f883a 	mov	r23,zero
    3fb8:	003fc906 	br	3ee0 <__alt_data_end+0xfffd31a0>
    3fbc:	0029883a 	mov	r20,zero
    3fc0:	003ebd06 	br	3ab8 <__alt_data_end+0xfffd2d78>
    3fc4:	05000044 	movi	r20,1
    3fc8:	003eef06 	br	3b88 <__alt_data_end+0xfffd2e48>
    3fcc:	4029883a 	mov	r20,r8
    3fd0:	da009017 	ldw	r8,576(sp)
    3fd4:	a809883a 	mov	r4,r21
    3fd8:	a00b883a 	mov	r5,r20
    3fdc:	020dc83a 	sub	r6,zero,r8
    3fe0:	dc409115 	stw	r17,580(sp)
    3fe4:	dd809417 	ldw	r22,592(sp)
    3fe8:	dcc08d15 	stw	r19,564(sp)
    3fec:	0004ba80 	call	4ba8 <scalbn>
    3ff0:	000d883a 	mov	r6,zero
    3ff4:	01d05c34 	movhi	r7,16752
    3ff8:	1009883a 	mov	r4,r2
    3ffc:	180b883a 	mov	r5,r3
    4000:	102b883a 	mov	r21,r2
    4004:	1823883a 	mov	r17,r3
    4008:	00062400 	call	6240 <__gedf2>
    400c:	1000e916 	blt	r2,zero,43b4 <__kernel_rem_pio2+0xd00>
    4010:	000d883a 	mov	r6,zero
    4014:	01cf9c34 	movhi	r7,15984
    4018:	880b883a 	mov	r5,r17
    401c:	a809883a 	mov	r4,r21
    4020:	00064100 	call	6410 <__muldf3>
    4024:	180b883a 	mov	r5,r3
    4028:	1009883a 	mov	r4,r2
    402c:	00075780 	call	7578 <__fixdfsi>
    4030:	1029883a 	mov	r20,r2
    4034:	9485883a 	add	r2,r18,r18
    4038:	1085883a 	add	r2,r2,r2
    403c:	a009883a 	mov	r4,r20
    4040:	d8a1883a 	add	r16,sp,r2
    4044:	00075f80 	call	75f8 <__floatsidf>
    4048:	000d883a 	mov	r6,zero
    404c:	01d05c34 	movhi	r7,16752
    4050:	1009883a 	mov	r4,r2
    4054:	180b883a 	mov	r5,r3
    4058:	00064100 	call	6410 <__muldf3>
    405c:	880b883a 	mov	r5,r17
    4060:	100d883a 	mov	r6,r2
    4064:	180f883a 	mov	r7,r3
    4068:	a809883a 	mov	r4,r21
    406c:	0006c7c0 	call	6c7c <__subdf3>
    4070:	180b883a 	mov	r5,r3
    4074:	1009883a 	mov	r4,r2
    4078:	00075780 	call	7578 <__fixdfsi>
    407c:	da009017 	ldw	r8,576(sp)
    4080:	94400044 	addi	r17,r18,1
    4084:	8c47883a 	add	r3,r17,r17
    4088:	84007804 	addi	r16,r16,480
    408c:	18c7883a 	add	r3,r3,r3
    4090:	80800015 	stw	r2,0(r16)
    4094:	d8c7883a 	add	r3,sp,r3
    4098:	42000604 	addi	r8,r8,24
    409c:	da009015 	stw	r8,576(sp)
    40a0:	1d007815 	stw	r20,480(r3)
    40a4:	003f4b06 	br	3dd4 <__alt_data_end+0xfffd3094>
    40a8:	da00a617 	ldw	r8,664(sp)
    40ac:	008000c4 	movi	r2,3
    40b0:	40bfad1e 	bne	r8,r2,3f68 <__alt_data_end+0xfffd3228>
    40b4:	0440bc0e 	bge	zero,r17,43a8 <__kernel_rem_pio2+0xcf4>
    40b8:	da008e17 	ldw	r8,568(sp)
    40bc:	882090fa 	slli	r16,r17,3
    40c0:	dd402804 	addi	r21,sp,160
    40c4:	da05883a 	add	r2,sp,r8
    40c8:	10802804 	addi	r2,r2,160
    40cc:	15c00017 	ldw	r23,0(r2)
    40d0:	15800117 	ldw	r22,4(r2)
    40d4:	8029883a 	mov	r20,r16
    40d8:	843ffe04 	addi	r16,r16,-8
    40dc:	ac21883a 	add	r16,r21,r16
    40e0:	ad29883a 	add	r20,r21,r20
    40e4:	dac02604 	addi	r11,sp,152
    40e8:	8811883a 	mov	r8,r17
    40ec:	84400017 	ldw	r17,0(r16)
    40f0:	87000117 	ldw	fp,4(r16)
    40f4:	b80d883a 	mov	r6,r23
    40f8:	b00f883a 	mov	r7,r22
    40fc:	8809883a 	mov	r4,r17
    4100:	e00b883a 	mov	r5,fp
    4104:	da009b15 	stw	r8,620(sp)
    4108:	dac09915 	stw	r11,612(sp)
    410c:	0004f3c0 	call	4f3c <__adddf3>
    4110:	100d883a 	mov	r6,r2
    4114:	180f883a 	mov	r7,r3
    4118:	8809883a 	mov	r4,r17
    411c:	e00b883a 	mov	r5,fp
    4120:	1027883a 	mov	r19,r2
    4124:	1825883a 	mov	r18,r3
    4128:	0006c7c0 	call	6c7c <__subdf3>
    412c:	b80d883a 	mov	r6,r23
    4130:	b00f883a 	mov	r7,r22
    4134:	1009883a 	mov	r4,r2
    4138:	180b883a 	mov	r5,r3
    413c:	0004f3c0 	call	4f3c <__adddf3>
    4140:	dac09917 	ldw	r11,612(sp)
    4144:	a0800015 	stw	r2,0(r20)
    4148:	a0c00115 	stw	r3,4(r20)
    414c:	84c00015 	stw	r19,0(r16)
    4150:	84800115 	stw	r18,4(r16)
    4154:	843ffe04 	addi	r16,r16,-8
    4158:	a53ffe04 	addi	r20,r20,-8
    415c:	982f883a 	mov	r23,r19
    4160:	902d883a 	mov	r22,r18
    4164:	da009b17 	ldw	r8,620(sp)
    4168:	5c3fe01e 	bne	r11,r16,40ec <__alt_data_end+0xfffd33ac>
    416c:	00800044 	movi	r2,1
    4170:	12008d0e 	bge	r2,r8,43a8 <__kernel_rem_pio2+0xcf4>
    4174:	402090fa 	slli	r16,r8,3
    4178:	da008e17 	ldw	r8,568(sp)
    417c:	8023883a 	mov	r17,r16
    4180:	da05883a 	add	r2,sp,r8
    4184:	10802804 	addi	r2,r2,160
    4188:	15800017 	ldw	r22,0(r2)
    418c:	15000117 	ldw	r20,4(r2)
    4190:	ac63883a 	add	r17,r21,r17
    4194:	843ffe04 	addi	r16,r16,-8
    4198:	ac21883a 	add	r16,r21,r16
    419c:	8825883a 	mov	r18,r17
    41a0:	8811883a 	mov	r8,r17
    41a4:	84400017 	ldw	r17,0(r16)
    41a8:	87000117 	ldw	fp,4(r16)
    41ac:	b009883a 	mov	r4,r22
    41b0:	a00b883a 	mov	r5,r20
    41b4:	880d883a 	mov	r6,r17
    41b8:	e00f883a 	mov	r7,fp
    41bc:	da009b15 	stw	r8,620(sp)
    41c0:	0004f3c0 	call	4f3c <__adddf3>
    41c4:	100d883a 	mov	r6,r2
    41c8:	180f883a 	mov	r7,r3
    41cc:	8809883a 	mov	r4,r17
    41d0:	e00b883a 	mov	r5,fp
    41d4:	102f883a 	mov	r23,r2
    41d8:	1827883a 	mov	r19,r3
    41dc:	0006c7c0 	call	6c7c <__subdf3>
    41e0:	b00d883a 	mov	r6,r22
    41e4:	a00f883a 	mov	r7,r20
    41e8:	1009883a 	mov	r4,r2
    41ec:	180b883a 	mov	r5,r3
    41f0:	0004f3c0 	call	4f3c <__adddf3>
    41f4:	90800015 	stw	r2,0(r18)
    41f8:	90c00115 	stw	r3,4(r18)
    41fc:	85c00015 	stw	r23,0(r16)
    4200:	84c00115 	stw	r19,4(r16)
    4204:	843ffe04 	addi	r16,r16,-8
    4208:	94bffe04 	addi	r18,r18,-8
    420c:	b82d883a 	mov	r22,r23
    4210:	9829883a 	mov	r20,r19
    4214:	da009b17 	ldw	r8,620(sp)
    4218:	ac3fe21e 	bne	r21,r16,41a4 <__alt_data_end+0xfffd3464>
    421c:	4023883a 	mov	r17,r8
    4220:	dc002a04 	addi	r16,sp,168
    4224:	0005883a 	mov	r2,zero
    4228:	0007883a 	mov	r3,zero
    422c:	89800017 	ldw	r6,0(r17)
    4230:	89c00117 	ldw	r7,4(r17)
    4234:	1009883a 	mov	r4,r2
    4238:	8c7ffe04 	addi	r17,r17,-8
    423c:	180b883a 	mov	r5,r3
    4240:	0004f3c0 	call	4f3c <__adddf3>
    4244:	847ff91e 	bne	r16,r17,422c <__alt_data_end+0xfffd34ec>
    4248:	da008d17 	ldw	r8,564(sp)
    424c:	40004726 	beq	r8,zero,436c <__kernel_rem_pio2+0xcb8>
    4250:	d9002b17 	ldw	r4,172(sp)
    4254:	d9402917 	ldw	r5,164(sp)
    4258:	d9802a17 	ldw	r6,168(sp)
    425c:	da008f17 	ldw	r8,572(sp)
    4260:	d9c02817 	ldw	r7,160(sp)
    4264:	2960003c 	xorhi	r5,r5,32768
    4268:	2120003c 	xorhi	r4,r4,32768
    426c:	18e0003c 	xorhi	r3,r3,32768
    4270:	41c00015 	stw	r7,0(r8)
    4274:	41400115 	stw	r5,4(r8)
    4278:	41800215 	stw	r6,8(r8)
    427c:	41000315 	stw	r4,12(r8)
    4280:	40800415 	stw	r2,16(r8)
    4284:	40c00515 	stw	r3,20(r8)
    4288:	003f3706 	br	3f68 <__alt_data_end+0xfffd3228>
    428c:	da008e17 	ldw	r8,568(sp)
    4290:	d8802804 	addi	r2,sp,160
    4294:	dc002604 	addi	r16,sp,152
    4298:	1225883a 	add	r18,r2,r8
    429c:	0007883a 	mov	r3,zero
    42a0:	0005883a 	mov	r2,zero
    42a4:	91800017 	ldw	r6,0(r18)
    42a8:	91c00117 	ldw	r7,4(r18)
    42ac:	1009883a 	mov	r4,r2
    42b0:	94bffe04 	addi	r18,r18,-8
    42b4:	180b883a 	mov	r5,r3
    42b8:	0004f3c0 	call	4f3c <__adddf3>
    42bc:	943ff91e 	bne	r18,r16,42a4 <__alt_data_end+0xfffd3564>
    42c0:	da008d17 	ldw	r8,564(sp)
    42c4:	d9002817 	ldw	r4,160(sp)
    42c8:	d9402917 	ldw	r5,164(sp)
    42cc:	40001a26 	beq	r8,zero,4338 <__kernel_rem_pio2+0xc84>
    42d0:	da008f17 	ldw	r8,572(sp)
    42d4:	19a0003c 	xorhi	r6,r3,32768
    42d8:	180f883a 	mov	r7,r3
    42dc:	41800115 	stw	r6,4(r8)
    42e0:	40800015 	stw	r2,0(r8)
    42e4:	100d883a 	mov	r6,r2
    42e8:	0006c7c0 	call	6c7c <__subdf3>
    42ec:	04400c0e 	bge	zero,r17,4320 <__kernel_rem_pio2+0xc6c>
    42f0:	dc002a04 	addi	r16,sp,168
    42f4:	04800044 	movi	r18,1
    42f8:	81800017 	ldw	r6,0(r16)
    42fc:	81c00117 	ldw	r7,4(r16)
    4300:	1009883a 	mov	r4,r2
    4304:	180b883a 	mov	r5,r3
    4308:	94800044 	addi	r18,r18,1
    430c:	0004f3c0 	call	4f3c <__adddf3>
    4310:	84000204 	addi	r16,r16,8
    4314:	8cbff80e 	bge	r17,r18,42f8 <__alt_data_end+0xfffd35b8>
    4318:	da008d17 	ldw	r8,564(sp)
    431c:	40004226 	beq	r8,zero,4428 <__kernel_rem_pio2+0xd74>
    4320:	da008f17 	ldw	r8,572(sp)
    4324:	1009883a 	mov	r4,r2
    4328:	18a0003c 	xorhi	r2,r3,32768
    432c:	41000215 	stw	r4,8(r8)
    4330:	40800315 	stw	r2,12(r8)
    4334:	003f0c06 	br	3f68 <__alt_data_end+0xfffd3228>
    4338:	da008f17 	ldw	r8,572(sp)
    433c:	100d883a 	mov	r6,r2
    4340:	180f883a 	mov	r7,r3
    4344:	40800015 	stw	r2,0(r8)
    4348:	40c00115 	stw	r3,4(r8)
    434c:	0006c7c0 	call	6c7c <__subdf3>
    4350:	047fe716 	blt	zero,r17,42f0 <__alt_data_end+0xfffd35b0>
    4354:	da008f17 	ldw	r8,572(sp)
    4358:	1009883a 	mov	r4,r2
    435c:	1805883a 	mov	r2,r3
    4360:	41000215 	stw	r4,8(r8)
    4364:	40800315 	stw	r2,12(r8)
    4368:	003eff06 	br	3f68 <__alt_data_end+0xfffd3228>
    436c:	da008f17 	ldw	r8,572(sp)
    4370:	d9802817 	ldw	r6,160(sp)
    4374:	d9402a17 	ldw	r5,168(sp)
    4378:	d9002b17 	ldw	r4,172(sp)
    437c:	41800015 	stw	r6,0(r8)
    4380:	d9802917 	ldw	r6,164(sp)
    4384:	41400215 	stw	r5,8(r8)
    4388:	41000315 	stw	r4,12(r8)
    438c:	41800115 	stw	r6,4(r8)
    4390:	40800415 	stw	r2,16(r8)
    4394:	40c00515 	stw	r3,20(r8)
    4398:	003ef306 	br	3f68 <__alt_data_end+0xfffd3228>
    439c:	da00a617 	ldw	r8,664(sp)
    43a0:	008000c4 	movi	r2,3
    43a4:	40bef01e 	bne	r8,r2,3f68 <__alt_data_end+0xfffd3228>
    43a8:	0005883a 	mov	r2,zero
    43ac:	0007883a 	mov	r3,zero
    43b0:	003fa506 	br	4248 <__alt_data_end+0xfffd3508>
    43b4:	9485883a 	add	r2,r18,r18
    43b8:	1085883a 	add	r2,r2,r2
    43bc:	d8a1883a 	add	r16,sp,r2
    43c0:	880b883a 	mov	r5,r17
    43c4:	a809883a 	mov	r4,r21
    43c8:	84007804 	addi	r16,r16,480
    43cc:	00075780 	call	7578 <__fixdfsi>
    43d0:	80800015 	stw	r2,0(r16)
    43d4:	9023883a 	mov	r17,r18
    43d8:	003e7e06 	br	3dd4 <__alt_data_end+0xfffd3094>
    43dc:	a80d883a 	mov	r6,r21
    43e0:	400f883a 	mov	r7,r8
    43e4:	0009883a 	mov	r4,zero
    43e8:	014ffc34 	movhi	r5,16368
    43ec:	0006c7c0 	call	6c7c <__subdf3>
    43f0:	102b883a 	mov	r21,r2
    43f4:	1811883a 	mov	r8,r3
    43f8:	04c00084 	movi	r19,2
    43fc:	003dc006 	br	3b00 <__alt_data_end+0xfffd2dc0>
    4400:	da00a617 	ldw	r8,664(sp)
    4404:	00800084 	movi	r2,2
    4408:	123fe416 	blt	r2,r8,439c <__alt_data_end+0xfffd365c>
    440c:	02000c16 	blt	zero,r8,4440 <__kernel_rem_pio2+0xd8c>
    4410:	403ed51e 	bne	r8,zero,3f68 <__alt_data_end+0xfffd3228>
    4414:	0005883a 	mov	r2,zero
    4418:	0007883a 	mov	r3,zero
    441c:	003ecc06 	br	3f50 <__alt_data_end+0xfffd3210>
    4420:	d8009215 	stw	zero,584(sp)
    4424:	003cc106 	br	372c <__alt_data_end+0xfffd29ec>
    4428:	da008f17 	ldw	r8,572(sp)
    442c:	1009883a 	mov	r4,r2
    4430:	1805883a 	mov	r2,r3
    4434:	41000215 	stw	r4,8(r8)
    4438:	40800315 	stw	r2,12(r8)
    443c:	003eca06 	br	3f68 <__alt_data_end+0xfffd3228>
    4440:	0005883a 	mov	r2,zero
    4444:	0007883a 	mov	r3,zero
    4448:	003f9d06 	br	42c0 <__alt_data_end+0xfffd3580>

0000444c <__kernel_sin>:
    444c:	00a00034 	movhi	r2,32768
    4450:	defff404 	addi	sp,sp,-48
    4454:	10bfffc4 	addi	r2,r2,-1
    4458:	00cf9034 	movhi	r3,15936
    445c:	ddc00915 	stw	r23,36(sp)
    4460:	dd800815 	stw	r22,32(sp)
    4464:	dc400315 	stw	r17,12(sp)
    4468:	dc000215 	stw	r16,8(sp)
    446c:	dfc00b15 	stw	ra,44(sp)
    4470:	df000a15 	stw	fp,40(sp)
    4474:	dd400715 	stw	r21,28(sp)
    4478:	dd000615 	stw	r20,24(sp)
    447c:	dcc00515 	stw	r19,20(sp)
    4480:	dc800415 	stw	r18,16(sp)
    4484:	2884703a 	and	r2,r5,r2
    4488:	18ffffc4 	addi	r3,r3,-1
    448c:	2821883a 	mov	r16,r5
    4490:	2023883a 	mov	r17,r4
    4494:	302f883a 	mov	r23,r6
    4498:	382d883a 	mov	r22,r7
    449c:	18800216 	blt	r3,r2,44a8 <__kernel_sin+0x5c>
    44a0:	00075780 	call	7578 <__fixdfsi>
    44a4:	10009926 	beq	r2,zero,470c <__kernel_sin+0x2c0>
    44a8:	880d883a 	mov	r6,r17
    44ac:	800f883a 	mov	r7,r16
    44b0:	8809883a 	mov	r4,r17
    44b4:	800b883a 	mov	r5,r16
    44b8:	00064100 	call	6410 <__muldf3>
    44bc:	100d883a 	mov	r6,r2
    44c0:	180f883a 	mov	r7,r3
    44c4:	8809883a 	mov	r4,r17
    44c8:	800b883a 	mov	r5,r16
    44cc:	1027883a 	mov	r19,r2
    44d0:	1825883a 	mov	r18,r3
    44d4:	00064100 	call	6410 <__muldf3>
    44d8:	0196b434 	movhi	r6,23248
    44dc:	01cf79b4 	movhi	r7,15846
    44e0:	31b55f04 	addi	r6,r6,-10884
    44e4:	39f64e84 	addi	r7,r7,-9926
    44e8:	9809883a 	mov	r4,r19
    44ec:	900b883a 	mov	r5,r18
    44f0:	102b883a 	mov	r21,r2
    44f4:	1829883a 	mov	r20,r3
    44f8:	00064100 	call	6410 <__muldf3>
    44fc:	01a28b34 	movhi	r6,35372
    4500:	01cf96f4 	movhi	r7,15963
    4504:	31a73ac4 	addi	r6,r6,-25365
    4508:	39f97984 	addi	r7,r7,-6682
    450c:	1009883a 	mov	r4,r2
    4510:	180b883a 	mov	r5,r3
    4514:	0006c7c0 	call	6c7c <__subdf3>
    4518:	980d883a 	mov	r6,r19
    451c:	900f883a 	mov	r7,r18
    4520:	1009883a 	mov	r4,r2
    4524:	180b883a 	mov	r5,r3
    4528:	00064100 	call	6410 <__muldf3>
    452c:	0195ecb4 	movhi	r6,22450
    4530:	01cfb1f4 	movhi	r7,16071
    4534:	31bf9f44 	addi	r6,r6,-387
    4538:	39c778c4 	addi	r7,r7,7651
    453c:	1009883a 	mov	r4,r2
    4540:	180b883a 	mov	r5,r3
    4544:	0004f3c0 	call	4f3c <__adddf3>
    4548:	980d883a 	mov	r6,r19
    454c:	900f883a 	mov	r7,r18
    4550:	1009883a 	mov	r4,r2
    4554:	180b883a 	mov	r5,r3
    4558:	00064100 	call	6410 <__muldf3>
    455c:	01867074 	movhi	r6,6593
    4560:	01cfcab4 	movhi	r7,16170
    4564:	31987544 	addi	r6,r6,25045
    4568:	39c06804 	addi	r7,r7,416
    456c:	1009883a 	mov	r4,r2
    4570:	180b883a 	mov	r5,r3
    4574:	0006c7c0 	call	6c7c <__subdf3>
    4578:	980d883a 	mov	r6,r19
    457c:	900f883a 	mov	r7,r18
    4580:	1009883a 	mov	r4,r2
    4584:	180b883a 	mov	r5,r3
    4588:	00064100 	call	6410 <__muldf3>
    458c:	01844474 	movhi	r6,4369
    4590:	01cfe074 	movhi	r7,16257
    4594:	31be2984 	addi	r6,r6,-1882
    4598:	39c44444 	addi	r7,r7,4369
    459c:	1009883a 	mov	r4,r2
    45a0:	180b883a 	mov	r5,r3
    45a4:	0004f3c0 	call	4f3c <__adddf3>
    45a8:	1011883a 	mov	r8,r2
    45ac:	d8800c17 	ldw	r2,48(sp)
    45b0:	1839883a 	mov	fp,r3
    45b4:	10003e26 	beq	r2,zero,46b0 <__kernel_sin+0x264>
    45b8:	000d883a 	mov	r6,zero
    45bc:	01cff834 	movhi	r7,16352
    45c0:	b809883a 	mov	r4,r23
    45c4:	b00b883a 	mov	r5,r22
    45c8:	da000015 	stw	r8,0(sp)
    45cc:	00064100 	call	6410 <__muldf3>
    45d0:	da000017 	ldw	r8,0(sp)
    45d4:	e00f883a 	mov	r7,fp
    45d8:	a809883a 	mov	r4,r21
    45dc:	400d883a 	mov	r6,r8
    45e0:	a00b883a 	mov	r5,r20
    45e4:	d8c00115 	stw	r3,4(sp)
    45e8:	d8800015 	stw	r2,0(sp)
    45ec:	00064100 	call	6410 <__muldf3>
    45f0:	da800017 	ldw	r10,0(sp)
    45f4:	da400117 	ldw	r9,4(sp)
    45f8:	100d883a 	mov	r6,r2
    45fc:	5009883a 	mov	r4,r10
    4600:	480b883a 	mov	r5,r9
    4604:	180f883a 	mov	r7,r3
    4608:	0006c7c0 	call	6c7c <__subdf3>
    460c:	980d883a 	mov	r6,r19
    4610:	900f883a 	mov	r7,r18
    4614:	1009883a 	mov	r4,r2
    4618:	180b883a 	mov	r5,r3
    461c:	00064100 	call	6410 <__muldf3>
    4620:	b80d883a 	mov	r6,r23
    4624:	b00f883a 	mov	r7,r22
    4628:	1009883a 	mov	r4,r2
    462c:	180b883a 	mov	r5,r3
    4630:	0006c7c0 	call	6c7c <__subdf3>
    4634:	01955574 	movhi	r6,21845
    4638:	01cff174 	movhi	r7,16325
    463c:	31955244 	addi	r6,r6,21833
    4640:	39d55544 	addi	r7,r7,21845
    4644:	a809883a 	mov	r4,r21
    4648:	a00b883a 	mov	r5,r20
    464c:	1027883a 	mov	r19,r2
    4650:	1825883a 	mov	r18,r3
    4654:	00064100 	call	6410 <__muldf3>
    4658:	100d883a 	mov	r6,r2
    465c:	180f883a 	mov	r7,r3
    4660:	9809883a 	mov	r4,r19
    4664:	900b883a 	mov	r5,r18
    4668:	0004f3c0 	call	4f3c <__adddf3>
    466c:	100d883a 	mov	r6,r2
    4670:	180f883a 	mov	r7,r3
    4674:	8809883a 	mov	r4,r17
    4678:	800b883a 	mov	r5,r16
    467c:	0006c7c0 	call	6c7c <__subdf3>
    4680:	dfc00b17 	ldw	ra,44(sp)
    4684:	df000a17 	ldw	fp,40(sp)
    4688:	ddc00917 	ldw	r23,36(sp)
    468c:	dd800817 	ldw	r22,32(sp)
    4690:	dd400717 	ldw	r21,28(sp)
    4694:	dd000617 	ldw	r20,24(sp)
    4698:	dcc00517 	ldw	r19,20(sp)
    469c:	dc800417 	ldw	r18,16(sp)
    46a0:	dc400317 	ldw	r17,12(sp)
    46a4:	dc000217 	ldw	r16,8(sp)
    46a8:	dec00c04 	addi	sp,sp,48
    46ac:	f800283a 	ret
    46b0:	400d883a 	mov	r6,r8
    46b4:	9809883a 	mov	r4,r19
    46b8:	900b883a 	mov	r5,r18
    46bc:	180f883a 	mov	r7,r3
    46c0:	00064100 	call	6410 <__muldf3>
    46c4:	01955574 	movhi	r6,21845
    46c8:	01cff174 	movhi	r7,16325
    46cc:	31955244 	addi	r6,r6,21833
    46d0:	39d55544 	addi	r7,r7,21845
    46d4:	1009883a 	mov	r4,r2
    46d8:	180b883a 	mov	r5,r3
    46dc:	0006c7c0 	call	6c7c <__subdf3>
    46e0:	a80d883a 	mov	r6,r21
    46e4:	a00f883a 	mov	r7,r20
    46e8:	1009883a 	mov	r4,r2
    46ec:	180b883a 	mov	r5,r3
    46f0:	00064100 	call	6410 <__muldf3>
    46f4:	880d883a 	mov	r6,r17
    46f8:	800f883a 	mov	r7,r16
    46fc:	1009883a 	mov	r4,r2
    4700:	180b883a 	mov	r5,r3
    4704:	0004f3c0 	call	4f3c <__adddf3>
    4708:	003fdd06 	br	4680 <__alt_data_end+0xfffd3940>
    470c:	8805883a 	mov	r2,r17
    4710:	8007883a 	mov	r3,r16
    4714:	003fda06 	br	4680 <__alt_data_end+0xfffd3940>

00004718 <fabs>:
    4718:	00e00034 	movhi	r3,32768
    471c:	18ffffc4 	addi	r3,r3,-1
    4720:	2005883a 	mov	r2,r4
    4724:	28c6703a 	and	r3,r5,r3
    4728:	f800283a 	ret

0000472c <finite>:
    472c:	00a00034 	movhi	r2,32768
    4730:	10bfffc4 	addi	r2,r2,-1
    4734:	288a703a 	and	r5,r5,r2
    4738:	00e00434 	movhi	r3,32784
    473c:	28c5883a 	add	r2,r5,r3
    4740:	1004d7fa 	srli	r2,r2,31
    4744:	f800283a 	ret

00004748 <floor>:
    4748:	2811d53a 	srai	r8,r5,20
    474c:	defffa04 	addi	sp,sp,-24
    4750:	dcc00315 	stw	r19,12(sp)
    4754:	4201ffcc 	andi	r8,r8,2047
    4758:	dc800215 	stw	r18,8(sp)
    475c:	dc400115 	stw	r17,4(sp)
    4760:	dc000015 	stw	r16,0(sp)
    4764:	dfc00515 	stw	ra,20(sp)
    4768:	dd000415 	stw	r20,16(sp)
    476c:	44bf0044 	addi	r18,r8,-1023
    4770:	018004c4 	movi	r6,19
    4774:	2821883a 	mov	r16,r5
    4778:	2005883a 	mov	r2,r4
    477c:	280f883a 	mov	r7,r5
    4780:	2827883a 	mov	r19,r5
    4784:	2023883a 	mov	r17,r4
    4788:	34801916 	blt	r6,r18,47f0 <floor+0xa8>
    478c:	90003c16 	blt	r18,zero,4880 <floor+0x138>
    4790:	05000434 	movhi	r20,16
    4794:	a53fffc4 	addi	r20,r20,-1
    4798:	a4a9d83a 	sra	r20,r20,r18
    479c:	2d0c703a 	and	r6,r5,r20
    47a0:	310cb03a 	or	r6,r6,r4
    47a4:	30001626 	beq	r6,zero,4800 <floor+0xb8>
    47a8:	01a20034 	movhi	r6,34816
    47ac:	01df8e34 	movhi	r7,32312
    47b0:	319d6704 	addi	r6,r6,30108
    47b4:	39f90f04 	addi	r7,r7,-7108
    47b8:	0004f3c0 	call	4f3c <__adddf3>
    47bc:	000d883a 	mov	r6,zero
    47c0:	000f883a 	mov	r7,zero
    47c4:	1009883a 	mov	r4,r2
    47c8:	180b883a 	mov	r5,r3
    47cc:	00062400 	call	6240 <__gedf2>
    47d0:	0080040e 	bge	zero,r2,47e4 <floor+0x9c>
    47d4:	80003c16 	blt	r16,zero,48c8 <floor+0x180>
    47d8:	0520303a 	nor	r16,zero,r20
    47dc:	84e0703a 	and	r16,r16,r19
    47e0:	0023883a 	mov	r17,zero
    47e4:	8805883a 	mov	r2,r17
    47e8:	8007883a 	mov	r3,r16
    47ec:	00000506 	br	4804 <floor+0xbc>
    47f0:	01800cc4 	movi	r6,51
    47f4:	34800b0e 	bge	r6,r18,4824 <floor+0xdc>
    47f8:	01810004 	movi	r6,1024
    47fc:	91802f26 	beq	r18,r6,48bc <floor+0x174>
    4800:	3807883a 	mov	r3,r7
    4804:	dfc00517 	ldw	ra,20(sp)
    4808:	dd000417 	ldw	r20,16(sp)
    480c:	dcc00317 	ldw	r19,12(sp)
    4810:	dc800217 	ldw	r18,8(sp)
    4814:	dc400117 	ldw	r17,4(sp)
    4818:	dc000017 	ldw	r16,0(sp)
    481c:	dec00604 	addi	sp,sp,24
    4820:	f800283a 	ret
    4824:	423efb44 	addi	r8,r8,-1043
    4828:	053fffc4 	movi	r20,-1
    482c:	a228d83a 	srl	r20,r20,r8
    4830:	250c703a 	and	r6,r4,r20
    4834:	303ff226 	beq	r6,zero,4800 <__alt_data_end+0xfffd3ac0>
    4838:	01a20034 	movhi	r6,34816
    483c:	01df8e34 	movhi	r7,32312
    4840:	319d6704 	addi	r6,r6,30108
    4844:	39f90f04 	addi	r7,r7,-7108
    4848:	0004f3c0 	call	4f3c <__adddf3>
    484c:	000d883a 	mov	r6,zero
    4850:	000f883a 	mov	r7,zero
    4854:	1009883a 	mov	r4,r2
    4858:	180b883a 	mov	r5,r3
    485c:	00062400 	call	6240 <__gedf2>
    4860:	00bfe00e 	bge	zero,r2,47e4 <__alt_data_end+0xfffd3aa4>
    4864:	80001c16 	blt	r16,zero,48d8 <floor+0x190>
    4868:	0510303a 	nor	r8,zero,r20
    486c:	9821883a 	mov	r16,r19
    4870:	8a22703a 	and	r17,r17,r8
    4874:	8805883a 	mov	r2,r17
    4878:	8007883a 	mov	r3,r16
    487c:	003fe106 	br	4804 <__alt_data_end+0xfffd3ac4>
    4880:	01a20034 	movhi	r6,34816
    4884:	01df8e34 	movhi	r7,32312
    4888:	319d6704 	addi	r6,r6,30108
    488c:	39f90f04 	addi	r7,r7,-7108
    4890:	0004f3c0 	call	4f3c <__adddf3>
    4894:	000d883a 	mov	r6,zero
    4898:	000f883a 	mov	r7,zero
    489c:	1009883a 	mov	r4,r2
    48a0:	180b883a 	mov	r5,r3
    48a4:	00062400 	call	6240 <__gedf2>
    48a8:	00bfce0e 	bge	zero,r2,47e4 <__alt_data_end+0xfffd3aa4>
    48ac:	80001516 	blt	r16,zero,4904 <floor+0x1bc>
    48b0:	0023883a 	mov	r17,zero
    48b4:	0021883a 	mov	r16,zero
    48b8:	003fca06 	br	47e4 <__alt_data_end+0xfffd3aa4>
    48bc:	200d883a 	mov	r6,r4
    48c0:	0004f3c0 	call	4f3c <__adddf3>
    48c4:	003fcf06 	br	4804 <__alt_data_end+0xfffd3ac4>
    48c8:	00800434 	movhi	r2,16
    48cc:	14a5d83a 	sra	r18,r2,r18
    48d0:	84a7883a 	add	r19,r16,r18
    48d4:	003fc006 	br	47d8 <__alt_data_end+0xfffd3a98>
    48d8:	00800504 	movi	r2,20
    48dc:	90801326 	beq	r18,r2,492c <floor+0x1e4>
    48e0:	00800d04 	movi	r2,52
    48e4:	14a5c83a 	sub	r18,r2,r18
    48e8:	00800044 	movi	r2,1
    48ec:	1484983a 	sll	r2,r2,r18
    48f0:	1445883a 	add	r2,r2,r17
    48f4:	14400b2e 	bgeu	r2,r17,4924 <floor+0x1dc>
    48f8:	84c00044 	addi	r19,r16,1
    48fc:	1023883a 	mov	r17,r2
    4900:	003fd906 	br	4868 <__alt_data_end+0xfffd3b28>
    4904:	00a00034 	movhi	r2,32768
    4908:	10bfffc4 	addi	r2,r2,-1
    490c:	8084703a 	and	r2,r16,r2
    4910:	1462b03a 	or	r17,r2,r17
    4914:	883fb326 	beq	r17,zero,47e4 <__alt_data_end+0xfffd3aa4>
    4918:	0023883a 	mov	r17,zero
    491c:	042ffc34 	movhi	r16,49136
    4920:	003fb006 	br	47e4 <__alt_data_end+0xfffd3aa4>
    4924:	1023883a 	mov	r17,r2
    4928:	003fcf06 	br	4868 <__alt_data_end+0xfffd3b28>
    492c:	84c00044 	addi	r19,r16,1
    4930:	003fcd06 	br	4868 <__alt_data_end+0xfffd3b28>

00004934 <__fpclassifyd>:
    4934:	00a00034 	movhi	r2,32768
    4938:	10bfffc4 	addi	r2,r2,-1
    493c:	2884703a 	and	r2,r5,r2
    4940:	10000726 	beq	r2,zero,4960 <__fpclassifyd+0x2c>
    4944:	00fffc34 	movhi	r3,65520
    4948:	019ff834 	movhi	r6,32736
    494c:	28c7883a 	add	r3,r5,r3
    4950:	31bfffc4 	addi	r6,r6,-1
    4954:	30c00536 	bltu	r6,r3,496c <__fpclassifyd+0x38>
    4958:	00800104 	movi	r2,4
    495c:	f800283a 	ret
    4960:	2000021e 	bne	r4,zero,496c <__fpclassifyd+0x38>
    4964:	00800084 	movi	r2,2
    4968:	f800283a 	ret
    496c:	00dffc34 	movhi	r3,32752
    4970:	019ff834 	movhi	r6,32736
    4974:	28cb883a 	add	r5,r5,r3
    4978:	31bfffc4 	addi	r6,r6,-1
    497c:	317ff62e 	bgeu	r6,r5,4958 <__alt_data_end+0xfffd3c18>
    4980:	01400434 	movhi	r5,16
    4984:	297fffc4 	addi	r5,r5,-1
    4988:	28800236 	bltu	r5,r2,4994 <__fpclassifyd+0x60>
    498c:	008000c4 	movi	r2,3
    4990:	f800283a 	ret
    4994:	10c00226 	beq	r2,r3,49a0 <__fpclassifyd+0x6c>
    4998:	0005883a 	mov	r2,zero
    499c:	f800283a 	ret
    49a0:	2005003a 	cmpeq	r2,r4,zero
    49a4:	f800283a 	ret

000049a8 <matherr>:
    49a8:	0005883a 	mov	r2,zero
    49ac:	f800283a 	ret

000049b0 <nan>:
    49b0:	0005883a 	mov	r2,zero
    49b4:	00dffe34 	movhi	r3,32760
    49b8:	f800283a 	ret

000049bc <rint>:
    49bc:	2813d53a 	srai	r9,r5,20
    49c0:	defff904 	addi	sp,sp,-28
    49c4:	dc000215 	stw	r16,8(sp)
    49c8:	4a41ffcc 	andi	r9,r9,2047
    49cc:	dfc00615 	stw	ra,24(sp)
    49d0:	dcc00515 	stw	r19,20(sp)
    49d4:	dc800415 	stw	r18,16(sp)
    49d8:	dc400315 	stw	r17,12(sp)
    49dc:	01c004c4 	movi	r7,19
    49e0:	49bf0044 	addi	r6,r9,-1023
    49e4:	2811883a 	mov	r8,r5
    49e8:	2005883a 	mov	r2,r4
    49ec:	2807883a 	mov	r3,r5
    49f0:	2015883a 	mov	r10,r4
    49f4:	2820d7fa 	srli	r16,r5,31
    49f8:	39801316 	blt	r7,r6,4a48 <rint+0x8c>
    49fc:	30003d16 	blt	r6,zero,4af4 <rint+0x138>
    4a00:	01000434 	movhi	r4,16
    4a04:	213fffc4 	addi	r4,r4,-1
    4a08:	2189d83a 	sra	r4,r4,r6
    4a0c:	290a703a 	and	r5,r5,r4
    4a10:	288ab03a 	or	r5,r5,r2
    4a14:	28001026 	beq	r5,zero,4a58 <rint+0x9c>
    4a18:	2008d07a 	srli	r4,r4,1
    4a1c:	4104703a 	and	r2,r8,r4
    4a20:	1294b03a 	or	r10,r2,r10
    4a24:	50005626 	beq	r10,zero,4b80 <rint+0x1c4>
    4a28:	31c05d26 	beq	r6,r7,4ba0 <rint+0x1e4>
    4a2c:	0015883a 	mov	r10,zero
    4a30:	00c00134 	movhi	r3,4
    4a34:	1987d83a 	sra	r3,r3,r6
    4a38:	0108303a 	nor	r4,zero,r4
    4a3c:	2210703a 	and	r8,r4,r8
    4a40:	40c6b03a 	or	r3,r8,r3
    4a44:	00001806 	br	4aa8 <rint+0xec>
    4a48:	01c00cc4 	movi	r7,51
    4a4c:	3980090e 	bge	r7,r6,4a74 <rint+0xb8>
    4a50:	01c10004 	movi	r7,1024
    4a54:	31c04e26 	beq	r6,r7,4b90 <rint+0x1d4>
    4a58:	dfc00617 	ldw	ra,24(sp)
    4a5c:	dcc00517 	ldw	r19,20(sp)
    4a60:	dc800417 	ldw	r18,16(sp)
    4a64:	dc400317 	ldw	r17,12(sp)
    4a68:	dc000217 	ldw	r16,8(sp)
    4a6c:	dec00704 	addi	sp,sp,28
    4a70:	f800283a 	ret
    4a74:	4a7efb44 	addi	r9,r9,-1043
    4a78:	013fffc4 	movi	r4,-1
    4a7c:	2248d83a 	srl	r4,r4,r9
    4a80:	110a703a 	and	r5,r2,r4
    4a84:	28004026 	beq	r5,zero,4b88 <rint+0x1cc>
    4a88:	2008d07a 	srli	r4,r4,1
    4a8c:	1104703a 	and	r2,r2,r4
    4a90:	10000526 	beq	r2,zero,4aa8 <rint+0xec>
    4a94:	00900034 	movhi	r2,16384
    4a98:	1253d83a 	sra	r9,r2,r9
    4a9c:	0108303a 	nor	r4,zero,r4
    4aa0:	2294703a 	and	r10,r4,r10
    4aa4:	4a94b03a 	or	r10,r9,r10
    4aa8:	802090fa 	slli	r16,r16,3
    4aac:	180b883a 	mov	r5,r3
    4ab0:	00c000b4 	movhi	r3,2
    4ab4:	18f1df04 	addi	r3,r3,-14468
    4ab8:	1c21883a 	add	r16,r3,r16
    4abc:	84400017 	ldw	r17,0(r16)
    4ac0:	84000117 	ldw	r16,4(r16)
    4ac4:	5009883a 	mov	r4,r10
    4ac8:	880d883a 	mov	r6,r17
    4acc:	800f883a 	mov	r7,r16
    4ad0:	0004f3c0 	call	4f3c <__adddf3>
    4ad4:	d8800015 	stw	r2,0(sp)
    4ad8:	d8c00115 	stw	r3,4(sp)
    4adc:	d9000017 	ldw	r4,0(sp)
    4ae0:	d9400117 	ldw	r5,4(sp)
    4ae4:	880d883a 	mov	r6,r17
    4ae8:	800f883a 	mov	r7,r16
    4aec:	0006c7c0 	call	6c7c <__subdf3>
    4af0:	003fd906 	br	4a58 <__alt_data_end+0xfffd3d18>
    4af4:	04600034 	movhi	r17,32768
    4af8:	8c7fffc4 	addi	r17,r17,-1
    4afc:	2c46703a 	and	r3,r5,r17
    4b00:	1906b03a 	or	r3,r3,r4
    4b04:	18002026 	beq	r3,zero,4b88 <rint+0x1cc>
    4b08:	01800434 	movhi	r6,16
    4b0c:	31bfffc4 	addi	r6,r6,-1
    4b10:	298c703a 	and	r6,r5,r6
    4b14:	3104b03a 	or	r2,r6,r4
    4b18:	008bc83a 	sub	r5,zero,r2
    4b1c:	800690fa 	slli	r3,r16,3
    4b20:	2884b03a 	or	r2,r5,r2
    4b24:	014000b4 	movhi	r5,2
    4b28:	2971df04 	addi	r5,r5,-14468
    4b2c:	28c7883a 	add	r3,r5,r3
    4b30:	1004d33a 	srli	r2,r2,12
    4b34:	1cc00017 	ldw	r19,0(r3)
    4b38:	1c800117 	ldw	r18,4(r3)
    4b3c:	417fffac 	andhi	r5,r8,65534
    4b40:	1080022c 	andhi	r2,r2,8
    4b44:	980d883a 	mov	r6,r19
    4b48:	900f883a 	mov	r7,r18
    4b4c:	114ab03a 	or	r5,r2,r5
    4b50:	0004f3c0 	call	4f3c <__adddf3>
    4b54:	d8800015 	stw	r2,0(sp)
    4b58:	d8c00115 	stw	r3,4(sp)
    4b5c:	d9000017 	ldw	r4,0(sp)
    4b60:	d9400117 	ldw	r5,4(sp)
    4b64:	980d883a 	mov	r6,r19
    4b68:	900f883a 	mov	r7,r18
    4b6c:	0006c7c0 	call	6c7c <__subdf3>
    4b70:	800897fa 	slli	r4,r16,31
    4b74:	1c46703a 	and	r3,r3,r17
    4b78:	1906b03a 	or	r3,r3,r4
    4b7c:	003fb606 	br	4a58 <__alt_data_end+0xfffd3d18>
    4b80:	0015883a 	mov	r10,zero
    4b84:	003fc806 	br	4aa8 <__alt_data_end+0xfffd3d68>
    4b88:	4007883a 	mov	r3,r8
    4b8c:	003fb206 	br	4a58 <__alt_data_end+0xfffd3d18>
    4b90:	200d883a 	mov	r6,r4
    4b94:	280f883a 	mov	r7,r5
    4b98:	0004f3c0 	call	4f3c <__adddf3>
    4b9c:	003fae06 	br	4a58 <__alt_data_end+0xfffd3d18>
    4ba0:	02a00034 	movhi	r10,32768
    4ba4:	003fa206 	br	4a30 <__alt_data_end+0xfffd3cf0>

00004ba8 <scalbn>:
    4ba8:	2a1ffc2c 	andhi	r8,r5,32752
    4bac:	4011d53a 	srai	r8,r8,20
    4bb0:	defffe04 	addi	sp,sp,-8
    4bb4:	dc000015 	stw	r16,0(sp)
    4bb8:	dfc00115 	stw	ra,4(sp)
    4bbc:	280f883a 	mov	r7,r5
    4bc0:	2015883a 	mov	r10,r4
    4bc4:	3021883a 	mov	r16,r6
    4bc8:	40001e1e 	bne	r8,zero,4c44 <scalbn+0x9c>
    4bcc:	00a00034 	movhi	r2,32768
    4bd0:	10bfffc4 	addi	r2,r2,-1
    4bd4:	2884703a 	and	r2,r5,r2
    4bd8:	1104b03a 	or	r2,r2,r4
    4bdc:	10002226 	beq	r2,zero,4c68 <scalbn+0xc0>
    4be0:	01d0d434 	movhi	r7,17232
    4be4:	000d883a 	mov	r6,zero
    4be8:	00064100 	call	6410 <__muldf3>
    4bec:	013ffff4 	movhi	r4,65535
    4bf0:	210f2c04 	addi	r4,r4,15536
    4bf4:	1015883a 	mov	r10,r2
    4bf8:	180f883a 	mov	r7,r3
    4bfc:	81002a16 	blt	r16,r4,4ca8 <scalbn+0x100>
    4c00:	191ffc2c 	andhi	r4,r3,32752
    4c04:	2009d53a 	srai	r4,r4,20
    4c08:	223ff284 	addi	r8,r4,-54
    4c0c:	8211883a 	add	r8,r16,r8
    4c10:	0081ff84 	movi	r2,2046
    4c14:	12002f16 	blt	r2,r8,4cd4 <scalbn+0x12c>
    4c18:	0200190e 	bge	zero,r8,4c80 <scalbn+0xd8>
    4c1c:	4010953a 	slli	r8,r8,20
    4c20:	01600434 	movhi	r5,32784
    4c24:	297fffc4 	addi	r5,r5,-1
    4c28:	194e703a 	and	r7,r3,r5
    4c2c:	5005883a 	mov	r2,r10
    4c30:	3a06b03a 	or	r3,r7,r8
    4c34:	dfc00117 	ldw	ra,4(sp)
    4c38:	dc000017 	ldw	r16,0(sp)
    4c3c:	dec00204 	addi	sp,sp,8
    4c40:	f800283a 	ret
    4c44:	0081ffc4 	movi	r2,2047
    4c48:	2807883a 	mov	r3,r5
    4c4c:	40bfef1e 	bne	r8,r2,4c0c <__alt_data_end+0xfffd3ecc>
    4c50:	200d883a 	mov	r6,r4
    4c54:	0004f3c0 	call	4f3c <__adddf3>
    4c58:	dfc00117 	ldw	ra,4(sp)
    4c5c:	dc000017 	ldw	r16,0(sp)
    4c60:	dec00204 	addi	sp,sp,8
    4c64:	f800283a 	ret
    4c68:	2005883a 	mov	r2,r4
    4c6c:	2807883a 	mov	r3,r5
    4c70:	dfc00117 	ldw	ra,4(sp)
    4c74:	dc000017 	ldw	r16,0(sp)
    4c78:	dec00204 	addi	sp,sp,8
    4c7c:	f800283a 	ret
    4c80:	00bff2c4 	movi	r2,-53
    4c84:	4080240e 	bge	r8,r2,4d18 <scalbn+0x170>
    4c88:	00b0d414 	movui	r2,50000
    4c8c:	14001116 	blt	r2,r16,4cd4 <scalbn+0x12c>
    4c90:	0130be74 	movhi	r4,49913
    4c94:	01406974 	movhi	r5,421
    4c98:	213cd644 	addi	r4,r4,-3239
    4c9c:	295b87c4 	addi	r5,r5,28191
    4ca0:	500d883a 	mov	r6,r10
    4ca4:	0004d440 	call	4d44 <copysign>
    4ca8:	01b0be74 	movhi	r6,49913
    4cac:	01c06974 	movhi	r7,421
    4cb0:	31bcd644 	addi	r6,r6,-3239
    4cb4:	39db87c4 	addi	r7,r7,28191
    4cb8:	1009883a 	mov	r4,r2
    4cbc:	180b883a 	mov	r5,r3
    4cc0:	00064100 	call	6410 <__muldf3>
    4cc4:	dfc00117 	ldw	ra,4(sp)
    4cc8:	dc000017 	ldw	r16,0(sp)
    4ccc:	dec00204 	addi	sp,sp,8
    4cd0:	f800283a 	ret
    4cd4:	01220034 	movhi	r4,34816
    4cd8:	015f8e34 	movhi	r5,32312
    4cdc:	500d883a 	mov	r6,r10
    4ce0:	211d6704 	addi	r4,r4,30108
    4ce4:	29790f04 	addi	r5,r5,-7108
    4ce8:	0004d440 	call	4d44 <copysign>
    4cec:	01a20034 	movhi	r6,34816
    4cf0:	01df8e34 	movhi	r7,32312
    4cf4:	319d6704 	addi	r6,r6,30108
    4cf8:	39f90f04 	addi	r7,r7,-7108
    4cfc:	1009883a 	mov	r4,r2
    4d00:	180b883a 	mov	r5,r3
    4d04:	00064100 	call	6410 <__muldf3>
    4d08:	dfc00117 	ldw	ra,4(sp)
    4d0c:	dc000017 	ldw	r16,0(sp)
    4d10:	dec00204 	addi	sp,sp,8
    4d14:	f800283a 	ret
    4d18:	42000d84 	addi	r8,r8,54
    4d1c:	4012953a 	slli	r9,r8,20
    4d20:	01e00434 	movhi	r7,32784
    4d24:	39ffffc4 	addi	r7,r7,-1
    4d28:	19ca703a 	and	r5,r3,r7
    4d2c:	000d883a 	mov	r6,zero
    4d30:	01cf2434 	movhi	r7,15504
    4d34:	5009883a 	mov	r4,r10
    4d38:	494ab03a 	or	r5,r9,r5
    4d3c:	00064100 	call	6410 <__muldf3>
    4d40:	003fbc06 	br	4c34 <__alt_data_end+0xfffd3ef4>

00004d44 <copysign>:
    4d44:	2005883a 	mov	r2,r4
    4d48:	01200034 	movhi	r4,32768
    4d4c:	213fffc4 	addi	r4,r4,-1
    4d50:	38e0002c 	andhi	r3,r7,32768
    4d54:	290a703a 	and	r5,r5,r4
    4d58:	28c6b03a 	or	r3,r5,r3
    4d5c:	f800283a 	ret

00004d60 <__divsi3>:
    4d60:	20001b16 	blt	r4,zero,4dd0 <__divsi3+0x70>
    4d64:	000f883a 	mov	r7,zero
    4d68:	28001616 	blt	r5,zero,4dc4 <__divsi3+0x64>
    4d6c:	200d883a 	mov	r6,r4
    4d70:	29001a2e 	bgeu	r5,r4,4ddc <__divsi3+0x7c>
    4d74:	00800804 	movi	r2,32
    4d78:	00c00044 	movi	r3,1
    4d7c:	00000106 	br	4d84 <__divsi3+0x24>
    4d80:	10000d26 	beq	r2,zero,4db8 <__divsi3+0x58>
    4d84:	294b883a 	add	r5,r5,r5
    4d88:	10bfffc4 	addi	r2,r2,-1
    4d8c:	18c7883a 	add	r3,r3,r3
    4d90:	293ffb36 	bltu	r5,r4,4d80 <__alt_data_end+0xfffd4040>
    4d94:	0005883a 	mov	r2,zero
    4d98:	18000726 	beq	r3,zero,4db8 <__divsi3+0x58>
    4d9c:	0005883a 	mov	r2,zero
    4da0:	31400236 	bltu	r6,r5,4dac <__divsi3+0x4c>
    4da4:	314dc83a 	sub	r6,r6,r5
    4da8:	10c4b03a 	or	r2,r2,r3
    4dac:	1806d07a 	srli	r3,r3,1
    4db0:	280ad07a 	srli	r5,r5,1
    4db4:	183ffa1e 	bne	r3,zero,4da0 <__alt_data_end+0xfffd4060>
    4db8:	38000126 	beq	r7,zero,4dc0 <__divsi3+0x60>
    4dbc:	0085c83a 	sub	r2,zero,r2
    4dc0:	f800283a 	ret
    4dc4:	014bc83a 	sub	r5,zero,r5
    4dc8:	39c0005c 	xori	r7,r7,1
    4dcc:	003fe706 	br	4d6c <__alt_data_end+0xfffd402c>
    4dd0:	0109c83a 	sub	r4,zero,r4
    4dd4:	01c00044 	movi	r7,1
    4dd8:	003fe306 	br	4d68 <__alt_data_end+0xfffd4028>
    4ddc:	00c00044 	movi	r3,1
    4de0:	003fee06 	br	4d9c <__alt_data_end+0xfffd405c>

00004de4 <__modsi3>:
    4de4:	20001716 	blt	r4,zero,4e44 <__modsi3+0x60>
    4de8:	000f883a 	mov	r7,zero
    4dec:	2005883a 	mov	r2,r4
    4df0:	28001216 	blt	r5,zero,4e3c <__modsi3+0x58>
    4df4:	2900162e 	bgeu	r5,r4,4e50 <__modsi3+0x6c>
    4df8:	01800804 	movi	r6,32
    4dfc:	00c00044 	movi	r3,1
    4e00:	00000106 	br	4e08 <__modsi3+0x24>
    4e04:	30000a26 	beq	r6,zero,4e30 <__modsi3+0x4c>
    4e08:	294b883a 	add	r5,r5,r5
    4e0c:	31bfffc4 	addi	r6,r6,-1
    4e10:	18c7883a 	add	r3,r3,r3
    4e14:	293ffb36 	bltu	r5,r4,4e04 <__alt_data_end+0xfffd40c4>
    4e18:	18000526 	beq	r3,zero,4e30 <__modsi3+0x4c>
    4e1c:	1806d07a 	srli	r3,r3,1
    4e20:	11400136 	bltu	r2,r5,4e28 <__modsi3+0x44>
    4e24:	1145c83a 	sub	r2,r2,r5
    4e28:	280ad07a 	srli	r5,r5,1
    4e2c:	183ffb1e 	bne	r3,zero,4e1c <__alt_data_end+0xfffd40dc>
    4e30:	38000126 	beq	r7,zero,4e38 <__modsi3+0x54>
    4e34:	0085c83a 	sub	r2,zero,r2
    4e38:	f800283a 	ret
    4e3c:	014bc83a 	sub	r5,zero,r5
    4e40:	003fec06 	br	4df4 <__alt_data_end+0xfffd40b4>
    4e44:	0109c83a 	sub	r4,zero,r4
    4e48:	01c00044 	movi	r7,1
    4e4c:	003fe706 	br	4dec <__alt_data_end+0xfffd40ac>
    4e50:	00c00044 	movi	r3,1
    4e54:	003ff106 	br	4e1c <__alt_data_end+0xfffd40dc>

00004e58 <__udivsi3>:
    4e58:	200d883a 	mov	r6,r4
    4e5c:	2900152e 	bgeu	r5,r4,4eb4 <__udivsi3+0x5c>
    4e60:	28001416 	blt	r5,zero,4eb4 <__udivsi3+0x5c>
    4e64:	00800804 	movi	r2,32
    4e68:	00c00044 	movi	r3,1
    4e6c:	00000206 	br	4e78 <__udivsi3+0x20>
    4e70:	10000e26 	beq	r2,zero,4eac <__udivsi3+0x54>
    4e74:	28000516 	blt	r5,zero,4e8c <__udivsi3+0x34>
    4e78:	294b883a 	add	r5,r5,r5
    4e7c:	10bfffc4 	addi	r2,r2,-1
    4e80:	18c7883a 	add	r3,r3,r3
    4e84:	293ffa36 	bltu	r5,r4,4e70 <__alt_data_end+0xfffd4130>
    4e88:	18000826 	beq	r3,zero,4eac <__udivsi3+0x54>
    4e8c:	0005883a 	mov	r2,zero
    4e90:	31400236 	bltu	r6,r5,4e9c <__udivsi3+0x44>
    4e94:	314dc83a 	sub	r6,r6,r5
    4e98:	10c4b03a 	or	r2,r2,r3
    4e9c:	1806d07a 	srli	r3,r3,1
    4ea0:	280ad07a 	srli	r5,r5,1
    4ea4:	183ffa1e 	bne	r3,zero,4e90 <__alt_data_end+0xfffd4150>
    4ea8:	f800283a 	ret
    4eac:	0005883a 	mov	r2,zero
    4eb0:	f800283a 	ret
    4eb4:	00c00044 	movi	r3,1
    4eb8:	003ff406 	br	4e8c <__alt_data_end+0xfffd414c>

00004ebc <__umodsi3>:
    4ebc:	2005883a 	mov	r2,r4
    4ec0:	2900122e 	bgeu	r5,r4,4f0c <__umodsi3+0x50>
    4ec4:	28001116 	blt	r5,zero,4f0c <__umodsi3+0x50>
    4ec8:	01800804 	movi	r6,32
    4ecc:	00c00044 	movi	r3,1
    4ed0:	00000206 	br	4edc <__umodsi3+0x20>
    4ed4:	30000c26 	beq	r6,zero,4f08 <__umodsi3+0x4c>
    4ed8:	28000516 	blt	r5,zero,4ef0 <__umodsi3+0x34>
    4edc:	294b883a 	add	r5,r5,r5
    4ee0:	31bfffc4 	addi	r6,r6,-1
    4ee4:	18c7883a 	add	r3,r3,r3
    4ee8:	293ffa36 	bltu	r5,r4,4ed4 <__alt_data_end+0xfffd4194>
    4eec:	18000626 	beq	r3,zero,4f08 <__umodsi3+0x4c>
    4ef0:	1806d07a 	srli	r3,r3,1
    4ef4:	11400136 	bltu	r2,r5,4efc <__umodsi3+0x40>
    4ef8:	1145c83a 	sub	r2,r2,r5
    4efc:	280ad07a 	srli	r5,r5,1
    4f00:	183ffb1e 	bne	r3,zero,4ef0 <__alt_data_end+0xfffd41b0>
    4f04:	f800283a 	ret
    4f08:	f800283a 	ret
    4f0c:	00c00044 	movi	r3,1
    4f10:	003ff706 	br	4ef0 <__alt_data_end+0xfffd41b0>

00004f14 <__mulsi3>:
    4f14:	0005883a 	mov	r2,zero
    4f18:	20000726 	beq	r4,zero,4f38 <__mulsi3+0x24>
    4f1c:	20c0004c 	andi	r3,r4,1
    4f20:	2008d07a 	srli	r4,r4,1
    4f24:	18000126 	beq	r3,zero,4f2c <__mulsi3+0x18>
    4f28:	1145883a 	add	r2,r2,r5
    4f2c:	294b883a 	add	r5,r5,r5
    4f30:	203ffa1e 	bne	r4,zero,4f1c <__alt_data_end+0xfffd41dc>
    4f34:	f800283a 	ret
    4f38:	f800283a 	ret

00004f3c <__adddf3>:
    4f3c:	02c00434 	movhi	r11,16
    4f40:	5affffc4 	addi	r11,r11,-1
    4f44:	2806d7fa 	srli	r3,r5,31
    4f48:	2ad4703a 	and	r10,r5,r11
    4f4c:	3ad2703a 	and	r9,r7,r11
    4f50:	3804d53a 	srli	r2,r7,20
    4f54:	3018d77a 	srli	r12,r6,29
    4f58:	280ad53a 	srli	r5,r5,20
    4f5c:	501490fa 	slli	r10,r10,3
    4f60:	2010d77a 	srli	r8,r4,29
    4f64:	481290fa 	slli	r9,r9,3
    4f68:	380ed7fa 	srli	r7,r7,31
    4f6c:	defffb04 	addi	sp,sp,-20
    4f70:	dc800215 	stw	r18,8(sp)
    4f74:	dc400115 	stw	r17,4(sp)
    4f78:	dc000015 	stw	r16,0(sp)
    4f7c:	dfc00415 	stw	ra,16(sp)
    4f80:	dcc00315 	stw	r19,12(sp)
    4f84:	1c803fcc 	andi	r18,r3,255
    4f88:	2c01ffcc 	andi	r16,r5,2047
    4f8c:	5210b03a 	or	r8,r10,r8
    4f90:	202290fa 	slli	r17,r4,3
    4f94:	1081ffcc 	andi	r2,r2,2047
    4f98:	4b12b03a 	or	r9,r9,r12
    4f9c:	300c90fa 	slli	r6,r6,3
    4fa0:	91c07526 	beq	r18,r7,5178 <__adddf3+0x23c>
    4fa4:	8087c83a 	sub	r3,r16,r2
    4fa8:	00c0ab0e 	bge	zero,r3,5258 <__adddf3+0x31c>
    4fac:	10002a1e 	bne	r2,zero,5058 <__adddf3+0x11c>
    4fb0:	4984b03a 	or	r2,r9,r6
    4fb4:	1000961e 	bne	r2,zero,5210 <__adddf3+0x2d4>
    4fb8:	888001cc 	andi	r2,r17,7
    4fbc:	10000726 	beq	r2,zero,4fdc <__adddf3+0xa0>
    4fc0:	888003cc 	andi	r2,r17,15
    4fc4:	00c00104 	movi	r3,4
    4fc8:	10c00426 	beq	r2,r3,4fdc <__adddf3+0xa0>
    4fcc:	88c7883a 	add	r3,r17,r3
    4fd0:	1c63803a 	cmpltu	r17,r3,r17
    4fd4:	4451883a 	add	r8,r8,r17
    4fd8:	1823883a 	mov	r17,r3
    4fdc:	4080202c 	andhi	r2,r8,128
    4fe0:	10005926 	beq	r2,zero,5148 <__adddf3+0x20c>
    4fe4:	84000044 	addi	r16,r16,1
    4fe8:	0081ffc4 	movi	r2,2047
    4fec:	8080ba26 	beq	r16,r2,52d8 <__adddf3+0x39c>
    4ff0:	00bfe034 	movhi	r2,65408
    4ff4:	10bfffc4 	addi	r2,r2,-1
    4ff8:	4090703a 	and	r8,r8,r2
    4ffc:	4004977a 	slli	r2,r8,29
    5000:	4010927a 	slli	r8,r8,9
    5004:	8822d0fa 	srli	r17,r17,3
    5008:	8401ffcc 	andi	r16,r16,2047
    500c:	4010d33a 	srli	r8,r8,12
    5010:	9007883a 	mov	r3,r18
    5014:	1444b03a 	or	r2,r2,r17
    5018:	8401ffcc 	andi	r16,r16,2047
    501c:	8020953a 	slli	r16,r16,20
    5020:	18c03fcc 	andi	r3,r3,255
    5024:	01000434 	movhi	r4,16
    5028:	213fffc4 	addi	r4,r4,-1
    502c:	180697fa 	slli	r3,r3,31
    5030:	4110703a 	and	r8,r8,r4
    5034:	4410b03a 	or	r8,r8,r16
    5038:	40c6b03a 	or	r3,r8,r3
    503c:	dfc00417 	ldw	ra,16(sp)
    5040:	dcc00317 	ldw	r19,12(sp)
    5044:	dc800217 	ldw	r18,8(sp)
    5048:	dc400117 	ldw	r17,4(sp)
    504c:	dc000017 	ldw	r16,0(sp)
    5050:	dec00504 	addi	sp,sp,20
    5054:	f800283a 	ret
    5058:	0081ffc4 	movi	r2,2047
    505c:	80bfd626 	beq	r16,r2,4fb8 <__alt_data_end+0xfffd4278>
    5060:	4a402034 	orhi	r9,r9,128
    5064:	00800e04 	movi	r2,56
    5068:	10c09f16 	blt	r2,r3,52e8 <__adddf3+0x3ac>
    506c:	008007c4 	movi	r2,31
    5070:	10c0c216 	blt	r2,r3,537c <__adddf3+0x440>
    5074:	00800804 	movi	r2,32
    5078:	10c5c83a 	sub	r2,r2,r3
    507c:	488a983a 	sll	r5,r9,r2
    5080:	30c8d83a 	srl	r4,r6,r3
    5084:	3084983a 	sll	r2,r6,r2
    5088:	48c6d83a 	srl	r3,r9,r3
    508c:	290cb03a 	or	r6,r5,r4
    5090:	1004c03a 	cmpne	r2,r2,zero
    5094:	308cb03a 	or	r6,r6,r2
    5098:	898dc83a 	sub	r6,r17,r6
    509c:	89a3803a 	cmpltu	r17,r17,r6
    50a0:	40d1c83a 	sub	r8,r8,r3
    50a4:	4451c83a 	sub	r8,r8,r17
    50a8:	3023883a 	mov	r17,r6
    50ac:	4080202c 	andhi	r2,r8,128
    50b0:	10002326 	beq	r2,zero,5140 <__adddf3+0x204>
    50b4:	04c02034 	movhi	r19,128
    50b8:	9cffffc4 	addi	r19,r19,-1
    50bc:	44e6703a 	and	r19,r8,r19
    50c0:	98007626 	beq	r19,zero,529c <__adddf3+0x360>
    50c4:	9809883a 	mov	r4,r19
    50c8:	00076d40 	call	76d4 <__clzsi2>
    50cc:	10fffe04 	addi	r3,r2,-8
    50d0:	010007c4 	movi	r4,31
    50d4:	20c07716 	blt	r4,r3,52b4 <__adddf3+0x378>
    50d8:	00800804 	movi	r2,32
    50dc:	10c5c83a 	sub	r2,r2,r3
    50e0:	8884d83a 	srl	r2,r17,r2
    50e4:	98d0983a 	sll	r8,r19,r3
    50e8:	88e2983a 	sll	r17,r17,r3
    50ec:	1204b03a 	or	r2,r2,r8
    50f0:	1c007416 	blt	r3,r16,52c4 <__adddf3+0x388>
    50f4:	1c21c83a 	sub	r16,r3,r16
    50f8:	82000044 	addi	r8,r16,1
    50fc:	00c007c4 	movi	r3,31
    5100:	1a009116 	blt	r3,r8,5348 <__adddf3+0x40c>
    5104:	00c00804 	movi	r3,32
    5108:	1a07c83a 	sub	r3,r3,r8
    510c:	8a08d83a 	srl	r4,r17,r8
    5110:	88e2983a 	sll	r17,r17,r3
    5114:	10c6983a 	sll	r3,r2,r3
    5118:	1210d83a 	srl	r8,r2,r8
    511c:	8804c03a 	cmpne	r2,r17,zero
    5120:	1906b03a 	or	r3,r3,r4
    5124:	18a2b03a 	or	r17,r3,r2
    5128:	0021883a 	mov	r16,zero
    512c:	003fa206 	br	4fb8 <__alt_data_end+0xfffd4278>
    5130:	1890b03a 	or	r8,r3,r2
    5134:	40017d26 	beq	r8,zero,572c <__adddf3+0x7f0>
    5138:	1011883a 	mov	r8,r2
    513c:	1823883a 	mov	r17,r3
    5140:	888001cc 	andi	r2,r17,7
    5144:	103f9e1e 	bne	r2,zero,4fc0 <__alt_data_end+0xfffd4280>
    5148:	4004977a 	slli	r2,r8,29
    514c:	8822d0fa 	srli	r17,r17,3
    5150:	4010d0fa 	srli	r8,r8,3
    5154:	9007883a 	mov	r3,r18
    5158:	1444b03a 	or	r2,r2,r17
    515c:	0101ffc4 	movi	r4,2047
    5160:	81002426 	beq	r16,r4,51f4 <__adddf3+0x2b8>
    5164:	8120703a 	and	r16,r16,r4
    5168:	01000434 	movhi	r4,16
    516c:	213fffc4 	addi	r4,r4,-1
    5170:	4110703a 	and	r8,r8,r4
    5174:	003fa806 	br	5018 <__alt_data_end+0xfffd42d8>
    5178:	8089c83a 	sub	r4,r16,r2
    517c:	01005e0e 	bge	zero,r4,52f8 <__adddf3+0x3bc>
    5180:	10002b26 	beq	r2,zero,5230 <__adddf3+0x2f4>
    5184:	0081ffc4 	movi	r2,2047
    5188:	80bf8b26 	beq	r16,r2,4fb8 <__alt_data_end+0xfffd4278>
    518c:	4a402034 	orhi	r9,r9,128
    5190:	00800e04 	movi	r2,56
    5194:	1100a40e 	bge	r2,r4,5428 <__adddf3+0x4ec>
    5198:	498cb03a 	or	r6,r9,r6
    519c:	300ac03a 	cmpne	r5,r6,zero
    51a0:	0013883a 	mov	r9,zero
    51a4:	2c4b883a 	add	r5,r5,r17
    51a8:	2c63803a 	cmpltu	r17,r5,r17
    51ac:	4a11883a 	add	r8,r9,r8
    51b0:	8a11883a 	add	r8,r17,r8
    51b4:	2823883a 	mov	r17,r5
    51b8:	4080202c 	andhi	r2,r8,128
    51bc:	103fe026 	beq	r2,zero,5140 <__alt_data_end+0xfffd4400>
    51c0:	84000044 	addi	r16,r16,1
    51c4:	0081ffc4 	movi	r2,2047
    51c8:	8080d226 	beq	r16,r2,5514 <__adddf3+0x5d8>
    51cc:	00bfe034 	movhi	r2,65408
    51d0:	10bfffc4 	addi	r2,r2,-1
    51d4:	4090703a 	and	r8,r8,r2
    51d8:	880ad07a 	srli	r5,r17,1
    51dc:	400897fa 	slli	r4,r8,31
    51e0:	88c0004c 	andi	r3,r17,1
    51e4:	28e2b03a 	or	r17,r5,r3
    51e8:	4010d07a 	srli	r8,r8,1
    51ec:	2462b03a 	or	r17,r4,r17
    51f0:	003f7106 	br	4fb8 <__alt_data_end+0xfffd4278>
    51f4:	4088b03a 	or	r4,r8,r2
    51f8:	20014526 	beq	r4,zero,5710 <__adddf3+0x7d4>
    51fc:	01000434 	movhi	r4,16
    5200:	42000234 	orhi	r8,r8,8
    5204:	213fffc4 	addi	r4,r4,-1
    5208:	4110703a 	and	r8,r8,r4
    520c:	003f8206 	br	5018 <__alt_data_end+0xfffd42d8>
    5210:	18ffffc4 	addi	r3,r3,-1
    5214:	1800491e 	bne	r3,zero,533c <__adddf3+0x400>
    5218:	898bc83a 	sub	r5,r17,r6
    521c:	8963803a 	cmpltu	r17,r17,r5
    5220:	4251c83a 	sub	r8,r8,r9
    5224:	4451c83a 	sub	r8,r8,r17
    5228:	2823883a 	mov	r17,r5
    522c:	003f9f06 	br	50ac <__alt_data_end+0xfffd436c>
    5230:	4984b03a 	or	r2,r9,r6
    5234:	103f6026 	beq	r2,zero,4fb8 <__alt_data_end+0xfffd4278>
    5238:	213fffc4 	addi	r4,r4,-1
    523c:	2000931e 	bne	r4,zero,548c <__adddf3+0x550>
    5240:	898d883a 	add	r6,r17,r6
    5244:	3463803a 	cmpltu	r17,r6,r17
    5248:	4251883a 	add	r8,r8,r9
    524c:	8a11883a 	add	r8,r17,r8
    5250:	3023883a 	mov	r17,r6
    5254:	003fd806 	br	51b8 <__alt_data_end+0xfffd4478>
    5258:	1800541e 	bne	r3,zero,53ac <__adddf3+0x470>
    525c:	80800044 	addi	r2,r16,1
    5260:	1081ffcc 	andi	r2,r2,2047
    5264:	00c00044 	movi	r3,1
    5268:	1880a00e 	bge	r3,r2,54ec <__adddf3+0x5b0>
    526c:	8989c83a 	sub	r4,r17,r6
    5270:	8905803a 	cmpltu	r2,r17,r4
    5274:	4267c83a 	sub	r19,r8,r9
    5278:	98a7c83a 	sub	r19,r19,r2
    527c:	9880202c 	andhi	r2,r19,128
    5280:	10006326 	beq	r2,zero,5410 <__adddf3+0x4d4>
    5284:	3463c83a 	sub	r17,r6,r17
    5288:	4a07c83a 	sub	r3,r9,r8
    528c:	344d803a 	cmpltu	r6,r6,r17
    5290:	19a7c83a 	sub	r19,r3,r6
    5294:	3825883a 	mov	r18,r7
    5298:	983f8a1e 	bne	r19,zero,50c4 <__alt_data_end+0xfffd4384>
    529c:	8809883a 	mov	r4,r17
    52a0:	00076d40 	call	76d4 <__clzsi2>
    52a4:	10800804 	addi	r2,r2,32
    52a8:	10fffe04 	addi	r3,r2,-8
    52ac:	010007c4 	movi	r4,31
    52b0:	20ff890e 	bge	r4,r3,50d8 <__alt_data_end+0xfffd4398>
    52b4:	10bff604 	addi	r2,r2,-40
    52b8:	8884983a 	sll	r2,r17,r2
    52bc:	0023883a 	mov	r17,zero
    52c0:	1c3f8c0e 	bge	r3,r16,50f4 <__alt_data_end+0xfffd43b4>
    52c4:	023fe034 	movhi	r8,65408
    52c8:	423fffc4 	addi	r8,r8,-1
    52cc:	80e1c83a 	sub	r16,r16,r3
    52d0:	1210703a 	and	r8,r2,r8
    52d4:	003f3806 	br	4fb8 <__alt_data_end+0xfffd4278>
    52d8:	9007883a 	mov	r3,r18
    52dc:	0011883a 	mov	r8,zero
    52e0:	0005883a 	mov	r2,zero
    52e4:	003f4c06 	br	5018 <__alt_data_end+0xfffd42d8>
    52e8:	498cb03a 	or	r6,r9,r6
    52ec:	300cc03a 	cmpne	r6,r6,zero
    52f0:	0007883a 	mov	r3,zero
    52f4:	003f6806 	br	5098 <__alt_data_end+0xfffd4358>
    52f8:	20009c1e 	bne	r4,zero,556c <__adddf3+0x630>
    52fc:	80800044 	addi	r2,r16,1
    5300:	1141ffcc 	andi	r5,r2,2047
    5304:	01000044 	movi	r4,1
    5308:	2140670e 	bge	r4,r5,54a8 <__adddf3+0x56c>
    530c:	0101ffc4 	movi	r4,2047
    5310:	11007f26 	beq	r2,r4,5510 <__adddf3+0x5d4>
    5314:	898d883a 	add	r6,r17,r6
    5318:	4247883a 	add	r3,r8,r9
    531c:	3451803a 	cmpltu	r8,r6,r17
    5320:	40d1883a 	add	r8,r8,r3
    5324:	402297fa 	slli	r17,r8,31
    5328:	300cd07a 	srli	r6,r6,1
    532c:	4010d07a 	srli	r8,r8,1
    5330:	1021883a 	mov	r16,r2
    5334:	89a2b03a 	or	r17,r17,r6
    5338:	003f1f06 	br	4fb8 <__alt_data_end+0xfffd4278>
    533c:	0081ffc4 	movi	r2,2047
    5340:	80bf481e 	bne	r16,r2,5064 <__alt_data_end+0xfffd4324>
    5344:	003f1c06 	br	4fb8 <__alt_data_end+0xfffd4278>
    5348:	843ff844 	addi	r16,r16,-31
    534c:	01000804 	movi	r4,32
    5350:	1406d83a 	srl	r3,r2,r16
    5354:	41005026 	beq	r8,r4,5498 <__adddf3+0x55c>
    5358:	01001004 	movi	r4,64
    535c:	2211c83a 	sub	r8,r4,r8
    5360:	1204983a 	sll	r2,r2,r8
    5364:	88a2b03a 	or	r17,r17,r2
    5368:	8822c03a 	cmpne	r17,r17,zero
    536c:	1c62b03a 	or	r17,r3,r17
    5370:	0011883a 	mov	r8,zero
    5374:	0021883a 	mov	r16,zero
    5378:	003f7106 	br	5140 <__alt_data_end+0xfffd4400>
    537c:	193ff804 	addi	r4,r3,-32
    5380:	00800804 	movi	r2,32
    5384:	4908d83a 	srl	r4,r9,r4
    5388:	18804526 	beq	r3,r2,54a0 <__adddf3+0x564>
    538c:	00801004 	movi	r2,64
    5390:	10c5c83a 	sub	r2,r2,r3
    5394:	4886983a 	sll	r3,r9,r2
    5398:	198cb03a 	or	r6,r3,r6
    539c:	300cc03a 	cmpne	r6,r6,zero
    53a0:	218cb03a 	or	r6,r4,r6
    53a4:	0007883a 	mov	r3,zero
    53a8:	003f3b06 	br	5098 <__alt_data_end+0xfffd4358>
    53ac:	80002a26 	beq	r16,zero,5458 <__adddf3+0x51c>
    53b0:	0101ffc4 	movi	r4,2047
    53b4:	11006826 	beq	r2,r4,5558 <__adddf3+0x61c>
    53b8:	00c7c83a 	sub	r3,zero,r3
    53bc:	42002034 	orhi	r8,r8,128
    53c0:	01000e04 	movi	r4,56
    53c4:	20c07c16 	blt	r4,r3,55b8 <__adddf3+0x67c>
    53c8:	010007c4 	movi	r4,31
    53cc:	20c0da16 	blt	r4,r3,5738 <__adddf3+0x7fc>
    53d0:	01000804 	movi	r4,32
    53d4:	20c9c83a 	sub	r4,r4,r3
    53d8:	4114983a 	sll	r10,r8,r4
    53dc:	88cad83a 	srl	r5,r17,r3
    53e0:	8908983a 	sll	r4,r17,r4
    53e4:	40c6d83a 	srl	r3,r8,r3
    53e8:	5162b03a 	or	r17,r10,r5
    53ec:	2008c03a 	cmpne	r4,r4,zero
    53f0:	8922b03a 	or	r17,r17,r4
    53f4:	3463c83a 	sub	r17,r6,r17
    53f8:	48c7c83a 	sub	r3,r9,r3
    53fc:	344d803a 	cmpltu	r6,r6,r17
    5400:	1991c83a 	sub	r8,r3,r6
    5404:	1021883a 	mov	r16,r2
    5408:	3825883a 	mov	r18,r7
    540c:	003f2706 	br	50ac <__alt_data_end+0xfffd436c>
    5410:	24d0b03a 	or	r8,r4,r19
    5414:	40001b1e 	bne	r8,zero,5484 <__adddf3+0x548>
    5418:	0005883a 	mov	r2,zero
    541c:	0007883a 	mov	r3,zero
    5420:	0021883a 	mov	r16,zero
    5424:	003f4d06 	br	515c <__alt_data_end+0xfffd441c>
    5428:	008007c4 	movi	r2,31
    542c:	11003c16 	blt	r2,r4,5520 <__adddf3+0x5e4>
    5430:	00800804 	movi	r2,32
    5434:	1105c83a 	sub	r2,r2,r4
    5438:	488e983a 	sll	r7,r9,r2
    543c:	310ad83a 	srl	r5,r6,r4
    5440:	3084983a 	sll	r2,r6,r2
    5444:	4912d83a 	srl	r9,r9,r4
    5448:	394ab03a 	or	r5,r7,r5
    544c:	1004c03a 	cmpne	r2,r2,zero
    5450:	288ab03a 	or	r5,r5,r2
    5454:	003f5306 	br	51a4 <__alt_data_end+0xfffd4464>
    5458:	4448b03a 	or	r4,r8,r17
    545c:	20003e26 	beq	r4,zero,5558 <__adddf3+0x61c>
    5460:	00c6303a 	nor	r3,zero,r3
    5464:	18003a1e 	bne	r3,zero,5550 <__adddf3+0x614>
    5468:	3463c83a 	sub	r17,r6,r17
    546c:	4a07c83a 	sub	r3,r9,r8
    5470:	344d803a 	cmpltu	r6,r6,r17
    5474:	1991c83a 	sub	r8,r3,r6
    5478:	1021883a 	mov	r16,r2
    547c:	3825883a 	mov	r18,r7
    5480:	003f0a06 	br	50ac <__alt_data_end+0xfffd436c>
    5484:	2023883a 	mov	r17,r4
    5488:	003f0d06 	br	50c0 <__alt_data_end+0xfffd4380>
    548c:	0081ffc4 	movi	r2,2047
    5490:	80bf3f1e 	bne	r16,r2,5190 <__alt_data_end+0xfffd4450>
    5494:	003ec806 	br	4fb8 <__alt_data_end+0xfffd4278>
    5498:	0005883a 	mov	r2,zero
    549c:	003fb106 	br	5364 <__alt_data_end+0xfffd4624>
    54a0:	0007883a 	mov	r3,zero
    54a4:	003fbc06 	br	5398 <__alt_data_end+0xfffd4658>
    54a8:	4444b03a 	or	r2,r8,r17
    54ac:	8000871e 	bne	r16,zero,56cc <__adddf3+0x790>
    54b0:	1000ba26 	beq	r2,zero,579c <__adddf3+0x860>
    54b4:	4984b03a 	or	r2,r9,r6
    54b8:	103ebf26 	beq	r2,zero,4fb8 <__alt_data_end+0xfffd4278>
    54bc:	8985883a 	add	r2,r17,r6
    54c0:	4247883a 	add	r3,r8,r9
    54c4:	1451803a 	cmpltu	r8,r2,r17
    54c8:	40d1883a 	add	r8,r8,r3
    54cc:	40c0202c 	andhi	r3,r8,128
    54d0:	1023883a 	mov	r17,r2
    54d4:	183f1a26 	beq	r3,zero,5140 <__alt_data_end+0xfffd4400>
    54d8:	00bfe034 	movhi	r2,65408
    54dc:	10bfffc4 	addi	r2,r2,-1
    54e0:	2021883a 	mov	r16,r4
    54e4:	4090703a 	and	r8,r8,r2
    54e8:	003eb306 	br	4fb8 <__alt_data_end+0xfffd4278>
    54ec:	4444b03a 	or	r2,r8,r17
    54f0:	8000291e 	bne	r16,zero,5598 <__adddf3+0x65c>
    54f4:	10004b1e 	bne	r2,zero,5624 <__adddf3+0x6e8>
    54f8:	4990b03a 	or	r8,r9,r6
    54fc:	40008b26 	beq	r8,zero,572c <__adddf3+0x7f0>
    5500:	4811883a 	mov	r8,r9
    5504:	3023883a 	mov	r17,r6
    5508:	3825883a 	mov	r18,r7
    550c:	003eaa06 	br	4fb8 <__alt_data_end+0xfffd4278>
    5510:	1021883a 	mov	r16,r2
    5514:	0011883a 	mov	r8,zero
    5518:	0005883a 	mov	r2,zero
    551c:	003f0f06 	br	515c <__alt_data_end+0xfffd441c>
    5520:	217ff804 	addi	r5,r4,-32
    5524:	00800804 	movi	r2,32
    5528:	494ad83a 	srl	r5,r9,r5
    552c:	20807d26 	beq	r4,r2,5724 <__adddf3+0x7e8>
    5530:	00801004 	movi	r2,64
    5534:	1109c83a 	sub	r4,r2,r4
    5538:	4912983a 	sll	r9,r9,r4
    553c:	498cb03a 	or	r6,r9,r6
    5540:	300cc03a 	cmpne	r6,r6,zero
    5544:	298ab03a 	or	r5,r5,r6
    5548:	0013883a 	mov	r9,zero
    554c:	003f1506 	br	51a4 <__alt_data_end+0xfffd4464>
    5550:	0101ffc4 	movi	r4,2047
    5554:	113f9a1e 	bne	r2,r4,53c0 <__alt_data_end+0xfffd4680>
    5558:	4811883a 	mov	r8,r9
    555c:	3023883a 	mov	r17,r6
    5560:	1021883a 	mov	r16,r2
    5564:	3825883a 	mov	r18,r7
    5568:	003e9306 	br	4fb8 <__alt_data_end+0xfffd4278>
    556c:	8000161e 	bne	r16,zero,55c8 <__adddf3+0x68c>
    5570:	444ab03a 	or	r5,r8,r17
    5574:	28005126 	beq	r5,zero,56bc <__adddf3+0x780>
    5578:	0108303a 	nor	r4,zero,r4
    557c:	20004d1e 	bne	r4,zero,56b4 <__adddf3+0x778>
    5580:	89a3883a 	add	r17,r17,r6
    5584:	4253883a 	add	r9,r8,r9
    5588:	898d803a 	cmpltu	r6,r17,r6
    558c:	3251883a 	add	r8,r6,r9
    5590:	1021883a 	mov	r16,r2
    5594:	003f0806 	br	51b8 <__alt_data_end+0xfffd4478>
    5598:	1000301e 	bne	r2,zero,565c <__adddf3+0x720>
    559c:	4984b03a 	or	r2,r9,r6
    55a0:	10007126 	beq	r2,zero,5768 <__adddf3+0x82c>
    55a4:	4811883a 	mov	r8,r9
    55a8:	3023883a 	mov	r17,r6
    55ac:	3825883a 	mov	r18,r7
    55b0:	0401ffc4 	movi	r16,2047
    55b4:	003e8006 	br	4fb8 <__alt_data_end+0xfffd4278>
    55b8:	4462b03a 	or	r17,r8,r17
    55bc:	8822c03a 	cmpne	r17,r17,zero
    55c0:	0007883a 	mov	r3,zero
    55c4:	003f8b06 	br	53f4 <__alt_data_end+0xfffd46b4>
    55c8:	0141ffc4 	movi	r5,2047
    55cc:	11403b26 	beq	r2,r5,56bc <__adddf3+0x780>
    55d0:	0109c83a 	sub	r4,zero,r4
    55d4:	42002034 	orhi	r8,r8,128
    55d8:	01400e04 	movi	r5,56
    55dc:	29006716 	blt	r5,r4,577c <__adddf3+0x840>
    55e0:	014007c4 	movi	r5,31
    55e4:	29007016 	blt	r5,r4,57a8 <__adddf3+0x86c>
    55e8:	01400804 	movi	r5,32
    55ec:	290bc83a 	sub	r5,r5,r4
    55f0:	4154983a 	sll	r10,r8,r5
    55f4:	890ed83a 	srl	r7,r17,r4
    55f8:	894a983a 	sll	r5,r17,r5
    55fc:	4108d83a 	srl	r4,r8,r4
    5600:	51e2b03a 	or	r17,r10,r7
    5604:	280ac03a 	cmpne	r5,r5,zero
    5608:	8962b03a 	or	r17,r17,r5
    560c:	89a3883a 	add	r17,r17,r6
    5610:	2253883a 	add	r9,r4,r9
    5614:	898d803a 	cmpltu	r6,r17,r6
    5618:	3251883a 	add	r8,r6,r9
    561c:	1021883a 	mov	r16,r2
    5620:	003ee506 	br	51b8 <__alt_data_end+0xfffd4478>
    5624:	4984b03a 	or	r2,r9,r6
    5628:	103e6326 	beq	r2,zero,4fb8 <__alt_data_end+0xfffd4278>
    562c:	8987c83a 	sub	r3,r17,r6
    5630:	88c9803a 	cmpltu	r4,r17,r3
    5634:	4245c83a 	sub	r2,r8,r9
    5638:	1105c83a 	sub	r2,r2,r4
    563c:	1100202c 	andhi	r4,r2,128
    5640:	203ebb26 	beq	r4,zero,5130 <__alt_data_end+0xfffd43f0>
    5644:	3463c83a 	sub	r17,r6,r17
    5648:	4a07c83a 	sub	r3,r9,r8
    564c:	344d803a 	cmpltu	r6,r6,r17
    5650:	1991c83a 	sub	r8,r3,r6
    5654:	3825883a 	mov	r18,r7
    5658:	003e5706 	br	4fb8 <__alt_data_end+0xfffd4278>
    565c:	4984b03a 	or	r2,r9,r6
    5660:	10002e26 	beq	r2,zero,571c <__adddf3+0x7e0>
    5664:	4004d0fa 	srli	r2,r8,3
    5668:	8822d0fa 	srli	r17,r17,3
    566c:	4010977a 	slli	r8,r8,29
    5670:	10c0022c 	andhi	r3,r2,8
    5674:	4462b03a 	or	r17,r8,r17
    5678:	18000826 	beq	r3,zero,569c <__adddf3+0x760>
    567c:	4808d0fa 	srli	r4,r9,3
    5680:	20c0022c 	andhi	r3,r4,8
    5684:	1800051e 	bne	r3,zero,569c <__adddf3+0x760>
    5688:	300cd0fa 	srli	r6,r6,3
    568c:	4806977a 	slli	r3,r9,29
    5690:	2005883a 	mov	r2,r4
    5694:	3825883a 	mov	r18,r7
    5698:	19a2b03a 	or	r17,r3,r6
    569c:	8810d77a 	srli	r8,r17,29
    56a0:	100490fa 	slli	r2,r2,3
    56a4:	882290fa 	slli	r17,r17,3
    56a8:	0401ffc4 	movi	r16,2047
    56ac:	4090b03a 	or	r8,r8,r2
    56b0:	003e4106 	br	4fb8 <__alt_data_end+0xfffd4278>
    56b4:	0141ffc4 	movi	r5,2047
    56b8:	117fc71e 	bne	r2,r5,55d8 <__alt_data_end+0xfffd4898>
    56bc:	4811883a 	mov	r8,r9
    56c0:	3023883a 	mov	r17,r6
    56c4:	1021883a 	mov	r16,r2
    56c8:	003e3b06 	br	4fb8 <__alt_data_end+0xfffd4278>
    56cc:	10002f26 	beq	r2,zero,578c <__adddf3+0x850>
    56d0:	4984b03a 	or	r2,r9,r6
    56d4:	10001126 	beq	r2,zero,571c <__adddf3+0x7e0>
    56d8:	4004d0fa 	srli	r2,r8,3
    56dc:	8822d0fa 	srli	r17,r17,3
    56e0:	4010977a 	slli	r8,r8,29
    56e4:	10c0022c 	andhi	r3,r2,8
    56e8:	4462b03a 	or	r17,r8,r17
    56ec:	183feb26 	beq	r3,zero,569c <__alt_data_end+0xfffd495c>
    56f0:	4808d0fa 	srli	r4,r9,3
    56f4:	20c0022c 	andhi	r3,r4,8
    56f8:	183fe81e 	bne	r3,zero,569c <__alt_data_end+0xfffd495c>
    56fc:	300cd0fa 	srli	r6,r6,3
    5700:	4806977a 	slli	r3,r9,29
    5704:	2005883a 	mov	r2,r4
    5708:	19a2b03a 	or	r17,r3,r6
    570c:	003fe306 	br	569c <__alt_data_end+0xfffd495c>
    5710:	0011883a 	mov	r8,zero
    5714:	0005883a 	mov	r2,zero
    5718:	003e3f06 	br	5018 <__alt_data_end+0xfffd42d8>
    571c:	0401ffc4 	movi	r16,2047
    5720:	003e2506 	br	4fb8 <__alt_data_end+0xfffd4278>
    5724:	0013883a 	mov	r9,zero
    5728:	003f8406 	br	553c <__alt_data_end+0xfffd47fc>
    572c:	0005883a 	mov	r2,zero
    5730:	0007883a 	mov	r3,zero
    5734:	003e8906 	br	515c <__alt_data_end+0xfffd441c>
    5738:	197ff804 	addi	r5,r3,-32
    573c:	01000804 	movi	r4,32
    5740:	414ad83a 	srl	r5,r8,r5
    5744:	19002426 	beq	r3,r4,57d8 <__adddf3+0x89c>
    5748:	01001004 	movi	r4,64
    574c:	20c7c83a 	sub	r3,r4,r3
    5750:	40c6983a 	sll	r3,r8,r3
    5754:	1c46b03a 	or	r3,r3,r17
    5758:	1806c03a 	cmpne	r3,r3,zero
    575c:	28e2b03a 	or	r17,r5,r3
    5760:	0007883a 	mov	r3,zero
    5764:	003f2306 	br	53f4 <__alt_data_end+0xfffd46b4>
    5768:	0007883a 	mov	r3,zero
    576c:	5811883a 	mov	r8,r11
    5770:	00bfffc4 	movi	r2,-1
    5774:	0401ffc4 	movi	r16,2047
    5778:	003e7806 	br	515c <__alt_data_end+0xfffd441c>
    577c:	4462b03a 	or	r17,r8,r17
    5780:	8822c03a 	cmpne	r17,r17,zero
    5784:	0009883a 	mov	r4,zero
    5788:	003fa006 	br	560c <__alt_data_end+0xfffd48cc>
    578c:	4811883a 	mov	r8,r9
    5790:	3023883a 	mov	r17,r6
    5794:	0401ffc4 	movi	r16,2047
    5798:	003e0706 	br	4fb8 <__alt_data_end+0xfffd4278>
    579c:	4811883a 	mov	r8,r9
    57a0:	3023883a 	mov	r17,r6
    57a4:	003e0406 	br	4fb8 <__alt_data_end+0xfffd4278>
    57a8:	21fff804 	addi	r7,r4,-32
    57ac:	01400804 	movi	r5,32
    57b0:	41ced83a 	srl	r7,r8,r7
    57b4:	21400a26 	beq	r4,r5,57e0 <__adddf3+0x8a4>
    57b8:	01401004 	movi	r5,64
    57bc:	2909c83a 	sub	r4,r5,r4
    57c0:	4108983a 	sll	r4,r8,r4
    57c4:	2448b03a 	or	r4,r4,r17
    57c8:	2008c03a 	cmpne	r4,r4,zero
    57cc:	3922b03a 	or	r17,r7,r4
    57d0:	0009883a 	mov	r4,zero
    57d4:	003f8d06 	br	560c <__alt_data_end+0xfffd48cc>
    57d8:	0007883a 	mov	r3,zero
    57dc:	003fdd06 	br	5754 <__alt_data_end+0xfffd4a14>
    57e0:	0009883a 	mov	r4,zero
    57e4:	003ff706 	br	57c4 <__alt_data_end+0xfffd4a84>

000057e8 <__divdf3>:
    57e8:	defff004 	addi	sp,sp,-64
    57ec:	dc800815 	stw	r18,32(sp)
    57f0:	2824d53a 	srli	r18,r5,20
    57f4:	dd800c15 	stw	r22,48(sp)
    57f8:	282cd7fa 	srli	r22,r5,31
    57fc:	dc000615 	stw	r16,24(sp)
    5800:	04000434 	movhi	r16,16
    5804:	843fffc4 	addi	r16,r16,-1
    5808:	dfc00f15 	stw	ra,60(sp)
    580c:	df000e15 	stw	fp,56(sp)
    5810:	ddc00d15 	stw	r23,52(sp)
    5814:	dd400b15 	stw	r21,44(sp)
    5818:	dd000a15 	stw	r20,40(sp)
    581c:	dcc00915 	stw	r19,36(sp)
    5820:	dc400715 	stw	r17,28(sp)
    5824:	9481ffcc 	andi	r18,r18,2047
    5828:	2c20703a 	and	r16,r5,r16
    582c:	b2003fcc 	andi	r8,r22,255
    5830:	90006126 	beq	r18,zero,59b8 <__divdf3+0x1d0>
    5834:	0081ffc4 	movi	r2,2047
    5838:	202b883a 	mov	r21,r4
    583c:	90803726 	beq	r18,r2,591c <__divdf3+0x134>
    5840:	80800434 	orhi	r2,r16,16
    5844:	100490fa 	slli	r2,r2,3
    5848:	2020d77a 	srli	r16,r4,29
    584c:	202a90fa 	slli	r21,r4,3
    5850:	94bf0044 	addi	r18,r18,-1023
    5854:	80a0b03a 	or	r16,r16,r2
    5858:	0013883a 	mov	r9,zero
    585c:	000b883a 	mov	r5,zero
    5860:	3806d53a 	srli	r3,r7,20
    5864:	382ed7fa 	srli	r23,r7,31
    5868:	04400434 	movhi	r17,16
    586c:	8c7fffc4 	addi	r17,r17,-1
    5870:	18c1ffcc 	andi	r3,r3,2047
    5874:	3029883a 	mov	r20,r6
    5878:	3c62703a 	and	r17,r7,r17
    587c:	bf003fcc 	andi	fp,r23,255
    5880:	18006e26 	beq	r3,zero,5a3c <__divdf3+0x254>
    5884:	0081ffc4 	movi	r2,2047
    5888:	18806626 	beq	r3,r2,5a24 <__divdf3+0x23c>
    588c:	88800434 	orhi	r2,r17,16
    5890:	100490fa 	slli	r2,r2,3
    5894:	3022d77a 	srli	r17,r6,29
    5898:	302890fa 	slli	r20,r6,3
    589c:	18ff0044 	addi	r3,r3,-1023
    58a0:	88a2b03a 	or	r17,r17,r2
    58a4:	000f883a 	mov	r7,zero
    58a8:	b5e6f03a 	xor	r19,r22,r23
    58ac:	3a4cb03a 	or	r6,r7,r9
    58b0:	008003c4 	movi	r2,15
    58b4:	9809883a 	mov	r4,r19
    58b8:	90c7c83a 	sub	r3,r18,r3
    58bc:	9cc03fcc 	andi	r19,r19,255
    58c0:	11809636 	bltu	r2,r6,5b1c <__divdf3+0x334>
    58c4:	300c90ba 	slli	r6,r6,2
    58c8:	00800034 	movhi	r2,0
    58cc:	10963704 	addi	r2,r2,22748
    58d0:	308d883a 	add	r6,r6,r2
    58d4:	30800017 	ldw	r2,0(r6)
    58d8:	1000683a 	jmp	r2
    58dc:	00005b1c 	xori	zero,zero,364
    58e0:	00005954 	movui	zero,357
    58e4:	00005b0c 	andi	zero,zero,364
    58e8:	00005948 	cmpgei	zero,zero,357
    58ec:	00005b0c 	andi	zero,zero,364
    58f0:	00005ae0 	cmpeqi	zero,zero,363
    58f4:	00005b0c 	andi	zero,zero,364
    58f8:	00005948 	cmpgei	zero,zero,357
    58fc:	00005954 	movui	zero,357
    5900:	00005954 	movui	zero,357
    5904:	00005ae0 	cmpeqi	zero,zero,363
    5908:	00005948 	cmpgei	zero,zero,357
    590c:	00005938 	rdprs	zero,zero,356
    5910:	00005938 	rdprs	zero,zero,356
    5914:	00005938 	rdprs	zero,zero,356
    5918:	00005ea4 	muli	zero,zero,378
    591c:	2404b03a 	or	r2,r4,r16
    5920:	10006c1e 	bne	r2,zero,5ad4 <__divdf3+0x2ec>
    5924:	02400204 	movi	r9,8
    5928:	0021883a 	mov	r16,zero
    592c:	002b883a 	mov	r21,zero
    5930:	01400084 	movi	r5,2
    5934:	003fca06 	br	5860 <__alt_data_end+0xfffd4b20>
    5938:	8023883a 	mov	r17,r16
    593c:	a829883a 	mov	r20,r21
    5940:	4039883a 	mov	fp,r8
    5944:	280f883a 	mov	r7,r5
    5948:	00800084 	movi	r2,2
    594c:	3881601e 	bne	r7,r2,5ed0 <__divdf3+0x6e8>
    5950:	e027883a 	mov	r19,fp
    5954:	9900004c 	andi	r4,r19,1
    5958:	0081ffc4 	movi	r2,2047
    595c:	0021883a 	mov	r16,zero
    5960:	002b883a 	mov	r21,zero
    5964:	1004953a 	slli	r2,r2,20
    5968:	20c03fcc 	andi	r3,r4,255
    596c:	01400434 	movhi	r5,16
    5970:	297fffc4 	addi	r5,r5,-1
    5974:	180697fa 	slli	r3,r3,31
    5978:	8160703a 	and	r16,r16,r5
    597c:	80a0b03a 	or	r16,r16,r2
    5980:	80c6b03a 	or	r3,r16,r3
    5984:	a805883a 	mov	r2,r21
    5988:	dfc00f17 	ldw	ra,60(sp)
    598c:	df000e17 	ldw	fp,56(sp)
    5990:	ddc00d17 	ldw	r23,52(sp)
    5994:	dd800c17 	ldw	r22,48(sp)
    5998:	dd400b17 	ldw	r21,44(sp)
    599c:	dd000a17 	ldw	r20,40(sp)
    59a0:	dcc00917 	ldw	r19,36(sp)
    59a4:	dc800817 	ldw	r18,32(sp)
    59a8:	dc400717 	ldw	r17,28(sp)
    59ac:	dc000617 	ldw	r16,24(sp)
    59b0:	dec01004 	addi	sp,sp,64
    59b4:	f800283a 	ret
    59b8:	2404b03a 	or	r2,r4,r16
    59bc:	2023883a 	mov	r17,r4
    59c0:	10003f26 	beq	r2,zero,5ac0 <__divdf3+0x2d8>
    59c4:	80015e26 	beq	r16,zero,5f40 <__divdf3+0x758>
    59c8:	8009883a 	mov	r4,r16
    59cc:	d9800215 	stw	r6,8(sp)
    59d0:	d9c00515 	stw	r7,20(sp)
    59d4:	da000415 	stw	r8,16(sp)
    59d8:	00076d40 	call	76d4 <__clzsi2>
    59dc:	d9800217 	ldw	r6,8(sp)
    59e0:	d9c00517 	ldw	r7,20(sp)
    59e4:	da000417 	ldw	r8,16(sp)
    59e8:	113ffd44 	addi	r4,r2,-11
    59ec:	00c00704 	movi	r3,28
    59f0:	19014f16 	blt	r3,r4,5f30 <__divdf3+0x748>
    59f4:	00c00744 	movi	r3,29
    59f8:	157ffe04 	addi	r21,r2,-8
    59fc:	1907c83a 	sub	r3,r3,r4
    5a00:	8560983a 	sll	r16,r16,r21
    5a04:	88c6d83a 	srl	r3,r17,r3
    5a08:	8d6a983a 	sll	r21,r17,r21
    5a0c:	1c20b03a 	or	r16,r3,r16
    5a10:	1080fcc4 	addi	r2,r2,1011
    5a14:	00a5c83a 	sub	r18,zero,r2
    5a18:	0013883a 	mov	r9,zero
    5a1c:	000b883a 	mov	r5,zero
    5a20:	003f8f06 	br	5860 <__alt_data_end+0xfffd4b20>
    5a24:	3444b03a 	or	r2,r6,r17
    5a28:	1000231e 	bne	r2,zero,5ab8 <__divdf3+0x2d0>
    5a2c:	0023883a 	mov	r17,zero
    5a30:	0029883a 	mov	r20,zero
    5a34:	01c00084 	movi	r7,2
    5a38:	003f9b06 	br	58a8 <__alt_data_end+0xfffd4b68>
    5a3c:	3444b03a 	or	r2,r6,r17
    5a40:	10001926 	beq	r2,zero,5aa8 <__divdf3+0x2c0>
    5a44:	88014b26 	beq	r17,zero,5f74 <__divdf3+0x78c>
    5a48:	8809883a 	mov	r4,r17
    5a4c:	d9400115 	stw	r5,4(sp)
    5a50:	d9800215 	stw	r6,8(sp)
    5a54:	da000415 	stw	r8,16(sp)
    5a58:	da400315 	stw	r9,12(sp)
    5a5c:	00076d40 	call	76d4 <__clzsi2>
    5a60:	d9400117 	ldw	r5,4(sp)
    5a64:	d9800217 	ldw	r6,8(sp)
    5a68:	da000417 	ldw	r8,16(sp)
    5a6c:	da400317 	ldw	r9,12(sp)
    5a70:	113ffd44 	addi	r4,r2,-11
    5a74:	00c00704 	movi	r3,28
    5a78:	19013a16 	blt	r3,r4,5f64 <__divdf3+0x77c>
    5a7c:	00c00744 	movi	r3,29
    5a80:	153ffe04 	addi	r20,r2,-8
    5a84:	1907c83a 	sub	r3,r3,r4
    5a88:	8d22983a 	sll	r17,r17,r20
    5a8c:	30c6d83a 	srl	r3,r6,r3
    5a90:	3528983a 	sll	r20,r6,r20
    5a94:	1c62b03a 	or	r17,r3,r17
    5a98:	1080fcc4 	addi	r2,r2,1011
    5a9c:	0087c83a 	sub	r3,zero,r2
    5aa0:	000f883a 	mov	r7,zero
    5aa4:	003f8006 	br	58a8 <__alt_data_end+0xfffd4b68>
    5aa8:	0023883a 	mov	r17,zero
    5aac:	0029883a 	mov	r20,zero
    5ab0:	01c00044 	movi	r7,1
    5ab4:	003f7c06 	br	58a8 <__alt_data_end+0xfffd4b68>
    5ab8:	01c000c4 	movi	r7,3
    5abc:	003f7a06 	br	58a8 <__alt_data_end+0xfffd4b68>
    5ac0:	02400104 	movi	r9,4
    5ac4:	0021883a 	mov	r16,zero
    5ac8:	002b883a 	mov	r21,zero
    5acc:	01400044 	movi	r5,1
    5ad0:	003f6306 	br	5860 <__alt_data_end+0xfffd4b20>
    5ad4:	02400304 	movi	r9,12
    5ad8:	014000c4 	movi	r5,3
    5adc:	003f6006 	br	5860 <__alt_data_end+0xfffd4b20>
    5ae0:	04000434 	movhi	r16,16
    5ae4:	0009883a 	mov	r4,zero
    5ae8:	843fffc4 	addi	r16,r16,-1
    5aec:	057fffc4 	movi	r21,-1
    5af0:	0081ffc4 	movi	r2,2047
    5af4:	003f9b06 	br	5964 <__alt_data_end+0xfffd4c24>
    5af8:	00c00044 	movi	r3,1
    5afc:	1887c83a 	sub	r3,r3,r2
    5b00:	01000e04 	movi	r4,56
    5b04:	20c1530e 	bge	r4,r3,6054 <__divdf3+0x86c>
    5b08:	9900004c 	andi	r4,r19,1
    5b0c:	0005883a 	mov	r2,zero
    5b10:	0021883a 	mov	r16,zero
    5b14:	002b883a 	mov	r21,zero
    5b18:	003f9206 	br	5964 <__alt_data_end+0xfffd4c24>
    5b1c:	8c012e36 	bltu	r17,r16,5fd8 <__divdf3+0x7f0>
    5b20:	84412c26 	beq	r16,r17,5fd4 <__divdf3+0x7ec>
    5b24:	a82f883a 	mov	r23,r21
    5b28:	18ffffc4 	addi	r3,r3,-1
    5b2c:	002b883a 	mov	r21,zero
    5b30:	a004d63a 	srli	r2,r20,24
    5b34:	8822923a 	slli	r17,r17,8
    5b38:	a028923a 	slli	r20,r20,8
    5b3c:	8009883a 	mov	r4,r16
    5b40:	88acb03a 	or	r22,r17,r2
    5b44:	dd000015 	stw	r20,0(sp)
    5b48:	b028d43a 	srli	r20,r22,16
    5b4c:	d8c00215 	stw	r3,8(sp)
    5b50:	b4bfffcc 	andi	r18,r22,65535
    5b54:	a00b883a 	mov	r5,r20
    5b58:	0004e580 	call	4e58 <__udivsi3>
    5b5c:	100b883a 	mov	r5,r2
    5b60:	9009883a 	mov	r4,r18
    5b64:	1023883a 	mov	r17,r2
    5b68:	0004f140 	call	4f14 <__mulsi3>
    5b6c:	8009883a 	mov	r4,r16
    5b70:	a00b883a 	mov	r5,r20
    5b74:	1039883a 	mov	fp,r2
    5b78:	0004ebc0 	call	4ebc <__umodsi3>
    5b7c:	1004943a 	slli	r2,r2,16
    5b80:	b808d43a 	srli	r4,r23,16
    5b84:	d8c00217 	ldw	r3,8(sp)
    5b88:	2084b03a 	or	r2,r4,r2
    5b8c:	1700062e 	bgeu	r2,fp,5ba8 <__divdf3+0x3c0>
    5b90:	1585883a 	add	r2,r2,r22
    5b94:	893fffc4 	addi	r4,r17,-1
    5b98:	15811d36 	bltu	r2,r22,6010 <__divdf3+0x828>
    5b9c:	17011c2e 	bgeu	r2,fp,6010 <__divdf3+0x828>
    5ba0:	8c7fff84 	addi	r17,r17,-2
    5ba4:	1585883a 	add	r2,r2,r22
    5ba8:	1739c83a 	sub	fp,r2,fp
    5bac:	a00b883a 	mov	r5,r20
    5bb0:	e009883a 	mov	r4,fp
    5bb4:	d8c00215 	stw	r3,8(sp)
    5bb8:	0004e580 	call	4e58 <__udivsi3>
    5bbc:	100b883a 	mov	r5,r2
    5bc0:	9009883a 	mov	r4,r18
    5bc4:	1021883a 	mov	r16,r2
    5bc8:	0004f140 	call	4f14 <__mulsi3>
    5bcc:	a00b883a 	mov	r5,r20
    5bd0:	e009883a 	mov	r4,fp
    5bd4:	d8800415 	stw	r2,16(sp)
    5bd8:	0004ebc0 	call	4ebc <__umodsi3>
    5bdc:	1004943a 	slli	r2,r2,16
    5be0:	da000417 	ldw	r8,16(sp)
    5be4:	bdffffcc 	andi	r23,r23,65535
    5be8:	b884b03a 	or	r2,r23,r2
    5bec:	d8c00217 	ldw	r3,8(sp)
    5bf0:	1200062e 	bgeu	r2,r8,5c0c <__divdf3+0x424>
    5bf4:	1585883a 	add	r2,r2,r22
    5bf8:	813fffc4 	addi	r4,r16,-1
    5bfc:	15810236 	bltu	r2,r22,6008 <__divdf3+0x820>
    5c00:	1201012e 	bgeu	r2,r8,6008 <__divdf3+0x820>
    5c04:	843fff84 	addi	r16,r16,-2
    5c08:	1585883a 	add	r2,r2,r22
    5c0c:	8822943a 	slli	r17,r17,16
    5c10:	d9800017 	ldw	r6,0(sp)
    5c14:	1211c83a 	sub	r8,r2,r8
    5c18:	8c22b03a 	or	r17,r17,r16
    5c1c:	373fffcc 	andi	fp,r6,65535
    5c20:	8abfffcc 	andi	r10,r17,65535
    5c24:	8820d43a 	srli	r16,r17,16
    5c28:	5009883a 	mov	r4,r10
    5c2c:	e00b883a 	mov	r5,fp
    5c30:	302ed43a 	srli	r23,r6,16
    5c34:	d8c00215 	stw	r3,8(sp)
    5c38:	da000415 	stw	r8,16(sp)
    5c3c:	da800115 	stw	r10,4(sp)
    5c40:	0004f140 	call	4f14 <__mulsi3>
    5c44:	800b883a 	mov	r5,r16
    5c48:	e009883a 	mov	r4,fp
    5c4c:	d8800515 	stw	r2,20(sp)
    5c50:	0004f140 	call	4f14 <__mulsi3>
    5c54:	8009883a 	mov	r4,r16
    5c58:	b80b883a 	mov	r5,r23
    5c5c:	d8800315 	stw	r2,12(sp)
    5c60:	0004f140 	call	4f14 <__mulsi3>
    5c64:	da800117 	ldw	r10,4(sp)
    5c68:	b80b883a 	mov	r5,r23
    5c6c:	1021883a 	mov	r16,r2
    5c70:	5009883a 	mov	r4,r10
    5c74:	0004f140 	call	4f14 <__mulsi3>
    5c78:	d9c00517 	ldw	r7,20(sp)
    5c7c:	da400317 	ldw	r9,12(sp)
    5c80:	d8c00217 	ldw	r3,8(sp)
    5c84:	3808d43a 	srli	r4,r7,16
    5c88:	1245883a 	add	r2,r2,r9
    5c8c:	da000417 	ldw	r8,16(sp)
    5c90:	2085883a 	add	r2,r4,r2
    5c94:	1240022e 	bgeu	r2,r9,5ca0 <__divdf3+0x4b8>
    5c98:	01000074 	movhi	r4,1
    5c9c:	8121883a 	add	r16,r16,r4
    5ca0:	1008d43a 	srli	r4,r2,16
    5ca4:	1004943a 	slli	r2,r2,16
    5ca8:	39ffffcc 	andi	r7,r7,65535
    5cac:	2409883a 	add	r4,r4,r16
    5cb0:	11c5883a 	add	r2,r2,r7
    5cb4:	4100bb36 	bltu	r8,r4,5fa4 <__divdf3+0x7bc>
    5cb8:	4100d726 	beq	r8,r4,6018 <__divdf3+0x830>
    5cbc:	4109c83a 	sub	r4,r8,r4
    5cc0:	a8a1c83a 	sub	r16,r21,r2
    5cc4:	ac2b803a 	cmpltu	r21,r21,r16
    5cc8:	256bc83a 	sub	r21,r4,r21
    5ccc:	b540d926 	beq	r22,r21,6034 <__divdf3+0x84c>
    5cd0:	a00b883a 	mov	r5,r20
    5cd4:	a809883a 	mov	r4,r21
    5cd8:	d8c00215 	stw	r3,8(sp)
    5cdc:	0004e580 	call	4e58 <__udivsi3>
    5ce0:	100b883a 	mov	r5,r2
    5ce4:	9009883a 	mov	r4,r18
    5ce8:	d8800515 	stw	r2,20(sp)
    5cec:	0004f140 	call	4f14 <__mulsi3>
    5cf0:	a809883a 	mov	r4,r21
    5cf4:	a00b883a 	mov	r5,r20
    5cf8:	d8800415 	stw	r2,16(sp)
    5cfc:	0004ebc0 	call	4ebc <__umodsi3>
    5d00:	1004943a 	slli	r2,r2,16
    5d04:	8008d43a 	srli	r4,r16,16
    5d08:	da000417 	ldw	r8,16(sp)
    5d0c:	d8c00217 	ldw	r3,8(sp)
    5d10:	2084b03a 	or	r2,r4,r2
    5d14:	d9c00517 	ldw	r7,20(sp)
    5d18:	1200062e 	bgeu	r2,r8,5d34 <__divdf3+0x54c>
    5d1c:	1585883a 	add	r2,r2,r22
    5d20:	393fffc4 	addi	r4,r7,-1
    5d24:	1580c536 	bltu	r2,r22,603c <__divdf3+0x854>
    5d28:	1200c42e 	bgeu	r2,r8,603c <__divdf3+0x854>
    5d2c:	39ffff84 	addi	r7,r7,-2
    5d30:	1585883a 	add	r2,r2,r22
    5d34:	122bc83a 	sub	r21,r2,r8
    5d38:	a00b883a 	mov	r5,r20
    5d3c:	a809883a 	mov	r4,r21
    5d40:	d8c00215 	stw	r3,8(sp)
    5d44:	d9c00515 	stw	r7,20(sp)
    5d48:	0004e580 	call	4e58 <__udivsi3>
    5d4c:	9009883a 	mov	r4,r18
    5d50:	100b883a 	mov	r5,r2
    5d54:	d8800415 	stw	r2,16(sp)
    5d58:	0004f140 	call	4f14 <__mulsi3>
    5d5c:	a809883a 	mov	r4,r21
    5d60:	a00b883a 	mov	r5,r20
    5d64:	1025883a 	mov	r18,r2
    5d68:	0004ebc0 	call	4ebc <__umodsi3>
    5d6c:	1004943a 	slli	r2,r2,16
    5d70:	813fffcc 	andi	r4,r16,65535
    5d74:	d8c00217 	ldw	r3,8(sp)
    5d78:	20a0b03a 	or	r16,r4,r2
    5d7c:	d9c00517 	ldw	r7,20(sp)
    5d80:	da000417 	ldw	r8,16(sp)
    5d84:	8480062e 	bgeu	r16,r18,5da0 <__divdf3+0x5b8>
    5d88:	85a1883a 	add	r16,r16,r22
    5d8c:	40bfffc4 	addi	r2,r8,-1
    5d90:	8580ac36 	bltu	r16,r22,6044 <__divdf3+0x85c>
    5d94:	8480ab2e 	bgeu	r16,r18,6044 <__divdf3+0x85c>
    5d98:	423fff84 	addi	r8,r8,-2
    5d9c:	85a1883a 	add	r16,r16,r22
    5da0:	3804943a 	slli	r2,r7,16
    5da4:	84a1c83a 	sub	r16,r16,r18
    5da8:	e009883a 	mov	r4,fp
    5dac:	1228b03a 	or	r20,r2,r8
    5db0:	a1ffffcc 	andi	r7,r20,65535
    5db4:	a024d43a 	srli	r18,r20,16
    5db8:	380b883a 	mov	r5,r7
    5dbc:	d8c00215 	stw	r3,8(sp)
    5dc0:	d9c00515 	stw	r7,20(sp)
    5dc4:	0004f140 	call	4f14 <__mulsi3>
    5dc8:	900b883a 	mov	r5,r18
    5dcc:	e009883a 	mov	r4,fp
    5dd0:	102b883a 	mov	r21,r2
    5dd4:	0004f140 	call	4f14 <__mulsi3>
    5dd8:	900b883a 	mov	r5,r18
    5ddc:	b809883a 	mov	r4,r23
    5de0:	1039883a 	mov	fp,r2
    5de4:	0004f140 	call	4f14 <__mulsi3>
    5de8:	d9c00517 	ldw	r7,20(sp)
    5dec:	b80b883a 	mov	r5,r23
    5df0:	1025883a 	mov	r18,r2
    5df4:	3809883a 	mov	r4,r7
    5df8:	0004f140 	call	4f14 <__mulsi3>
    5dfc:	a808d43a 	srli	r4,r21,16
    5e00:	1705883a 	add	r2,r2,fp
    5e04:	d8c00217 	ldw	r3,8(sp)
    5e08:	2085883a 	add	r2,r4,r2
    5e0c:	1700022e 	bgeu	r2,fp,5e18 <__divdf3+0x630>
    5e10:	01000074 	movhi	r4,1
    5e14:	9125883a 	add	r18,r18,r4
    5e18:	1008d43a 	srli	r4,r2,16
    5e1c:	1004943a 	slli	r2,r2,16
    5e20:	ad7fffcc 	andi	r21,r21,65535
    5e24:	2489883a 	add	r4,r4,r18
    5e28:	1545883a 	add	r2,r2,r21
    5e2c:	81003836 	bltu	r16,r4,5f10 <__divdf3+0x728>
    5e30:	81003626 	beq	r16,r4,5f0c <__divdf3+0x724>
    5e34:	a5000054 	ori	r20,r20,1
    5e38:	1880ffc4 	addi	r2,r3,1023
    5e3c:	00bf2e0e 	bge	zero,r2,5af8 <__alt_data_end+0xfffd4db8>
    5e40:	a10001cc 	andi	r4,r20,7
    5e44:	20000726 	beq	r4,zero,5e64 <__divdf3+0x67c>
    5e48:	a10003cc 	andi	r4,r20,15
    5e4c:	01400104 	movi	r5,4
    5e50:	21400426 	beq	r4,r5,5e64 <__divdf3+0x67c>
    5e54:	a149883a 	add	r4,r20,r5
    5e58:	2529803a 	cmpltu	r20,r4,r20
    5e5c:	8d23883a 	add	r17,r17,r20
    5e60:	2029883a 	mov	r20,r4
    5e64:	8900402c 	andhi	r4,r17,256
    5e68:	20000426 	beq	r4,zero,5e7c <__divdf3+0x694>
    5e6c:	18810004 	addi	r2,r3,1024
    5e70:	00ffc034 	movhi	r3,65280
    5e74:	18ffffc4 	addi	r3,r3,-1
    5e78:	88e2703a 	and	r17,r17,r3
    5e7c:	00c1ff84 	movi	r3,2046
    5e80:	18beb416 	blt	r3,r2,5954 <__alt_data_end+0xfffd4c14>
    5e84:	a028d0fa 	srli	r20,r20,3
    5e88:	882a977a 	slli	r21,r17,29
    5e8c:	8820927a 	slli	r16,r17,9
    5e90:	1081ffcc 	andi	r2,r2,2047
    5e94:	ad2ab03a 	or	r21,r21,r20
    5e98:	8020d33a 	srli	r16,r16,12
    5e9c:	9900004c 	andi	r4,r19,1
    5ea0:	003eb006 	br	5964 <__alt_data_end+0xfffd4c24>
    5ea4:	8080022c 	andhi	r2,r16,8
    5ea8:	10001226 	beq	r2,zero,5ef4 <__divdf3+0x70c>
    5eac:	8880022c 	andhi	r2,r17,8
    5eb0:	1000101e 	bne	r2,zero,5ef4 <__divdf3+0x70c>
    5eb4:	00800434 	movhi	r2,16
    5eb8:	8c000234 	orhi	r16,r17,8
    5ebc:	10bfffc4 	addi	r2,r2,-1
    5ec0:	b809883a 	mov	r4,r23
    5ec4:	80a0703a 	and	r16,r16,r2
    5ec8:	a02b883a 	mov	r21,r20
    5ecc:	003f0806 	br	5af0 <__alt_data_end+0xfffd4db0>
    5ed0:	008000c4 	movi	r2,3
    5ed4:	3880b126 	beq	r7,r2,619c <__divdf3+0x9b4>
    5ed8:	00800044 	movi	r2,1
    5edc:	38805b1e 	bne	r7,r2,604c <__divdf3+0x864>
    5ee0:	e009883a 	mov	r4,fp
    5ee4:	0005883a 	mov	r2,zero
    5ee8:	0021883a 	mov	r16,zero
    5eec:	002b883a 	mov	r21,zero
    5ef0:	003e9c06 	br	5964 <__alt_data_end+0xfffd4c24>
    5ef4:	00800434 	movhi	r2,16
    5ef8:	84000234 	orhi	r16,r16,8
    5efc:	10bfffc4 	addi	r2,r2,-1
    5f00:	b009883a 	mov	r4,r22
    5f04:	80a0703a 	and	r16,r16,r2
    5f08:	003ef906 	br	5af0 <__alt_data_end+0xfffd4db0>
    5f0c:	103fca26 	beq	r2,zero,5e38 <__alt_data_end+0xfffd50f8>
    5f10:	b421883a 	add	r16,r22,r16
    5f14:	a17fffc4 	addi	r5,r20,-1
    5f18:	8580422e 	bgeu	r16,r22,6024 <__divdf3+0x83c>
    5f1c:	2829883a 	mov	r20,r5
    5f20:	813fc41e 	bne	r16,r4,5e34 <__alt_data_end+0xfffd50f4>
    5f24:	d9800017 	ldw	r6,0(sp)
    5f28:	30bfc21e 	bne	r6,r2,5e34 <__alt_data_end+0xfffd50f4>
    5f2c:	003fc206 	br	5e38 <__alt_data_end+0xfffd50f8>
    5f30:	143ff604 	addi	r16,r2,-40
    5f34:	8c20983a 	sll	r16,r17,r16
    5f38:	002b883a 	mov	r21,zero
    5f3c:	003eb406 	br	5a10 <__alt_data_end+0xfffd4cd0>
    5f40:	d9800215 	stw	r6,8(sp)
    5f44:	d9c00515 	stw	r7,20(sp)
    5f48:	da000415 	stw	r8,16(sp)
    5f4c:	00076d40 	call	76d4 <__clzsi2>
    5f50:	10800804 	addi	r2,r2,32
    5f54:	da000417 	ldw	r8,16(sp)
    5f58:	d9c00517 	ldw	r7,20(sp)
    5f5c:	d9800217 	ldw	r6,8(sp)
    5f60:	003ea106 	br	59e8 <__alt_data_end+0xfffd4ca8>
    5f64:	147ff604 	addi	r17,r2,-40
    5f68:	3462983a 	sll	r17,r6,r17
    5f6c:	0029883a 	mov	r20,zero
    5f70:	003ec906 	br	5a98 <__alt_data_end+0xfffd4d58>
    5f74:	3009883a 	mov	r4,r6
    5f78:	d9400115 	stw	r5,4(sp)
    5f7c:	d9800215 	stw	r6,8(sp)
    5f80:	da000415 	stw	r8,16(sp)
    5f84:	da400315 	stw	r9,12(sp)
    5f88:	00076d40 	call	76d4 <__clzsi2>
    5f8c:	10800804 	addi	r2,r2,32
    5f90:	da400317 	ldw	r9,12(sp)
    5f94:	da000417 	ldw	r8,16(sp)
    5f98:	d9800217 	ldw	r6,8(sp)
    5f9c:	d9400117 	ldw	r5,4(sp)
    5fa0:	003eb306 	br	5a70 <__alt_data_end+0xfffd4d30>
    5fa4:	d9800017 	ldw	r6,0(sp)
    5fa8:	a9ab883a 	add	r21,r21,r6
    5fac:	a98b803a 	cmpltu	r5,r21,r6
    5fb0:	2d8b883a 	add	r5,r5,r22
    5fb4:	2a11883a 	add	r8,r5,r8
    5fb8:	897fffc4 	addi	r5,r17,-1
    5fbc:	b2000c2e 	bgeu	r22,r8,5ff0 <__divdf3+0x808>
    5fc0:	41003f36 	bltu	r8,r4,60c0 <__divdf3+0x8d8>
    5fc4:	22006c26 	beq	r4,r8,6178 <__divdf3+0x990>
    5fc8:	4109c83a 	sub	r4,r8,r4
    5fcc:	2823883a 	mov	r17,r5
    5fd0:	003f3b06 	br	5cc0 <__alt_data_end+0xfffd4f80>
    5fd4:	ad3ed336 	bltu	r21,r20,5b24 <__alt_data_end+0xfffd4de4>
    5fd8:	a804d07a 	srli	r2,r21,1
    5fdc:	802e97fa 	slli	r23,r16,31
    5fe0:	a82a97fa 	slli	r21,r21,31
    5fe4:	8020d07a 	srli	r16,r16,1
    5fe8:	b8aeb03a 	or	r23,r23,r2
    5fec:	003ed006 	br	5b30 <__alt_data_end+0xfffd4df0>
    5ff0:	b23ff51e 	bne	r22,r8,5fc8 <__alt_data_end+0xfffd5288>
    5ff4:	d9800017 	ldw	r6,0(sp)
    5ff8:	a9bff12e 	bgeu	r21,r6,5fc0 <__alt_data_end+0xfffd5280>
    5ffc:	b109c83a 	sub	r4,r22,r4
    6000:	2823883a 	mov	r17,r5
    6004:	003f2e06 	br	5cc0 <__alt_data_end+0xfffd4f80>
    6008:	2021883a 	mov	r16,r4
    600c:	003eff06 	br	5c0c <__alt_data_end+0xfffd4ecc>
    6010:	2023883a 	mov	r17,r4
    6014:	003ee406 	br	5ba8 <__alt_data_end+0xfffd4e68>
    6018:	a8bfe236 	bltu	r21,r2,5fa4 <__alt_data_end+0xfffd5264>
    601c:	0009883a 	mov	r4,zero
    6020:	003f2706 	br	5cc0 <__alt_data_end+0xfffd4f80>
    6024:	81002d36 	bltu	r16,r4,60dc <__divdf3+0x8f4>
    6028:	24005626 	beq	r4,r16,6184 <__divdf3+0x99c>
    602c:	2829883a 	mov	r20,r5
    6030:	003f8006 	br	5e34 <__alt_data_end+0xfffd50f4>
    6034:	053fffc4 	movi	r20,-1
    6038:	003f7f06 	br	5e38 <__alt_data_end+0xfffd50f8>
    603c:	200f883a 	mov	r7,r4
    6040:	003f3c06 	br	5d34 <__alt_data_end+0xfffd4ff4>
    6044:	1011883a 	mov	r8,r2
    6048:	003f5506 	br	5da0 <__alt_data_end+0xfffd5060>
    604c:	e027883a 	mov	r19,fp
    6050:	003f7906 	br	5e38 <__alt_data_end+0xfffd50f8>
    6054:	010007c4 	movi	r4,31
    6058:	20c02816 	blt	r4,r3,60fc <__divdf3+0x914>
    605c:	00800804 	movi	r2,32
    6060:	10c5c83a 	sub	r2,r2,r3
    6064:	888a983a 	sll	r5,r17,r2
    6068:	a0c8d83a 	srl	r4,r20,r3
    606c:	a084983a 	sll	r2,r20,r2
    6070:	88e2d83a 	srl	r17,r17,r3
    6074:	2906b03a 	or	r3,r5,r4
    6078:	1004c03a 	cmpne	r2,r2,zero
    607c:	1886b03a 	or	r3,r3,r2
    6080:	188001cc 	andi	r2,r3,7
    6084:	10000726 	beq	r2,zero,60a4 <__divdf3+0x8bc>
    6088:	188003cc 	andi	r2,r3,15
    608c:	01000104 	movi	r4,4
    6090:	11000426 	beq	r2,r4,60a4 <__divdf3+0x8bc>
    6094:	1805883a 	mov	r2,r3
    6098:	10c00104 	addi	r3,r2,4
    609c:	1885803a 	cmpltu	r2,r3,r2
    60a0:	88a3883a 	add	r17,r17,r2
    60a4:	8880202c 	andhi	r2,r17,128
    60a8:	10002926 	beq	r2,zero,6150 <__divdf3+0x968>
    60ac:	9900004c 	andi	r4,r19,1
    60b0:	00800044 	movi	r2,1
    60b4:	0021883a 	mov	r16,zero
    60b8:	002b883a 	mov	r21,zero
    60bc:	003e2906 	br	5964 <__alt_data_end+0xfffd4c24>
    60c0:	d9800017 	ldw	r6,0(sp)
    60c4:	8c7fff84 	addi	r17,r17,-2
    60c8:	a9ab883a 	add	r21,r21,r6
    60cc:	a98b803a 	cmpltu	r5,r21,r6
    60d0:	2d8b883a 	add	r5,r5,r22
    60d4:	2a11883a 	add	r8,r5,r8
    60d8:	003ef806 	br	5cbc <__alt_data_end+0xfffd4f7c>
    60dc:	d9800017 	ldw	r6,0(sp)
    60e0:	318f883a 	add	r7,r6,r6
    60e4:	398b803a 	cmpltu	r5,r7,r6
    60e8:	2d8d883a 	add	r6,r5,r22
    60ec:	81a1883a 	add	r16,r16,r6
    60f0:	a17fff84 	addi	r5,r20,-2
    60f4:	d9c00015 	stw	r7,0(sp)
    60f8:	003f8806 	br	5f1c <__alt_data_end+0xfffd51dc>
    60fc:	013ff844 	movi	r4,-31
    6100:	2085c83a 	sub	r2,r4,r2
    6104:	8888d83a 	srl	r4,r17,r2
    6108:	00800804 	movi	r2,32
    610c:	18802126 	beq	r3,r2,6194 <__divdf3+0x9ac>
    6110:	04001004 	movi	r16,64
    6114:	80c7c83a 	sub	r3,r16,r3
    6118:	88e0983a 	sll	r16,r17,r3
    611c:	8504b03a 	or	r2,r16,r20
    6120:	1004c03a 	cmpne	r2,r2,zero
    6124:	2084b03a 	or	r2,r4,r2
    6128:	144001cc 	andi	r17,r2,7
    612c:	88000d1e 	bne	r17,zero,6164 <__divdf3+0x97c>
    6130:	0021883a 	mov	r16,zero
    6134:	102ad0fa 	srli	r21,r2,3
    6138:	9900004c 	andi	r4,r19,1
    613c:	0005883a 	mov	r2,zero
    6140:	ac6ab03a 	or	r21,r21,r17
    6144:	003e0706 	br	5964 <__alt_data_end+0xfffd4c24>
    6148:	1007883a 	mov	r3,r2
    614c:	0023883a 	mov	r17,zero
    6150:	8820927a 	slli	r16,r17,9
    6154:	1805883a 	mov	r2,r3
    6158:	8822977a 	slli	r17,r17,29
    615c:	8020d33a 	srli	r16,r16,12
    6160:	003ff406 	br	6134 <__alt_data_end+0xfffd53f4>
    6164:	10c003cc 	andi	r3,r2,15
    6168:	01000104 	movi	r4,4
    616c:	193ff626 	beq	r3,r4,6148 <__alt_data_end+0xfffd5408>
    6170:	0023883a 	mov	r17,zero
    6174:	003fc806 	br	6098 <__alt_data_end+0xfffd5358>
    6178:	a8bfd136 	bltu	r21,r2,60c0 <__alt_data_end+0xfffd5380>
    617c:	2823883a 	mov	r17,r5
    6180:	003fa606 	br	601c <__alt_data_end+0xfffd52dc>
    6184:	d9800017 	ldw	r6,0(sp)
    6188:	30bfd436 	bltu	r6,r2,60dc <__alt_data_end+0xfffd539c>
    618c:	2829883a 	mov	r20,r5
    6190:	003f6406 	br	5f24 <__alt_data_end+0xfffd51e4>
    6194:	0021883a 	mov	r16,zero
    6198:	003fe006 	br	611c <__alt_data_end+0xfffd53dc>
    619c:	00800434 	movhi	r2,16
    61a0:	8c000234 	orhi	r16,r17,8
    61a4:	10bfffc4 	addi	r2,r2,-1
    61a8:	e009883a 	mov	r4,fp
    61ac:	80a0703a 	and	r16,r16,r2
    61b0:	a02b883a 	mov	r21,r20
    61b4:	003e4e06 	br	5af0 <__alt_data_end+0xfffd4db0>

000061b8 <__eqdf2>:
    61b8:	2804d53a 	srli	r2,r5,20
    61bc:	3806d53a 	srli	r3,r7,20
    61c0:	02000434 	movhi	r8,16
    61c4:	423fffc4 	addi	r8,r8,-1
    61c8:	1081ffcc 	andi	r2,r2,2047
    61cc:	0281ffc4 	movi	r10,2047
    61d0:	2a12703a 	and	r9,r5,r8
    61d4:	18c1ffcc 	andi	r3,r3,2047
    61d8:	3a10703a 	and	r8,r7,r8
    61dc:	280ad7fa 	srli	r5,r5,31
    61e0:	380ed7fa 	srli	r7,r7,31
    61e4:	12801026 	beq	r2,r10,6228 <__eqdf2+0x70>
    61e8:	0281ffc4 	movi	r10,2047
    61ec:	1a800a26 	beq	r3,r10,6218 <__eqdf2+0x60>
    61f0:	10c00226 	beq	r2,r3,61fc <__eqdf2+0x44>
    61f4:	00800044 	movi	r2,1
    61f8:	f800283a 	ret
    61fc:	4a3ffd1e 	bne	r9,r8,61f4 <__alt_data_end+0xfffd54b4>
    6200:	21bffc1e 	bne	r4,r6,61f4 <__alt_data_end+0xfffd54b4>
    6204:	29c00c26 	beq	r5,r7,6238 <__eqdf2+0x80>
    6208:	103ffa1e 	bne	r2,zero,61f4 <__alt_data_end+0xfffd54b4>
    620c:	2244b03a 	or	r2,r4,r9
    6210:	1004c03a 	cmpne	r2,r2,zero
    6214:	f800283a 	ret
    6218:	3214b03a 	or	r10,r6,r8
    621c:	503ff426 	beq	r10,zero,61f0 <__alt_data_end+0xfffd54b0>
    6220:	00800044 	movi	r2,1
    6224:	f800283a 	ret
    6228:	2254b03a 	or	r10,r4,r9
    622c:	503fee26 	beq	r10,zero,61e8 <__alt_data_end+0xfffd54a8>
    6230:	00800044 	movi	r2,1
    6234:	f800283a 	ret
    6238:	0005883a 	mov	r2,zero
    623c:	f800283a 	ret

00006240 <__gedf2>:
    6240:	2804d53a 	srli	r2,r5,20
    6244:	3806d53a 	srli	r3,r7,20
    6248:	02000434 	movhi	r8,16
    624c:	423fffc4 	addi	r8,r8,-1
    6250:	1081ffcc 	andi	r2,r2,2047
    6254:	0241ffc4 	movi	r9,2047
    6258:	2a14703a 	and	r10,r5,r8
    625c:	18c1ffcc 	andi	r3,r3,2047
    6260:	3a10703a 	and	r8,r7,r8
    6264:	280ad7fa 	srli	r5,r5,31
    6268:	380ed7fa 	srli	r7,r7,31
    626c:	12401d26 	beq	r2,r9,62e4 <__gedf2+0xa4>
    6270:	0241ffc4 	movi	r9,2047
    6274:	1a401226 	beq	r3,r9,62c0 <__gedf2+0x80>
    6278:	1000081e 	bne	r2,zero,629c <__gedf2+0x5c>
    627c:	2296b03a 	or	r11,r4,r10
    6280:	5813003a 	cmpeq	r9,r11,zero
    6284:	1800091e 	bne	r3,zero,62ac <__gedf2+0x6c>
    6288:	3218b03a 	or	r12,r6,r8
    628c:	6000071e 	bne	r12,zero,62ac <__gedf2+0x6c>
    6290:	0005883a 	mov	r2,zero
    6294:	5800101e 	bne	r11,zero,62d8 <__gedf2+0x98>
    6298:	f800283a 	ret
    629c:	18000c1e 	bne	r3,zero,62d0 <__gedf2+0x90>
    62a0:	3212b03a 	or	r9,r6,r8
    62a4:	48000c26 	beq	r9,zero,62d8 <__gedf2+0x98>
    62a8:	0013883a 	mov	r9,zero
    62ac:	39c03fcc 	andi	r7,r7,255
    62b0:	48000826 	beq	r9,zero,62d4 <__gedf2+0x94>
    62b4:	38000926 	beq	r7,zero,62dc <__gedf2+0x9c>
    62b8:	00800044 	movi	r2,1
    62bc:	f800283a 	ret
    62c0:	3212b03a 	or	r9,r6,r8
    62c4:	483fec26 	beq	r9,zero,6278 <__alt_data_end+0xfffd5538>
    62c8:	00bfff84 	movi	r2,-2
    62cc:	f800283a 	ret
    62d0:	39c03fcc 	andi	r7,r7,255
    62d4:	29c00626 	beq	r5,r7,62f0 <__gedf2+0xb0>
    62d8:	283ff726 	beq	r5,zero,62b8 <__alt_data_end+0xfffd5578>
    62dc:	00bfffc4 	movi	r2,-1
    62e0:	f800283a 	ret
    62e4:	2292b03a 	or	r9,r4,r10
    62e8:	483fe126 	beq	r9,zero,6270 <__alt_data_end+0xfffd5530>
    62ec:	003ff606 	br	62c8 <__alt_data_end+0xfffd5588>
    62f0:	18bff916 	blt	r3,r2,62d8 <__alt_data_end+0xfffd5598>
    62f4:	10c00316 	blt	r2,r3,6304 <__gedf2+0xc4>
    62f8:	42bff736 	bltu	r8,r10,62d8 <__alt_data_end+0xfffd5598>
    62fc:	52000326 	beq	r10,r8,630c <__gedf2+0xcc>
    6300:	5200042e 	bgeu	r10,r8,6314 <__gedf2+0xd4>
    6304:	283fec1e 	bne	r5,zero,62b8 <__alt_data_end+0xfffd5578>
    6308:	003ff406 	br	62dc <__alt_data_end+0xfffd559c>
    630c:	313ff236 	bltu	r6,r4,62d8 <__alt_data_end+0xfffd5598>
    6310:	21bffc36 	bltu	r4,r6,6304 <__alt_data_end+0xfffd55c4>
    6314:	0005883a 	mov	r2,zero
    6318:	f800283a 	ret

0000631c <__ledf2>:
    631c:	2804d53a 	srli	r2,r5,20
    6320:	3810d53a 	srli	r8,r7,20
    6324:	00c00434 	movhi	r3,16
    6328:	18ffffc4 	addi	r3,r3,-1
    632c:	1081ffcc 	andi	r2,r2,2047
    6330:	0241ffc4 	movi	r9,2047
    6334:	28d4703a 	and	r10,r5,r3
    6338:	4201ffcc 	andi	r8,r8,2047
    633c:	38c6703a 	and	r3,r7,r3
    6340:	280ad7fa 	srli	r5,r5,31
    6344:	380ed7fa 	srli	r7,r7,31
    6348:	12401f26 	beq	r2,r9,63c8 <__ledf2+0xac>
    634c:	0241ffc4 	movi	r9,2047
    6350:	42401426 	beq	r8,r9,63a4 <__ledf2+0x88>
    6354:	1000091e 	bne	r2,zero,637c <__ledf2+0x60>
    6358:	2296b03a 	or	r11,r4,r10
    635c:	5813003a 	cmpeq	r9,r11,zero
    6360:	29403fcc 	andi	r5,r5,255
    6364:	40000a1e 	bne	r8,zero,6390 <__ledf2+0x74>
    6368:	30d8b03a 	or	r12,r6,r3
    636c:	6000081e 	bne	r12,zero,6390 <__ledf2+0x74>
    6370:	0005883a 	mov	r2,zero
    6374:	5800111e 	bne	r11,zero,63bc <__ledf2+0xa0>
    6378:	f800283a 	ret
    637c:	29403fcc 	andi	r5,r5,255
    6380:	40000c1e 	bne	r8,zero,63b4 <__ledf2+0x98>
    6384:	30d2b03a 	or	r9,r6,r3
    6388:	48000c26 	beq	r9,zero,63bc <__ledf2+0xa0>
    638c:	0013883a 	mov	r9,zero
    6390:	39c03fcc 	andi	r7,r7,255
    6394:	48000826 	beq	r9,zero,63b8 <__ledf2+0x9c>
    6398:	38001126 	beq	r7,zero,63e0 <__ledf2+0xc4>
    639c:	00800044 	movi	r2,1
    63a0:	f800283a 	ret
    63a4:	30d2b03a 	or	r9,r6,r3
    63a8:	483fea26 	beq	r9,zero,6354 <__alt_data_end+0xfffd5614>
    63ac:	00800084 	movi	r2,2
    63b0:	f800283a 	ret
    63b4:	39c03fcc 	andi	r7,r7,255
    63b8:	39400726 	beq	r7,r5,63d8 <__ledf2+0xbc>
    63bc:	2800081e 	bne	r5,zero,63e0 <__ledf2+0xc4>
    63c0:	00800044 	movi	r2,1
    63c4:	f800283a 	ret
    63c8:	2292b03a 	or	r9,r4,r10
    63cc:	483fdf26 	beq	r9,zero,634c <__alt_data_end+0xfffd560c>
    63d0:	00800084 	movi	r2,2
    63d4:	f800283a 	ret
    63d8:	4080030e 	bge	r8,r2,63e8 <__ledf2+0xcc>
    63dc:	383fef26 	beq	r7,zero,639c <__alt_data_end+0xfffd565c>
    63e0:	00bfffc4 	movi	r2,-1
    63e4:	f800283a 	ret
    63e8:	123feb16 	blt	r2,r8,6398 <__alt_data_end+0xfffd5658>
    63ec:	1abff336 	bltu	r3,r10,63bc <__alt_data_end+0xfffd567c>
    63f0:	50c00326 	beq	r10,r3,6400 <__ledf2+0xe4>
    63f4:	50c0042e 	bgeu	r10,r3,6408 <__ledf2+0xec>
    63f8:	283fe81e 	bne	r5,zero,639c <__alt_data_end+0xfffd565c>
    63fc:	003ff806 	br	63e0 <__alt_data_end+0xfffd56a0>
    6400:	313fee36 	bltu	r6,r4,63bc <__alt_data_end+0xfffd567c>
    6404:	21bffc36 	bltu	r4,r6,63f8 <__alt_data_end+0xfffd56b8>
    6408:	0005883a 	mov	r2,zero
    640c:	f800283a 	ret

00006410 <__muldf3>:
    6410:	deffee04 	addi	sp,sp,-72
    6414:	dd000c15 	stw	r20,48(sp)
    6418:	2828d53a 	srli	r20,r5,20
    641c:	ddc00f15 	stw	r23,60(sp)
    6420:	282ed7fa 	srli	r23,r5,31
    6424:	dc000815 	stw	r16,32(sp)
    6428:	04000434 	movhi	r16,16
    642c:	dcc00b15 	stw	r19,44(sp)
    6430:	843fffc4 	addi	r16,r16,-1
    6434:	dfc01115 	stw	ra,68(sp)
    6438:	df001015 	stw	fp,64(sp)
    643c:	dd800e15 	stw	r22,56(sp)
    6440:	dd400d15 	stw	r21,52(sp)
    6444:	dc800a15 	stw	r18,40(sp)
    6448:	dc400915 	stw	r17,36(sp)
    644c:	a501ffcc 	andi	r20,r20,2047
    6450:	2c20703a 	and	r16,r5,r16
    6454:	b827883a 	mov	r19,r23
    6458:	ba403fcc 	andi	r9,r23,255
    645c:	a0006026 	beq	r20,zero,65e0 <__muldf3+0x1d0>
    6460:	0081ffc4 	movi	r2,2047
    6464:	202d883a 	mov	r22,r4
    6468:	a0803626 	beq	r20,r2,6544 <__muldf3+0x134>
    646c:	84000434 	orhi	r16,r16,16
    6470:	200ad77a 	srli	r5,r4,29
    6474:	800490fa 	slli	r2,r16,3
    6478:	202c90fa 	slli	r22,r4,3
    647c:	a53f0044 	addi	r20,r20,-1023
    6480:	28a0b03a 	or	r16,r5,r2
    6484:	002b883a 	mov	r21,zero
    6488:	000b883a 	mov	r5,zero
    648c:	3804d53a 	srli	r2,r7,20
    6490:	3838d7fa 	srli	fp,r7,31
    6494:	04400434 	movhi	r17,16
    6498:	8c7fffc4 	addi	r17,r17,-1
    649c:	1081ffcc 	andi	r2,r2,2047
    64a0:	3025883a 	mov	r18,r6
    64a4:	3c62703a 	and	r17,r7,r17
    64a8:	e2803fcc 	andi	r10,fp,255
    64ac:	10006d26 	beq	r2,zero,6664 <__muldf3+0x254>
    64b0:	00c1ffc4 	movi	r3,2047
    64b4:	10c06526 	beq	r2,r3,664c <__muldf3+0x23c>
    64b8:	8c400434 	orhi	r17,r17,16
    64bc:	300ed77a 	srli	r7,r6,29
    64c0:	880690fa 	slli	r3,r17,3
    64c4:	302490fa 	slli	r18,r6,3
    64c8:	10bf0044 	addi	r2,r2,-1023
    64cc:	38e2b03a 	or	r17,r7,r3
    64d0:	000f883a 	mov	r7,zero
    64d4:	a087883a 	add	r3,r20,r2
    64d8:	010003c4 	movi	r4,15
    64dc:	3d44b03a 	or	r2,r7,r21
    64e0:	e5ccf03a 	xor	r6,fp,r23
    64e4:	1a000044 	addi	r8,r3,1
    64e8:	20809b36 	bltu	r4,r2,6758 <__muldf3+0x348>
    64ec:	100490ba 	slli	r2,r2,2
    64f0:	01000034 	movhi	r4,0
    64f4:	21194104 	addi	r4,r4,25860
    64f8:	1105883a 	add	r2,r2,r4
    64fc:	10800017 	ldw	r2,0(r2)
    6500:	1000683a 	jmp	r2
    6504:	00006758 	cmpnei	zero,zero,413
    6508:	00006564 	muli	zero,zero,405
    650c:	00006564 	muli	zero,zero,405
    6510:	00006560 	cmpeqi	zero,zero,405
    6514:	00006734 	movhi	zero,412
    6518:	00006734 	movhi	zero,412
    651c:	0000671c 	xori	zero,zero,412
    6520:	00006560 	cmpeqi	zero,zero,405
    6524:	00006734 	movhi	zero,412
    6528:	0000671c 	xori	zero,zero,412
    652c:	00006734 	movhi	zero,412
    6530:	00006560 	cmpeqi	zero,zero,405
    6534:	00006744 	movi	zero,413
    6538:	00006744 	movi	zero,413
    653c:	00006744 	movi	zero,413
    6540:	00006aa4 	muli	zero,zero,426
    6544:	2404b03a 	or	r2,r4,r16
    6548:	1000711e 	bne	r2,zero,6710 <__muldf3+0x300>
    654c:	05400204 	movi	r21,8
    6550:	0021883a 	mov	r16,zero
    6554:	002d883a 	mov	r22,zero
    6558:	01400084 	movi	r5,2
    655c:	003fcb06 	br	648c <__alt_data_end+0xfffd574c>
    6560:	500d883a 	mov	r6,r10
    6564:	00800084 	movi	r2,2
    6568:	38805926 	beq	r7,r2,66d0 <__muldf3+0x2c0>
    656c:	008000c4 	movi	r2,3
    6570:	3881bb26 	beq	r7,r2,6c60 <__muldf3+0x850>
    6574:	00800044 	movi	r2,1
    6578:	3881961e 	bne	r7,r2,6bd4 <__muldf3+0x7c4>
    657c:	3027883a 	mov	r19,r6
    6580:	0005883a 	mov	r2,zero
    6584:	0021883a 	mov	r16,zero
    6588:	002d883a 	mov	r22,zero
    658c:	1004953a 	slli	r2,r2,20
    6590:	98c03fcc 	andi	r3,r19,255
    6594:	04400434 	movhi	r17,16
    6598:	8c7fffc4 	addi	r17,r17,-1
    659c:	180697fa 	slli	r3,r3,31
    65a0:	8460703a 	and	r16,r16,r17
    65a4:	80a0b03a 	or	r16,r16,r2
    65a8:	80c6b03a 	or	r3,r16,r3
    65ac:	b005883a 	mov	r2,r22
    65b0:	dfc01117 	ldw	ra,68(sp)
    65b4:	df001017 	ldw	fp,64(sp)
    65b8:	ddc00f17 	ldw	r23,60(sp)
    65bc:	dd800e17 	ldw	r22,56(sp)
    65c0:	dd400d17 	ldw	r21,52(sp)
    65c4:	dd000c17 	ldw	r20,48(sp)
    65c8:	dcc00b17 	ldw	r19,44(sp)
    65cc:	dc800a17 	ldw	r18,40(sp)
    65d0:	dc400917 	ldw	r17,36(sp)
    65d4:	dc000817 	ldw	r16,32(sp)
    65d8:	dec01204 	addi	sp,sp,72
    65dc:	f800283a 	ret
    65e0:	2404b03a 	or	r2,r4,r16
    65e4:	202b883a 	mov	r21,r4
    65e8:	10004426 	beq	r2,zero,66fc <__muldf3+0x2ec>
    65ec:	80015126 	beq	r16,zero,6b34 <__muldf3+0x724>
    65f0:	8009883a 	mov	r4,r16
    65f4:	d9800715 	stw	r6,28(sp)
    65f8:	d9c00215 	stw	r7,8(sp)
    65fc:	da400415 	stw	r9,16(sp)
    6600:	00076d40 	call	76d4 <__clzsi2>
    6604:	d9800717 	ldw	r6,28(sp)
    6608:	d9c00217 	ldw	r7,8(sp)
    660c:	da400417 	ldw	r9,16(sp)
    6610:	113ffd44 	addi	r4,r2,-11
    6614:	00c00704 	movi	r3,28
    6618:	19014216 	blt	r3,r4,6b24 <__muldf3+0x714>
    661c:	00c00744 	movi	r3,29
    6620:	15bffe04 	addi	r22,r2,-8
    6624:	1907c83a 	sub	r3,r3,r4
    6628:	85a0983a 	sll	r16,r16,r22
    662c:	a8c6d83a 	srl	r3,r21,r3
    6630:	adac983a 	sll	r22,r21,r22
    6634:	1c20b03a 	or	r16,r3,r16
    6638:	1080fcc4 	addi	r2,r2,1011
    663c:	00a9c83a 	sub	r20,zero,r2
    6640:	002b883a 	mov	r21,zero
    6644:	000b883a 	mov	r5,zero
    6648:	003f9006 	br	648c <__alt_data_end+0xfffd574c>
    664c:	3446b03a 	or	r3,r6,r17
    6650:	1800281e 	bne	r3,zero,66f4 <__muldf3+0x2e4>
    6654:	0023883a 	mov	r17,zero
    6658:	0025883a 	mov	r18,zero
    665c:	01c00084 	movi	r7,2
    6660:	003f9c06 	br	64d4 <__alt_data_end+0xfffd5794>
    6664:	3446b03a 	or	r3,r6,r17
    6668:	18001e26 	beq	r3,zero,66e4 <__muldf3+0x2d4>
    666c:	88012126 	beq	r17,zero,6af4 <__muldf3+0x6e4>
    6670:	8809883a 	mov	r4,r17
    6674:	d9400215 	stw	r5,8(sp)
    6678:	d9800715 	stw	r6,28(sp)
    667c:	da400415 	stw	r9,16(sp)
    6680:	da800315 	stw	r10,12(sp)
    6684:	00076d40 	call	76d4 <__clzsi2>
    6688:	d9400217 	ldw	r5,8(sp)
    668c:	d9800717 	ldw	r6,28(sp)
    6690:	da400417 	ldw	r9,16(sp)
    6694:	da800317 	ldw	r10,12(sp)
    6698:	113ffd44 	addi	r4,r2,-11
    669c:	00c00704 	movi	r3,28
    66a0:	19011016 	blt	r3,r4,6ae4 <__muldf3+0x6d4>
    66a4:	00c00744 	movi	r3,29
    66a8:	14bffe04 	addi	r18,r2,-8
    66ac:	1907c83a 	sub	r3,r3,r4
    66b0:	8ca2983a 	sll	r17,r17,r18
    66b4:	30c6d83a 	srl	r3,r6,r3
    66b8:	34a4983a 	sll	r18,r6,r18
    66bc:	1c62b03a 	or	r17,r3,r17
    66c0:	1080fcc4 	addi	r2,r2,1011
    66c4:	0085c83a 	sub	r2,zero,r2
    66c8:	000f883a 	mov	r7,zero
    66cc:	003f8106 	br	64d4 <__alt_data_end+0xfffd5794>
    66d0:	3027883a 	mov	r19,r6
    66d4:	0081ffc4 	movi	r2,2047
    66d8:	0021883a 	mov	r16,zero
    66dc:	002d883a 	mov	r22,zero
    66e0:	003faa06 	br	658c <__alt_data_end+0xfffd584c>
    66e4:	0023883a 	mov	r17,zero
    66e8:	0025883a 	mov	r18,zero
    66ec:	01c00044 	movi	r7,1
    66f0:	003f7806 	br	64d4 <__alt_data_end+0xfffd5794>
    66f4:	01c000c4 	movi	r7,3
    66f8:	003f7606 	br	64d4 <__alt_data_end+0xfffd5794>
    66fc:	05400104 	movi	r21,4
    6700:	0021883a 	mov	r16,zero
    6704:	002d883a 	mov	r22,zero
    6708:	01400044 	movi	r5,1
    670c:	003f5f06 	br	648c <__alt_data_end+0xfffd574c>
    6710:	05400304 	movi	r21,12
    6714:	014000c4 	movi	r5,3
    6718:	003f5c06 	br	648c <__alt_data_end+0xfffd574c>
    671c:	04000434 	movhi	r16,16
    6720:	0027883a 	mov	r19,zero
    6724:	843fffc4 	addi	r16,r16,-1
    6728:	05bfffc4 	movi	r22,-1
    672c:	0081ffc4 	movi	r2,2047
    6730:	003f9606 	br	658c <__alt_data_end+0xfffd584c>
    6734:	8023883a 	mov	r17,r16
    6738:	b025883a 	mov	r18,r22
    673c:	280f883a 	mov	r7,r5
    6740:	003f8806 	br	6564 <__alt_data_end+0xfffd5824>
    6744:	8023883a 	mov	r17,r16
    6748:	b025883a 	mov	r18,r22
    674c:	480d883a 	mov	r6,r9
    6750:	280f883a 	mov	r7,r5
    6754:	003f8306 	br	6564 <__alt_data_end+0xfffd5824>
    6758:	b026d43a 	srli	r19,r22,16
    675c:	902ed43a 	srli	r23,r18,16
    6760:	b5bfffcc 	andi	r22,r22,65535
    6764:	94bfffcc 	andi	r18,r18,65535
    6768:	b00b883a 	mov	r5,r22
    676c:	9009883a 	mov	r4,r18
    6770:	d8c00515 	stw	r3,20(sp)
    6774:	d9800715 	stw	r6,28(sp)
    6778:	da000615 	stw	r8,24(sp)
    677c:	0004f140 	call	4f14 <__mulsi3>
    6780:	980b883a 	mov	r5,r19
    6784:	9009883a 	mov	r4,r18
    6788:	1029883a 	mov	r20,r2
    678c:	0004f140 	call	4f14 <__mulsi3>
    6790:	b80b883a 	mov	r5,r23
    6794:	9809883a 	mov	r4,r19
    6798:	102b883a 	mov	r21,r2
    679c:	0004f140 	call	4f14 <__mulsi3>
    67a0:	b809883a 	mov	r4,r23
    67a4:	b00b883a 	mov	r5,r22
    67a8:	1039883a 	mov	fp,r2
    67ac:	0004f140 	call	4f14 <__mulsi3>
    67b0:	a008d43a 	srli	r4,r20,16
    67b4:	1545883a 	add	r2,r2,r21
    67b8:	d8c00517 	ldw	r3,20(sp)
    67bc:	2085883a 	add	r2,r4,r2
    67c0:	d9800717 	ldw	r6,28(sp)
    67c4:	da000617 	ldw	r8,24(sp)
    67c8:	1540022e 	bgeu	r2,r21,67d4 <__muldf3+0x3c4>
    67cc:	01000074 	movhi	r4,1
    67d0:	e139883a 	add	fp,fp,r4
    67d4:	100e943a 	slli	r7,r2,16
    67d8:	1004d43a 	srli	r2,r2,16
    67dc:	882ad43a 	srli	r21,r17,16
    67e0:	a53fffcc 	andi	r20,r20,65535
    67e4:	8c7fffcc 	andi	r17,r17,65535
    67e8:	3d29883a 	add	r20,r7,r20
    67ec:	b00b883a 	mov	r5,r22
    67f0:	8809883a 	mov	r4,r17
    67f4:	d8c00515 	stw	r3,20(sp)
    67f8:	d9800715 	stw	r6,28(sp)
    67fc:	da000615 	stw	r8,24(sp)
    6800:	dd000115 	stw	r20,4(sp)
    6804:	d8800015 	stw	r2,0(sp)
    6808:	0004f140 	call	4f14 <__mulsi3>
    680c:	980b883a 	mov	r5,r19
    6810:	8809883a 	mov	r4,r17
    6814:	d8800215 	stw	r2,8(sp)
    6818:	0004f140 	call	4f14 <__mulsi3>
    681c:	9809883a 	mov	r4,r19
    6820:	a80b883a 	mov	r5,r21
    6824:	1029883a 	mov	r20,r2
    6828:	0004f140 	call	4f14 <__mulsi3>
    682c:	b00b883a 	mov	r5,r22
    6830:	a809883a 	mov	r4,r21
    6834:	d8800415 	stw	r2,16(sp)
    6838:	0004f140 	call	4f14 <__mulsi3>
    683c:	d9c00217 	ldw	r7,8(sp)
    6840:	1505883a 	add	r2,r2,r20
    6844:	d8c00517 	ldw	r3,20(sp)
    6848:	3826d43a 	srli	r19,r7,16
    684c:	d9800717 	ldw	r6,28(sp)
    6850:	da000617 	ldw	r8,24(sp)
    6854:	9885883a 	add	r2,r19,r2
    6858:	da400417 	ldw	r9,16(sp)
    685c:	1500022e 	bgeu	r2,r20,6868 <__muldf3+0x458>
    6860:	01000074 	movhi	r4,1
    6864:	4913883a 	add	r9,r9,r4
    6868:	1028d43a 	srli	r20,r2,16
    686c:	1004943a 	slli	r2,r2,16
    6870:	802cd43a 	srli	r22,r16,16
    6874:	843fffcc 	andi	r16,r16,65535
    6878:	3cffffcc 	andi	r19,r7,65535
    687c:	9009883a 	mov	r4,r18
    6880:	800b883a 	mov	r5,r16
    6884:	a269883a 	add	r20,r20,r9
    6888:	d8c00515 	stw	r3,20(sp)
    688c:	d9800715 	stw	r6,28(sp)
    6890:	da000615 	stw	r8,24(sp)
    6894:	14e7883a 	add	r19,r2,r19
    6898:	0004f140 	call	4f14 <__mulsi3>
    689c:	9009883a 	mov	r4,r18
    68a0:	b00b883a 	mov	r5,r22
    68a4:	d8800315 	stw	r2,12(sp)
    68a8:	0004f140 	call	4f14 <__mulsi3>
    68ac:	b809883a 	mov	r4,r23
    68b0:	b00b883a 	mov	r5,r22
    68b4:	d8800215 	stw	r2,8(sp)
    68b8:	0004f140 	call	4f14 <__mulsi3>
    68bc:	b80b883a 	mov	r5,r23
    68c0:	8009883a 	mov	r4,r16
    68c4:	d8800415 	stw	r2,16(sp)
    68c8:	0004f140 	call	4f14 <__mulsi3>
    68cc:	da800317 	ldw	r10,12(sp)
    68d0:	d9c00217 	ldw	r7,8(sp)
    68d4:	d9000017 	ldw	r4,0(sp)
    68d8:	502ed43a 	srli	r23,r10,16
    68dc:	11c5883a 	add	r2,r2,r7
    68e0:	24e5883a 	add	r18,r4,r19
    68e4:	b885883a 	add	r2,r23,r2
    68e8:	d8c00517 	ldw	r3,20(sp)
    68ec:	d9800717 	ldw	r6,28(sp)
    68f0:	da000617 	ldw	r8,24(sp)
    68f4:	da400417 	ldw	r9,16(sp)
    68f8:	11c0022e 	bgeu	r2,r7,6904 <__muldf3+0x4f4>
    68fc:	01000074 	movhi	r4,1
    6900:	4913883a 	add	r9,r9,r4
    6904:	100ed43a 	srli	r7,r2,16
    6908:	1004943a 	slli	r2,r2,16
    690c:	55ffffcc 	andi	r23,r10,65535
    6910:	3a53883a 	add	r9,r7,r9
    6914:	8809883a 	mov	r4,r17
    6918:	800b883a 	mov	r5,r16
    691c:	d8c00515 	stw	r3,20(sp)
    6920:	d9800715 	stw	r6,28(sp)
    6924:	da000615 	stw	r8,24(sp)
    6928:	da400415 	stw	r9,16(sp)
    692c:	15ef883a 	add	r23,r2,r23
    6930:	0004f140 	call	4f14 <__mulsi3>
    6934:	8809883a 	mov	r4,r17
    6938:	b00b883a 	mov	r5,r22
    693c:	d8800215 	stw	r2,8(sp)
    6940:	0004f140 	call	4f14 <__mulsi3>
    6944:	b00b883a 	mov	r5,r22
    6948:	a809883a 	mov	r4,r21
    694c:	d8800315 	stw	r2,12(sp)
    6950:	0004f140 	call	4f14 <__mulsi3>
    6954:	8009883a 	mov	r4,r16
    6958:	a80b883a 	mov	r5,r21
    695c:	1023883a 	mov	r17,r2
    6960:	0004f140 	call	4f14 <__mulsi3>
    6964:	d9c00217 	ldw	r7,8(sp)
    6968:	da800317 	ldw	r10,12(sp)
    696c:	d8c00517 	ldw	r3,20(sp)
    6970:	3808d43a 	srli	r4,r7,16
    6974:	1285883a 	add	r2,r2,r10
    6978:	d9800717 	ldw	r6,28(sp)
    697c:	2085883a 	add	r2,r4,r2
    6980:	da000617 	ldw	r8,24(sp)
    6984:	da400417 	ldw	r9,16(sp)
    6988:	1280022e 	bgeu	r2,r10,6994 <__muldf3+0x584>
    698c:	01000074 	movhi	r4,1
    6990:	8923883a 	add	r17,r17,r4
    6994:	1008943a 	slli	r4,r2,16
    6998:	39ffffcc 	andi	r7,r7,65535
    699c:	e4b9883a 	add	fp,fp,r18
    69a0:	21cf883a 	add	r7,r4,r7
    69a4:	e4e7803a 	cmpltu	r19,fp,r19
    69a8:	3d0f883a 	add	r7,r7,r20
    69ac:	bf39883a 	add	fp,r23,fp
    69b0:	99c9883a 	add	r4,r19,r7
    69b4:	e5ef803a 	cmpltu	r23,fp,r23
    69b8:	490b883a 	add	r5,r9,r4
    69bc:	1004d43a 	srli	r2,r2,16
    69c0:	b965883a 	add	r18,r23,r5
    69c4:	24c9803a 	cmpltu	r4,r4,r19
    69c8:	3d29803a 	cmpltu	r20,r7,r20
    69cc:	a128b03a 	or	r20,r20,r4
    69d0:	95ef803a 	cmpltu	r23,r18,r23
    69d4:	2a53803a 	cmpltu	r9,r5,r9
    69d8:	a0a9883a 	add	r20,r20,r2
    69dc:	4deeb03a 	or	r23,r9,r23
    69e0:	a5ef883a 	add	r23,r20,r23
    69e4:	bc63883a 	add	r17,r23,r17
    69e8:	e004927a 	slli	r2,fp,9
    69ec:	d9000117 	ldw	r4,4(sp)
    69f0:	882e927a 	slli	r23,r17,9
    69f4:	9022d5fa 	srli	r17,r18,23
    69f8:	e038d5fa 	srli	fp,fp,23
    69fc:	1104b03a 	or	r2,r2,r4
    6a00:	9024927a 	slli	r18,r18,9
    6a04:	1004c03a 	cmpne	r2,r2,zero
    6a08:	bc62b03a 	or	r17,r23,r17
    6a0c:	1738b03a 	or	fp,r2,fp
    6a10:	8880402c 	andhi	r2,r17,256
    6a14:	e4a4b03a 	or	r18,fp,r18
    6a18:	10000726 	beq	r2,zero,6a38 <__muldf3+0x628>
    6a1c:	9006d07a 	srli	r3,r18,1
    6a20:	880497fa 	slli	r2,r17,31
    6a24:	9480004c 	andi	r18,r18,1
    6a28:	8822d07a 	srli	r17,r17,1
    6a2c:	1ca4b03a 	or	r18,r3,r18
    6a30:	14a4b03a 	or	r18,r2,r18
    6a34:	4007883a 	mov	r3,r8
    6a38:	1880ffc4 	addi	r2,r3,1023
    6a3c:	0080460e 	bge	zero,r2,6b58 <__muldf3+0x748>
    6a40:	910001cc 	andi	r4,r18,7
    6a44:	20000726 	beq	r4,zero,6a64 <__muldf3+0x654>
    6a48:	910003cc 	andi	r4,r18,15
    6a4c:	01400104 	movi	r5,4
    6a50:	21400426 	beq	r4,r5,6a64 <__muldf3+0x654>
    6a54:	9149883a 	add	r4,r18,r5
    6a58:	24a5803a 	cmpltu	r18,r4,r18
    6a5c:	8ca3883a 	add	r17,r17,r18
    6a60:	2025883a 	mov	r18,r4
    6a64:	8900402c 	andhi	r4,r17,256
    6a68:	20000426 	beq	r4,zero,6a7c <__muldf3+0x66c>
    6a6c:	18810004 	addi	r2,r3,1024
    6a70:	00ffc034 	movhi	r3,65280
    6a74:	18ffffc4 	addi	r3,r3,-1
    6a78:	88e2703a 	and	r17,r17,r3
    6a7c:	00c1ff84 	movi	r3,2046
    6a80:	18bf1316 	blt	r3,r2,66d0 <__alt_data_end+0xfffd5990>
    6a84:	882c977a 	slli	r22,r17,29
    6a88:	9024d0fa 	srli	r18,r18,3
    6a8c:	8822927a 	slli	r17,r17,9
    6a90:	1081ffcc 	andi	r2,r2,2047
    6a94:	b4acb03a 	or	r22,r22,r18
    6a98:	8820d33a 	srli	r16,r17,12
    6a9c:	3027883a 	mov	r19,r6
    6aa0:	003eba06 	br	658c <__alt_data_end+0xfffd584c>
    6aa4:	8080022c 	andhi	r2,r16,8
    6aa8:	10000926 	beq	r2,zero,6ad0 <__muldf3+0x6c0>
    6aac:	8880022c 	andhi	r2,r17,8
    6ab0:	1000071e 	bne	r2,zero,6ad0 <__muldf3+0x6c0>
    6ab4:	00800434 	movhi	r2,16
    6ab8:	8c000234 	orhi	r16,r17,8
    6abc:	10bfffc4 	addi	r2,r2,-1
    6ac0:	e027883a 	mov	r19,fp
    6ac4:	80a0703a 	and	r16,r16,r2
    6ac8:	902d883a 	mov	r22,r18
    6acc:	003f1706 	br	672c <__alt_data_end+0xfffd59ec>
    6ad0:	00800434 	movhi	r2,16
    6ad4:	84000234 	orhi	r16,r16,8
    6ad8:	10bfffc4 	addi	r2,r2,-1
    6adc:	80a0703a 	and	r16,r16,r2
    6ae0:	003f1206 	br	672c <__alt_data_end+0xfffd59ec>
    6ae4:	147ff604 	addi	r17,r2,-40
    6ae8:	3462983a 	sll	r17,r6,r17
    6aec:	0025883a 	mov	r18,zero
    6af0:	003ef306 	br	66c0 <__alt_data_end+0xfffd5980>
    6af4:	3009883a 	mov	r4,r6
    6af8:	d9400215 	stw	r5,8(sp)
    6afc:	d9800715 	stw	r6,28(sp)
    6b00:	da400415 	stw	r9,16(sp)
    6b04:	da800315 	stw	r10,12(sp)
    6b08:	00076d40 	call	76d4 <__clzsi2>
    6b0c:	10800804 	addi	r2,r2,32
    6b10:	da800317 	ldw	r10,12(sp)
    6b14:	da400417 	ldw	r9,16(sp)
    6b18:	d9800717 	ldw	r6,28(sp)
    6b1c:	d9400217 	ldw	r5,8(sp)
    6b20:	003edd06 	br	6698 <__alt_data_end+0xfffd5958>
    6b24:	143ff604 	addi	r16,r2,-40
    6b28:	ac20983a 	sll	r16,r21,r16
    6b2c:	002d883a 	mov	r22,zero
    6b30:	003ec106 	br	6638 <__alt_data_end+0xfffd58f8>
    6b34:	d9800715 	stw	r6,28(sp)
    6b38:	d9c00215 	stw	r7,8(sp)
    6b3c:	da400415 	stw	r9,16(sp)
    6b40:	00076d40 	call	76d4 <__clzsi2>
    6b44:	10800804 	addi	r2,r2,32
    6b48:	da400417 	ldw	r9,16(sp)
    6b4c:	d9c00217 	ldw	r7,8(sp)
    6b50:	d9800717 	ldw	r6,28(sp)
    6b54:	003eae06 	br	6610 <__alt_data_end+0xfffd58d0>
    6b58:	00c00044 	movi	r3,1
    6b5c:	1887c83a 	sub	r3,r3,r2
    6b60:	01000e04 	movi	r4,56
    6b64:	20fe8516 	blt	r4,r3,657c <__alt_data_end+0xfffd583c>
    6b68:	010007c4 	movi	r4,31
    6b6c:	20c01b16 	blt	r4,r3,6bdc <__muldf3+0x7cc>
    6b70:	00800804 	movi	r2,32
    6b74:	10c5c83a 	sub	r2,r2,r3
    6b78:	888a983a 	sll	r5,r17,r2
    6b7c:	90c8d83a 	srl	r4,r18,r3
    6b80:	9084983a 	sll	r2,r18,r2
    6b84:	88e2d83a 	srl	r17,r17,r3
    6b88:	2906b03a 	or	r3,r5,r4
    6b8c:	1004c03a 	cmpne	r2,r2,zero
    6b90:	1886b03a 	or	r3,r3,r2
    6b94:	188001cc 	andi	r2,r3,7
    6b98:	10000726 	beq	r2,zero,6bb8 <__muldf3+0x7a8>
    6b9c:	188003cc 	andi	r2,r3,15
    6ba0:	01000104 	movi	r4,4
    6ba4:	11000426 	beq	r2,r4,6bb8 <__muldf3+0x7a8>
    6ba8:	1805883a 	mov	r2,r3
    6bac:	10c00104 	addi	r3,r2,4
    6bb0:	1885803a 	cmpltu	r2,r3,r2
    6bb4:	88a3883a 	add	r17,r17,r2
    6bb8:	8880202c 	andhi	r2,r17,128
    6bbc:	10001c26 	beq	r2,zero,6c30 <__muldf3+0x820>
    6bc0:	3027883a 	mov	r19,r6
    6bc4:	00800044 	movi	r2,1
    6bc8:	0021883a 	mov	r16,zero
    6bcc:	002d883a 	mov	r22,zero
    6bd0:	003e6e06 	br	658c <__alt_data_end+0xfffd584c>
    6bd4:	4007883a 	mov	r3,r8
    6bd8:	003f9706 	br	6a38 <__alt_data_end+0xfffd5cf8>
    6bdc:	017ff844 	movi	r5,-31
    6be0:	2885c83a 	sub	r2,r5,r2
    6be4:	888ad83a 	srl	r5,r17,r2
    6be8:	00800804 	movi	r2,32
    6bec:	18801a26 	beq	r3,r2,6c58 <__muldf3+0x848>
    6bf0:	01001004 	movi	r4,64
    6bf4:	20c7c83a 	sub	r3,r4,r3
    6bf8:	88e2983a 	sll	r17,r17,r3
    6bfc:	8ca4b03a 	or	r18,r17,r18
    6c00:	9004c03a 	cmpne	r2,r18,zero
    6c04:	2884b03a 	or	r2,r5,r2
    6c08:	144001cc 	andi	r17,r2,7
    6c0c:	88000d1e 	bne	r17,zero,6c44 <__muldf3+0x834>
    6c10:	0021883a 	mov	r16,zero
    6c14:	102cd0fa 	srli	r22,r2,3
    6c18:	3027883a 	mov	r19,r6
    6c1c:	0005883a 	mov	r2,zero
    6c20:	b46cb03a 	or	r22,r22,r17
    6c24:	003e5906 	br	658c <__alt_data_end+0xfffd584c>
    6c28:	1007883a 	mov	r3,r2
    6c2c:	0023883a 	mov	r17,zero
    6c30:	8820927a 	slli	r16,r17,9
    6c34:	1805883a 	mov	r2,r3
    6c38:	8822977a 	slli	r17,r17,29
    6c3c:	8020d33a 	srli	r16,r16,12
    6c40:	003ff406 	br	6c14 <__alt_data_end+0xfffd5ed4>
    6c44:	10c003cc 	andi	r3,r2,15
    6c48:	01000104 	movi	r4,4
    6c4c:	193ff626 	beq	r3,r4,6c28 <__alt_data_end+0xfffd5ee8>
    6c50:	0023883a 	mov	r17,zero
    6c54:	003fd506 	br	6bac <__alt_data_end+0xfffd5e6c>
    6c58:	0023883a 	mov	r17,zero
    6c5c:	003fe706 	br	6bfc <__alt_data_end+0xfffd5ebc>
    6c60:	00800434 	movhi	r2,16
    6c64:	8c000234 	orhi	r16,r17,8
    6c68:	10bfffc4 	addi	r2,r2,-1
    6c6c:	3027883a 	mov	r19,r6
    6c70:	80a0703a 	and	r16,r16,r2
    6c74:	902d883a 	mov	r22,r18
    6c78:	003eac06 	br	672c <__alt_data_end+0xfffd59ec>

00006c7c <__subdf3>:
    6c7c:	02000434 	movhi	r8,16
    6c80:	423fffc4 	addi	r8,r8,-1
    6c84:	defffb04 	addi	sp,sp,-20
    6c88:	2a14703a 	and	r10,r5,r8
    6c8c:	3812d53a 	srli	r9,r7,20
    6c90:	3a10703a 	and	r8,r7,r8
    6c94:	2006d77a 	srli	r3,r4,29
    6c98:	3004d77a 	srli	r2,r6,29
    6c9c:	dc000015 	stw	r16,0(sp)
    6ca0:	501490fa 	slli	r10,r10,3
    6ca4:	2820d53a 	srli	r16,r5,20
    6ca8:	401090fa 	slli	r8,r8,3
    6cac:	dc800215 	stw	r18,8(sp)
    6cb0:	dc400115 	stw	r17,4(sp)
    6cb4:	dfc00415 	stw	ra,16(sp)
    6cb8:	202290fa 	slli	r17,r4,3
    6cbc:	dcc00315 	stw	r19,12(sp)
    6cc0:	4a41ffcc 	andi	r9,r9,2047
    6cc4:	0101ffc4 	movi	r4,2047
    6cc8:	2824d7fa 	srli	r18,r5,31
    6ccc:	8401ffcc 	andi	r16,r16,2047
    6cd0:	50c6b03a 	or	r3,r10,r3
    6cd4:	380ed7fa 	srli	r7,r7,31
    6cd8:	408ab03a 	or	r5,r8,r2
    6cdc:	300c90fa 	slli	r6,r6,3
    6ce0:	49009626 	beq	r9,r4,6f3c <__subdf3+0x2c0>
    6ce4:	39c0005c 	xori	r7,r7,1
    6ce8:	8245c83a 	sub	r2,r16,r9
    6cec:	3c807426 	beq	r7,r18,6ec0 <__subdf3+0x244>
    6cf0:	0080af0e 	bge	zero,r2,6fb0 <__subdf3+0x334>
    6cf4:	48002a1e 	bne	r9,zero,6da0 <__subdf3+0x124>
    6cf8:	2988b03a 	or	r4,r5,r6
    6cfc:	20009a1e 	bne	r4,zero,6f68 <__subdf3+0x2ec>
    6d00:	888001cc 	andi	r2,r17,7
    6d04:	10000726 	beq	r2,zero,6d24 <__subdf3+0xa8>
    6d08:	888003cc 	andi	r2,r17,15
    6d0c:	01000104 	movi	r4,4
    6d10:	11000426 	beq	r2,r4,6d24 <__subdf3+0xa8>
    6d14:	890b883a 	add	r5,r17,r4
    6d18:	2c63803a 	cmpltu	r17,r5,r17
    6d1c:	1c47883a 	add	r3,r3,r17
    6d20:	2823883a 	mov	r17,r5
    6d24:	1880202c 	andhi	r2,r3,128
    6d28:	10005926 	beq	r2,zero,6e90 <__subdf3+0x214>
    6d2c:	84000044 	addi	r16,r16,1
    6d30:	0081ffc4 	movi	r2,2047
    6d34:	8080be26 	beq	r16,r2,7030 <__subdf3+0x3b4>
    6d38:	017fe034 	movhi	r5,65408
    6d3c:	297fffc4 	addi	r5,r5,-1
    6d40:	1946703a 	and	r3,r3,r5
    6d44:	1804977a 	slli	r2,r3,29
    6d48:	1806927a 	slli	r3,r3,9
    6d4c:	8822d0fa 	srli	r17,r17,3
    6d50:	8401ffcc 	andi	r16,r16,2047
    6d54:	180ad33a 	srli	r5,r3,12
    6d58:	9100004c 	andi	r4,r18,1
    6d5c:	1444b03a 	or	r2,r2,r17
    6d60:	80c1ffcc 	andi	r3,r16,2047
    6d64:	1820953a 	slli	r16,r3,20
    6d68:	20c03fcc 	andi	r3,r4,255
    6d6c:	180897fa 	slli	r4,r3,31
    6d70:	00c00434 	movhi	r3,16
    6d74:	18ffffc4 	addi	r3,r3,-1
    6d78:	28c6703a 	and	r3,r5,r3
    6d7c:	1c06b03a 	or	r3,r3,r16
    6d80:	1906b03a 	or	r3,r3,r4
    6d84:	dfc00417 	ldw	ra,16(sp)
    6d88:	dcc00317 	ldw	r19,12(sp)
    6d8c:	dc800217 	ldw	r18,8(sp)
    6d90:	dc400117 	ldw	r17,4(sp)
    6d94:	dc000017 	ldw	r16,0(sp)
    6d98:	dec00504 	addi	sp,sp,20
    6d9c:	f800283a 	ret
    6da0:	0101ffc4 	movi	r4,2047
    6da4:	813fd626 	beq	r16,r4,6d00 <__alt_data_end+0xfffd5fc0>
    6da8:	29402034 	orhi	r5,r5,128
    6dac:	01000e04 	movi	r4,56
    6db0:	2080a316 	blt	r4,r2,7040 <__subdf3+0x3c4>
    6db4:	010007c4 	movi	r4,31
    6db8:	2080c616 	blt	r4,r2,70d4 <__subdf3+0x458>
    6dbc:	01000804 	movi	r4,32
    6dc0:	2089c83a 	sub	r4,r4,r2
    6dc4:	2910983a 	sll	r8,r5,r4
    6dc8:	308ed83a 	srl	r7,r6,r2
    6dcc:	3108983a 	sll	r4,r6,r4
    6dd0:	2884d83a 	srl	r2,r5,r2
    6dd4:	41ccb03a 	or	r6,r8,r7
    6dd8:	2008c03a 	cmpne	r4,r4,zero
    6ddc:	310cb03a 	or	r6,r6,r4
    6de0:	898dc83a 	sub	r6,r17,r6
    6de4:	89a3803a 	cmpltu	r17,r17,r6
    6de8:	1887c83a 	sub	r3,r3,r2
    6dec:	1c47c83a 	sub	r3,r3,r17
    6df0:	3023883a 	mov	r17,r6
    6df4:	1880202c 	andhi	r2,r3,128
    6df8:	10002326 	beq	r2,zero,6e88 <__subdf3+0x20c>
    6dfc:	04c02034 	movhi	r19,128
    6e00:	9cffffc4 	addi	r19,r19,-1
    6e04:	1ce6703a 	and	r19,r3,r19
    6e08:	98007a26 	beq	r19,zero,6ff4 <__subdf3+0x378>
    6e0c:	9809883a 	mov	r4,r19
    6e10:	00076d40 	call	76d4 <__clzsi2>
    6e14:	113ffe04 	addi	r4,r2,-8
    6e18:	00c007c4 	movi	r3,31
    6e1c:	19007b16 	blt	r3,r4,700c <__subdf3+0x390>
    6e20:	00800804 	movi	r2,32
    6e24:	1105c83a 	sub	r2,r2,r4
    6e28:	8884d83a 	srl	r2,r17,r2
    6e2c:	9906983a 	sll	r3,r19,r4
    6e30:	8922983a 	sll	r17,r17,r4
    6e34:	10c4b03a 	or	r2,r2,r3
    6e38:	24007816 	blt	r4,r16,701c <__subdf3+0x3a0>
    6e3c:	2421c83a 	sub	r16,r4,r16
    6e40:	80c00044 	addi	r3,r16,1
    6e44:	010007c4 	movi	r4,31
    6e48:	20c09516 	blt	r4,r3,70a0 <__subdf3+0x424>
    6e4c:	01400804 	movi	r5,32
    6e50:	28cbc83a 	sub	r5,r5,r3
    6e54:	88c8d83a 	srl	r4,r17,r3
    6e58:	8962983a 	sll	r17,r17,r5
    6e5c:	114a983a 	sll	r5,r2,r5
    6e60:	10c6d83a 	srl	r3,r2,r3
    6e64:	8804c03a 	cmpne	r2,r17,zero
    6e68:	290ab03a 	or	r5,r5,r4
    6e6c:	28a2b03a 	or	r17,r5,r2
    6e70:	0021883a 	mov	r16,zero
    6e74:	003fa206 	br	6d00 <__alt_data_end+0xfffd5fc0>
    6e78:	2090b03a 	or	r8,r4,r2
    6e7c:	40018e26 	beq	r8,zero,74b8 <__subdf3+0x83c>
    6e80:	1007883a 	mov	r3,r2
    6e84:	2023883a 	mov	r17,r4
    6e88:	888001cc 	andi	r2,r17,7
    6e8c:	103f9e1e 	bne	r2,zero,6d08 <__alt_data_end+0xfffd5fc8>
    6e90:	1804977a 	slli	r2,r3,29
    6e94:	8822d0fa 	srli	r17,r17,3
    6e98:	1810d0fa 	srli	r8,r3,3
    6e9c:	9100004c 	andi	r4,r18,1
    6ea0:	1444b03a 	or	r2,r2,r17
    6ea4:	00c1ffc4 	movi	r3,2047
    6ea8:	80c02826 	beq	r16,r3,6f4c <__subdf3+0x2d0>
    6eac:	01400434 	movhi	r5,16
    6eb0:	297fffc4 	addi	r5,r5,-1
    6eb4:	80e0703a 	and	r16,r16,r3
    6eb8:	414a703a 	and	r5,r8,r5
    6ebc:	003fa806 	br	6d60 <__alt_data_end+0xfffd6020>
    6ec0:	0080630e 	bge	zero,r2,7050 <__subdf3+0x3d4>
    6ec4:	48003026 	beq	r9,zero,6f88 <__subdf3+0x30c>
    6ec8:	0101ffc4 	movi	r4,2047
    6ecc:	813f8c26 	beq	r16,r4,6d00 <__alt_data_end+0xfffd5fc0>
    6ed0:	29402034 	orhi	r5,r5,128
    6ed4:	01000e04 	movi	r4,56
    6ed8:	2080a90e 	bge	r4,r2,7180 <__subdf3+0x504>
    6edc:	298cb03a 	or	r6,r5,r6
    6ee0:	3012c03a 	cmpne	r9,r6,zero
    6ee4:	0005883a 	mov	r2,zero
    6ee8:	4c53883a 	add	r9,r9,r17
    6eec:	4c63803a 	cmpltu	r17,r9,r17
    6ef0:	10c7883a 	add	r3,r2,r3
    6ef4:	88c7883a 	add	r3,r17,r3
    6ef8:	4823883a 	mov	r17,r9
    6efc:	1880202c 	andhi	r2,r3,128
    6f00:	1000d026 	beq	r2,zero,7244 <__subdf3+0x5c8>
    6f04:	84000044 	addi	r16,r16,1
    6f08:	0081ffc4 	movi	r2,2047
    6f0c:	8080fe26 	beq	r16,r2,7308 <__subdf3+0x68c>
    6f10:	00bfe034 	movhi	r2,65408
    6f14:	10bfffc4 	addi	r2,r2,-1
    6f18:	1886703a 	and	r3,r3,r2
    6f1c:	880ad07a 	srli	r5,r17,1
    6f20:	180497fa 	slli	r2,r3,31
    6f24:	8900004c 	andi	r4,r17,1
    6f28:	2922b03a 	or	r17,r5,r4
    6f2c:	1806d07a 	srli	r3,r3,1
    6f30:	1462b03a 	or	r17,r2,r17
    6f34:	3825883a 	mov	r18,r7
    6f38:	003f7106 	br	6d00 <__alt_data_end+0xfffd5fc0>
    6f3c:	2984b03a 	or	r2,r5,r6
    6f40:	103f6826 	beq	r2,zero,6ce4 <__alt_data_end+0xfffd5fa4>
    6f44:	39c03fcc 	andi	r7,r7,255
    6f48:	003f6706 	br	6ce8 <__alt_data_end+0xfffd5fa8>
    6f4c:	4086b03a 	or	r3,r8,r2
    6f50:	18015226 	beq	r3,zero,749c <__subdf3+0x820>
    6f54:	00c00434 	movhi	r3,16
    6f58:	41400234 	orhi	r5,r8,8
    6f5c:	18ffffc4 	addi	r3,r3,-1
    6f60:	28ca703a 	and	r5,r5,r3
    6f64:	003f7e06 	br	6d60 <__alt_data_end+0xfffd6020>
    6f68:	10bfffc4 	addi	r2,r2,-1
    6f6c:	1000491e 	bne	r2,zero,7094 <__subdf3+0x418>
    6f70:	898fc83a 	sub	r7,r17,r6
    6f74:	89e3803a 	cmpltu	r17,r17,r7
    6f78:	1947c83a 	sub	r3,r3,r5
    6f7c:	1c47c83a 	sub	r3,r3,r17
    6f80:	3823883a 	mov	r17,r7
    6f84:	003f9b06 	br	6df4 <__alt_data_end+0xfffd60b4>
    6f88:	2988b03a 	or	r4,r5,r6
    6f8c:	203f5c26 	beq	r4,zero,6d00 <__alt_data_end+0xfffd5fc0>
    6f90:	10bfffc4 	addi	r2,r2,-1
    6f94:	1000931e 	bne	r2,zero,71e4 <__subdf3+0x568>
    6f98:	898d883a 	add	r6,r17,r6
    6f9c:	3463803a 	cmpltu	r17,r6,r17
    6fa0:	1947883a 	add	r3,r3,r5
    6fa4:	88c7883a 	add	r3,r17,r3
    6fa8:	3023883a 	mov	r17,r6
    6fac:	003fd306 	br	6efc <__alt_data_end+0xfffd61bc>
    6fb0:	1000541e 	bne	r2,zero,7104 <__subdf3+0x488>
    6fb4:	80800044 	addi	r2,r16,1
    6fb8:	1081ffcc 	andi	r2,r2,2047
    6fbc:	01000044 	movi	r4,1
    6fc0:	2080a20e 	bge	r4,r2,724c <__subdf3+0x5d0>
    6fc4:	8989c83a 	sub	r4,r17,r6
    6fc8:	8905803a 	cmpltu	r2,r17,r4
    6fcc:	1967c83a 	sub	r19,r3,r5
    6fd0:	98a7c83a 	sub	r19,r19,r2
    6fd4:	9880202c 	andhi	r2,r19,128
    6fd8:	10006326 	beq	r2,zero,7168 <__subdf3+0x4ec>
    6fdc:	3463c83a 	sub	r17,r6,r17
    6fe0:	28c7c83a 	sub	r3,r5,r3
    6fe4:	344d803a 	cmpltu	r6,r6,r17
    6fe8:	19a7c83a 	sub	r19,r3,r6
    6fec:	3825883a 	mov	r18,r7
    6ff0:	983f861e 	bne	r19,zero,6e0c <__alt_data_end+0xfffd60cc>
    6ff4:	8809883a 	mov	r4,r17
    6ff8:	00076d40 	call	76d4 <__clzsi2>
    6ffc:	10800804 	addi	r2,r2,32
    7000:	113ffe04 	addi	r4,r2,-8
    7004:	00c007c4 	movi	r3,31
    7008:	193f850e 	bge	r3,r4,6e20 <__alt_data_end+0xfffd60e0>
    700c:	10bff604 	addi	r2,r2,-40
    7010:	8884983a 	sll	r2,r17,r2
    7014:	0023883a 	mov	r17,zero
    7018:	243f880e 	bge	r4,r16,6e3c <__alt_data_end+0xfffd60fc>
    701c:	00ffe034 	movhi	r3,65408
    7020:	18ffffc4 	addi	r3,r3,-1
    7024:	8121c83a 	sub	r16,r16,r4
    7028:	10c6703a 	and	r3,r2,r3
    702c:	003f3406 	br	6d00 <__alt_data_end+0xfffd5fc0>
    7030:	9100004c 	andi	r4,r18,1
    7034:	000b883a 	mov	r5,zero
    7038:	0005883a 	mov	r2,zero
    703c:	003f4806 	br	6d60 <__alt_data_end+0xfffd6020>
    7040:	298cb03a 	or	r6,r5,r6
    7044:	300cc03a 	cmpne	r6,r6,zero
    7048:	0005883a 	mov	r2,zero
    704c:	003f6406 	br	6de0 <__alt_data_end+0xfffd60a0>
    7050:	10009a1e 	bne	r2,zero,72bc <__subdf3+0x640>
    7054:	82400044 	addi	r9,r16,1
    7058:	4881ffcc 	andi	r2,r9,2047
    705c:	02800044 	movi	r10,1
    7060:	5080670e 	bge	r10,r2,7200 <__subdf3+0x584>
    7064:	0081ffc4 	movi	r2,2047
    7068:	4880af26 	beq	r9,r2,7328 <__subdf3+0x6ac>
    706c:	898d883a 	add	r6,r17,r6
    7070:	1945883a 	add	r2,r3,r5
    7074:	3447803a 	cmpltu	r3,r6,r17
    7078:	1887883a 	add	r3,r3,r2
    707c:	182297fa 	slli	r17,r3,31
    7080:	300cd07a 	srli	r6,r6,1
    7084:	1806d07a 	srli	r3,r3,1
    7088:	4821883a 	mov	r16,r9
    708c:	89a2b03a 	or	r17,r17,r6
    7090:	003f1b06 	br	6d00 <__alt_data_end+0xfffd5fc0>
    7094:	0101ffc4 	movi	r4,2047
    7098:	813f441e 	bne	r16,r4,6dac <__alt_data_end+0xfffd606c>
    709c:	003f1806 	br	6d00 <__alt_data_end+0xfffd5fc0>
    70a0:	843ff844 	addi	r16,r16,-31
    70a4:	01400804 	movi	r5,32
    70a8:	1408d83a 	srl	r4,r2,r16
    70ac:	19405026 	beq	r3,r5,71f0 <__subdf3+0x574>
    70b0:	01401004 	movi	r5,64
    70b4:	28c7c83a 	sub	r3,r5,r3
    70b8:	10c4983a 	sll	r2,r2,r3
    70bc:	88a2b03a 	or	r17,r17,r2
    70c0:	8822c03a 	cmpne	r17,r17,zero
    70c4:	2462b03a 	or	r17,r4,r17
    70c8:	0007883a 	mov	r3,zero
    70cc:	0021883a 	mov	r16,zero
    70d0:	003f6d06 	br	6e88 <__alt_data_end+0xfffd6148>
    70d4:	11fff804 	addi	r7,r2,-32
    70d8:	01000804 	movi	r4,32
    70dc:	29ced83a 	srl	r7,r5,r7
    70e0:	11004526 	beq	r2,r4,71f8 <__subdf3+0x57c>
    70e4:	01001004 	movi	r4,64
    70e8:	2089c83a 	sub	r4,r4,r2
    70ec:	2904983a 	sll	r2,r5,r4
    70f0:	118cb03a 	or	r6,r2,r6
    70f4:	300cc03a 	cmpne	r6,r6,zero
    70f8:	398cb03a 	or	r6,r7,r6
    70fc:	0005883a 	mov	r2,zero
    7100:	003f3706 	br	6de0 <__alt_data_end+0xfffd60a0>
    7104:	80002a26 	beq	r16,zero,71b0 <__subdf3+0x534>
    7108:	0101ffc4 	movi	r4,2047
    710c:	49006626 	beq	r9,r4,72a8 <__subdf3+0x62c>
    7110:	0085c83a 	sub	r2,zero,r2
    7114:	18c02034 	orhi	r3,r3,128
    7118:	01000e04 	movi	r4,56
    711c:	20807e16 	blt	r4,r2,7318 <__subdf3+0x69c>
    7120:	010007c4 	movi	r4,31
    7124:	2080e716 	blt	r4,r2,74c4 <__subdf3+0x848>
    7128:	01000804 	movi	r4,32
    712c:	2089c83a 	sub	r4,r4,r2
    7130:	1914983a 	sll	r10,r3,r4
    7134:	8890d83a 	srl	r8,r17,r2
    7138:	8908983a 	sll	r4,r17,r4
    713c:	1884d83a 	srl	r2,r3,r2
    7140:	5222b03a 	or	r17,r10,r8
    7144:	2006c03a 	cmpne	r3,r4,zero
    7148:	88e2b03a 	or	r17,r17,r3
    714c:	3463c83a 	sub	r17,r6,r17
    7150:	2885c83a 	sub	r2,r5,r2
    7154:	344d803a 	cmpltu	r6,r6,r17
    7158:	1187c83a 	sub	r3,r2,r6
    715c:	4821883a 	mov	r16,r9
    7160:	3825883a 	mov	r18,r7
    7164:	003f2306 	br	6df4 <__alt_data_end+0xfffd60b4>
    7168:	24d0b03a 	or	r8,r4,r19
    716c:	40001b1e 	bne	r8,zero,71dc <__subdf3+0x560>
    7170:	0005883a 	mov	r2,zero
    7174:	0009883a 	mov	r4,zero
    7178:	0021883a 	mov	r16,zero
    717c:	003f4906 	br	6ea4 <__alt_data_end+0xfffd6164>
    7180:	010007c4 	movi	r4,31
    7184:	20803a16 	blt	r4,r2,7270 <__subdf3+0x5f4>
    7188:	01000804 	movi	r4,32
    718c:	2089c83a 	sub	r4,r4,r2
    7190:	2912983a 	sll	r9,r5,r4
    7194:	3090d83a 	srl	r8,r6,r2
    7198:	3108983a 	sll	r4,r6,r4
    719c:	2884d83a 	srl	r2,r5,r2
    71a0:	4a12b03a 	or	r9,r9,r8
    71a4:	2008c03a 	cmpne	r4,r4,zero
    71a8:	4912b03a 	or	r9,r9,r4
    71ac:	003f4e06 	br	6ee8 <__alt_data_end+0xfffd61a8>
    71b0:	1c48b03a 	or	r4,r3,r17
    71b4:	20003c26 	beq	r4,zero,72a8 <__subdf3+0x62c>
    71b8:	0084303a 	nor	r2,zero,r2
    71bc:	1000381e 	bne	r2,zero,72a0 <__subdf3+0x624>
    71c0:	3463c83a 	sub	r17,r6,r17
    71c4:	28c5c83a 	sub	r2,r5,r3
    71c8:	344d803a 	cmpltu	r6,r6,r17
    71cc:	1187c83a 	sub	r3,r2,r6
    71d0:	4821883a 	mov	r16,r9
    71d4:	3825883a 	mov	r18,r7
    71d8:	003f0606 	br	6df4 <__alt_data_end+0xfffd60b4>
    71dc:	2023883a 	mov	r17,r4
    71e0:	003f0906 	br	6e08 <__alt_data_end+0xfffd60c8>
    71e4:	0101ffc4 	movi	r4,2047
    71e8:	813f3a1e 	bne	r16,r4,6ed4 <__alt_data_end+0xfffd6194>
    71ec:	003ec406 	br	6d00 <__alt_data_end+0xfffd5fc0>
    71f0:	0005883a 	mov	r2,zero
    71f4:	003fb106 	br	70bc <__alt_data_end+0xfffd637c>
    71f8:	0005883a 	mov	r2,zero
    71fc:	003fbc06 	br	70f0 <__alt_data_end+0xfffd63b0>
    7200:	1c44b03a 	or	r2,r3,r17
    7204:	80008e1e 	bne	r16,zero,7440 <__subdf3+0x7c4>
    7208:	1000c826 	beq	r2,zero,752c <__subdf3+0x8b0>
    720c:	2984b03a 	or	r2,r5,r6
    7210:	103ebb26 	beq	r2,zero,6d00 <__alt_data_end+0xfffd5fc0>
    7214:	8989883a 	add	r4,r17,r6
    7218:	1945883a 	add	r2,r3,r5
    721c:	2447803a 	cmpltu	r3,r4,r17
    7220:	1887883a 	add	r3,r3,r2
    7224:	1880202c 	andhi	r2,r3,128
    7228:	2023883a 	mov	r17,r4
    722c:	103f1626 	beq	r2,zero,6e88 <__alt_data_end+0xfffd6148>
    7230:	00bfe034 	movhi	r2,65408
    7234:	10bfffc4 	addi	r2,r2,-1
    7238:	5021883a 	mov	r16,r10
    723c:	1886703a 	and	r3,r3,r2
    7240:	003eaf06 	br	6d00 <__alt_data_end+0xfffd5fc0>
    7244:	3825883a 	mov	r18,r7
    7248:	003f0f06 	br	6e88 <__alt_data_end+0xfffd6148>
    724c:	1c44b03a 	or	r2,r3,r17
    7250:	8000251e 	bne	r16,zero,72e8 <__subdf3+0x66c>
    7254:	1000661e 	bne	r2,zero,73f0 <__subdf3+0x774>
    7258:	2990b03a 	or	r8,r5,r6
    725c:	40009626 	beq	r8,zero,74b8 <__subdf3+0x83c>
    7260:	2807883a 	mov	r3,r5
    7264:	3023883a 	mov	r17,r6
    7268:	3825883a 	mov	r18,r7
    726c:	003ea406 	br	6d00 <__alt_data_end+0xfffd5fc0>
    7270:	127ff804 	addi	r9,r2,-32
    7274:	01000804 	movi	r4,32
    7278:	2a52d83a 	srl	r9,r5,r9
    727c:	11008c26 	beq	r2,r4,74b0 <__subdf3+0x834>
    7280:	01001004 	movi	r4,64
    7284:	2085c83a 	sub	r2,r4,r2
    7288:	2884983a 	sll	r2,r5,r2
    728c:	118cb03a 	or	r6,r2,r6
    7290:	300cc03a 	cmpne	r6,r6,zero
    7294:	4992b03a 	or	r9,r9,r6
    7298:	0005883a 	mov	r2,zero
    729c:	003f1206 	br	6ee8 <__alt_data_end+0xfffd61a8>
    72a0:	0101ffc4 	movi	r4,2047
    72a4:	493f9c1e 	bne	r9,r4,7118 <__alt_data_end+0xfffd63d8>
    72a8:	2807883a 	mov	r3,r5
    72ac:	3023883a 	mov	r17,r6
    72b0:	4821883a 	mov	r16,r9
    72b4:	3825883a 	mov	r18,r7
    72b8:	003e9106 	br	6d00 <__alt_data_end+0xfffd5fc0>
    72bc:	80001f1e 	bne	r16,zero,733c <__subdf3+0x6c0>
    72c0:	1c48b03a 	or	r4,r3,r17
    72c4:	20005a26 	beq	r4,zero,7430 <__subdf3+0x7b4>
    72c8:	0084303a 	nor	r2,zero,r2
    72cc:	1000561e 	bne	r2,zero,7428 <__subdf3+0x7ac>
    72d0:	89a3883a 	add	r17,r17,r6
    72d4:	1945883a 	add	r2,r3,r5
    72d8:	898d803a 	cmpltu	r6,r17,r6
    72dc:	3087883a 	add	r3,r6,r2
    72e0:	4821883a 	mov	r16,r9
    72e4:	003f0506 	br	6efc <__alt_data_end+0xfffd61bc>
    72e8:	10002b1e 	bne	r2,zero,7398 <__subdf3+0x71c>
    72ec:	2984b03a 	or	r2,r5,r6
    72f0:	10008026 	beq	r2,zero,74f4 <__subdf3+0x878>
    72f4:	2807883a 	mov	r3,r5
    72f8:	3023883a 	mov	r17,r6
    72fc:	3825883a 	mov	r18,r7
    7300:	0401ffc4 	movi	r16,2047
    7304:	003e7e06 	br	6d00 <__alt_data_end+0xfffd5fc0>
    7308:	3809883a 	mov	r4,r7
    730c:	0011883a 	mov	r8,zero
    7310:	0005883a 	mov	r2,zero
    7314:	003ee306 	br	6ea4 <__alt_data_end+0xfffd6164>
    7318:	1c62b03a 	or	r17,r3,r17
    731c:	8822c03a 	cmpne	r17,r17,zero
    7320:	0005883a 	mov	r2,zero
    7324:	003f8906 	br	714c <__alt_data_end+0xfffd640c>
    7328:	3809883a 	mov	r4,r7
    732c:	4821883a 	mov	r16,r9
    7330:	0011883a 	mov	r8,zero
    7334:	0005883a 	mov	r2,zero
    7338:	003eda06 	br	6ea4 <__alt_data_end+0xfffd6164>
    733c:	0101ffc4 	movi	r4,2047
    7340:	49003b26 	beq	r9,r4,7430 <__subdf3+0x7b4>
    7344:	0085c83a 	sub	r2,zero,r2
    7348:	18c02034 	orhi	r3,r3,128
    734c:	01000e04 	movi	r4,56
    7350:	20806e16 	blt	r4,r2,750c <__subdf3+0x890>
    7354:	010007c4 	movi	r4,31
    7358:	20807716 	blt	r4,r2,7538 <__subdf3+0x8bc>
    735c:	01000804 	movi	r4,32
    7360:	2089c83a 	sub	r4,r4,r2
    7364:	1914983a 	sll	r10,r3,r4
    7368:	8890d83a 	srl	r8,r17,r2
    736c:	8908983a 	sll	r4,r17,r4
    7370:	1884d83a 	srl	r2,r3,r2
    7374:	5222b03a 	or	r17,r10,r8
    7378:	2006c03a 	cmpne	r3,r4,zero
    737c:	88e2b03a 	or	r17,r17,r3
    7380:	89a3883a 	add	r17,r17,r6
    7384:	1145883a 	add	r2,r2,r5
    7388:	898d803a 	cmpltu	r6,r17,r6
    738c:	3087883a 	add	r3,r6,r2
    7390:	4821883a 	mov	r16,r9
    7394:	003ed906 	br	6efc <__alt_data_end+0xfffd61bc>
    7398:	2984b03a 	or	r2,r5,r6
    739c:	10004226 	beq	r2,zero,74a8 <__subdf3+0x82c>
    73a0:	1808d0fa 	srli	r4,r3,3
    73a4:	8822d0fa 	srli	r17,r17,3
    73a8:	1806977a 	slli	r3,r3,29
    73ac:	2080022c 	andhi	r2,r4,8
    73b0:	1c62b03a 	or	r17,r3,r17
    73b4:	10000826 	beq	r2,zero,73d8 <__subdf3+0x75c>
    73b8:	2812d0fa 	srli	r9,r5,3
    73bc:	4880022c 	andhi	r2,r9,8
    73c0:	1000051e 	bne	r2,zero,73d8 <__subdf3+0x75c>
    73c4:	300cd0fa 	srli	r6,r6,3
    73c8:	2804977a 	slli	r2,r5,29
    73cc:	4809883a 	mov	r4,r9
    73d0:	3825883a 	mov	r18,r7
    73d4:	11a2b03a 	or	r17,r2,r6
    73d8:	8806d77a 	srli	r3,r17,29
    73dc:	200890fa 	slli	r4,r4,3
    73e0:	882290fa 	slli	r17,r17,3
    73e4:	0401ffc4 	movi	r16,2047
    73e8:	1906b03a 	or	r3,r3,r4
    73ec:	003e4406 	br	6d00 <__alt_data_end+0xfffd5fc0>
    73f0:	2984b03a 	or	r2,r5,r6
    73f4:	103e4226 	beq	r2,zero,6d00 <__alt_data_end+0xfffd5fc0>
    73f8:	8989c83a 	sub	r4,r17,r6
    73fc:	8911803a 	cmpltu	r8,r17,r4
    7400:	1945c83a 	sub	r2,r3,r5
    7404:	1205c83a 	sub	r2,r2,r8
    7408:	1200202c 	andhi	r8,r2,128
    740c:	403e9a26 	beq	r8,zero,6e78 <__alt_data_end+0xfffd6138>
    7410:	3463c83a 	sub	r17,r6,r17
    7414:	28c5c83a 	sub	r2,r5,r3
    7418:	344d803a 	cmpltu	r6,r6,r17
    741c:	1187c83a 	sub	r3,r2,r6
    7420:	3825883a 	mov	r18,r7
    7424:	003e3606 	br	6d00 <__alt_data_end+0xfffd5fc0>
    7428:	0101ffc4 	movi	r4,2047
    742c:	493fc71e 	bne	r9,r4,734c <__alt_data_end+0xfffd660c>
    7430:	2807883a 	mov	r3,r5
    7434:	3023883a 	mov	r17,r6
    7438:	4821883a 	mov	r16,r9
    743c:	003e3006 	br	6d00 <__alt_data_end+0xfffd5fc0>
    7440:	10003626 	beq	r2,zero,751c <__subdf3+0x8a0>
    7444:	2984b03a 	or	r2,r5,r6
    7448:	10001726 	beq	r2,zero,74a8 <__subdf3+0x82c>
    744c:	1808d0fa 	srli	r4,r3,3
    7450:	8822d0fa 	srli	r17,r17,3
    7454:	1806977a 	slli	r3,r3,29
    7458:	2080022c 	andhi	r2,r4,8
    745c:	1c62b03a 	or	r17,r3,r17
    7460:	10000726 	beq	r2,zero,7480 <__subdf3+0x804>
    7464:	2812d0fa 	srli	r9,r5,3
    7468:	4880022c 	andhi	r2,r9,8
    746c:	1000041e 	bne	r2,zero,7480 <__subdf3+0x804>
    7470:	300cd0fa 	srli	r6,r6,3
    7474:	2804977a 	slli	r2,r5,29
    7478:	4809883a 	mov	r4,r9
    747c:	11a2b03a 	or	r17,r2,r6
    7480:	8806d77a 	srli	r3,r17,29
    7484:	200890fa 	slli	r4,r4,3
    7488:	882290fa 	slli	r17,r17,3
    748c:	3825883a 	mov	r18,r7
    7490:	1906b03a 	or	r3,r3,r4
    7494:	0401ffc4 	movi	r16,2047
    7498:	003e1906 	br	6d00 <__alt_data_end+0xfffd5fc0>
    749c:	000b883a 	mov	r5,zero
    74a0:	0005883a 	mov	r2,zero
    74a4:	003e2e06 	br	6d60 <__alt_data_end+0xfffd6020>
    74a8:	0401ffc4 	movi	r16,2047
    74ac:	003e1406 	br	6d00 <__alt_data_end+0xfffd5fc0>
    74b0:	0005883a 	mov	r2,zero
    74b4:	003f7506 	br	728c <__alt_data_end+0xfffd654c>
    74b8:	0005883a 	mov	r2,zero
    74bc:	0009883a 	mov	r4,zero
    74c0:	003e7806 	br	6ea4 <__alt_data_end+0xfffd6164>
    74c4:	123ff804 	addi	r8,r2,-32
    74c8:	01000804 	movi	r4,32
    74cc:	1a10d83a 	srl	r8,r3,r8
    74d0:	11002526 	beq	r2,r4,7568 <__subdf3+0x8ec>
    74d4:	01001004 	movi	r4,64
    74d8:	2085c83a 	sub	r2,r4,r2
    74dc:	1884983a 	sll	r2,r3,r2
    74e0:	1444b03a 	or	r2,r2,r17
    74e4:	1004c03a 	cmpne	r2,r2,zero
    74e8:	40a2b03a 	or	r17,r8,r2
    74ec:	0005883a 	mov	r2,zero
    74f0:	003f1606 	br	714c <__alt_data_end+0xfffd640c>
    74f4:	02000434 	movhi	r8,16
    74f8:	0009883a 	mov	r4,zero
    74fc:	423fffc4 	addi	r8,r8,-1
    7500:	00bfffc4 	movi	r2,-1
    7504:	0401ffc4 	movi	r16,2047
    7508:	003e6606 	br	6ea4 <__alt_data_end+0xfffd6164>
    750c:	1c62b03a 	or	r17,r3,r17
    7510:	8822c03a 	cmpne	r17,r17,zero
    7514:	0005883a 	mov	r2,zero
    7518:	003f9906 	br	7380 <__alt_data_end+0xfffd6640>
    751c:	2807883a 	mov	r3,r5
    7520:	3023883a 	mov	r17,r6
    7524:	0401ffc4 	movi	r16,2047
    7528:	003df506 	br	6d00 <__alt_data_end+0xfffd5fc0>
    752c:	2807883a 	mov	r3,r5
    7530:	3023883a 	mov	r17,r6
    7534:	003df206 	br	6d00 <__alt_data_end+0xfffd5fc0>
    7538:	123ff804 	addi	r8,r2,-32
    753c:	01000804 	movi	r4,32
    7540:	1a10d83a 	srl	r8,r3,r8
    7544:	11000a26 	beq	r2,r4,7570 <__subdf3+0x8f4>
    7548:	01001004 	movi	r4,64
    754c:	2085c83a 	sub	r2,r4,r2
    7550:	1884983a 	sll	r2,r3,r2
    7554:	1444b03a 	or	r2,r2,r17
    7558:	1004c03a 	cmpne	r2,r2,zero
    755c:	40a2b03a 	or	r17,r8,r2
    7560:	0005883a 	mov	r2,zero
    7564:	003f8606 	br	7380 <__alt_data_end+0xfffd6640>
    7568:	0005883a 	mov	r2,zero
    756c:	003fdc06 	br	74e0 <__alt_data_end+0xfffd67a0>
    7570:	0005883a 	mov	r2,zero
    7574:	003ff706 	br	7554 <__alt_data_end+0xfffd6814>

00007578 <__fixdfsi>:
    7578:	280cd53a 	srli	r6,r5,20
    757c:	00c00434 	movhi	r3,16
    7580:	18ffffc4 	addi	r3,r3,-1
    7584:	3181ffcc 	andi	r6,r6,2047
    7588:	01c0ff84 	movi	r7,1022
    758c:	28c6703a 	and	r3,r5,r3
    7590:	280ad7fa 	srli	r5,r5,31
    7594:	3980120e 	bge	r7,r6,75e0 <__fixdfsi+0x68>
    7598:	00810744 	movi	r2,1053
    759c:	11800c16 	blt	r2,r6,75d0 <__fixdfsi+0x58>
    75a0:	00810cc4 	movi	r2,1075
    75a4:	1185c83a 	sub	r2,r2,r6
    75a8:	01c007c4 	movi	r7,31
    75ac:	18c00434 	orhi	r3,r3,16
    75b0:	38800d16 	blt	r7,r2,75e8 <__fixdfsi+0x70>
    75b4:	31befb44 	addi	r6,r6,-1043
    75b8:	2084d83a 	srl	r2,r4,r2
    75bc:	1986983a 	sll	r3,r3,r6
    75c0:	1884b03a 	or	r2,r3,r2
    75c4:	28000726 	beq	r5,zero,75e4 <__fixdfsi+0x6c>
    75c8:	0085c83a 	sub	r2,zero,r2
    75cc:	f800283a 	ret
    75d0:	00a00034 	movhi	r2,32768
    75d4:	10bfffc4 	addi	r2,r2,-1
    75d8:	2885883a 	add	r2,r5,r2
    75dc:	f800283a 	ret
    75e0:	0005883a 	mov	r2,zero
    75e4:	f800283a 	ret
    75e8:	008104c4 	movi	r2,1043
    75ec:	1185c83a 	sub	r2,r2,r6
    75f0:	1884d83a 	srl	r2,r3,r2
    75f4:	003ff306 	br	75c4 <__alt_data_end+0xfffd6884>

000075f8 <__floatsidf>:
    75f8:	defffd04 	addi	sp,sp,-12
    75fc:	dfc00215 	stw	ra,8(sp)
    7600:	dc400115 	stw	r17,4(sp)
    7604:	dc000015 	stw	r16,0(sp)
    7608:	20002b26 	beq	r4,zero,76b8 <__floatsidf+0xc0>
    760c:	2023883a 	mov	r17,r4
    7610:	2020d7fa 	srli	r16,r4,31
    7614:	20002d16 	blt	r4,zero,76cc <__floatsidf+0xd4>
    7618:	8809883a 	mov	r4,r17
    761c:	00076d40 	call	76d4 <__clzsi2>
    7620:	01410784 	movi	r5,1054
    7624:	288bc83a 	sub	r5,r5,r2
    7628:	01010cc4 	movi	r4,1075
    762c:	2149c83a 	sub	r4,r4,r5
    7630:	00c007c4 	movi	r3,31
    7634:	1900160e 	bge	r3,r4,7690 <__floatsidf+0x98>
    7638:	00c104c4 	movi	r3,1043
    763c:	1947c83a 	sub	r3,r3,r5
    7640:	88c6983a 	sll	r3,r17,r3
    7644:	00800434 	movhi	r2,16
    7648:	10bfffc4 	addi	r2,r2,-1
    764c:	1886703a 	and	r3,r3,r2
    7650:	2941ffcc 	andi	r5,r5,2047
    7654:	800d883a 	mov	r6,r16
    7658:	0005883a 	mov	r2,zero
    765c:	280a953a 	slli	r5,r5,20
    7660:	31803fcc 	andi	r6,r6,255
    7664:	01000434 	movhi	r4,16
    7668:	300c97fa 	slli	r6,r6,31
    766c:	213fffc4 	addi	r4,r4,-1
    7670:	1906703a 	and	r3,r3,r4
    7674:	1946b03a 	or	r3,r3,r5
    7678:	1986b03a 	or	r3,r3,r6
    767c:	dfc00217 	ldw	ra,8(sp)
    7680:	dc400117 	ldw	r17,4(sp)
    7684:	dc000017 	ldw	r16,0(sp)
    7688:	dec00304 	addi	sp,sp,12
    768c:	f800283a 	ret
    7690:	00c002c4 	movi	r3,11
    7694:	1887c83a 	sub	r3,r3,r2
    7698:	88c6d83a 	srl	r3,r17,r3
    769c:	8904983a 	sll	r2,r17,r4
    76a0:	01000434 	movhi	r4,16
    76a4:	213fffc4 	addi	r4,r4,-1
    76a8:	2941ffcc 	andi	r5,r5,2047
    76ac:	1906703a 	and	r3,r3,r4
    76b0:	800d883a 	mov	r6,r16
    76b4:	003fe906 	br	765c <__alt_data_end+0xfffd691c>
    76b8:	000d883a 	mov	r6,zero
    76bc:	000b883a 	mov	r5,zero
    76c0:	0007883a 	mov	r3,zero
    76c4:	0005883a 	mov	r2,zero
    76c8:	003fe406 	br	765c <__alt_data_end+0xfffd691c>
    76cc:	0123c83a 	sub	r17,zero,r4
    76d0:	003fd106 	br	7618 <__alt_data_end+0xfffd68d8>

000076d4 <__clzsi2>:
    76d4:	00bfffd4 	movui	r2,65535
    76d8:	11000536 	bltu	r2,r4,76f0 <__clzsi2+0x1c>
    76dc:	00803fc4 	movi	r2,255
    76e0:	11000f36 	bltu	r2,r4,7720 <__clzsi2+0x4c>
    76e4:	00800804 	movi	r2,32
    76e8:	0007883a 	mov	r3,zero
    76ec:	00000506 	br	7704 <__clzsi2+0x30>
    76f0:	00804034 	movhi	r2,256
    76f4:	10bfffc4 	addi	r2,r2,-1
    76f8:	11000c2e 	bgeu	r2,r4,772c <__clzsi2+0x58>
    76fc:	00800204 	movi	r2,8
    7700:	00c00604 	movi	r3,24
    7704:	20c8d83a 	srl	r4,r4,r3
    7708:	00c000b4 	movhi	r3,2
    770c:	18f1e304 	addi	r3,r3,-14452
    7710:	1909883a 	add	r4,r3,r4
    7714:	20c00003 	ldbu	r3,0(r4)
    7718:	10c5c83a 	sub	r2,r2,r3
    771c:	f800283a 	ret
    7720:	00800604 	movi	r2,24
    7724:	00c00204 	movi	r3,8
    7728:	003ff606 	br	7704 <__alt_data_end+0xfffd69c4>
    772c:	00800404 	movi	r2,16
    7730:	1007883a 	mov	r3,r2
    7734:	003ff306 	br	7704 <__alt_data_end+0xfffd69c4>

00007738 <__errno>:
    7738:	008000b4 	movhi	r2,2
    773c:	10b99a04 	addi	r2,r2,-6552
    7740:	10800017 	ldw	r2,0(r2)
    7744:	f800283a 	ret

00007748 <_printf_r>:
    7748:	defffd04 	addi	sp,sp,-12
    774c:	2805883a 	mov	r2,r5
    7750:	dfc00015 	stw	ra,0(sp)
    7754:	d9800115 	stw	r6,4(sp)
    7758:	d9c00215 	stw	r7,8(sp)
    775c:	21400217 	ldw	r5,8(r4)
    7760:	d9c00104 	addi	r7,sp,4
    7764:	100d883a 	mov	r6,r2
    7768:	00079200 	call	7920 <___vfprintf_internal_r>
    776c:	dfc00017 	ldw	ra,0(sp)
    7770:	dec00304 	addi	sp,sp,12
    7774:	f800283a 	ret

00007778 <printf>:
    7778:	defffc04 	addi	sp,sp,-16
    777c:	dfc00015 	stw	ra,0(sp)
    7780:	d9400115 	stw	r5,4(sp)
    7784:	d9800215 	stw	r6,8(sp)
    7788:	d9c00315 	stw	r7,12(sp)
    778c:	008000b4 	movhi	r2,2
    7790:	10b99a04 	addi	r2,r2,-6552
    7794:	10800017 	ldw	r2,0(r2)
    7798:	200b883a 	mov	r5,r4
    779c:	d9800104 	addi	r6,sp,4
    77a0:	11000217 	ldw	r4,8(r2)
    77a4:	0009bfc0 	call	9bfc <__vfprintf_internal>
    77a8:	dfc00017 	ldw	ra,0(sp)
    77ac:	dec00404 	addi	sp,sp,16
    77b0:	f800283a 	ret

000077b4 <_puts_r>:
    77b4:	defff604 	addi	sp,sp,-40
    77b8:	dc000715 	stw	r16,28(sp)
    77bc:	2021883a 	mov	r16,r4
    77c0:	2809883a 	mov	r4,r5
    77c4:	dc400815 	stw	r17,32(sp)
    77c8:	dfc00915 	stw	ra,36(sp)
    77cc:	2823883a 	mov	r17,r5
    77d0:	00078880 	call	7888 <strlen>
    77d4:	10c00044 	addi	r3,r2,1
    77d8:	d8800115 	stw	r2,4(sp)
    77dc:	008000b4 	movhi	r2,2
    77e0:	10b22404 	addi	r2,r2,-14192
    77e4:	d8800215 	stw	r2,8(sp)
    77e8:	00800044 	movi	r2,1
    77ec:	d8800315 	stw	r2,12(sp)
    77f0:	00800084 	movi	r2,2
    77f4:	dc400015 	stw	r17,0(sp)
    77f8:	d8c00615 	stw	r3,24(sp)
    77fc:	dec00415 	stw	sp,16(sp)
    7800:	d8800515 	stw	r2,20(sp)
    7804:	80000226 	beq	r16,zero,7810 <_puts_r+0x5c>
    7808:	80800e17 	ldw	r2,56(r16)
    780c:	10001426 	beq	r2,zero,7860 <_puts_r+0xac>
    7810:	81400217 	ldw	r5,8(r16)
    7814:	2880030b 	ldhu	r2,12(r5)
    7818:	10c8000c 	andi	r3,r2,8192
    781c:	1800061e 	bne	r3,zero,7838 <_puts_r+0x84>
    7820:	29001917 	ldw	r4,100(r5)
    7824:	00f7ffc4 	movi	r3,-8193
    7828:	10880014 	ori	r2,r2,8192
    782c:	20c6703a 	and	r3,r4,r3
    7830:	2880030d 	sth	r2,12(r5)
    7834:	28c01915 	stw	r3,100(r5)
    7838:	d9800404 	addi	r6,sp,16
    783c:	8009883a 	mov	r4,r16
    7840:	000c1640 	call	c164 <__sfvwrite_r>
    7844:	1000091e 	bne	r2,zero,786c <_puts_r+0xb8>
    7848:	00800284 	movi	r2,10
    784c:	dfc00917 	ldw	ra,36(sp)
    7850:	dc400817 	ldw	r17,32(sp)
    7854:	dc000717 	ldw	r16,28(sp)
    7858:	dec00a04 	addi	sp,sp,40
    785c:	f800283a 	ret
    7860:	8009883a 	mov	r4,r16
    7864:	000bce00 	call	bce0 <__sinit>
    7868:	003fe906 	br	7810 <__alt_data_end+0xfffd6ad0>
    786c:	00bfffc4 	movi	r2,-1
    7870:	003ff606 	br	784c <__alt_data_end+0xfffd6b0c>

00007874 <puts>:
    7874:	008000b4 	movhi	r2,2
    7878:	10b99a04 	addi	r2,r2,-6552
    787c:	200b883a 	mov	r5,r4
    7880:	11000017 	ldw	r4,0(r2)
    7884:	00077b41 	jmpi	77b4 <_puts_r>

00007888 <strlen>:
    7888:	208000cc 	andi	r2,r4,3
    788c:	10002026 	beq	r2,zero,7910 <strlen+0x88>
    7890:	20800007 	ldb	r2,0(r4)
    7894:	10002026 	beq	r2,zero,7918 <strlen+0x90>
    7898:	2005883a 	mov	r2,r4
    789c:	00000206 	br	78a8 <strlen+0x20>
    78a0:	10c00007 	ldb	r3,0(r2)
    78a4:	18001826 	beq	r3,zero,7908 <strlen+0x80>
    78a8:	10800044 	addi	r2,r2,1
    78ac:	10c000cc 	andi	r3,r2,3
    78b0:	183ffb1e 	bne	r3,zero,78a0 <__alt_data_end+0xfffd6b60>
    78b4:	10c00017 	ldw	r3,0(r2)
    78b8:	01ffbff4 	movhi	r7,65279
    78bc:	39ffbfc4 	addi	r7,r7,-257
    78c0:	00ca303a 	nor	r5,zero,r3
    78c4:	01a02074 	movhi	r6,32897
    78c8:	19c7883a 	add	r3,r3,r7
    78cc:	31a02004 	addi	r6,r6,-32640
    78d0:	1946703a 	and	r3,r3,r5
    78d4:	1986703a 	and	r3,r3,r6
    78d8:	1800091e 	bne	r3,zero,7900 <strlen+0x78>
    78dc:	10800104 	addi	r2,r2,4
    78e0:	10c00017 	ldw	r3,0(r2)
    78e4:	19cb883a 	add	r5,r3,r7
    78e8:	00c6303a 	nor	r3,zero,r3
    78ec:	28c6703a 	and	r3,r5,r3
    78f0:	1986703a 	and	r3,r3,r6
    78f4:	183ff926 	beq	r3,zero,78dc <__alt_data_end+0xfffd6b9c>
    78f8:	00000106 	br	7900 <strlen+0x78>
    78fc:	10800044 	addi	r2,r2,1
    7900:	10c00007 	ldb	r3,0(r2)
    7904:	183ffd1e 	bne	r3,zero,78fc <__alt_data_end+0xfffd6bbc>
    7908:	1105c83a 	sub	r2,r2,r4
    790c:	f800283a 	ret
    7910:	2005883a 	mov	r2,r4
    7914:	003fe706 	br	78b4 <__alt_data_end+0xfffd6b74>
    7918:	0005883a 	mov	r2,zero
    791c:	f800283a 	ret

00007920 <___vfprintf_internal_r>:
    7920:	deffb804 	addi	sp,sp,-288
    7924:	dfc04715 	stw	ra,284(sp)
    7928:	ddc04515 	stw	r23,276(sp)
    792c:	dd404315 	stw	r21,268(sp)
    7930:	d9002d15 	stw	r4,180(sp)
    7934:	282f883a 	mov	r23,r5
    7938:	302b883a 	mov	r21,r6
    793c:	d9c02e15 	stw	r7,184(sp)
    7940:	df004615 	stw	fp,280(sp)
    7944:	dd804415 	stw	r22,272(sp)
    7948:	dd004215 	stw	r20,264(sp)
    794c:	dcc04115 	stw	r19,260(sp)
    7950:	dc804015 	stw	r18,256(sp)
    7954:	dc403f15 	stw	r17,252(sp)
    7958:	dc003e15 	stw	r16,248(sp)
    795c:	000c8600 	call	c860 <_localeconv_r>
    7960:	10800017 	ldw	r2,0(r2)
    7964:	1009883a 	mov	r4,r2
    7968:	d8803415 	stw	r2,208(sp)
    796c:	00078880 	call	7888 <strlen>
    7970:	d8803715 	stw	r2,220(sp)
    7974:	d8802d17 	ldw	r2,180(sp)
    7978:	10000226 	beq	r2,zero,7984 <___vfprintf_internal_r+0x64>
    797c:	10800e17 	ldw	r2,56(r2)
    7980:	1000fb26 	beq	r2,zero,7d70 <___vfprintf_internal_r+0x450>
    7984:	b880030b 	ldhu	r2,12(r23)
    7988:	10c8000c 	andi	r3,r2,8192
    798c:	1800061e 	bne	r3,zero,79a8 <___vfprintf_internal_r+0x88>
    7990:	b9001917 	ldw	r4,100(r23)
    7994:	00f7ffc4 	movi	r3,-8193
    7998:	10880014 	ori	r2,r2,8192
    799c:	20c6703a 	and	r3,r4,r3
    79a0:	b880030d 	sth	r2,12(r23)
    79a4:	b8c01915 	stw	r3,100(r23)
    79a8:	10c0020c 	andi	r3,r2,8
    79ac:	1800c326 	beq	r3,zero,7cbc <___vfprintf_internal_r+0x39c>
    79b0:	b8c00417 	ldw	r3,16(r23)
    79b4:	1800c126 	beq	r3,zero,7cbc <___vfprintf_internal_r+0x39c>
    79b8:	1080068c 	andi	r2,r2,26
    79bc:	00c00284 	movi	r3,10
    79c0:	10c0c626 	beq	r2,r3,7cdc <___vfprintf_internal_r+0x3bc>
    79c4:	d8c00404 	addi	r3,sp,16
    79c8:	050000b4 	movhi	r20,2
    79cc:	d9001e04 	addi	r4,sp,120
    79d0:	a5323584 	addi	r20,r20,-14122
    79d4:	d8c01e15 	stw	r3,120(sp)
    79d8:	d8002015 	stw	zero,128(sp)
    79dc:	d8001f15 	stw	zero,124(sp)
    79e0:	d8003315 	stw	zero,204(sp)
    79e4:	d8003615 	stw	zero,216(sp)
    79e8:	d8003815 	stw	zero,224(sp)
    79ec:	1811883a 	mov	r8,r3
    79f0:	d8003915 	stw	zero,228(sp)
    79f4:	d8003a15 	stw	zero,232(sp)
    79f8:	d8002f15 	stw	zero,188(sp)
    79fc:	d9002815 	stw	r4,160(sp)
    7a00:	a8800007 	ldb	r2,0(r21)
    7a04:	10028b26 	beq	r2,zero,8434 <___vfprintf_internal_r+0xb14>
    7a08:	00c00944 	movi	r3,37
    7a0c:	a823883a 	mov	r17,r21
    7a10:	10c0021e 	bne	r2,r3,7a1c <___vfprintf_internal_r+0xfc>
    7a14:	00001406 	br	7a68 <___vfprintf_internal_r+0x148>
    7a18:	10c00326 	beq	r2,r3,7a28 <___vfprintf_internal_r+0x108>
    7a1c:	8c400044 	addi	r17,r17,1
    7a20:	88800007 	ldb	r2,0(r17)
    7a24:	103ffc1e 	bne	r2,zero,7a18 <__alt_data_end+0xfffd6cd8>
    7a28:	8d61c83a 	sub	r16,r17,r21
    7a2c:	80000e26 	beq	r16,zero,7a68 <___vfprintf_internal_r+0x148>
    7a30:	d8c02017 	ldw	r3,128(sp)
    7a34:	d8801f17 	ldw	r2,124(sp)
    7a38:	45400015 	stw	r21,0(r8)
    7a3c:	1c07883a 	add	r3,r3,r16
    7a40:	10800044 	addi	r2,r2,1
    7a44:	d8c02015 	stw	r3,128(sp)
    7a48:	44000115 	stw	r16,4(r8)
    7a4c:	d8801f15 	stw	r2,124(sp)
    7a50:	00c001c4 	movi	r3,7
    7a54:	1880a916 	blt	r3,r2,7cfc <___vfprintf_internal_r+0x3dc>
    7a58:	42000204 	addi	r8,r8,8
    7a5c:	d9402f17 	ldw	r5,188(sp)
    7a60:	2c0b883a 	add	r5,r5,r16
    7a64:	d9402f15 	stw	r5,188(sp)
    7a68:	88800007 	ldb	r2,0(r17)
    7a6c:	1000aa26 	beq	r2,zero,7d18 <___vfprintf_internal_r+0x3f8>
    7a70:	8d400044 	addi	r21,r17,1
    7a74:	8c400047 	ldb	r17,1(r17)
    7a78:	0021883a 	mov	r16,zero
    7a7c:	00bfffc4 	movi	r2,-1
    7a80:	0025883a 	mov	r18,zero
    7a84:	dc002905 	stb	r16,164(sp)
    7a88:	d8002785 	stb	zero,158(sp)
    7a8c:	d8002b05 	stb	zero,172(sp)
    7a90:	d8802a15 	stw	r2,168(sp)
    7a94:	d8003115 	stw	zero,196(sp)
    7a98:	04c01604 	movi	r19,88
    7a9c:	05800244 	movi	r22,9
    7aa0:	9021883a 	mov	r16,r18
    7aa4:	4039883a 	mov	fp,r8
    7aa8:	ad400044 	addi	r21,r21,1
    7aac:	88bff804 	addi	r2,r17,-32
    7ab0:	98833236 	bltu	r19,r2,877c <___vfprintf_internal_r+0xe5c>
    7ab4:	100490ba 	slli	r2,r2,2
    7ab8:	00c00034 	movhi	r3,0
    7abc:	18deb304 	addi	r3,r3,31436
    7ac0:	10c5883a 	add	r2,r2,r3
    7ac4:	10800017 	ldw	r2,0(r2)
    7ac8:	1000683a 	jmp	r2
    7acc:	00008674 	movhi	zero,537
    7ad0:	0000877c 	xorhi	zero,zero,541
    7ad4:	0000877c 	xorhi	zero,zero,541
    7ad8:	00008694 	movui	zero,538
    7adc:	0000877c 	xorhi	zero,zero,541
    7ae0:	0000877c 	xorhi	zero,zero,541
    7ae4:	0000877c 	xorhi	zero,zero,541
    7ae8:	0000877c 	xorhi	zero,zero,541
    7aec:	0000877c 	xorhi	zero,zero,541
    7af0:	0000877c 	xorhi	zero,zero,541
    7af4:	00007d7c 	xorhi	zero,zero,501
    7af8:	00008584 	movi	zero,534
    7afc:	0000877c 	xorhi	zero,zero,541
    7b00:	00007c40 	call	7c4 <find_leds+0x558>
    7b04:	00007da0 	cmpeqi	zero,zero,502
    7b08:	0000877c 	xorhi	zero,zero,541
    7b0c:	00007df0 	cmpltui	zero,zero,503
    7b10:	00007dfc 	xorhi	zero,zero,503
    7b14:	00007dfc 	xorhi	zero,zero,503
    7b18:	00007dfc 	xorhi	zero,zero,503
    7b1c:	00007dfc 	xorhi	zero,zero,503
    7b20:	00007dfc 	xorhi	zero,zero,503
    7b24:	00007dfc 	xorhi	zero,zero,503
    7b28:	00007dfc 	xorhi	zero,zero,503
    7b2c:	00007dfc 	xorhi	zero,zero,503
    7b30:	00007dfc 	xorhi	zero,zero,503
    7b34:	0000877c 	xorhi	zero,zero,541
    7b38:	0000877c 	xorhi	zero,zero,541
    7b3c:	0000877c 	xorhi	zero,zero,541
    7b40:	0000877c 	xorhi	zero,zero,541
    7b44:	0000877c 	xorhi	zero,zero,541
    7b48:	0000877c 	xorhi	zero,zero,541
    7b4c:	0000877c 	xorhi	zero,zero,541
    7b50:	0000877c 	xorhi	zero,zero,541
    7b54:	0000877c 	xorhi	zero,zero,541
    7b58:	0000877c 	xorhi	zero,zero,541
    7b5c:	00007e38 	rdprs	zero,zero,504
    7b60:	00007f00 	call	7f0 <find_leds+0x584>
    7b64:	0000877c 	xorhi	zero,zero,541
    7b68:	00007f00 	call	7f0 <find_leds+0x584>
    7b6c:	0000877c 	xorhi	zero,zero,541
    7b70:	0000877c 	xorhi	zero,zero,541
    7b74:	0000877c 	xorhi	zero,zero,541
    7b78:	0000877c 	xorhi	zero,zero,541
    7b7c:	00007fac 	andhi	zero,zero,510
    7b80:	0000877c 	xorhi	zero,zero,541
    7b84:	0000877c 	xorhi	zero,zero,541
    7b88:	00007fb8 	rdprs	zero,zero,510
    7b8c:	0000877c 	xorhi	zero,zero,541
    7b90:	0000877c 	xorhi	zero,zero,541
    7b94:	0000877c 	xorhi	zero,zero,541
    7b98:	0000877c 	xorhi	zero,zero,541
    7b9c:	0000877c 	xorhi	zero,zero,541
    7ba0:	0000843c 	xorhi	zero,zero,528
    7ba4:	0000877c 	xorhi	zero,zero,541
    7ba8:	0000877c 	xorhi	zero,zero,541
    7bac:	000084a8 	cmpgeui	zero,zero,530
    7bb0:	0000877c 	xorhi	zero,zero,541
    7bb4:	0000877c 	xorhi	zero,zero,541
    7bb8:	0000877c 	xorhi	zero,zero,541
    7bbc:	0000877c 	xorhi	zero,zero,541
    7bc0:	0000877c 	xorhi	zero,zero,541
    7bc4:	0000877c 	xorhi	zero,zero,541
    7bc8:	0000877c 	xorhi	zero,zero,541
    7bcc:	0000877c 	xorhi	zero,zero,541
    7bd0:	0000877c 	xorhi	zero,zero,541
    7bd4:	0000877c 	xorhi	zero,zero,541
    7bd8:	00008720 	cmpeqi	zero,zero,540
    7bdc:	000086a0 	cmpeqi	zero,zero,538
    7be0:	00007f00 	call	7f0 <find_leds+0x584>
    7be4:	00007f00 	call	7f0 <find_leds+0x584>
    7be8:	00007f00 	call	7f0 <find_leds+0x584>
    7bec:	000086c0 	call	86c <find_leds+0x600>
    7bf0:	000086a0 	cmpeqi	zero,zero,538
    7bf4:	0000877c 	xorhi	zero,zero,541
    7bf8:	0000877c 	xorhi	zero,zero,541
    7bfc:	000086cc 	andi	zero,zero,539
    7c00:	0000877c 	xorhi	zero,zero,541
    7c04:	000086e0 	cmpeqi	zero,zero,539
    7c08:	00008564 	muli	zero,zero,533
    7c0c:	00007c4c 	andi	zero,zero,497
    7c10:	0000859c 	xori	zero,zero,534
    7c14:	0000877c 	xorhi	zero,zero,541
    7c18:	000085a8 	cmpgeui	zero,zero,534
    7c1c:	0000877c 	xorhi	zero,zero,541
    7c20:	0000860c 	andi	zero,zero,536
    7c24:	0000877c 	xorhi	zero,zero,541
    7c28:	0000877c 	xorhi	zero,zero,541
    7c2c:	0000862c 	andhi	zero,zero,536
    7c30:	d8c03117 	ldw	r3,196(sp)
    7c34:	d8802e15 	stw	r2,184(sp)
    7c38:	00c7c83a 	sub	r3,zero,r3
    7c3c:	d8c03115 	stw	r3,196(sp)
    7c40:	84000114 	ori	r16,r16,4
    7c44:	ac400007 	ldb	r17,0(r21)
    7c48:	003f9706 	br	7aa8 <__alt_data_end+0xfffd6d68>
    7c4c:	00800c04 	movi	r2,48
    7c50:	d8802705 	stb	r2,156(sp)
    7c54:	00801e04 	movi	r2,120
    7c58:	d8802745 	stb	r2,157(sp)
    7c5c:	d9002a17 	ldw	r4,168(sp)
    7c60:	d8802e17 	ldw	r2,184(sp)
    7c64:	d8002785 	stb	zero,158(sp)
    7c68:	e011883a 	mov	r8,fp
    7c6c:	10c00104 	addi	r3,r2,4
    7c70:	14c00017 	ldw	r19,0(r2)
    7c74:	002d883a 	mov	r22,zero
    7c78:	80800094 	ori	r2,r16,2
    7c7c:	2002ca16 	blt	r4,zero,87a8 <___vfprintf_internal_r+0xe88>
    7c80:	00bfdfc4 	movi	r2,-129
    7c84:	80a4703a 	and	r18,r16,r2
    7c88:	d8c02e15 	stw	r3,184(sp)
    7c8c:	94800094 	ori	r18,r18,2
    7c90:	9802b41e 	bne	r19,zero,8764 <___vfprintf_internal_r+0xe44>
    7c94:	014000b4 	movhi	r5,2
    7c98:	29722e04 	addi	r5,r5,-14152
    7c9c:	d9403915 	stw	r5,228(sp)
    7ca0:	04401e04 	movi	r17,120
    7ca4:	d8802a17 	ldw	r2,168(sp)
    7ca8:	0039883a 	mov	fp,zero
    7cac:	1001fa26 	beq	r2,zero,8498 <___vfprintf_internal_r+0xb78>
    7cb0:	0027883a 	mov	r19,zero
    7cb4:	002d883a 	mov	r22,zero
    7cb8:	00021906 	br	8520 <___vfprintf_internal_r+0xc00>
    7cbc:	d9002d17 	ldw	r4,180(sp)
    7cc0:	b80b883a 	mov	r5,r23
    7cc4:	0009cd40 	call	9cd4 <__swsetup_r>
    7cc8:	1005dc1e 	bne	r2,zero,943c <___vfprintf_internal_r+0x1b1c>
    7ccc:	b880030b 	ldhu	r2,12(r23)
    7cd0:	00c00284 	movi	r3,10
    7cd4:	1080068c 	andi	r2,r2,26
    7cd8:	10ff3a1e 	bne	r2,r3,79c4 <__alt_data_end+0xfffd6c84>
    7cdc:	b880038f 	ldh	r2,14(r23)
    7ce0:	103f3816 	blt	r2,zero,79c4 <__alt_data_end+0xfffd6c84>
    7ce4:	d9c02e17 	ldw	r7,184(sp)
    7ce8:	d9002d17 	ldw	r4,180(sp)
    7cec:	a80d883a 	mov	r6,r21
    7cf0:	b80b883a 	mov	r5,r23
    7cf4:	0009c180 	call	9c18 <__sbprintf>
    7cf8:	00001106 	br	7d40 <___vfprintf_internal_r+0x420>
    7cfc:	d9002d17 	ldw	r4,180(sp)
    7d00:	d9801e04 	addi	r6,sp,120
    7d04:	b80b883a 	mov	r5,r23
    7d08:	000f08c0 	call	f08c <__sprint_r>
    7d0c:	1000081e 	bne	r2,zero,7d30 <___vfprintf_internal_r+0x410>
    7d10:	da000404 	addi	r8,sp,16
    7d14:	003f5106 	br	7a5c <__alt_data_end+0xfffd6d1c>
    7d18:	d8802017 	ldw	r2,128(sp)
    7d1c:	10000426 	beq	r2,zero,7d30 <___vfprintf_internal_r+0x410>
    7d20:	d9002d17 	ldw	r4,180(sp)
    7d24:	d9801e04 	addi	r6,sp,120
    7d28:	b80b883a 	mov	r5,r23
    7d2c:	000f08c0 	call	f08c <__sprint_r>
    7d30:	b880030b 	ldhu	r2,12(r23)
    7d34:	1080100c 	andi	r2,r2,64
    7d38:	1005c01e 	bne	r2,zero,943c <___vfprintf_internal_r+0x1b1c>
    7d3c:	d8802f17 	ldw	r2,188(sp)
    7d40:	dfc04717 	ldw	ra,284(sp)
    7d44:	df004617 	ldw	fp,280(sp)
    7d48:	ddc04517 	ldw	r23,276(sp)
    7d4c:	dd804417 	ldw	r22,272(sp)
    7d50:	dd404317 	ldw	r21,268(sp)
    7d54:	dd004217 	ldw	r20,264(sp)
    7d58:	dcc04117 	ldw	r19,260(sp)
    7d5c:	dc804017 	ldw	r18,256(sp)
    7d60:	dc403f17 	ldw	r17,252(sp)
    7d64:	dc003e17 	ldw	r16,248(sp)
    7d68:	dec04804 	addi	sp,sp,288
    7d6c:	f800283a 	ret
    7d70:	d9002d17 	ldw	r4,180(sp)
    7d74:	000bce00 	call	bce0 <__sinit>
    7d78:	003f0206 	br	7984 <__alt_data_end+0xfffd6c44>
    7d7c:	d9002e17 	ldw	r4,184(sp)
    7d80:	d9402e17 	ldw	r5,184(sp)
    7d84:	21000017 	ldw	r4,0(r4)
    7d88:	28800104 	addi	r2,r5,4
    7d8c:	d9003115 	stw	r4,196(sp)
    7d90:	203fa716 	blt	r4,zero,7c30 <__alt_data_end+0xfffd6ef0>
    7d94:	d8802e15 	stw	r2,184(sp)
    7d98:	ac400007 	ldb	r17,0(r21)
    7d9c:	003f4206 	br	7aa8 <__alt_data_end+0xfffd6d68>
    7da0:	ac400007 	ldb	r17,0(r21)
    7da4:	01000a84 	movi	r4,42
    7da8:	a8c00044 	addi	r3,r21,1
    7dac:	89075826 	beq	r17,r4,9b10 <___vfprintf_internal_r+0x21f0>
    7db0:	8cbff404 	addi	r18,r17,-48
    7db4:	b486ae36 	bltu	r22,r18,9870 <___vfprintf_internal_r+0x1f50>
    7db8:	0009883a 	mov	r4,zero
    7dbc:	1823883a 	mov	r17,r3
    7dc0:	01400284 	movi	r5,10
    7dc4:	0004f140 	call	4f14 <__mulsi3>
    7dc8:	88c00007 	ldb	r3,0(r17)
    7dcc:	1489883a 	add	r4,r2,r18
    7dd0:	8d400044 	addi	r21,r17,1
    7dd4:	1cbff404 	addi	r18,r3,-48
    7dd8:	a823883a 	mov	r17,r21
    7ddc:	b4bff82e 	bgeu	r22,r18,7dc0 <__alt_data_end+0xfffd7080>
    7de0:	1823883a 	mov	r17,r3
    7de4:	2005f616 	blt	r4,zero,95c0 <___vfprintf_internal_r+0x1ca0>
    7de8:	d9002a15 	stw	r4,168(sp)
    7dec:	003f2f06 	br	7aac <__alt_data_end+0xfffd6d6c>
    7df0:	84002014 	ori	r16,r16,128
    7df4:	ac400007 	ldb	r17,0(r21)
    7df8:	003f2b06 	br	7aa8 <__alt_data_end+0xfffd6d68>
    7dfc:	8cbff404 	addi	r18,r17,-48
    7e00:	d8003115 	stw	zero,196(sp)
    7e04:	0009883a 	mov	r4,zero
    7e08:	a823883a 	mov	r17,r21
    7e0c:	01400284 	movi	r5,10
    7e10:	0004f140 	call	4f14 <__mulsi3>
    7e14:	88c00007 	ldb	r3,0(r17)
    7e18:	9089883a 	add	r4,r18,r2
    7e1c:	ad400044 	addi	r21,r21,1
    7e20:	1cbff404 	addi	r18,r3,-48
    7e24:	a823883a 	mov	r17,r21
    7e28:	b4bff82e 	bgeu	r22,r18,7e0c <__alt_data_end+0xfffd70cc>
    7e2c:	1823883a 	mov	r17,r3
    7e30:	d9003115 	stw	r4,196(sp)
    7e34:	003f1d06 	br	7aac <__alt_data_end+0xfffd6d6c>
    7e38:	8025883a 	mov	r18,r16
    7e3c:	dc002903 	ldbu	r16,164(sp)
    7e40:	e011883a 	mov	r8,fp
    7e44:	84003fcc 	andi	r16,r16,255
    7e48:	8007531e 	bne	r16,zero,9b98 <___vfprintf_internal_r+0x2278>
    7e4c:	94800414 	ori	r18,r18,16
    7e50:	9080080c 	andi	r2,r18,32
    7e54:	1003a326 	beq	r2,zero,8ce4 <___vfprintf_internal_r+0x13c4>
    7e58:	d9002e17 	ldw	r4,184(sp)
    7e5c:	20800117 	ldw	r2,4(r4)
    7e60:	24c00017 	ldw	r19,0(r4)
    7e64:	21000204 	addi	r4,r4,8
    7e68:	d9002e15 	stw	r4,184(sp)
    7e6c:	102d883a 	mov	r22,r2
    7e70:	10047316 	blt	r2,zero,9040 <___vfprintf_internal_r+0x1720>
    7e74:	d9002a17 	ldw	r4,168(sp)
    7e78:	df002783 	ldbu	fp,158(sp)
    7e7c:	2003e416 	blt	r4,zero,8e10 <___vfprintf_internal_r+0x14f0>
    7e80:	00ffdfc4 	movi	r3,-129
    7e84:	9d84b03a 	or	r2,r19,r22
    7e88:	90e4703a 	and	r18,r18,r3
    7e8c:	10018026 	beq	r2,zero,8490 <___vfprintf_internal_r+0xb70>
    7e90:	b003ab26 	beq	r22,zero,8d40 <___vfprintf_internal_r+0x1420>
    7e94:	dc402915 	stw	r17,164(sp)
    7e98:	dc001e04 	addi	r16,sp,120
    7e9c:	b023883a 	mov	r17,r22
    7ea0:	402d883a 	mov	r22,r8
    7ea4:	9809883a 	mov	r4,r19
    7ea8:	880b883a 	mov	r5,r17
    7eac:	01800284 	movi	r6,10
    7eb0:	000f883a 	mov	r7,zero
    7eb4:	00115d00 	call	115d0 <__umoddi3>
    7eb8:	10800c04 	addi	r2,r2,48
    7ebc:	843fffc4 	addi	r16,r16,-1
    7ec0:	9809883a 	mov	r4,r19
    7ec4:	880b883a 	mov	r5,r17
    7ec8:	80800005 	stb	r2,0(r16)
    7ecc:	01800284 	movi	r6,10
    7ed0:	000f883a 	mov	r7,zero
    7ed4:	0010fd40 	call	10fd4 <__udivdi3>
    7ed8:	1027883a 	mov	r19,r2
    7edc:	10c4b03a 	or	r2,r2,r3
    7ee0:	1823883a 	mov	r17,r3
    7ee4:	103fef1e 	bne	r2,zero,7ea4 <__alt_data_end+0xfffd7164>
    7ee8:	d8c02817 	ldw	r3,160(sp)
    7eec:	dc402917 	ldw	r17,164(sp)
    7ef0:	b011883a 	mov	r8,r22
    7ef4:	1c07c83a 	sub	r3,r3,r16
    7ef8:	d8c02b15 	stw	r3,172(sp)
    7efc:	00005f06 	br	807c <___vfprintf_internal_r+0x75c>
    7f00:	8025883a 	mov	r18,r16
    7f04:	dc002903 	ldbu	r16,164(sp)
    7f08:	e011883a 	mov	r8,fp
    7f0c:	84003fcc 	andi	r16,r16,255
    7f10:	80071e1e 	bne	r16,zero,9b8c <___vfprintf_internal_r+0x226c>
    7f14:	9080020c 	andi	r2,r18,8
    7f18:	1004af26 	beq	r2,zero,91d8 <___vfprintf_internal_r+0x18b8>
    7f1c:	d9002e17 	ldw	r4,184(sp)
    7f20:	d9402e17 	ldw	r5,184(sp)
    7f24:	d8802e17 	ldw	r2,184(sp)
    7f28:	21000017 	ldw	r4,0(r4)
    7f2c:	29400117 	ldw	r5,4(r5)
    7f30:	10800204 	addi	r2,r2,8
    7f34:	d9003615 	stw	r4,216(sp)
    7f38:	d9403815 	stw	r5,224(sp)
    7f3c:	d8802e15 	stw	r2,184(sp)
    7f40:	d9003617 	ldw	r4,216(sp)
    7f44:	d9403817 	ldw	r5,224(sp)
    7f48:	da003d15 	stw	r8,244(sp)
    7f4c:	04000044 	movi	r16,1
    7f50:	00049340 	call	4934 <__fpclassifyd>
    7f54:	da003d17 	ldw	r8,244(sp)
    7f58:	1404441e 	bne	r2,r16,906c <___vfprintf_internal_r+0x174c>
    7f5c:	d9003617 	ldw	r4,216(sp)
    7f60:	d9403817 	ldw	r5,224(sp)
    7f64:	000d883a 	mov	r6,zero
    7f68:	000f883a 	mov	r7,zero
    7f6c:	000631c0 	call	631c <__ledf2>
    7f70:	da003d17 	ldw	r8,244(sp)
    7f74:	1005e316 	blt	r2,zero,9704 <___vfprintf_internal_r+0x1de4>
    7f78:	df002783 	ldbu	fp,158(sp)
    7f7c:	008011c4 	movi	r2,71
    7f80:	1445580e 	bge	r2,r17,94e4 <___vfprintf_internal_r+0x1bc4>
    7f84:	040000b4 	movhi	r16,2
    7f88:	84322604 	addi	r16,r16,-14184
    7f8c:	00c000c4 	movi	r3,3
    7f90:	00bfdfc4 	movi	r2,-129
    7f94:	d8c02915 	stw	r3,164(sp)
    7f98:	90a4703a 	and	r18,r18,r2
    7f9c:	d8c02b15 	stw	r3,172(sp)
    7fa0:	d8002a15 	stw	zero,168(sp)
    7fa4:	d8003215 	stw	zero,200(sp)
    7fa8:	00003a06 	br	8094 <___vfprintf_internal_r+0x774>
    7fac:	84000214 	ori	r16,r16,8
    7fb0:	ac400007 	ldb	r17,0(r21)
    7fb4:	003ebc06 	br	7aa8 <__alt_data_end+0xfffd6d68>
    7fb8:	8025883a 	mov	r18,r16
    7fbc:	dc002903 	ldbu	r16,164(sp)
    7fc0:	e011883a 	mov	r8,fp
    7fc4:	84003fcc 	andi	r16,r16,255
    7fc8:	8007001e 	bne	r16,zero,9bcc <___vfprintf_internal_r+0x22ac>
    7fcc:	94800414 	ori	r18,r18,16
    7fd0:	9080080c 	andi	r2,r18,32
    7fd4:	1002fa26 	beq	r2,zero,8bc0 <___vfprintf_internal_r+0x12a0>
    7fd8:	d9002e17 	ldw	r4,184(sp)
    7fdc:	d9402a17 	ldw	r5,168(sp)
    7fe0:	d8002785 	stb	zero,158(sp)
    7fe4:	20800204 	addi	r2,r4,8
    7fe8:	24c00017 	ldw	r19,0(r4)
    7fec:	25800117 	ldw	r22,4(r4)
    7ff0:	2804b116 	blt	r5,zero,92b8 <___vfprintf_internal_r+0x1998>
    7ff4:	013fdfc4 	movi	r4,-129
    7ff8:	9d86b03a 	or	r3,r19,r22
    7ffc:	d8802e15 	stw	r2,184(sp)
    8000:	9124703a 	and	r18,r18,r4
    8004:	1802fb1e 	bne	r3,zero,8bf4 <___vfprintf_internal_r+0x12d4>
    8008:	d8c02a17 	ldw	r3,168(sp)
    800c:	0039883a 	mov	fp,zero
    8010:	1805e526 	beq	r3,zero,97a8 <___vfprintf_internal_r+0x1e88>
    8014:	0027883a 	mov	r19,zero
    8018:	002d883a 	mov	r22,zero
    801c:	dc001e04 	addi	r16,sp,120
    8020:	9806d0fa 	srli	r3,r19,3
    8024:	b008977a 	slli	r4,r22,29
    8028:	b02cd0fa 	srli	r22,r22,3
    802c:	9cc001cc 	andi	r19,r19,7
    8030:	98800c04 	addi	r2,r19,48
    8034:	843fffc4 	addi	r16,r16,-1
    8038:	20e6b03a 	or	r19,r4,r3
    803c:	80800005 	stb	r2,0(r16)
    8040:	9d86b03a 	or	r3,r19,r22
    8044:	183ff61e 	bne	r3,zero,8020 <__alt_data_end+0xfffd72e0>
    8048:	90c0004c 	andi	r3,r18,1
    804c:	18014126 	beq	r3,zero,8554 <___vfprintf_internal_r+0xc34>
    8050:	10803fcc 	andi	r2,r2,255
    8054:	1080201c 	xori	r2,r2,128
    8058:	10bfe004 	addi	r2,r2,-128
    805c:	00c00c04 	movi	r3,48
    8060:	10c13c26 	beq	r2,r3,8554 <___vfprintf_internal_r+0xc34>
    8064:	80ffffc5 	stb	r3,-1(r16)
    8068:	d8c02817 	ldw	r3,160(sp)
    806c:	80bfffc4 	addi	r2,r16,-1
    8070:	1021883a 	mov	r16,r2
    8074:	1887c83a 	sub	r3,r3,r2
    8078:	d8c02b15 	stw	r3,172(sp)
    807c:	d8802b17 	ldw	r2,172(sp)
    8080:	d9002a17 	ldw	r4,168(sp)
    8084:	1100010e 	bge	r2,r4,808c <___vfprintf_internal_r+0x76c>
    8088:	2005883a 	mov	r2,r4
    808c:	d8802915 	stw	r2,164(sp)
    8090:	d8003215 	stw	zero,200(sp)
    8094:	e7003fcc 	andi	fp,fp,255
    8098:	e700201c 	xori	fp,fp,128
    809c:	e73fe004 	addi	fp,fp,-128
    80a0:	e0000326 	beq	fp,zero,80b0 <___vfprintf_internal_r+0x790>
    80a4:	d8c02917 	ldw	r3,164(sp)
    80a8:	18c00044 	addi	r3,r3,1
    80ac:	d8c02915 	stw	r3,164(sp)
    80b0:	90c0008c 	andi	r3,r18,2
    80b4:	d8c02c15 	stw	r3,176(sp)
    80b8:	18000326 	beq	r3,zero,80c8 <___vfprintf_internal_r+0x7a8>
    80bc:	d8c02917 	ldw	r3,164(sp)
    80c0:	18c00084 	addi	r3,r3,2
    80c4:	d8c02915 	stw	r3,164(sp)
    80c8:	90c0210c 	andi	r3,r18,132
    80cc:	d8c03015 	stw	r3,192(sp)
    80d0:	1801c51e 	bne	r3,zero,87e8 <___vfprintf_internal_r+0xec8>
    80d4:	d9003117 	ldw	r4,196(sp)
    80d8:	d8c02917 	ldw	r3,164(sp)
    80dc:	20e7c83a 	sub	r19,r4,r3
    80e0:	04c1c10e 	bge	zero,r19,87e8 <___vfprintf_internal_r+0xec8>
    80e4:	02400404 	movi	r9,16
    80e8:	d8c02017 	ldw	r3,128(sp)
    80ec:	d8801f17 	ldw	r2,124(sp)
    80f0:	4cc52f0e 	bge	r9,r19,95b0 <___vfprintf_internal_r+0x1c90>
    80f4:	014000b4 	movhi	r5,2
    80f8:	29723984 	addi	r5,r5,-14106
    80fc:	dc403b15 	stw	r17,236(sp)
    8100:	d9403515 	stw	r5,212(sp)
    8104:	9823883a 	mov	r17,r19
    8108:	482d883a 	mov	r22,r9
    810c:	9027883a 	mov	r19,r18
    8110:	070001c4 	movi	fp,7
    8114:	8025883a 	mov	r18,r16
    8118:	dc002d17 	ldw	r16,180(sp)
    811c:	00000306 	br	812c <___vfprintf_internal_r+0x80c>
    8120:	8c7ffc04 	addi	r17,r17,-16
    8124:	42000204 	addi	r8,r8,8
    8128:	b440130e 	bge	r22,r17,8178 <___vfprintf_internal_r+0x858>
    812c:	010000b4 	movhi	r4,2
    8130:	18c00404 	addi	r3,r3,16
    8134:	10800044 	addi	r2,r2,1
    8138:	21323984 	addi	r4,r4,-14106
    813c:	41000015 	stw	r4,0(r8)
    8140:	45800115 	stw	r22,4(r8)
    8144:	d8c02015 	stw	r3,128(sp)
    8148:	d8801f15 	stw	r2,124(sp)
    814c:	e0bff40e 	bge	fp,r2,8120 <__alt_data_end+0xfffd73e0>
    8150:	d9801e04 	addi	r6,sp,120
    8154:	b80b883a 	mov	r5,r23
    8158:	8009883a 	mov	r4,r16
    815c:	000f08c0 	call	f08c <__sprint_r>
    8160:	103ef31e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8164:	8c7ffc04 	addi	r17,r17,-16
    8168:	d8c02017 	ldw	r3,128(sp)
    816c:	d8801f17 	ldw	r2,124(sp)
    8170:	da000404 	addi	r8,sp,16
    8174:	b47fed16 	blt	r22,r17,812c <__alt_data_end+0xfffd73ec>
    8178:	9021883a 	mov	r16,r18
    817c:	9825883a 	mov	r18,r19
    8180:	8827883a 	mov	r19,r17
    8184:	dc403b17 	ldw	r17,236(sp)
    8188:	d9403517 	ldw	r5,212(sp)
    818c:	98c7883a 	add	r3,r19,r3
    8190:	10800044 	addi	r2,r2,1
    8194:	41400015 	stw	r5,0(r8)
    8198:	44c00115 	stw	r19,4(r8)
    819c:	d8c02015 	stw	r3,128(sp)
    81a0:	d8801f15 	stw	r2,124(sp)
    81a4:	010001c4 	movi	r4,7
    81a8:	2082c516 	blt	r4,r2,8cc0 <___vfprintf_internal_r+0x13a0>
    81ac:	df002787 	ldb	fp,158(sp)
    81b0:	42000204 	addi	r8,r8,8
    81b4:	e0000c26 	beq	fp,zero,81e8 <___vfprintf_internal_r+0x8c8>
    81b8:	d8801f17 	ldw	r2,124(sp)
    81bc:	d9002784 	addi	r4,sp,158
    81c0:	18c00044 	addi	r3,r3,1
    81c4:	10800044 	addi	r2,r2,1
    81c8:	41000015 	stw	r4,0(r8)
    81cc:	01000044 	movi	r4,1
    81d0:	41000115 	stw	r4,4(r8)
    81d4:	d8c02015 	stw	r3,128(sp)
    81d8:	d8801f15 	stw	r2,124(sp)
    81dc:	010001c4 	movi	r4,7
    81e0:	20825e16 	blt	r4,r2,8b5c <___vfprintf_internal_r+0x123c>
    81e4:	42000204 	addi	r8,r8,8
    81e8:	d8802c17 	ldw	r2,176(sp)
    81ec:	10000c26 	beq	r2,zero,8220 <___vfprintf_internal_r+0x900>
    81f0:	d8801f17 	ldw	r2,124(sp)
    81f4:	d9002704 	addi	r4,sp,156
    81f8:	18c00084 	addi	r3,r3,2
    81fc:	10800044 	addi	r2,r2,1
    8200:	41000015 	stw	r4,0(r8)
    8204:	01000084 	movi	r4,2
    8208:	41000115 	stw	r4,4(r8)
    820c:	d8c02015 	stw	r3,128(sp)
    8210:	d8801f15 	stw	r2,124(sp)
    8214:	010001c4 	movi	r4,7
    8218:	20825816 	blt	r4,r2,8b7c <___vfprintf_internal_r+0x125c>
    821c:	42000204 	addi	r8,r8,8
    8220:	d9003017 	ldw	r4,192(sp)
    8224:	00802004 	movi	r2,128
    8228:	2081bb26 	beq	r4,r2,8918 <___vfprintf_internal_r+0xff8>
    822c:	d9402a17 	ldw	r5,168(sp)
    8230:	d8802b17 	ldw	r2,172(sp)
    8234:	28adc83a 	sub	r22,r5,r2
    8238:	0580310e 	bge	zero,r22,8300 <___vfprintf_internal_r+0x9e0>
    823c:	07000404 	movi	fp,16
    8240:	d8801f17 	ldw	r2,124(sp)
    8244:	e584360e 	bge	fp,r22,9320 <___vfprintf_internal_r+0x1a00>
    8248:	014000b4 	movhi	r5,2
    824c:	29723584 	addi	r5,r5,-14122
    8250:	dc402a15 	stw	r17,168(sp)
    8254:	d9402c15 	stw	r5,176(sp)
    8258:	b023883a 	mov	r17,r22
    825c:	04c001c4 	movi	r19,7
    8260:	a82d883a 	mov	r22,r21
    8264:	902b883a 	mov	r21,r18
    8268:	8025883a 	mov	r18,r16
    826c:	dc002d17 	ldw	r16,180(sp)
    8270:	00000306 	br	8280 <___vfprintf_internal_r+0x960>
    8274:	8c7ffc04 	addi	r17,r17,-16
    8278:	42000204 	addi	r8,r8,8
    827c:	e440110e 	bge	fp,r17,82c4 <___vfprintf_internal_r+0x9a4>
    8280:	18c00404 	addi	r3,r3,16
    8284:	10800044 	addi	r2,r2,1
    8288:	45000015 	stw	r20,0(r8)
    828c:	47000115 	stw	fp,4(r8)
    8290:	d8c02015 	stw	r3,128(sp)
    8294:	d8801f15 	stw	r2,124(sp)
    8298:	98bff60e 	bge	r19,r2,8274 <__alt_data_end+0xfffd7534>
    829c:	d9801e04 	addi	r6,sp,120
    82a0:	b80b883a 	mov	r5,r23
    82a4:	8009883a 	mov	r4,r16
    82a8:	000f08c0 	call	f08c <__sprint_r>
    82ac:	103ea01e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    82b0:	8c7ffc04 	addi	r17,r17,-16
    82b4:	d8c02017 	ldw	r3,128(sp)
    82b8:	d8801f17 	ldw	r2,124(sp)
    82bc:	da000404 	addi	r8,sp,16
    82c0:	e47fef16 	blt	fp,r17,8280 <__alt_data_end+0xfffd7540>
    82c4:	9021883a 	mov	r16,r18
    82c8:	a825883a 	mov	r18,r21
    82cc:	b02b883a 	mov	r21,r22
    82d0:	882d883a 	mov	r22,r17
    82d4:	dc402a17 	ldw	r17,168(sp)
    82d8:	d9002c17 	ldw	r4,176(sp)
    82dc:	1d87883a 	add	r3,r3,r22
    82e0:	10800044 	addi	r2,r2,1
    82e4:	41000015 	stw	r4,0(r8)
    82e8:	45800115 	stw	r22,4(r8)
    82ec:	d8c02015 	stw	r3,128(sp)
    82f0:	d8801f15 	stw	r2,124(sp)
    82f4:	010001c4 	movi	r4,7
    82f8:	20821016 	blt	r4,r2,8b3c <___vfprintf_internal_r+0x121c>
    82fc:	42000204 	addi	r8,r8,8
    8300:	9080400c 	andi	r2,r18,256
    8304:	10013a1e 	bne	r2,zero,87f0 <___vfprintf_internal_r+0xed0>
    8308:	d9402b17 	ldw	r5,172(sp)
    830c:	d8801f17 	ldw	r2,124(sp)
    8310:	44000015 	stw	r16,0(r8)
    8314:	1947883a 	add	r3,r3,r5
    8318:	10800044 	addi	r2,r2,1
    831c:	41400115 	stw	r5,4(r8)
    8320:	d8c02015 	stw	r3,128(sp)
    8324:	d8801f15 	stw	r2,124(sp)
    8328:	010001c4 	movi	r4,7
    832c:	2081f516 	blt	r4,r2,8b04 <___vfprintf_internal_r+0x11e4>
    8330:	42000204 	addi	r8,r8,8
    8334:	9480010c 	andi	r18,r18,4
    8338:	90003226 	beq	r18,zero,8404 <___vfprintf_internal_r+0xae4>
    833c:	d9403117 	ldw	r5,196(sp)
    8340:	d8802917 	ldw	r2,164(sp)
    8344:	28a1c83a 	sub	r16,r5,r2
    8348:	04002e0e 	bge	zero,r16,8404 <___vfprintf_internal_r+0xae4>
    834c:	04400404 	movi	r17,16
    8350:	d8801f17 	ldw	r2,124(sp)
    8354:	8c04c40e 	bge	r17,r16,9668 <___vfprintf_internal_r+0x1d48>
    8358:	014000b4 	movhi	r5,2
    835c:	29723984 	addi	r5,r5,-14106
    8360:	d9403515 	stw	r5,212(sp)
    8364:	048001c4 	movi	r18,7
    8368:	dcc02d17 	ldw	r19,180(sp)
    836c:	00000306 	br	837c <___vfprintf_internal_r+0xa5c>
    8370:	843ffc04 	addi	r16,r16,-16
    8374:	42000204 	addi	r8,r8,8
    8378:	8c00130e 	bge	r17,r16,83c8 <___vfprintf_internal_r+0xaa8>
    837c:	010000b4 	movhi	r4,2
    8380:	18c00404 	addi	r3,r3,16
    8384:	10800044 	addi	r2,r2,1
    8388:	21323984 	addi	r4,r4,-14106
    838c:	41000015 	stw	r4,0(r8)
    8390:	44400115 	stw	r17,4(r8)
    8394:	d8c02015 	stw	r3,128(sp)
    8398:	d8801f15 	stw	r2,124(sp)
    839c:	90bff40e 	bge	r18,r2,8370 <__alt_data_end+0xfffd7630>
    83a0:	d9801e04 	addi	r6,sp,120
    83a4:	b80b883a 	mov	r5,r23
    83a8:	9809883a 	mov	r4,r19
    83ac:	000f08c0 	call	f08c <__sprint_r>
    83b0:	103e5f1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    83b4:	843ffc04 	addi	r16,r16,-16
    83b8:	d8c02017 	ldw	r3,128(sp)
    83bc:	d8801f17 	ldw	r2,124(sp)
    83c0:	da000404 	addi	r8,sp,16
    83c4:	8c3fed16 	blt	r17,r16,837c <__alt_data_end+0xfffd763c>
    83c8:	d9403517 	ldw	r5,212(sp)
    83cc:	1c07883a 	add	r3,r3,r16
    83d0:	10800044 	addi	r2,r2,1
    83d4:	41400015 	stw	r5,0(r8)
    83d8:	44000115 	stw	r16,4(r8)
    83dc:	d8c02015 	stw	r3,128(sp)
    83e0:	d8801f15 	stw	r2,124(sp)
    83e4:	010001c4 	movi	r4,7
    83e8:	2080060e 	bge	r4,r2,8404 <___vfprintf_internal_r+0xae4>
    83ec:	d9002d17 	ldw	r4,180(sp)
    83f0:	d9801e04 	addi	r6,sp,120
    83f4:	b80b883a 	mov	r5,r23
    83f8:	000f08c0 	call	f08c <__sprint_r>
    83fc:	103e4c1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8400:	d8c02017 	ldw	r3,128(sp)
    8404:	d8803117 	ldw	r2,196(sp)
    8408:	d9002917 	ldw	r4,164(sp)
    840c:	1100010e 	bge	r2,r4,8414 <___vfprintf_internal_r+0xaf4>
    8410:	2005883a 	mov	r2,r4
    8414:	d9402f17 	ldw	r5,188(sp)
    8418:	288b883a 	add	r5,r5,r2
    841c:	d9402f15 	stw	r5,188(sp)
    8420:	1801c01e 	bne	r3,zero,8b24 <___vfprintf_internal_r+0x1204>
    8424:	a8800007 	ldb	r2,0(r21)
    8428:	d8001f15 	stw	zero,124(sp)
    842c:	da000404 	addi	r8,sp,16
    8430:	103d751e 	bne	r2,zero,7a08 <__alt_data_end+0xfffd6cc8>
    8434:	a823883a 	mov	r17,r21
    8438:	003d8b06 	br	7a68 <__alt_data_end+0xfffd6d28>
    843c:	8025883a 	mov	r18,r16
    8440:	dc002903 	ldbu	r16,164(sp)
    8444:	e011883a 	mov	r8,fp
    8448:	84003fcc 	andi	r16,r16,255
    844c:	8005e51e 	bne	r16,zero,9be4 <___vfprintf_internal_r+0x22c4>
    8450:	94800414 	ori	r18,r18,16
    8454:	9080080c 	andi	r2,r18,32
    8458:	10022b26 	beq	r2,zero,8d08 <___vfprintf_internal_r+0x13e8>
    845c:	d9002e17 	ldw	r4,184(sp)
    8460:	d9402a17 	ldw	r5,168(sp)
    8464:	d8002785 	stb	zero,158(sp)
    8468:	20c00204 	addi	r3,r4,8
    846c:	24c00017 	ldw	r19,0(r4)
    8470:	25800117 	ldw	r22,4(r4)
    8474:	28042e16 	blt	r5,zero,9530 <___vfprintf_internal_r+0x1c10>
    8478:	013fdfc4 	movi	r4,-129
    847c:	9d84b03a 	or	r2,r19,r22
    8480:	d8c02e15 	stw	r3,184(sp)
    8484:	9124703a 	and	r18,r18,r4
    8488:	0039883a 	mov	fp,zero
    848c:	103e801e 	bne	r2,zero,7e90 <__alt_data_end+0xfffd7150>
    8490:	d9002a17 	ldw	r4,168(sp)
    8494:	2002e01e 	bne	r4,zero,9018 <___vfprintf_internal_r+0x16f8>
    8498:	d8002a15 	stw	zero,168(sp)
    849c:	d8002b15 	stw	zero,172(sp)
    84a0:	dc001e04 	addi	r16,sp,120
    84a4:	003ef506 	br	807c <__alt_data_end+0xfffd733c>
    84a8:	8025883a 	mov	r18,r16
    84ac:	dc002903 	ldbu	r16,164(sp)
    84b0:	e011883a 	mov	r8,fp
    84b4:	84003fcc 	andi	r16,r16,255
    84b8:	8005ba1e 	bne	r16,zero,9ba4 <___vfprintf_internal_r+0x2284>
    84bc:	010000b4 	movhi	r4,2
    84c0:	21322904 	addi	r4,r4,-14172
    84c4:	d9003915 	stw	r4,228(sp)
    84c8:	9080080c 	andi	r2,r18,32
    84cc:	10006126 	beq	r2,zero,8654 <___vfprintf_internal_r+0xd34>
    84d0:	d9402e17 	ldw	r5,184(sp)
    84d4:	2cc00017 	ldw	r19,0(r5)
    84d8:	2d800117 	ldw	r22,4(r5)
    84dc:	29400204 	addi	r5,r5,8
    84e0:	d9402e15 	stw	r5,184(sp)
    84e4:	9080004c 	andi	r2,r18,1
    84e8:	1001ac26 	beq	r2,zero,8b9c <___vfprintf_internal_r+0x127c>
    84ec:	9d84b03a 	or	r2,r19,r22
    84f0:	10038526 	beq	r2,zero,9308 <___vfprintf_internal_r+0x19e8>
    84f4:	d8c02a17 	ldw	r3,168(sp)
    84f8:	00800c04 	movi	r2,48
    84fc:	d8802705 	stb	r2,156(sp)
    8500:	dc402745 	stb	r17,157(sp)
    8504:	d8002785 	stb	zero,158(sp)
    8508:	90800094 	ori	r2,r18,2
    850c:	18047916 	blt	r3,zero,96f4 <___vfprintf_internal_r+0x1dd4>
    8510:	00bfdfc4 	movi	r2,-129
    8514:	90a4703a 	and	r18,r18,r2
    8518:	94800094 	ori	r18,r18,2
    851c:	0039883a 	mov	fp,zero
    8520:	d9003917 	ldw	r4,228(sp)
    8524:	dc001e04 	addi	r16,sp,120
    8528:	988003cc 	andi	r2,r19,15
    852c:	b006973a 	slli	r3,r22,28
    8530:	2085883a 	add	r2,r4,r2
    8534:	9826d13a 	srli	r19,r19,4
    8538:	10800003 	ldbu	r2,0(r2)
    853c:	b02cd13a 	srli	r22,r22,4
    8540:	843fffc4 	addi	r16,r16,-1
    8544:	1ce6b03a 	or	r19,r3,r19
    8548:	80800005 	stb	r2,0(r16)
    854c:	9d84b03a 	or	r2,r19,r22
    8550:	103ff51e 	bne	r2,zero,8528 <__alt_data_end+0xfffd77e8>
    8554:	d8c02817 	ldw	r3,160(sp)
    8558:	1c07c83a 	sub	r3,r3,r16
    855c:	d8c02b15 	stw	r3,172(sp)
    8560:	003ec606 	br	807c <__alt_data_end+0xfffd733c>
    8564:	8025883a 	mov	r18,r16
    8568:	dc002903 	ldbu	r16,164(sp)
    856c:	e011883a 	mov	r8,fp
    8570:	84003fcc 	andi	r16,r16,255
    8574:	803e9626 	beq	r16,zero,7fd0 <__alt_data_end+0xfffd7290>
    8578:	d8c02b03 	ldbu	r3,172(sp)
    857c:	d8c02785 	stb	r3,158(sp)
    8580:	003e9306 	br	7fd0 <__alt_data_end+0xfffd7290>
    8584:	00c00044 	movi	r3,1
    8588:	d8c02905 	stb	r3,164(sp)
    858c:	00c00ac4 	movi	r3,43
    8590:	d8c02b05 	stb	r3,172(sp)
    8594:	ac400007 	ldb	r17,0(r21)
    8598:	003d4306 	br	7aa8 <__alt_data_end+0xfffd6d68>
    859c:	84000814 	ori	r16,r16,32
    85a0:	ac400007 	ldb	r17,0(r21)
    85a4:	003d4006 	br	7aa8 <__alt_data_end+0xfffd6d68>
    85a8:	d8802e17 	ldw	r2,184(sp)
    85ac:	8025883a 	mov	r18,r16
    85b0:	d8002785 	stb	zero,158(sp)
    85b4:	14000017 	ldw	r16,0(r2)
    85b8:	e011883a 	mov	r8,fp
    85bc:	14c00104 	addi	r19,r2,4
    85c0:	80042d26 	beq	r16,zero,9678 <___vfprintf_internal_r+0x1d58>
    85c4:	d8c02a17 	ldw	r3,168(sp)
    85c8:	1803e416 	blt	r3,zero,955c <___vfprintf_internal_r+0x1c3c>
    85cc:	180d883a 	mov	r6,r3
    85d0:	000b883a 	mov	r5,zero
    85d4:	8009883a 	mov	r4,r16
    85d8:	df003d15 	stw	fp,244(sp)
    85dc:	000d2580 	call	d258 <memchr>
    85e0:	da003d17 	ldw	r8,244(sp)
    85e4:	10046826 	beq	r2,zero,9788 <___vfprintf_internal_r+0x1e68>
    85e8:	1405c83a 	sub	r2,r2,r16
    85ec:	d8802b15 	stw	r2,172(sp)
    85f0:	1003e016 	blt	r2,zero,9574 <___vfprintf_internal_r+0x1c54>
    85f4:	df002783 	ldbu	fp,158(sp)
    85f8:	d8802915 	stw	r2,164(sp)
    85fc:	dcc02e15 	stw	r19,184(sp)
    8600:	d8002a15 	stw	zero,168(sp)
    8604:	d8003215 	stw	zero,200(sp)
    8608:	003ea206 	br	8094 <__alt_data_end+0xfffd7354>
    860c:	8025883a 	mov	r18,r16
    8610:	dc002903 	ldbu	r16,164(sp)
    8614:	e011883a 	mov	r8,fp
    8618:	84003fcc 	andi	r16,r16,255
    861c:	803f8d26 	beq	r16,zero,8454 <__alt_data_end+0xfffd7714>
    8620:	d8c02b03 	ldbu	r3,172(sp)
    8624:	d8c02785 	stb	r3,158(sp)
    8628:	003f8a06 	br	8454 <__alt_data_end+0xfffd7714>
    862c:	8025883a 	mov	r18,r16
    8630:	dc002903 	ldbu	r16,164(sp)
    8634:	e011883a 	mov	r8,fp
    8638:	84003fcc 	andi	r16,r16,255
    863c:	8005661e 	bne	r16,zero,9bd8 <___vfprintf_internal_r+0x22b8>
    8640:	010000b4 	movhi	r4,2
    8644:	21322e04 	addi	r4,r4,-14152
    8648:	d9003915 	stw	r4,228(sp)
    864c:	9080080c 	andi	r2,r18,32
    8650:	103f9f1e 	bne	r2,zero,84d0 <__alt_data_end+0xfffd7790>
    8654:	9080040c 	andi	r2,r18,16
    8658:	1002eb26 	beq	r2,zero,9208 <___vfprintf_internal_r+0x18e8>
    865c:	d8802e17 	ldw	r2,184(sp)
    8660:	002d883a 	mov	r22,zero
    8664:	14c00017 	ldw	r19,0(r2)
    8668:	10800104 	addi	r2,r2,4
    866c:	d8802e15 	stw	r2,184(sp)
    8670:	003f9c06 	br	84e4 <__alt_data_end+0xfffd77a4>
    8674:	d8802b07 	ldb	r2,172(sp)
    8678:	1002e11e 	bne	r2,zero,9200 <___vfprintf_internal_r+0x18e0>
    867c:	00c00044 	movi	r3,1
    8680:	d8c02905 	stb	r3,164(sp)
    8684:	00c00804 	movi	r3,32
    8688:	d8c02b05 	stb	r3,172(sp)
    868c:	ac400007 	ldb	r17,0(r21)
    8690:	003d0506 	br	7aa8 <__alt_data_end+0xfffd6d68>
    8694:	84000054 	ori	r16,r16,1
    8698:	ac400007 	ldb	r17,0(r21)
    869c:	003d0206 	br	7aa8 <__alt_data_end+0xfffd6d68>
    86a0:	8025883a 	mov	r18,r16
    86a4:	dc002903 	ldbu	r16,164(sp)
    86a8:	e011883a 	mov	r8,fp
    86ac:	84003fcc 	andi	r16,r16,255
    86b0:	803de726 	beq	r16,zero,7e50 <__alt_data_end+0xfffd7110>
    86b4:	d8c02b03 	ldbu	r3,172(sp)
    86b8:	d8c02785 	stb	r3,158(sp)
    86bc:	003de406 	br	7e50 <__alt_data_end+0xfffd7110>
    86c0:	84001014 	ori	r16,r16,64
    86c4:	ac400007 	ldb	r17,0(r21)
    86c8:	003cf706 	br	7aa8 <__alt_data_end+0xfffd6d68>
    86cc:	ac400007 	ldb	r17,0(r21)
    86d0:	00801b04 	movi	r2,108
    86d4:	88838f26 	beq	r17,r2,9514 <___vfprintf_internal_r+0x1bf4>
    86d8:	84000414 	ori	r16,r16,16
    86dc:	003cf206 	br	7aa8 <__alt_data_end+0xfffd6d68>
    86e0:	8025883a 	mov	r18,r16
    86e4:	dc002903 	ldbu	r16,164(sp)
    86e8:	e011883a 	mov	r8,fp
    86ec:	84003fcc 	andi	r16,r16,255
    86f0:	80053f1e 	bne	r16,zero,9bf0 <___vfprintf_internal_r+0x22d0>
    86f4:	9080080c 	andi	r2,r18,32
    86f8:	1002d226 	beq	r2,zero,9244 <___vfprintf_internal_r+0x1924>
    86fc:	d9002e17 	ldw	r4,184(sp)
    8700:	d9402f17 	ldw	r5,188(sp)
    8704:	20800017 	ldw	r2,0(r4)
    8708:	2807d7fa 	srai	r3,r5,31
    870c:	21000104 	addi	r4,r4,4
    8710:	d9002e15 	stw	r4,184(sp)
    8714:	11400015 	stw	r5,0(r2)
    8718:	10c00115 	stw	r3,4(r2)
    871c:	003cb806 	br	7a00 <__alt_data_end+0xfffd6cc0>
    8720:	d8c02e17 	ldw	r3,184(sp)
    8724:	d9002e17 	ldw	r4,184(sp)
    8728:	8025883a 	mov	r18,r16
    872c:	18800017 	ldw	r2,0(r3)
    8730:	21000104 	addi	r4,r4,4
    8734:	00c00044 	movi	r3,1
    8738:	e011883a 	mov	r8,fp
    873c:	d8c02915 	stw	r3,164(sp)
    8740:	d8002785 	stb	zero,158(sp)
    8744:	d8801405 	stb	r2,80(sp)
    8748:	d9002e15 	stw	r4,184(sp)
    874c:	d8c02b15 	stw	r3,172(sp)
    8750:	d8002a15 	stw	zero,168(sp)
    8754:	d8003215 	stw	zero,200(sp)
    8758:	dc001404 	addi	r16,sp,80
    875c:	0039883a 	mov	fp,zero
    8760:	003e5306 	br	80b0 <__alt_data_end+0xfffd7370>
    8764:	010000b4 	movhi	r4,2
    8768:	21322e04 	addi	r4,r4,-14152
    876c:	0039883a 	mov	fp,zero
    8770:	d9003915 	stw	r4,228(sp)
    8774:	04401e04 	movi	r17,120
    8778:	003f6906 	br	8520 <__alt_data_end+0xfffd77e0>
    877c:	8025883a 	mov	r18,r16
    8780:	dc002903 	ldbu	r16,164(sp)
    8784:	e011883a 	mov	r8,fp
    8788:	84003fcc 	andi	r16,r16,255
    878c:	8005081e 	bne	r16,zero,9bb0 <___vfprintf_internal_r+0x2290>
    8790:	883d6126 	beq	r17,zero,7d18 <__alt_data_end+0xfffd6fd8>
    8794:	00c00044 	movi	r3,1
    8798:	d8c02915 	stw	r3,164(sp)
    879c:	dc401405 	stb	r17,80(sp)
    87a0:	d8002785 	stb	zero,158(sp)
    87a4:	003fe906 	br	874c <__alt_data_end+0xfffd7a0c>
    87a8:	014000b4 	movhi	r5,2
    87ac:	29722e04 	addi	r5,r5,-14152
    87b0:	d9403915 	stw	r5,228(sp)
    87b4:	d8c02e15 	stw	r3,184(sp)
    87b8:	1025883a 	mov	r18,r2
    87bc:	04401e04 	movi	r17,120
    87c0:	9d84b03a 	or	r2,r19,r22
    87c4:	1000fc1e 	bne	r2,zero,8bb8 <___vfprintf_internal_r+0x1298>
    87c8:	0039883a 	mov	fp,zero
    87cc:	00800084 	movi	r2,2
    87d0:	10803fcc 	andi	r2,r2,255
    87d4:	00c00044 	movi	r3,1
    87d8:	10c20f26 	beq	r2,r3,9018 <___vfprintf_internal_r+0x16f8>
    87dc:	00c00084 	movi	r3,2
    87e0:	10fd3326 	beq	r2,r3,7cb0 <__alt_data_end+0xfffd6f70>
    87e4:	003e0b06 	br	8014 <__alt_data_end+0xfffd72d4>
    87e8:	d8c02017 	ldw	r3,128(sp)
    87ec:	003e7106 	br	81b4 <__alt_data_end+0xfffd7474>
    87f0:	00801944 	movi	r2,101
    87f4:	14407e0e 	bge	r2,r17,89f0 <___vfprintf_internal_r+0x10d0>
    87f8:	d9003617 	ldw	r4,216(sp)
    87fc:	d9403817 	ldw	r5,224(sp)
    8800:	000d883a 	mov	r6,zero
    8804:	000f883a 	mov	r7,zero
    8808:	d8c03c15 	stw	r3,240(sp)
    880c:	da003d15 	stw	r8,244(sp)
    8810:	00061b80 	call	61b8 <__eqdf2>
    8814:	d8c03c17 	ldw	r3,240(sp)
    8818:	da003d17 	ldw	r8,244(sp)
    881c:	1000f71e 	bne	r2,zero,8bfc <___vfprintf_internal_r+0x12dc>
    8820:	d8801f17 	ldw	r2,124(sp)
    8824:	010000b4 	movhi	r4,2
    8828:	21323504 	addi	r4,r4,-14124
    882c:	18c00044 	addi	r3,r3,1
    8830:	10800044 	addi	r2,r2,1
    8834:	41000015 	stw	r4,0(r8)
    8838:	01000044 	movi	r4,1
    883c:	41000115 	stw	r4,4(r8)
    8840:	d8c02015 	stw	r3,128(sp)
    8844:	d8801f15 	stw	r2,124(sp)
    8848:	010001c4 	movi	r4,7
    884c:	2082b816 	blt	r4,r2,9330 <___vfprintf_internal_r+0x1a10>
    8850:	42000204 	addi	r8,r8,8
    8854:	d8802617 	ldw	r2,152(sp)
    8858:	d9403317 	ldw	r5,204(sp)
    885c:	11400216 	blt	r2,r5,8868 <___vfprintf_internal_r+0xf48>
    8860:	9080004c 	andi	r2,r18,1
    8864:	103eb326 	beq	r2,zero,8334 <__alt_data_end+0xfffd75f4>
    8868:	d8803717 	ldw	r2,220(sp)
    886c:	d9003417 	ldw	r4,208(sp)
    8870:	d9403717 	ldw	r5,220(sp)
    8874:	1887883a 	add	r3,r3,r2
    8878:	d8801f17 	ldw	r2,124(sp)
    887c:	41000015 	stw	r4,0(r8)
    8880:	41400115 	stw	r5,4(r8)
    8884:	10800044 	addi	r2,r2,1
    8888:	d8c02015 	stw	r3,128(sp)
    888c:	d8801f15 	stw	r2,124(sp)
    8890:	010001c4 	movi	r4,7
    8894:	20832916 	blt	r4,r2,953c <___vfprintf_internal_r+0x1c1c>
    8898:	42000204 	addi	r8,r8,8
    889c:	d8803317 	ldw	r2,204(sp)
    88a0:	143fffc4 	addi	r16,r2,-1
    88a4:	043ea30e 	bge	zero,r16,8334 <__alt_data_end+0xfffd75f4>
    88a8:	04400404 	movi	r17,16
    88ac:	d8801f17 	ldw	r2,124(sp)
    88b0:	8c00880e 	bge	r17,r16,8ad4 <___vfprintf_internal_r+0x11b4>
    88b4:	014000b4 	movhi	r5,2
    88b8:	29723584 	addi	r5,r5,-14122
    88bc:	d9402c15 	stw	r5,176(sp)
    88c0:	058001c4 	movi	r22,7
    88c4:	dcc02d17 	ldw	r19,180(sp)
    88c8:	00000306 	br	88d8 <___vfprintf_internal_r+0xfb8>
    88cc:	42000204 	addi	r8,r8,8
    88d0:	843ffc04 	addi	r16,r16,-16
    88d4:	8c00820e 	bge	r17,r16,8ae0 <___vfprintf_internal_r+0x11c0>
    88d8:	18c00404 	addi	r3,r3,16
    88dc:	10800044 	addi	r2,r2,1
    88e0:	45000015 	stw	r20,0(r8)
    88e4:	44400115 	stw	r17,4(r8)
    88e8:	d8c02015 	stw	r3,128(sp)
    88ec:	d8801f15 	stw	r2,124(sp)
    88f0:	b0bff60e 	bge	r22,r2,88cc <__alt_data_end+0xfffd7b8c>
    88f4:	d9801e04 	addi	r6,sp,120
    88f8:	b80b883a 	mov	r5,r23
    88fc:	9809883a 	mov	r4,r19
    8900:	000f08c0 	call	f08c <__sprint_r>
    8904:	103d0a1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8908:	d8c02017 	ldw	r3,128(sp)
    890c:	d8801f17 	ldw	r2,124(sp)
    8910:	da000404 	addi	r8,sp,16
    8914:	003fee06 	br	88d0 <__alt_data_end+0xfffd7b90>
    8918:	d9403117 	ldw	r5,196(sp)
    891c:	d8802917 	ldw	r2,164(sp)
    8920:	28adc83a 	sub	r22,r5,r2
    8924:	05be410e 	bge	zero,r22,822c <__alt_data_end+0xfffd74ec>
    8928:	07000404 	movi	fp,16
    892c:	d8801f17 	ldw	r2,124(sp)
    8930:	e5838f0e 	bge	fp,r22,9770 <___vfprintf_internal_r+0x1e50>
    8934:	014000b4 	movhi	r5,2
    8938:	29723584 	addi	r5,r5,-14122
    893c:	dc403015 	stw	r17,192(sp)
    8940:	d9402c15 	stw	r5,176(sp)
    8944:	b023883a 	mov	r17,r22
    8948:	04c001c4 	movi	r19,7
    894c:	a82d883a 	mov	r22,r21
    8950:	902b883a 	mov	r21,r18
    8954:	8025883a 	mov	r18,r16
    8958:	dc002d17 	ldw	r16,180(sp)
    895c:	00000306 	br	896c <___vfprintf_internal_r+0x104c>
    8960:	8c7ffc04 	addi	r17,r17,-16
    8964:	42000204 	addi	r8,r8,8
    8968:	e440110e 	bge	fp,r17,89b0 <___vfprintf_internal_r+0x1090>
    896c:	18c00404 	addi	r3,r3,16
    8970:	10800044 	addi	r2,r2,1
    8974:	45000015 	stw	r20,0(r8)
    8978:	47000115 	stw	fp,4(r8)
    897c:	d8c02015 	stw	r3,128(sp)
    8980:	d8801f15 	stw	r2,124(sp)
    8984:	98bff60e 	bge	r19,r2,8960 <__alt_data_end+0xfffd7c20>
    8988:	d9801e04 	addi	r6,sp,120
    898c:	b80b883a 	mov	r5,r23
    8990:	8009883a 	mov	r4,r16
    8994:	000f08c0 	call	f08c <__sprint_r>
    8998:	103ce51e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    899c:	8c7ffc04 	addi	r17,r17,-16
    89a0:	d8c02017 	ldw	r3,128(sp)
    89a4:	d8801f17 	ldw	r2,124(sp)
    89a8:	da000404 	addi	r8,sp,16
    89ac:	e47fef16 	blt	fp,r17,896c <__alt_data_end+0xfffd7c2c>
    89b0:	9021883a 	mov	r16,r18
    89b4:	a825883a 	mov	r18,r21
    89b8:	b02b883a 	mov	r21,r22
    89bc:	882d883a 	mov	r22,r17
    89c0:	dc403017 	ldw	r17,192(sp)
    89c4:	d9002c17 	ldw	r4,176(sp)
    89c8:	1d87883a 	add	r3,r3,r22
    89cc:	10800044 	addi	r2,r2,1
    89d0:	41000015 	stw	r4,0(r8)
    89d4:	45800115 	stw	r22,4(r8)
    89d8:	d8c02015 	stw	r3,128(sp)
    89dc:	d8801f15 	stw	r2,124(sp)
    89e0:	010001c4 	movi	r4,7
    89e4:	20818e16 	blt	r4,r2,9020 <___vfprintf_internal_r+0x1700>
    89e8:	42000204 	addi	r8,r8,8
    89ec:	003e0f06 	br	822c <__alt_data_end+0xfffd74ec>
    89f0:	d9403317 	ldw	r5,204(sp)
    89f4:	00800044 	movi	r2,1
    89f8:	18c00044 	addi	r3,r3,1
    89fc:	1141530e 	bge	r2,r5,8f4c <___vfprintf_internal_r+0x162c>
    8a00:	dc401f17 	ldw	r17,124(sp)
    8a04:	00800044 	movi	r2,1
    8a08:	40800115 	stw	r2,4(r8)
    8a0c:	8c400044 	addi	r17,r17,1
    8a10:	44000015 	stw	r16,0(r8)
    8a14:	d8c02015 	stw	r3,128(sp)
    8a18:	dc401f15 	stw	r17,124(sp)
    8a1c:	008001c4 	movi	r2,7
    8a20:	14416b16 	blt	r2,r17,8fd0 <___vfprintf_internal_r+0x16b0>
    8a24:	42000204 	addi	r8,r8,8
    8a28:	d8803717 	ldw	r2,220(sp)
    8a2c:	d9003417 	ldw	r4,208(sp)
    8a30:	8c400044 	addi	r17,r17,1
    8a34:	10c7883a 	add	r3,r2,r3
    8a38:	40800115 	stw	r2,4(r8)
    8a3c:	41000015 	stw	r4,0(r8)
    8a40:	d8c02015 	stw	r3,128(sp)
    8a44:	dc401f15 	stw	r17,124(sp)
    8a48:	008001c4 	movi	r2,7
    8a4c:	14416916 	blt	r2,r17,8ff4 <___vfprintf_internal_r+0x16d4>
    8a50:	45800204 	addi	r22,r8,8
    8a54:	d9003617 	ldw	r4,216(sp)
    8a58:	d9403817 	ldw	r5,224(sp)
    8a5c:	000d883a 	mov	r6,zero
    8a60:	000f883a 	mov	r7,zero
    8a64:	d8c03c15 	stw	r3,240(sp)
    8a68:	00061b80 	call	61b8 <__eqdf2>
    8a6c:	d8c03c17 	ldw	r3,240(sp)
    8a70:	1000bc26 	beq	r2,zero,8d64 <___vfprintf_internal_r+0x1444>
    8a74:	d9403317 	ldw	r5,204(sp)
    8a78:	84000044 	addi	r16,r16,1
    8a7c:	8c400044 	addi	r17,r17,1
    8a80:	28bfffc4 	addi	r2,r5,-1
    8a84:	1887883a 	add	r3,r3,r2
    8a88:	b0800115 	stw	r2,4(r22)
    8a8c:	b4000015 	stw	r16,0(r22)
    8a90:	d8c02015 	stw	r3,128(sp)
    8a94:	dc401f15 	stw	r17,124(sp)
    8a98:	008001c4 	movi	r2,7
    8a9c:	14414316 	blt	r2,r17,8fac <___vfprintf_internal_r+0x168c>
    8aa0:	b5800204 	addi	r22,r22,8
    8aa4:	d9003a17 	ldw	r4,232(sp)
    8aa8:	df0022c4 	addi	fp,sp,139
    8aac:	8c400044 	addi	r17,r17,1
    8ab0:	20c7883a 	add	r3,r4,r3
    8ab4:	b7000015 	stw	fp,0(r22)
    8ab8:	b1000115 	stw	r4,4(r22)
    8abc:	d8c02015 	stw	r3,128(sp)
    8ac0:	dc401f15 	stw	r17,124(sp)
    8ac4:	008001c4 	movi	r2,7
    8ac8:	14400e16 	blt	r2,r17,8b04 <___vfprintf_internal_r+0x11e4>
    8acc:	b2000204 	addi	r8,r22,8
    8ad0:	003e1806 	br	8334 <__alt_data_end+0xfffd75f4>
    8ad4:	010000b4 	movhi	r4,2
    8ad8:	21323584 	addi	r4,r4,-14122
    8adc:	d9002c15 	stw	r4,176(sp)
    8ae0:	d9002c17 	ldw	r4,176(sp)
    8ae4:	1c07883a 	add	r3,r3,r16
    8ae8:	44000115 	stw	r16,4(r8)
    8aec:	41000015 	stw	r4,0(r8)
    8af0:	10800044 	addi	r2,r2,1
    8af4:	d8c02015 	stw	r3,128(sp)
    8af8:	d8801f15 	stw	r2,124(sp)
    8afc:	010001c4 	movi	r4,7
    8b00:	20be0b0e 	bge	r4,r2,8330 <__alt_data_end+0xfffd75f0>
    8b04:	d9002d17 	ldw	r4,180(sp)
    8b08:	d9801e04 	addi	r6,sp,120
    8b0c:	b80b883a 	mov	r5,r23
    8b10:	000f08c0 	call	f08c <__sprint_r>
    8b14:	103c861e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8b18:	d8c02017 	ldw	r3,128(sp)
    8b1c:	da000404 	addi	r8,sp,16
    8b20:	003e0406 	br	8334 <__alt_data_end+0xfffd75f4>
    8b24:	d9002d17 	ldw	r4,180(sp)
    8b28:	d9801e04 	addi	r6,sp,120
    8b2c:	b80b883a 	mov	r5,r23
    8b30:	000f08c0 	call	f08c <__sprint_r>
    8b34:	103e3b26 	beq	r2,zero,8424 <__alt_data_end+0xfffd76e4>
    8b38:	003c7d06 	br	7d30 <__alt_data_end+0xfffd6ff0>
    8b3c:	d9002d17 	ldw	r4,180(sp)
    8b40:	d9801e04 	addi	r6,sp,120
    8b44:	b80b883a 	mov	r5,r23
    8b48:	000f08c0 	call	f08c <__sprint_r>
    8b4c:	103c781e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8b50:	d8c02017 	ldw	r3,128(sp)
    8b54:	da000404 	addi	r8,sp,16
    8b58:	003de906 	br	8300 <__alt_data_end+0xfffd75c0>
    8b5c:	d9002d17 	ldw	r4,180(sp)
    8b60:	d9801e04 	addi	r6,sp,120
    8b64:	b80b883a 	mov	r5,r23
    8b68:	000f08c0 	call	f08c <__sprint_r>
    8b6c:	103c701e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8b70:	d8c02017 	ldw	r3,128(sp)
    8b74:	da000404 	addi	r8,sp,16
    8b78:	003d9b06 	br	81e8 <__alt_data_end+0xfffd74a8>
    8b7c:	d9002d17 	ldw	r4,180(sp)
    8b80:	d9801e04 	addi	r6,sp,120
    8b84:	b80b883a 	mov	r5,r23
    8b88:	000f08c0 	call	f08c <__sprint_r>
    8b8c:	103c681e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8b90:	d8c02017 	ldw	r3,128(sp)
    8b94:	da000404 	addi	r8,sp,16
    8b98:	003da106 	br	8220 <__alt_data_end+0xfffd74e0>
    8b9c:	d9402a17 	ldw	r5,168(sp)
    8ba0:	d8002785 	stb	zero,158(sp)
    8ba4:	283f0616 	blt	r5,zero,87c0 <__alt_data_end+0xfffd7a80>
    8ba8:	00ffdfc4 	movi	r3,-129
    8bac:	9d84b03a 	or	r2,r19,r22
    8bb0:	90e4703a 	and	r18,r18,r3
    8bb4:	103c3b26 	beq	r2,zero,7ca4 <__alt_data_end+0xfffd6f64>
    8bb8:	0039883a 	mov	fp,zero
    8bbc:	003e5806 	br	8520 <__alt_data_end+0xfffd77e0>
    8bc0:	9080040c 	andi	r2,r18,16
    8bc4:	1001b326 	beq	r2,zero,9294 <___vfprintf_internal_r+0x1974>
    8bc8:	d8c02e17 	ldw	r3,184(sp)
    8bcc:	d9002a17 	ldw	r4,168(sp)
    8bd0:	d8002785 	stb	zero,158(sp)
    8bd4:	18800104 	addi	r2,r3,4
    8bd8:	1cc00017 	ldw	r19,0(r3)
    8bdc:	002d883a 	mov	r22,zero
    8be0:	2001b516 	blt	r4,zero,92b8 <___vfprintf_internal_r+0x1998>
    8be4:	00ffdfc4 	movi	r3,-129
    8be8:	d8802e15 	stw	r2,184(sp)
    8bec:	90e4703a 	and	r18,r18,r3
    8bf0:	983d0526 	beq	r19,zero,8008 <__alt_data_end+0xfffd72c8>
    8bf4:	0039883a 	mov	fp,zero
    8bf8:	003d0806 	br	801c <__alt_data_end+0xfffd72dc>
    8bfc:	dc402617 	ldw	r17,152(sp)
    8c00:	0441d30e 	bge	zero,r17,9350 <___vfprintf_internal_r+0x1a30>
    8c04:	dc403217 	ldw	r17,200(sp)
    8c08:	d8803317 	ldw	r2,204(sp)
    8c0c:	1440010e 	bge	r2,r17,8c14 <___vfprintf_internal_r+0x12f4>
    8c10:	1023883a 	mov	r17,r2
    8c14:	04400a0e 	bge	zero,r17,8c40 <___vfprintf_internal_r+0x1320>
    8c18:	d8801f17 	ldw	r2,124(sp)
    8c1c:	1c47883a 	add	r3,r3,r17
    8c20:	44000015 	stw	r16,0(r8)
    8c24:	10800044 	addi	r2,r2,1
    8c28:	44400115 	stw	r17,4(r8)
    8c2c:	d8c02015 	stw	r3,128(sp)
    8c30:	d8801f15 	stw	r2,124(sp)
    8c34:	010001c4 	movi	r4,7
    8c38:	20826516 	blt	r4,r2,95d0 <___vfprintf_internal_r+0x1cb0>
    8c3c:	42000204 	addi	r8,r8,8
    8c40:	88026116 	blt	r17,zero,95c8 <___vfprintf_internal_r+0x1ca8>
    8c44:	d9003217 	ldw	r4,200(sp)
    8c48:	2463c83a 	sub	r17,r4,r17
    8c4c:	04407b0e 	bge	zero,r17,8e3c <___vfprintf_internal_r+0x151c>
    8c50:	05800404 	movi	r22,16
    8c54:	d8801f17 	ldw	r2,124(sp)
    8c58:	b4419d0e 	bge	r22,r17,92d0 <___vfprintf_internal_r+0x19b0>
    8c5c:	010000b4 	movhi	r4,2
    8c60:	21323584 	addi	r4,r4,-14122
    8c64:	d9002c15 	stw	r4,176(sp)
    8c68:	070001c4 	movi	fp,7
    8c6c:	dcc02d17 	ldw	r19,180(sp)
    8c70:	00000306 	br	8c80 <___vfprintf_internal_r+0x1360>
    8c74:	42000204 	addi	r8,r8,8
    8c78:	8c7ffc04 	addi	r17,r17,-16
    8c7c:	b441970e 	bge	r22,r17,92dc <___vfprintf_internal_r+0x19bc>
    8c80:	18c00404 	addi	r3,r3,16
    8c84:	10800044 	addi	r2,r2,1
    8c88:	45000015 	stw	r20,0(r8)
    8c8c:	45800115 	stw	r22,4(r8)
    8c90:	d8c02015 	stw	r3,128(sp)
    8c94:	d8801f15 	stw	r2,124(sp)
    8c98:	e0bff60e 	bge	fp,r2,8c74 <__alt_data_end+0xfffd7f34>
    8c9c:	d9801e04 	addi	r6,sp,120
    8ca0:	b80b883a 	mov	r5,r23
    8ca4:	9809883a 	mov	r4,r19
    8ca8:	000f08c0 	call	f08c <__sprint_r>
    8cac:	103c201e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8cb0:	d8c02017 	ldw	r3,128(sp)
    8cb4:	d8801f17 	ldw	r2,124(sp)
    8cb8:	da000404 	addi	r8,sp,16
    8cbc:	003fee06 	br	8c78 <__alt_data_end+0xfffd7f38>
    8cc0:	d9002d17 	ldw	r4,180(sp)
    8cc4:	d9801e04 	addi	r6,sp,120
    8cc8:	b80b883a 	mov	r5,r23
    8ccc:	000f08c0 	call	f08c <__sprint_r>
    8cd0:	103c171e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8cd4:	d8c02017 	ldw	r3,128(sp)
    8cd8:	df002787 	ldb	fp,158(sp)
    8cdc:	da000404 	addi	r8,sp,16
    8ce0:	003d3406 	br	81b4 <__alt_data_end+0xfffd7474>
    8ce4:	9080040c 	andi	r2,r18,16
    8ce8:	10016126 	beq	r2,zero,9270 <___vfprintf_internal_r+0x1950>
    8cec:	d9402e17 	ldw	r5,184(sp)
    8cf0:	2cc00017 	ldw	r19,0(r5)
    8cf4:	29400104 	addi	r5,r5,4
    8cf8:	d9402e15 	stw	r5,184(sp)
    8cfc:	982dd7fa 	srai	r22,r19,31
    8d00:	b005883a 	mov	r2,r22
    8d04:	003c5a06 	br	7e70 <__alt_data_end+0xfffd7130>
    8d08:	9080040c 	andi	r2,r18,16
    8d0c:	10003526 	beq	r2,zero,8de4 <___vfprintf_internal_r+0x14c4>
    8d10:	d8c02e17 	ldw	r3,184(sp)
    8d14:	d9002a17 	ldw	r4,168(sp)
    8d18:	d8002785 	stb	zero,158(sp)
    8d1c:	18800104 	addi	r2,r3,4
    8d20:	1cc00017 	ldw	r19,0(r3)
    8d24:	002d883a 	mov	r22,zero
    8d28:	20003716 	blt	r4,zero,8e08 <___vfprintf_internal_r+0x14e8>
    8d2c:	00ffdfc4 	movi	r3,-129
    8d30:	d8802e15 	stw	r2,184(sp)
    8d34:	90e4703a 	and	r18,r18,r3
    8d38:	0039883a 	mov	fp,zero
    8d3c:	983dd426 	beq	r19,zero,8490 <__alt_data_end+0xfffd7750>
    8d40:	00800244 	movi	r2,9
    8d44:	14fc5336 	bltu	r2,r19,7e94 <__alt_data_end+0xfffd7154>
    8d48:	d8c02817 	ldw	r3,160(sp)
    8d4c:	dc001dc4 	addi	r16,sp,119
    8d50:	9cc00c04 	addi	r19,r19,48
    8d54:	1c07c83a 	sub	r3,r3,r16
    8d58:	dcc01dc5 	stb	r19,119(sp)
    8d5c:	d8c02b15 	stw	r3,172(sp)
    8d60:	003cc606 	br	807c <__alt_data_end+0xfffd733c>
    8d64:	d8803317 	ldw	r2,204(sp)
    8d68:	143fffc4 	addi	r16,r2,-1
    8d6c:	043f4d0e 	bge	zero,r16,8aa4 <__alt_data_end+0xfffd7d64>
    8d70:	07000404 	movi	fp,16
    8d74:	e400810e 	bge	fp,r16,8f7c <___vfprintf_internal_r+0x165c>
    8d78:	014000b4 	movhi	r5,2
    8d7c:	29723584 	addi	r5,r5,-14122
    8d80:	d9402c15 	stw	r5,176(sp)
    8d84:	01c001c4 	movi	r7,7
    8d88:	dcc02d17 	ldw	r19,180(sp)
    8d8c:	00000306 	br	8d9c <___vfprintf_internal_r+0x147c>
    8d90:	b5800204 	addi	r22,r22,8
    8d94:	843ffc04 	addi	r16,r16,-16
    8d98:	e4007b0e 	bge	fp,r16,8f88 <___vfprintf_internal_r+0x1668>
    8d9c:	18c00404 	addi	r3,r3,16
    8da0:	8c400044 	addi	r17,r17,1
    8da4:	b5000015 	stw	r20,0(r22)
    8da8:	b7000115 	stw	fp,4(r22)
    8dac:	d8c02015 	stw	r3,128(sp)
    8db0:	dc401f15 	stw	r17,124(sp)
    8db4:	3c7ff60e 	bge	r7,r17,8d90 <__alt_data_end+0xfffd8050>
    8db8:	d9801e04 	addi	r6,sp,120
    8dbc:	b80b883a 	mov	r5,r23
    8dc0:	9809883a 	mov	r4,r19
    8dc4:	d9c03c15 	stw	r7,240(sp)
    8dc8:	000f08c0 	call	f08c <__sprint_r>
    8dcc:	d9c03c17 	ldw	r7,240(sp)
    8dd0:	103bd71e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8dd4:	d8c02017 	ldw	r3,128(sp)
    8dd8:	dc401f17 	ldw	r17,124(sp)
    8ddc:	dd800404 	addi	r22,sp,16
    8de0:	003fec06 	br	8d94 <__alt_data_end+0xfffd8054>
    8de4:	9080100c 	andi	r2,r18,64
    8de8:	d8002785 	stb	zero,158(sp)
    8dec:	10010e26 	beq	r2,zero,9228 <___vfprintf_internal_r+0x1908>
    8df0:	d9402e17 	ldw	r5,184(sp)
    8df4:	d8c02a17 	ldw	r3,168(sp)
    8df8:	002d883a 	mov	r22,zero
    8dfc:	28800104 	addi	r2,r5,4
    8e00:	2cc0000b 	ldhu	r19,0(r5)
    8e04:	183fc90e 	bge	r3,zero,8d2c <__alt_data_end+0xfffd7fec>
    8e08:	d8802e15 	stw	r2,184(sp)
    8e0c:	0039883a 	mov	fp,zero
    8e10:	9d84b03a 	or	r2,r19,r22
    8e14:	103c1e1e 	bne	r2,zero,7e90 <__alt_data_end+0xfffd7150>
    8e18:	00800044 	movi	r2,1
    8e1c:	003e6c06 	br	87d0 <__alt_data_end+0xfffd7a90>
    8e20:	d9002d17 	ldw	r4,180(sp)
    8e24:	d9801e04 	addi	r6,sp,120
    8e28:	b80b883a 	mov	r5,r23
    8e2c:	000f08c0 	call	f08c <__sprint_r>
    8e30:	103bbf1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8e34:	d8c02017 	ldw	r3,128(sp)
    8e38:	da000404 	addi	r8,sp,16
    8e3c:	d9003217 	ldw	r4,200(sp)
    8e40:	d8802617 	ldw	r2,152(sp)
    8e44:	d9403317 	ldw	r5,204(sp)
    8e48:	8123883a 	add	r17,r16,r4
    8e4c:	11400216 	blt	r2,r5,8e58 <___vfprintf_internal_r+0x1538>
    8e50:	9100004c 	andi	r4,r18,1
    8e54:	20000d26 	beq	r4,zero,8e8c <___vfprintf_internal_r+0x156c>
    8e58:	d9003717 	ldw	r4,220(sp)
    8e5c:	d9403417 	ldw	r5,208(sp)
    8e60:	1907883a 	add	r3,r3,r4
    8e64:	d9001f17 	ldw	r4,124(sp)
    8e68:	41400015 	stw	r5,0(r8)
    8e6c:	d9403717 	ldw	r5,220(sp)
    8e70:	21000044 	addi	r4,r4,1
    8e74:	d8c02015 	stw	r3,128(sp)
    8e78:	41400115 	stw	r5,4(r8)
    8e7c:	d9001f15 	stw	r4,124(sp)
    8e80:	014001c4 	movi	r5,7
    8e84:	2901e816 	blt	r5,r4,9628 <___vfprintf_internal_r+0x1d08>
    8e88:	42000204 	addi	r8,r8,8
    8e8c:	d9003317 	ldw	r4,204(sp)
    8e90:	8121883a 	add	r16,r16,r4
    8e94:	2085c83a 	sub	r2,r4,r2
    8e98:	8461c83a 	sub	r16,r16,r17
    8e9c:	1400010e 	bge	r2,r16,8ea4 <___vfprintf_internal_r+0x1584>
    8ea0:	1021883a 	mov	r16,r2
    8ea4:	04000a0e 	bge	zero,r16,8ed0 <___vfprintf_internal_r+0x15b0>
    8ea8:	d9001f17 	ldw	r4,124(sp)
    8eac:	1c07883a 	add	r3,r3,r16
    8eb0:	44400015 	stw	r17,0(r8)
    8eb4:	21000044 	addi	r4,r4,1
    8eb8:	44000115 	stw	r16,4(r8)
    8ebc:	d8c02015 	stw	r3,128(sp)
    8ec0:	d9001f15 	stw	r4,124(sp)
    8ec4:	014001c4 	movi	r5,7
    8ec8:	2901fb16 	blt	r5,r4,96b8 <___vfprintf_internal_r+0x1d98>
    8ecc:	42000204 	addi	r8,r8,8
    8ed0:	8001f716 	blt	r16,zero,96b0 <___vfprintf_internal_r+0x1d90>
    8ed4:	1421c83a 	sub	r16,r2,r16
    8ed8:	043d160e 	bge	zero,r16,8334 <__alt_data_end+0xfffd75f4>
    8edc:	04400404 	movi	r17,16
    8ee0:	d8801f17 	ldw	r2,124(sp)
    8ee4:	8c3efb0e 	bge	r17,r16,8ad4 <__alt_data_end+0xfffd7d94>
    8ee8:	014000b4 	movhi	r5,2
    8eec:	29723584 	addi	r5,r5,-14122
    8ef0:	d9402c15 	stw	r5,176(sp)
    8ef4:	058001c4 	movi	r22,7
    8ef8:	dcc02d17 	ldw	r19,180(sp)
    8efc:	00000306 	br	8f0c <___vfprintf_internal_r+0x15ec>
    8f00:	42000204 	addi	r8,r8,8
    8f04:	843ffc04 	addi	r16,r16,-16
    8f08:	8c3ef50e 	bge	r17,r16,8ae0 <__alt_data_end+0xfffd7da0>
    8f0c:	18c00404 	addi	r3,r3,16
    8f10:	10800044 	addi	r2,r2,1
    8f14:	45000015 	stw	r20,0(r8)
    8f18:	44400115 	stw	r17,4(r8)
    8f1c:	d8c02015 	stw	r3,128(sp)
    8f20:	d8801f15 	stw	r2,124(sp)
    8f24:	b0bff60e 	bge	r22,r2,8f00 <__alt_data_end+0xfffd81c0>
    8f28:	d9801e04 	addi	r6,sp,120
    8f2c:	b80b883a 	mov	r5,r23
    8f30:	9809883a 	mov	r4,r19
    8f34:	000f08c0 	call	f08c <__sprint_r>
    8f38:	103b7d1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8f3c:	d8c02017 	ldw	r3,128(sp)
    8f40:	d8801f17 	ldw	r2,124(sp)
    8f44:	da000404 	addi	r8,sp,16
    8f48:	003fee06 	br	8f04 <__alt_data_end+0xfffd81c4>
    8f4c:	9088703a 	and	r4,r18,r2
    8f50:	203eab1e 	bne	r4,zero,8a00 <__alt_data_end+0xfffd7cc0>
    8f54:	dc401f17 	ldw	r17,124(sp)
    8f58:	40800115 	stw	r2,4(r8)
    8f5c:	44000015 	stw	r16,0(r8)
    8f60:	8c400044 	addi	r17,r17,1
    8f64:	d8c02015 	stw	r3,128(sp)
    8f68:	dc401f15 	stw	r17,124(sp)
    8f6c:	008001c4 	movi	r2,7
    8f70:	14400e16 	blt	r2,r17,8fac <___vfprintf_internal_r+0x168c>
    8f74:	45800204 	addi	r22,r8,8
    8f78:	003eca06 	br	8aa4 <__alt_data_end+0xfffd7d64>
    8f7c:	010000b4 	movhi	r4,2
    8f80:	21323584 	addi	r4,r4,-14122
    8f84:	d9002c15 	stw	r4,176(sp)
    8f88:	d8802c17 	ldw	r2,176(sp)
    8f8c:	1c07883a 	add	r3,r3,r16
    8f90:	8c400044 	addi	r17,r17,1
    8f94:	b0800015 	stw	r2,0(r22)
    8f98:	b4000115 	stw	r16,4(r22)
    8f9c:	d8c02015 	stw	r3,128(sp)
    8fa0:	dc401f15 	stw	r17,124(sp)
    8fa4:	008001c4 	movi	r2,7
    8fa8:	147ebd0e 	bge	r2,r17,8aa0 <__alt_data_end+0xfffd7d60>
    8fac:	d9002d17 	ldw	r4,180(sp)
    8fb0:	d9801e04 	addi	r6,sp,120
    8fb4:	b80b883a 	mov	r5,r23
    8fb8:	000f08c0 	call	f08c <__sprint_r>
    8fbc:	103b5c1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8fc0:	d8c02017 	ldw	r3,128(sp)
    8fc4:	dc401f17 	ldw	r17,124(sp)
    8fc8:	dd800404 	addi	r22,sp,16
    8fcc:	003eb506 	br	8aa4 <__alt_data_end+0xfffd7d64>
    8fd0:	d9002d17 	ldw	r4,180(sp)
    8fd4:	d9801e04 	addi	r6,sp,120
    8fd8:	b80b883a 	mov	r5,r23
    8fdc:	000f08c0 	call	f08c <__sprint_r>
    8fe0:	103b531e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    8fe4:	d8c02017 	ldw	r3,128(sp)
    8fe8:	dc401f17 	ldw	r17,124(sp)
    8fec:	da000404 	addi	r8,sp,16
    8ff0:	003e8d06 	br	8a28 <__alt_data_end+0xfffd7ce8>
    8ff4:	d9002d17 	ldw	r4,180(sp)
    8ff8:	d9801e04 	addi	r6,sp,120
    8ffc:	b80b883a 	mov	r5,r23
    9000:	000f08c0 	call	f08c <__sprint_r>
    9004:	103b4a1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    9008:	d8c02017 	ldw	r3,128(sp)
    900c:	dc401f17 	ldw	r17,124(sp)
    9010:	dd800404 	addi	r22,sp,16
    9014:	003e8f06 	br	8a54 <__alt_data_end+0xfffd7d14>
    9018:	0027883a 	mov	r19,zero
    901c:	003f4a06 	br	8d48 <__alt_data_end+0xfffd8008>
    9020:	d9002d17 	ldw	r4,180(sp)
    9024:	d9801e04 	addi	r6,sp,120
    9028:	b80b883a 	mov	r5,r23
    902c:	000f08c0 	call	f08c <__sprint_r>
    9030:	103b3f1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    9034:	d8c02017 	ldw	r3,128(sp)
    9038:	da000404 	addi	r8,sp,16
    903c:	003c7b06 	br	822c <__alt_data_end+0xfffd74ec>
    9040:	d9402a17 	ldw	r5,168(sp)
    9044:	04e7c83a 	sub	r19,zero,r19
    9048:	07000b44 	movi	fp,45
    904c:	9804c03a 	cmpne	r2,r19,zero
    9050:	05adc83a 	sub	r22,zero,r22
    9054:	df002785 	stb	fp,158(sp)
    9058:	b0adc83a 	sub	r22,r22,r2
    905c:	28017b16 	blt	r5,zero,964c <___vfprintf_internal_r+0x1d2c>
    9060:	00bfdfc4 	movi	r2,-129
    9064:	90a4703a 	and	r18,r18,r2
    9068:	003b8906 	br	7e90 <__alt_data_end+0xfffd7150>
    906c:	d9003617 	ldw	r4,216(sp)
    9070:	d9403817 	ldw	r5,224(sp)
    9074:	da003d15 	stw	r8,244(sp)
    9078:	00049340 	call	4934 <__fpclassifyd>
    907c:	da003d17 	ldw	r8,244(sp)
    9080:	1000f026 	beq	r2,zero,9444 <___vfprintf_internal_r+0x1b24>
    9084:	d9002a17 	ldw	r4,168(sp)
    9088:	05bff7c4 	movi	r22,-33
    908c:	00bfffc4 	movi	r2,-1
    9090:	8dac703a 	and	r22,r17,r22
    9094:	20820026 	beq	r4,r2,9898 <___vfprintf_internal_r+0x1f78>
    9098:	008011c4 	movi	r2,71
    909c:	b081f726 	beq	r22,r2,987c <___vfprintf_internal_r+0x1f5c>
    90a0:	d9003817 	ldw	r4,224(sp)
    90a4:	90c04014 	ori	r3,r18,256
    90a8:	d8c02c15 	stw	r3,176(sp)
    90ac:	20021516 	blt	r4,zero,9904 <___vfprintf_internal_r+0x1fe4>
    90b0:	dcc03817 	ldw	r19,224(sp)
    90b4:	d8002905 	stb	zero,164(sp)
    90b8:	00801984 	movi	r2,102
    90bc:	8881f926 	beq	r17,r2,98a4 <___vfprintf_internal_r+0x1f84>
    90c0:	00801184 	movi	r2,70
    90c4:	88821c26 	beq	r17,r2,9938 <___vfprintf_internal_r+0x2018>
    90c8:	00801144 	movi	r2,69
    90cc:	b081ef26 	beq	r22,r2,988c <___vfprintf_internal_r+0x1f6c>
    90d0:	d8c02a17 	ldw	r3,168(sp)
    90d4:	d8802104 	addi	r2,sp,132
    90d8:	d8800315 	stw	r2,12(sp)
    90dc:	d9403617 	ldw	r5,216(sp)
    90e0:	d8802504 	addi	r2,sp,148
    90e4:	d9002d17 	ldw	r4,180(sp)
    90e8:	d8800215 	stw	r2,8(sp)
    90ec:	d8802604 	addi	r2,sp,152
    90f0:	d8c00015 	stw	r3,0(sp)
    90f4:	d8800115 	stw	r2,4(sp)
    90f8:	01c00084 	movi	r7,2
    90fc:	980d883a 	mov	r6,r19
    9100:	d8c03c15 	stw	r3,240(sp)
    9104:	da003d15 	stw	r8,244(sp)
    9108:	000a0500 	call	a050 <_dtoa_r>
    910c:	1021883a 	mov	r16,r2
    9110:	008019c4 	movi	r2,103
    9114:	d8c03c17 	ldw	r3,240(sp)
    9118:	da003d17 	ldw	r8,244(sp)
    911c:	88817126 	beq	r17,r2,96e4 <___vfprintf_internal_r+0x1dc4>
    9120:	008011c4 	movi	r2,71
    9124:	88829126 	beq	r17,r2,9b6c <___vfprintf_internal_r+0x224c>
    9128:	80f9883a 	add	fp,r16,r3
    912c:	d9003617 	ldw	r4,216(sp)
    9130:	000d883a 	mov	r6,zero
    9134:	000f883a 	mov	r7,zero
    9138:	980b883a 	mov	r5,r19
    913c:	da003d15 	stw	r8,244(sp)
    9140:	00061b80 	call	61b8 <__eqdf2>
    9144:	da003d17 	ldw	r8,244(sp)
    9148:	10018d26 	beq	r2,zero,9780 <___vfprintf_internal_r+0x1e60>
    914c:	d8802117 	ldw	r2,132(sp)
    9150:	1700062e 	bgeu	r2,fp,916c <___vfprintf_internal_r+0x184c>
    9154:	01000c04 	movi	r4,48
    9158:	10c00044 	addi	r3,r2,1
    915c:	d8c02115 	stw	r3,132(sp)
    9160:	11000005 	stb	r4,0(r2)
    9164:	d8802117 	ldw	r2,132(sp)
    9168:	173ffb36 	bltu	r2,fp,9158 <__alt_data_end+0xfffd8418>
    916c:	1405c83a 	sub	r2,r2,r16
    9170:	d8803315 	stw	r2,204(sp)
    9174:	008011c4 	movi	r2,71
    9178:	b0817626 	beq	r22,r2,9754 <___vfprintf_internal_r+0x1e34>
    917c:	00801944 	movi	r2,101
    9180:	1442800e 	bge	r2,r17,9b84 <___vfprintf_internal_r+0x2264>
    9184:	d8c02617 	ldw	r3,152(sp)
    9188:	00801984 	movi	r2,102
    918c:	d8c03215 	stw	r3,200(sp)
    9190:	8881fe26 	beq	r17,r2,998c <___vfprintf_internal_r+0x206c>
    9194:	d8c03217 	ldw	r3,200(sp)
    9198:	d9003317 	ldw	r4,204(sp)
    919c:	1901dd16 	blt	r3,r4,9914 <___vfprintf_internal_r+0x1ff4>
    91a0:	9480004c 	andi	r18,r18,1
    91a4:	90022b1e 	bne	r18,zero,9a54 <___vfprintf_internal_r+0x2134>
    91a8:	1805883a 	mov	r2,r3
    91ac:	18028316 	blt	r3,zero,9bbc <___vfprintf_internal_r+0x229c>
    91b0:	d8c03217 	ldw	r3,200(sp)
    91b4:	044019c4 	movi	r17,103
    91b8:	d8c02b15 	stw	r3,172(sp)
    91bc:	df002907 	ldb	fp,164(sp)
    91c0:	e001531e 	bne	fp,zero,9710 <___vfprintf_internal_r+0x1df0>
    91c4:	df002783 	ldbu	fp,158(sp)
    91c8:	d8802915 	stw	r2,164(sp)
    91cc:	dc802c17 	ldw	r18,176(sp)
    91d0:	d8002a15 	stw	zero,168(sp)
    91d4:	003baf06 	br	8094 <__alt_data_end+0xfffd7354>
    91d8:	d8c02e17 	ldw	r3,184(sp)
    91dc:	d9002e17 	ldw	r4,184(sp)
    91e0:	d9402e17 	ldw	r5,184(sp)
    91e4:	18c00017 	ldw	r3,0(r3)
    91e8:	21000117 	ldw	r4,4(r4)
    91ec:	29400204 	addi	r5,r5,8
    91f0:	d8c03615 	stw	r3,216(sp)
    91f4:	d9003815 	stw	r4,224(sp)
    91f8:	d9402e15 	stw	r5,184(sp)
    91fc:	003b5006 	br	7f40 <__alt_data_end+0xfffd7200>
    9200:	ac400007 	ldb	r17,0(r21)
    9204:	003a2806 	br	7aa8 <__alt_data_end+0xfffd6d68>
    9208:	9080100c 	andi	r2,r18,64
    920c:	1000a826 	beq	r2,zero,94b0 <___vfprintf_internal_r+0x1b90>
    9210:	d8c02e17 	ldw	r3,184(sp)
    9214:	002d883a 	mov	r22,zero
    9218:	1cc0000b 	ldhu	r19,0(r3)
    921c:	18c00104 	addi	r3,r3,4
    9220:	d8c02e15 	stw	r3,184(sp)
    9224:	003caf06 	br	84e4 <__alt_data_end+0xfffd77a4>
    9228:	d9002e17 	ldw	r4,184(sp)
    922c:	d9402a17 	ldw	r5,168(sp)
    9230:	002d883a 	mov	r22,zero
    9234:	20800104 	addi	r2,r4,4
    9238:	24c00017 	ldw	r19,0(r4)
    923c:	283ebb0e 	bge	r5,zero,8d2c <__alt_data_end+0xfffd7fec>
    9240:	003ef106 	br	8e08 <__alt_data_end+0xfffd80c8>
    9244:	9080040c 	andi	r2,r18,16
    9248:	1000921e 	bne	r2,zero,9494 <___vfprintf_internal_r+0x1b74>
    924c:	9480100c 	andi	r18,r18,64
    9250:	90013926 	beq	r18,zero,9738 <___vfprintf_internal_r+0x1e18>
    9254:	d9402e17 	ldw	r5,184(sp)
    9258:	d8c02f17 	ldw	r3,188(sp)
    925c:	28800017 	ldw	r2,0(r5)
    9260:	29400104 	addi	r5,r5,4
    9264:	d9402e15 	stw	r5,184(sp)
    9268:	10c0000d 	sth	r3,0(r2)
    926c:	0039e406 	br	7a00 <__alt_data_end+0xfffd6cc0>
    9270:	9080100c 	andi	r2,r18,64
    9274:	10008026 	beq	r2,zero,9478 <___vfprintf_internal_r+0x1b58>
    9278:	d8802e17 	ldw	r2,184(sp)
    927c:	14c0000f 	ldh	r19,0(r2)
    9280:	10800104 	addi	r2,r2,4
    9284:	d8802e15 	stw	r2,184(sp)
    9288:	982dd7fa 	srai	r22,r19,31
    928c:	b005883a 	mov	r2,r22
    9290:	003af706 	br	7e70 <__alt_data_end+0xfffd7130>
    9294:	9080100c 	andi	r2,r18,64
    9298:	d8002785 	stb	zero,158(sp)
    929c:	10008a1e 	bne	r2,zero,94c8 <___vfprintf_internal_r+0x1ba8>
    92a0:	d9002e17 	ldw	r4,184(sp)
    92a4:	d9402a17 	ldw	r5,168(sp)
    92a8:	002d883a 	mov	r22,zero
    92ac:	20800104 	addi	r2,r4,4
    92b0:	24c00017 	ldw	r19,0(r4)
    92b4:	283e4b0e 	bge	r5,zero,8be4 <__alt_data_end+0xfffd7ea4>
    92b8:	9d86b03a 	or	r3,r19,r22
    92bc:	d8802e15 	stw	r2,184(sp)
    92c0:	183e4c1e 	bne	r3,zero,8bf4 <__alt_data_end+0xfffd7eb4>
    92c4:	0039883a 	mov	fp,zero
    92c8:	0005883a 	mov	r2,zero
    92cc:	003d4006 	br	87d0 <__alt_data_end+0xfffd7a90>
    92d0:	014000b4 	movhi	r5,2
    92d4:	29723584 	addi	r5,r5,-14122
    92d8:	d9402c15 	stw	r5,176(sp)
    92dc:	d9402c17 	ldw	r5,176(sp)
    92e0:	1c47883a 	add	r3,r3,r17
    92e4:	10800044 	addi	r2,r2,1
    92e8:	41400015 	stw	r5,0(r8)
    92ec:	44400115 	stw	r17,4(r8)
    92f0:	d8c02015 	stw	r3,128(sp)
    92f4:	d8801f15 	stw	r2,124(sp)
    92f8:	010001c4 	movi	r4,7
    92fc:	20bec816 	blt	r4,r2,8e20 <__alt_data_end+0xfffd80e0>
    9300:	42000204 	addi	r8,r8,8
    9304:	003ecd06 	br	8e3c <__alt_data_end+0xfffd80fc>
    9308:	d9002a17 	ldw	r4,168(sp)
    930c:	d8002785 	stb	zero,158(sp)
    9310:	203d2d16 	blt	r4,zero,87c8 <__alt_data_end+0xfffd7a88>
    9314:	00bfdfc4 	movi	r2,-129
    9318:	90a4703a 	and	r18,r18,r2
    931c:	003a6106 	br	7ca4 <__alt_data_end+0xfffd6f64>
    9320:	010000b4 	movhi	r4,2
    9324:	21323584 	addi	r4,r4,-14122
    9328:	d9002c15 	stw	r4,176(sp)
    932c:	003bea06 	br	82d8 <__alt_data_end+0xfffd7598>
    9330:	d9002d17 	ldw	r4,180(sp)
    9334:	d9801e04 	addi	r6,sp,120
    9338:	b80b883a 	mov	r5,r23
    933c:	000f08c0 	call	f08c <__sprint_r>
    9340:	103a7b1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    9344:	d8c02017 	ldw	r3,128(sp)
    9348:	da000404 	addi	r8,sp,16
    934c:	003d4106 	br	8854 <__alt_data_end+0xfffd7b14>
    9350:	d8801f17 	ldw	r2,124(sp)
    9354:	014000b4 	movhi	r5,2
    9358:	01000044 	movi	r4,1
    935c:	18c00044 	addi	r3,r3,1
    9360:	10800044 	addi	r2,r2,1
    9364:	29723504 	addi	r5,r5,-14124
    9368:	41000115 	stw	r4,4(r8)
    936c:	41400015 	stw	r5,0(r8)
    9370:	d8c02015 	stw	r3,128(sp)
    9374:	d8801f15 	stw	r2,124(sp)
    9378:	010001c4 	movi	r4,7
    937c:	20805c16 	blt	r4,r2,94f0 <___vfprintf_internal_r+0x1bd0>
    9380:	42000204 	addi	r8,r8,8
    9384:	8800041e 	bne	r17,zero,9398 <___vfprintf_internal_r+0x1a78>
    9388:	d8803317 	ldw	r2,204(sp)
    938c:	1000021e 	bne	r2,zero,9398 <___vfprintf_internal_r+0x1a78>
    9390:	9080004c 	andi	r2,r18,1
    9394:	103be726 	beq	r2,zero,8334 <__alt_data_end+0xfffd75f4>
    9398:	d9003717 	ldw	r4,220(sp)
    939c:	d8801f17 	ldw	r2,124(sp)
    93a0:	d9403417 	ldw	r5,208(sp)
    93a4:	20c7883a 	add	r3,r4,r3
    93a8:	10800044 	addi	r2,r2,1
    93ac:	41000115 	stw	r4,4(r8)
    93b0:	41400015 	stw	r5,0(r8)
    93b4:	d8c02015 	stw	r3,128(sp)
    93b8:	d8801f15 	stw	r2,124(sp)
    93bc:	010001c4 	movi	r4,7
    93c0:	20812116 	blt	r4,r2,9848 <___vfprintf_internal_r+0x1f28>
    93c4:	42000204 	addi	r8,r8,8
    93c8:	0463c83a 	sub	r17,zero,r17
    93cc:	0440730e 	bge	zero,r17,959c <___vfprintf_internal_r+0x1c7c>
    93d0:	05800404 	movi	r22,16
    93d4:	b440860e 	bge	r22,r17,95f0 <___vfprintf_internal_r+0x1cd0>
    93d8:	014000b4 	movhi	r5,2
    93dc:	29723584 	addi	r5,r5,-14122
    93e0:	d9402c15 	stw	r5,176(sp)
    93e4:	070001c4 	movi	fp,7
    93e8:	dcc02d17 	ldw	r19,180(sp)
    93ec:	00000306 	br	93fc <___vfprintf_internal_r+0x1adc>
    93f0:	42000204 	addi	r8,r8,8
    93f4:	8c7ffc04 	addi	r17,r17,-16
    93f8:	b440800e 	bge	r22,r17,95fc <___vfprintf_internal_r+0x1cdc>
    93fc:	18c00404 	addi	r3,r3,16
    9400:	10800044 	addi	r2,r2,1
    9404:	45000015 	stw	r20,0(r8)
    9408:	45800115 	stw	r22,4(r8)
    940c:	d8c02015 	stw	r3,128(sp)
    9410:	d8801f15 	stw	r2,124(sp)
    9414:	e0bff60e 	bge	fp,r2,93f0 <__alt_data_end+0xfffd86b0>
    9418:	d9801e04 	addi	r6,sp,120
    941c:	b80b883a 	mov	r5,r23
    9420:	9809883a 	mov	r4,r19
    9424:	000f08c0 	call	f08c <__sprint_r>
    9428:	103a411e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    942c:	d8c02017 	ldw	r3,128(sp)
    9430:	d8801f17 	ldw	r2,124(sp)
    9434:	da000404 	addi	r8,sp,16
    9438:	003fee06 	br	93f4 <__alt_data_end+0xfffd86b4>
    943c:	00bfffc4 	movi	r2,-1
    9440:	003a3f06 	br	7d40 <__alt_data_end+0xfffd7000>
    9444:	008011c4 	movi	r2,71
    9448:	1440b816 	blt	r2,r17,972c <___vfprintf_internal_r+0x1e0c>
    944c:	040000b4 	movhi	r16,2
    9450:	84322704 	addi	r16,r16,-14180
    9454:	00c000c4 	movi	r3,3
    9458:	00bfdfc4 	movi	r2,-129
    945c:	d8c02915 	stw	r3,164(sp)
    9460:	90a4703a 	and	r18,r18,r2
    9464:	df002783 	ldbu	fp,158(sp)
    9468:	d8c02b15 	stw	r3,172(sp)
    946c:	d8002a15 	stw	zero,168(sp)
    9470:	d8003215 	stw	zero,200(sp)
    9474:	003b0706 	br	8094 <__alt_data_end+0xfffd7354>
    9478:	d8c02e17 	ldw	r3,184(sp)
    947c:	1cc00017 	ldw	r19,0(r3)
    9480:	18c00104 	addi	r3,r3,4
    9484:	d8c02e15 	stw	r3,184(sp)
    9488:	982dd7fa 	srai	r22,r19,31
    948c:	b005883a 	mov	r2,r22
    9490:	003a7706 	br	7e70 <__alt_data_end+0xfffd7130>
    9494:	d8c02e17 	ldw	r3,184(sp)
    9498:	d9002f17 	ldw	r4,188(sp)
    949c:	18800017 	ldw	r2,0(r3)
    94a0:	18c00104 	addi	r3,r3,4
    94a4:	d8c02e15 	stw	r3,184(sp)
    94a8:	11000015 	stw	r4,0(r2)
    94ac:	00395406 	br	7a00 <__alt_data_end+0xfffd6cc0>
    94b0:	d9002e17 	ldw	r4,184(sp)
    94b4:	002d883a 	mov	r22,zero
    94b8:	24c00017 	ldw	r19,0(r4)
    94bc:	21000104 	addi	r4,r4,4
    94c0:	d9002e15 	stw	r4,184(sp)
    94c4:	003c0706 	br	84e4 <__alt_data_end+0xfffd77a4>
    94c8:	d9402e17 	ldw	r5,184(sp)
    94cc:	d8c02a17 	ldw	r3,168(sp)
    94d0:	002d883a 	mov	r22,zero
    94d4:	28800104 	addi	r2,r5,4
    94d8:	2cc0000b 	ldhu	r19,0(r5)
    94dc:	183dc10e 	bge	r3,zero,8be4 <__alt_data_end+0xfffd7ea4>
    94e0:	003f7506 	br	92b8 <__alt_data_end+0xfffd8578>
    94e4:	040000b4 	movhi	r16,2
    94e8:	84322504 	addi	r16,r16,-14188
    94ec:	003aa706 	br	7f8c <__alt_data_end+0xfffd724c>
    94f0:	d9002d17 	ldw	r4,180(sp)
    94f4:	d9801e04 	addi	r6,sp,120
    94f8:	b80b883a 	mov	r5,r23
    94fc:	000f08c0 	call	f08c <__sprint_r>
    9500:	103a0b1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    9504:	dc402617 	ldw	r17,152(sp)
    9508:	d8c02017 	ldw	r3,128(sp)
    950c:	da000404 	addi	r8,sp,16
    9510:	003f9c06 	br	9384 <__alt_data_end+0xfffd8644>
    9514:	ac400043 	ldbu	r17,1(r21)
    9518:	84000814 	ori	r16,r16,32
    951c:	ad400044 	addi	r21,r21,1
    9520:	8c403fcc 	andi	r17,r17,255
    9524:	8c40201c 	xori	r17,r17,128
    9528:	8c7fe004 	addi	r17,r17,-128
    952c:	00395e06 	br	7aa8 <__alt_data_end+0xfffd6d68>
    9530:	d8c02e15 	stw	r3,184(sp)
    9534:	0039883a 	mov	fp,zero
    9538:	003e3506 	br	8e10 <__alt_data_end+0xfffd80d0>
    953c:	d9002d17 	ldw	r4,180(sp)
    9540:	d9801e04 	addi	r6,sp,120
    9544:	b80b883a 	mov	r5,r23
    9548:	000f08c0 	call	f08c <__sprint_r>
    954c:	1039f81e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    9550:	d8c02017 	ldw	r3,128(sp)
    9554:	da000404 	addi	r8,sp,16
    9558:	003cd006 	br	889c <__alt_data_end+0xfffd7b5c>
    955c:	8009883a 	mov	r4,r16
    9560:	df003d15 	stw	fp,244(sp)
    9564:	00078880 	call	7888 <strlen>
    9568:	d8802b15 	stw	r2,172(sp)
    956c:	da003d17 	ldw	r8,244(sp)
    9570:	103c200e 	bge	r2,zero,85f4 <__alt_data_end+0xfffd78b4>
    9574:	0005883a 	mov	r2,zero
    9578:	003c1e06 	br	85f4 <__alt_data_end+0xfffd78b4>
    957c:	d9002d17 	ldw	r4,180(sp)
    9580:	d9801e04 	addi	r6,sp,120
    9584:	b80b883a 	mov	r5,r23
    9588:	000f08c0 	call	f08c <__sprint_r>
    958c:	1039e81e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    9590:	d8c02017 	ldw	r3,128(sp)
    9594:	d8801f17 	ldw	r2,124(sp)
    9598:	da000404 	addi	r8,sp,16
    959c:	d9403317 	ldw	r5,204(sp)
    95a0:	10800044 	addi	r2,r2,1
    95a4:	44000015 	stw	r16,0(r8)
    95a8:	28c7883a 	add	r3,r5,r3
    95ac:	003b5b06 	br	831c <__alt_data_end+0xfffd75dc>
    95b0:	010000b4 	movhi	r4,2
    95b4:	21323984 	addi	r4,r4,-14106
    95b8:	d9003515 	stw	r4,212(sp)
    95bc:	003af206 	br	8188 <__alt_data_end+0xfffd7448>
    95c0:	013fffc4 	movi	r4,-1
    95c4:	003a0806 	br	7de8 <__alt_data_end+0xfffd70a8>
    95c8:	0023883a 	mov	r17,zero
    95cc:	003d9d06 	br	8c44 <__alt_data_end+0xfffd7f04>
    95d0:	d9002d17 	ldw	r4,180(sp)
    95d4:	d9801e04 	addi	r6,sp,120
    95d8:	b80b883a 	mov	r5,r23
    95dc:	000f08c0 	call	f08c <__sprint_r>
    95e0:	1039d31e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    95e4:	d8c02017 	ldw	r3,128(sp)
    95e8:	da000404 	addi	r8,sp,16
    95ec:	003d9406 	br	8c40 <__alt_data_end+0xfffd7f00>
    95f0:	010000b4 	movhi	r4,2
    95f4:	21323584 	addi	r4,r4,-14122
    95f8:	d9002c15 	stw	r4,176(sp)
    95fc:	d9002c17 	ldw	r4,176(sp)
    9600:	1c47883a 	add	r3,r3,r17
    9604:	10800044 	addi	r2,r2,1
    9608:	41000015 	stw	r4,0(r8)
    960c:	44400115 	stw	r17,4(r8)
    9610:	d8c02015 	stw	r3,128(sp)
    9614:	d8801f15 	stw	r2,124(sp)
    9618:	010001c4 	movi	r4,7
    961c:	20bfd716 	blt	r4,r2,957c <__alt_data_end+0xfffd883c>
    9620:	42000204 	addi	r8,r8,8
    9624:	003fdd06 	br	959c <__alt_data_end+0xfffd885c>
    9628:	d9002d17 	ldw	r4,180(sp)
    962c:	d9801e04 	addi	r6,sp,120
    9630:	b80b883a 	mov	r5,r23
    9634:	000f08c0 	call	f08c <__sprint_r>
    9638:	1039bd1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    963c:	d8802617 	ldw	r2,152(sp)
    9640:	d8c02017 	ldw	r3,128(sp)
    9644:	da000404 	addi	r8,sp,16
    9648:	003e1006 	br	8e8c <__alt_data_end+0xfffd814c>
    964c:	00800044 	movi	r2,1
    9650:	10803fcc 	andi	r2,r2,255
    9654:	00c00044 	movi	r3,1
    9658:	10fa0d26 	beq	r2,r3,7e90 <__alt_data_end+0xfffd7150>
    965c:	00c00084 	movi	r3,2
    9660:	10fbaf26 	beq	r2,r3,8520 <__alt_data_end+0xfffd77e0>
    9664:	003a6d06 	br	801c <__alt_data_end+0xfffd72dc>
    9668:	010000b4 	movhi	r4,2
    966c:	21323984 	addi	r4,r4,-14106
    9670:	d9003515 	stw	r4,212(sp)
    9674:	003b5406 	br	83c8 <__alt_data_end+0xfffd7688>
    9678:	d8802a17 	ldw	r2,168(sp)
    967c:	00c00184 	movi	r3,6
    9680:	1880012e 	bgeu	r3,r2,9688 <___vfprintf_internal_r+0x1d68>
    9684:	1805883a 	mov	r2,r3
    9688:	d8802b15 	stw	r2,172(sp)
    968c:	1000ef16 	blt	r2,zero,9a4c <___vfprintf_internal_r+0x212c>
    9690:	040000b4 	movhi	r16,2
    9694:	d8802915 	stw	r2,164(sp)
    9698:	dcc02e15 	stw	r19,184(sp)
    969c:	d8002a15 	stw	zero,168(sp)
    96a0:	d8003215 	stw	zero,200(sp)
    96a4:	84323304 	addi	r16,r16,-14132
    96a8:	0039883a 	mov	fp,zero
    96ac:	003a8006 	br	80b0 <__alt_data_end+0xfffd7370>
    96b0:	0021883a 	mov	r16,zero
    96b4:	003e0706 	br	8ed4 <__alt_data_end+0xfffd8194>
    96b8:	d9002d17 	ldw	r4,180(sp)
    96bc:	d9801e04 	addi	r6,sp,120
    96c0:	b80b883a 	mov	r5,r23
    96c4:	000f08c0 	call	f08c <__sprint_r>
    96c8:	1039991e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    96cc:	d8802617 	ldw	r2,152(sp)
    96d0:	d9403317 	ldw	r5,204(sp)
    96d4:	d8c02017 	ldw	r3,128(sp)
    96d8:	da000404 	addi	r8,sp,16
    96dc:	2885c83a 	sub	r2,r5,r2
    96e0:	003dfb06 	br	8ed0 <__alt_data_end+0xfffd8190>
    96e4:	9080004c 	andi	r2,r18,1
    96e8:	103e8f1e 	bne	r2,zero,9128 <__alt_data_end+0xfffd83e8>
    96ec:	d8802117 	ldw	r2,132(sp)
    96f0:	003e9e06 	br	916c <__alt_data_end+0xfffd842c>
    96f4:	1025883a 	mov	r18,r2
    96f8:	0039883a 	mov	fp,zero
    96fc:	00800084 	movi	r2,2
    9700:	003fd306 	br	9650 <__alt_data_end+0xfffd8910>
    9704:	07000b44 	movi	fp,45
    9708:	df002785 	stb	fp,158(sp)
    970c:	003a1b06 	br	7f7c <__alt_data_end+0xfffd723c>
    9710:	00c00b44 	movi	r3,45
    9714:	d8c02785 	stb	r3,158(sp)
    9718:	d8802915 	stw	r2,164(sp)
    971c:	dc802c17 	ldw	r18,176(sp)
    9720:	d8002a15 	stw	zero,168(sp)
    9724:	07000b44 	movi	fp,45
    9728:	003a5e06 	br	80a4 <__alt_data_end+0xfffd7364>
    972c:	040000b4 	movhi	r16,2
    9730:	84322804 	addi	r16,r16,-14176
    9734:	003f4706 	br	9454 <__alt_data_end+0xfffd8714>
    9738:	d9002e17 	ldw	r4,184(sp)
    973c:	d9402f17 	ldw	r5,188(sp)
    9740:	20800017 	ldw	r2,0(r4)
    9744:	21000104 	addi	r4,r4,4
    9748:	d9002e15 	stw	r4,184(sp)
    974c:	11400015 	stw	r5,0(r2)
    9750:	0038ab06 	br	7a00 <__alt_data_end+0xfffd6cc0>
    9754:	dd802617 	ldw	r22,152(sp)
    9758:	00bfff44 	movi	r2,-3
    975c:	b0801c16 	blt	r22,r2,97d0 <___vfprintf_internal_r+0x1eb0>
    9760:	d9402a17 	ldw	r5,168(sp)
    9764:	2d801a16 	blt	r5,r22,97d0 <___vfprintf_internal_r+0x1eb0>
    9768:	dd803215 	stw	r22,200(sp)
    976c:	003e8906 	br	9194 <__alt_data_end+0xfffd8454>
    9770:	010000b4 	movhi	r4,2
    9774:	21323584 	addi	r4,r4,-14122
    9778:	d9002c15 	stw	r4,176(sp)
    977c:	003c9106 	br	89c4 <__alt_data_end+0xfffd7c84>
    9780:	e005883a 	mov	r2,fp
    9784:	003e7906 	br	916c <__alt_data_end+0xfffd842c>
    9788:	d9002a17 	ldw	r4,168(sp)
    978c:	df002783 	ldbu	fp,158(sp)
    9790:	dcc02e15 	stw	r19,184(sp)
    9794:	d9002915 	stw	r4,164(sp)
    9798:	d9002b15 	stw	r4,172(sp)
    979c:	d8002a15 	stw	zero,168(sp)
    97a0:	d8003215 	stw	zero,200(sp)
    97a4:	003a3b06 	br	8094 <__alt_data_end+0xfffd7354>
    97a8:	9080004c 	andi	r2,r18,1
    97ac:	0039883a 	mov	fp,zero
    97b0:	10000426 	beq	r2,zero,97c4 <___vfprintf_internal_r+0x1ea4>
    97b4:	00800c04 	movi	r2,48
    97b8:	dc001dc4 	addi	r16,sp,119
    97bc:	d8801dc5 	stb	r2,119(sp)
    97c0:	003b6406 	br	8554 <__alt_data_end+0xfffd7814>
    97c4:	d8002b15 	stw	zero,172(sp)
    97c8:	dc001e04 	addi	r16,sp,120
    97cc:	003a2b06 	br	807c <__alt_data_end+0xfffd733c>
    97d0:	8c7fff84 	addi	r17,r17,-2
    97d4:	b5bfffc4 	addi	r22,r22,-1
    97d8:	dd802615 	stw	r22,152(sp)
    97dc:	dc4022c5 	stb	r17,139(sp)
    97e0:	b000bf16 	blt	r22,zero,9ae0 <___vfprintf_internal_r+0x21c0>
    97e4:	00800ac4 	movi	r2,43
    97e8:	d8802305 	stb	r2,140(sp)
    97ec:	00800244 	movi	r2,9
    97f0:	15807016 	blt	r2,r22,99b4 <___vfprintf_internal_r+0x2094>
    97f4:	00800c04 	movi	r2,48
    97f8:	b5800c04 	addi	r22,r22,48
    97fc:	d8802345 	stb	r2,141(sp)
    9800:	dd802385 	stb	r22,142(sp)
    9804:	d88023c4 	addi	r2,sp,143
    9808:	df0022c4 	addi	fp,sp,139
    980c:	d8c03317 	ldw	r3,204(sp)
    9810:	1739c83a 	sub	fp,r2,fp
    9814:	d9003317 	ldw	r4,204(sp)
    9818:	e0c7883a 	add	r3,fp,r3
    981c:	df003a15 	stw	fp,232(sp)
    9820:	d8c02b15 	stw	r3,172(sp)
    9824:	00800044 	movi	r2,1
    9828:	1100b30e 	bge	r2,r4,9af8 <___vfprintf_internal_r+0x21d8>
    982c:	d8c02b17 	ldw	r3,172(sp)
    9830:	18c00044 	addi	r3,r3,1
    9834:	d8c02b15 	stw	r3,172(sp)
    9838:	1805883a 	mov	r2,r3
    983c:	1800ac16 	blt	r3,zero,9af0 <___vfprintf_internal_r+0x21d0>
    9840:	d8003215 	stw	zero,200(sp)
    9844:	003e5d06 	br	91bc <__alt_data_end+0xfffd847c>
    9848:	d9002d17 	ldw	r4,180(sp)
    984c:	d9801e04 	addi	r6,sp,120
    9850:	b80b883a 	mov	r5,r23
    9854:	000f08c0 	call	f08c <__sprint_r>
    9858:	1039351e 	bne	r2,zero,7d30 <__alt_data_end+0xfffd6ff0>
    985c:	dc402617 	ldw	r17,152(sp)
    9860:	d8c02017 	ldw	r3,128(sp)
    9864:	d8801f17 	ldw	r2,124(sp)
    9868:	da000404 	addi	r8,sp,16
    986c:	003ed606 	br	93c8 <__alt_data_end+0xfffd8688>
    9870:	182b883a 	mov	r21,r3
    9874:	d8002a15 	stw	zero,168(sp)
    9878:	00388c06 	br	7aac <__alt_data_end+0xfffd6d6c>
    987c:	d8802a17 	ldw	r2,168(sp)
    9880:	103e071e 	bne	r2,zero,90a0 <__alt_data_end+0xfffd8360>
    9884:	dc002a15 	stw	r16,168(sp)
    9888:	003e0506 	br	90a0 <__alt_data_end+0xfffd8360>
    988c:	d9002a17 	ldw	r4,168(sp)
    9890:	20c00044 	addi	r3,r4,1
    9894:	003e0f06 	br	90d4 <__alt_data_end+0xfffd8394>
    9898:	01400184 	movi	r5,6
    989c:	d9402a15 	stw	r5,168(sp)
    98a0:	003dff06 	br	90a0 <__alt_data_end+0xfffd8360>
    98a4:	d8802104 	addi	r2,sp,132
    98a8:	d8800315 	stw	r2,12(sp)
    98ac:	d8802504 	addi	r2,sp,148
    98b0:	d8800215 	stw	r2,8(sp)
    98b4:	d8802604 	addi	r2,sp,152
    98b8:	d8800115 	stw	r2,4(sp)
    98bc:	d8802a17 	ldw	r2,168(sp)
    98c0:	d9403617 	ldw	r5,216(sp)
    98c4:	d9002d17 	ldw	r4,180(sp)
    98c8:	d8800015 	stw	r2,0(sp)
    98cc:	01c000c4 	movi	r7,3
    98d0:	980d883a 	mov	r6,r19
    98d4:	da003d15 	stw	r8,244(sp)
    98d8:	000a0500 	call	a050 <_dtoa_r>
    98dc:	d8c02a17 	ldw	r3,168(sp)
    98e0:	da003d17 	ldw	r8,244(sp)
    98e4:	1021883a 	mov	r16,r2
    98e8:	10f9883a 	add	fp,r2,r3
    98ec:	81000007 	ldb	r4,0(r16)
    98f0:	00800c04 	movi	r2,48
    98f4:	20805e26 	beq	r4,r2,9a70 <___vfprintf_internal_r+0x2150>
    98f8:	d8c02617 	ldw	r3,152(sp)
    98fc:	e0f9883a 	add	fp,fp,r3
    9900:	003e0a06 	br	912c <__alt_data_end+0xfffd83ec>
    9904:	00c00b44 	movi	r3,45
    9908:	24e0003c 	xorhi	r19,r4,32768
    990c:	d8c02905 	stb	r3,164(sp)
    9910:	003de906 	br	90b8 <__alt_data_end+0xfffd8378>
    9914:	d8c03217 	ldw	r3,200(sp)
    9918:	00c07a0e 	bge	zero,r3,9b04 <___vfprintf_internal_r+0x21e4>
    991c:	00800044 	movi	r2,1
    9920:	d9003317 	ldw	r4,204(sp)
    9924:	1105883a 	add	r2,r2,r4
    9928:	d8802b15 	stw	r2,172(sp)
    992c:	10004e16 	blt	r2,zero,9a68 <___vfprintf_internal_r+0x2148>
    9930:	044019c4 	movi	r17,103
    9934:	003e2106 	br	91bc <__alt_data_end+0xfffd847c>
    9938:	d9002a17 	ldw	r4,168(sp)
    993c:	d8802104 	addi	r2,sp,132
    9940:	d8800315 	stw	r2,12(sp)
    9944:	d9000015 	stw	r4,0(sp)
    9948:	d8802504 	addi	r2,sp,148
    994c:	d9403617 	ldw	r5,216(sp)
    9950:	d9002d17 	ldw	r4,180(sp)
    9954:	d8800215 	stw	r2,8(sp)
    9958:	d8802604 	addi	r2,sp,152
    995c:	d8800115 	stw	r2,4(sp)
    9960:	01c000c4 	movi	r7,3
    9964:	980d883a 	mov	r6,r19
    9968:	da003d15 	stw	r8,244(sp)
    996c:	000a0500 	call	a050 <_dtoa_r>
    9970:	d8c02a17 	ldw	r3,168(sp)
    9974:	da003d17 	ldw	r8,244(sp)
    9978:	1021883a 	mov	r16,r2
    997c:	00801184 	movi	r2,70
    9980:	80f9883a 	add	fp,r16,r3
    9984:	88bfd926 	beq	r17,r2,98ec <__alt_data_end+0xfffd8bac>
    9988:	003de806 	br	912c <__alt_data_end+0xfffd83ec>
    998c:	d9002a17 	ldw	r4,168(sp)
    9990:	00c04d0e 	bge	zero,r3,9ac8 <___vfprintf_internal_r+0x21a8>
    9994:	2000441e 	bne	r4,zero,9aa8 <___vfprintf_internal_r+0x2188>
    9998:	9480004c 	andi	r18,r18,1
    999c:	9000421e 	bne	r18,zero,9aa8 <___vfprintf_internal_r+0x2188>
    99a0:	1805883a 	mov	r2,r3
    99a4:	18006f16 	blt	r3,zero,9b64 <___vfprintf_internal_r+0x2244>
    99a8:	d8c03217 	ldw	r3,200(sp)
    99ac:	d8c02b15 	stw	r3,172(sp)
    99b0:	003e0206 	br	91bc <__alt_data_end+0xfffd847c>
    99b4:	df0022c4 	addi	fp,sp,139
    99b8:	dc002a15 	stw	r16,168(sp)
    99bc:	4027883a 	mov	r19,r8
    99c0:	e021883a 	mov	r16,fp
    99c4:	b009883a 	mov	r4,r22
    99c8:	01400284 	movi	r5,10
    99cc:	0004de40 	call	4de4 <__modsi3>
    99d0:	10800c04 	addi	r2,r2,48
    99d4:	843fffc4 	addi	r16,r16,-1
    99d8:	b009883a 	mov	r4,r22
    99dc:	01400284 	movi	r5,10
    99e0:	80800005 	stb	r2,0(r16)
    99e4:	0004d600 	call	4d60 <__divsi3>
    99e8:	102d883a 	mov	r22,r2
    99ec:	00800244 	movi	r2,9
    99f0:	15bff416 	blt	r2,r22,99c4 <__alt_data_end+0xfffd8c84>
    99f4:	9811883a 	mov	r8,r19
    99f8:	b0800c04 	addi	r2,r22,48
    99fc:	8027883a 	mov	r19,r16
    9a00:	997fffc4 	addi	r5,r19,-1
    9a04:	98bfffc5 	stb	r2,-1(r19)
    9a08:	dc002a17 	ldw	r16,168(sp)
    9a0c:	2f006d2e 	bgeu	r5,fp,9bc4 <___vfprintf_internal_r+0x22a4>
    9a10:	d9c02384 	addi	r7,sp,142
    9a14:	3ccfc83a 	sub	r7,r7,r19
    9a18:	d9002344 	addi	r4,sp,141
    9a1c:	e1cf883a 	add	r7,fp,r7
    9a20:	00000106 	br	9a28 <___vfprintf_internal_r+0x2108>
    9a24:	28800003 	ldbu	r2,0(r5)
    9a28:	20800005 	stb	r2,0(r4)
    9a2c:	21000044 	addi	r4,r4,1
    9a30:	29400044 	addi	r5,r5,1
    9a34:	393ffb1e 	bne	r7,r4,9a24 <__alt_data_end+0xfffd8ce4>
    9a38:	d8802304 	addi	r2,sp,140
    9a3c:	14c5c83a 	sub	r2,r2,r19
    9a40:	d8c02344 	addi	r3,sp,141
    9a44:	1885883a 	add	r2,r3,r2
    9a48:	003f7006 	br	980c <__alt_data_end+0xfffd8acc>
    9a4c:	0005883a 	mov	r2,zero
    9a50:	003f0f06 	br	9690 <__alt_data_end+0xfffd8950>
    9a54:	d8c03217 	ldw	r3,200(sp)
    9a58:	18c00044 	addi	r3,r3,1
    9a5c:	d8c02b15 	stw	r3,172(sp)
    9a60:	1805883a 	mov	r2,r3
    9a64:	183fb20e 	bge	r3,zero,9930 <__alt_data_end+0xfffd8bf0>
    9a68:	0005883a 	mov	r2,zero
    9a6c:	003fb006 	br	9930 <__alt_data_end+0xfffd8bf0>
    9a70:	d9003617 	ldw	r4,216(sp)
    9a74:	000d883a 	mov	r6,zero
    9a78:	000f883a 	mov	r7,zero
    9a7c:	980b883a 	mov	r5,r19
    9a80:	d8c03c15 	stw	r3,240(sp)
    9a84:	da003d15 	stw	r8,244(sp)
    9a88:	00061b80 	call	61b8 <__eqdf2>
    9a8c:	d8c03c17 	ldw	r3,240(sp)
    9a90:	da003d17 	ldw	r8,244(sp)
    9a94:	103f9826 	beq	r2,zero,98f8 <__alt_data_end+0xfffd8bb8>
    9a98:	00800044 	movi	r2,1
    9a9c:	10c7c83a 	sub	r3,r2,r3
    9aa0:	d8c02615 	stw	r3,152(sp)
    9aa4:	003f9506 	br	98fc <__alt_data_end+0xfffd8bbc>
    9aa8:	d9002a17 	ldw	r4,168(sp)
    9aac:	d8c03217 	ldw	r3,200(sp)
    9ab0:	20800044 	addi	r2,r4,1
    9ab4:	1885883a 	add	r2,r3,r2
    9ab8:	d8802b15 	stw	r2,172(sp)
    9abc:	103dbf0e 	bge	r2,zero,91bc <__alt_data_end+0xfffd847c>
    9ac0:	0005883a 	mov	r2,zero
    9ac4:	003dbd06 	br	91bc <__alt_data_end+0xfffd847c>
    9ac8:	2000201e 	bne	r4,zero,9b4c <___vfprintf_internal_r+0x222c>
    9acc:	9480004c 	andi	r18,r18,1
    9ad0:	90001e1e 	bne	r18,zero,9b4c <___vfprintf_internal_r+0x222c>
    9ad4:	00800044 	movi	r2,1
    9ad8:	d8802b15 	stw	r2,172(sp)
    9adc:	003db706 	br	91bc <__alt_data_end+0xfffd847c>
    9ae0:	00800b44 	movi	r2,45
    9ae4:	05adc83a 	sub	r22,zero,r22
    9ae8:	d8802305 	stb	r2,140(sp)
    9aec:	003f3f06 	br	97ec <__alt_data_end+0xfffd8aac>
    9af0:	0005883a 	mov	r2,zero
    9af4:	003f5206 	br	9840 <__alt_data_end+0xfffd8b00>
    9af8:	90a4703a 	and	r18,r18,r2
    9afc:	903f4e26 	beq	r18,zero,9838 <__alt_data_end+0xfffd8af8>
    9b00:	003f4a06 	br	982c <__alt_data_end+0xfffd8aec>
    9b04:	00800084 	movi	r2,2
    9b08:	10c5c83a 	sub	r2,r2,r3
    9b0c:	003f8406 	br	9920 <__alt_data_end+0xfffd8be0>
    9b10:	d9402e17 	ldw	r5,184(sp)
    9b14:	d9002e17 	ldw	r4,184(sp)
    9b18:	ac400043 	ldbu	r17,1(r21)
    9b1c:	29400017 	ldw	r5,0(r5)
    9b20:	20800104 	addi	r2,r4,4
    9b24:	d8802e15 	stw	r2,184(sp)
    9b28:	d9402a15 	stw	r5,168(sp)
    9b2c:	182b883a 	mov	r21,r3
    9b30:	283e7b0e 	bge	r5,zero,9520 <__alt_data_end+0xfffd87e0>
    9b34:	8c403fcc 	andi	r17,r17,255
    9b38:	017fffc4 	movi	r5,-1
    9b3c:	8c40201c 	xori	r17,r17,128
    9b40:	d9402a15 	stw	r5,168(sp)
    9b44:	8c7fe004 	addi	r17,r17,-128
    9b48:	0037d706 	br	7aa8 <__alt_data_end+0xfffd6d68>
    9b4c:	d8c02a17 	ldw	r3,168(sp)
    9b50:	18c00084 	addi	r3,r3,2
    9b54:	d8c02b15 	stw	r3,172(sp)
    9b58:	1805883a 	mov	r2,r3
    9b5c:	183d970e 	bge	r3,zero,91bc <__alt_data_end+0xfffd847c>
    9b60:	003fd706 	br	9ac0 <__alt_data_end+0xfffd8d80>
    9b64:	0005883a 	mov	r2,zero
    9b68:	003f8f06 	br	99a8 <__alt_data_end+0xfffd8c68>
    9b6c:	9080004c 	andi	r2,r18,1
    9b70:	103f821e 	bne	r2,zero,997c <__alt_data_end+0xfffd8c3c>
    9b74:	d8802117 	ldw	r2,132(sp)
    9b78:	1405c83a 	sub	r2,r2,r16
    9b7c:	d8803315 	stw	r2,204(sp)
    9b80:	b47ef426 	beq	r22,r17,9754 <__alt_data_end+0xfffd8a14>
    9b84:	dd802617 	ldw	r22,152(sp)
    9b88:	003f1206 	br	97d4 <__alt_data_end+0xfffd8a94>
    9b8c:	d8c02b03 	ldbu	r3,172(sp)
    9b90:	d8c02785 	stb	r3,158(sp)
    9b94:	0038df06 	br	7f14 <__alt_data_end+0xfffd71d4>
    9b98:	d8c02b03 	ldbu	r3,172(sp)
    9b9c:	d8c02785 	stb	r3,158(sp)
    9ba0:	0038aa06 	br	7e4c <__alt_data_end+0xfffd710c>
    9ba4:	d8c02b03 	ldbu	r3,172(sp)
    9ba8:	d8c02785 	stb	r3,158(sp)
    9bac:	003a4306 	br	84bc <__alt_data_end+0xfffd777c>
    9bb0:	d8c02b03 	ldbu	r3,172(sp)
    9bb4:	d8c02785 	stb	r3,158(sp)
    9bb8:	003af506 	br	8790 <__alt_data_end+0xfffd7a50>
    9bbc:	0005883a 	mov	r2,zero
    9bc0:	003d7b06 	br	91b0 <__alt_data_end+0xfffd8470>
    9bc4:	d8802344 	addi	r2,sp,141
    9bc8:	003f1006 	br	980c <__alt_data_end+0xfffd8acc>
    9bcc:	d8c02b03 	ldbu	r3,172(sp)
    9bd0:	d8c02785 	stb	r3,158(sp)
    9bd4:	0038fd06 	br	7fcc <__alt_data_end+0xfffd728c>
    9bd8:	d8c02b03 	ldbu	r3,172(sp)
    9bdc:	d8c02785 	stb	r3,158(sp)
    9be0:	003a9706 	br	8640 <__alt_data_end+0xfffd7900>
    9be4:	d8c02b03 	ldbu	r3,172(sp)
    9be8:	d8c02785 	stb	r3,158(sp)
    9bec:	003a1806 	br	8450 <__alt_data_end+0xfffd7710>
    9bf0:	d8c02b03 	ldbu	r3,172(sp)
    9bf4:	d8c02785 	stb	r3,158(sp)
    9bf8:	003abe06 	br	86f4 <__alt_data_end+0xfffd79b4>

00009bfc <__vfprintf_internal>:
    9bfc:	008000b4 	movhi	r2,2
    9c00:	10b99a04 	addi	r2,r2,-6552
    9c04:	300f883a 	mov	r7,r6
    9c08:	280d883a 	mov	r6,r5
    9c0c:	200b883a 	mov	r5,r4
    9c10:	11000017 	ldw	r4,0(r2)
    9c14:	00079201 	jmpi	7920 <___vfprintf_internal_r>

00009c18 <__sbprintf>:
    9c18:	2880030b 	ldhu	r2,12(r5)
    9c1c:	2ac01917 	ldw	r11,100(r5)
    9c20:	2a80038b 	ldhu	r10,14(r5)
    9c24:	2a400717 	ldw	r9,28(r5)
    9c28:	2a000917 	ldw	r8,36(r5)
    9c2c:	defee204 	addi	sp,sp,-1144
    9c30:	00c10004 	movi	r3,1024
    9c34:	dc011a15 	stw	r16,1128(sp)
    9c38:	10bfff4c 	andi	r2,r2,65533
    9c3c:	2821883a 	mov	r16,r5
    9c40:	d8cb883a 	add	r5,sp,r3
    9c44:	dc811c15 	stw	r18,1136(sp)
    9c48:	dc411b15 	stw	r17,1132(sp)
    9c4c:	dfc11d15 	stw	ra,1140(sp)
    9c50:	2025883a 	mov	r18,r4
    9c54:	d881030d 	sth	r2,1036(sp)
    9c58:	dac11915 	stw	r11,1124(sp)
    9c5c:	da81038d 	sth	r10,1038(sp)
    9c60:	da410715 	stw	r9,1052(sp)
    9c64:	da010915 	stw	r8,1060(sp)
    9c68:	dec10015 	stw	sp,1024(sp)
    9c6c:	dec10415 	stw	sp,1040(sp)
    9c70:	d8c10215 	stw	r3,1032(sp)
    9c74:	d8c10515 	stw	r3,1044(sp)
    9c78:	d8010615 	stw	zero,1048(sp)
    9c7c:	00079200 	call	7920 <___vfprintf_internal_r>
    9c80:	1023883a 	mov	r17,r2
    9c84:	10000416 	blt	r2,zero,9c98 <__sbprintf+0x80>
    9c88:	d9410004 	addi	r5,sp,1024
    9c8c:	9009883a 	mov	r4,r18
    9c90:	000b8f40 	call	b8f4 <_fflush_r>
    9c94:	10000d1e 	bne	r2,zero,9ccc <__sbprintf+0xb4>
    9c98:	d881030b 	ldhu	r2,1036(sp)
    9c9c:	1080100c 	andi	r2,r2,64
    9ca0:	10000326 	beq	r2,zero,9cb0 <__sbprintf+0x98>
    9ca4:	8080030b 	ldhu	r2,12(r16)
    9ca8:	10801014 	ori	r2,r2,64
    9cac:	8080030d 	sth	r2,12(r16)
    9cb0:	8805883a 	mov	r2,r17
    9cb4:	dfc11d17 	ldw	ra,1140(sp)
    9cb8:	dc811c17 	ldw	r18,1136(sp)
    9cbc:	dc411b17 	ldw	r17,1132(sp)
    9cc0:	dc011a17 	ldw	r16,1128(sp)
    9cc4:	dec11e04 	addi	sp,sp,1144
    9cc8:	f800283a 	ret
    9ccc:	047fffc4 	movi	r17,-1
    9cd0:	003ff106 	br	9c98 <__alt_data_end+0xfffd8f58>

00009cd4 <__swsetup_r>:
    9cd4:	008000b4 	movhi	r2,2
    9cd8:	defffd04 	addi	sp,sp,-12
    9cdc:	10b99a04 	addi	r2,r2,-6552
    9ce0:	dc400115 	stw	r17,4(sp)
    9ce4:	2023883a 	mov	r17,r4
    9ce8:	11000017 	ldw	r4,0(r2)
    9cec:	dc000015 	stw	r16,0(sp)
    9cf0:	dfc00215 	stw	ra,8(sp)
    9cf4:	2821883a 	mov	r16,r5
    9cf8:	20000226 	beq	r4,zero,9d04 <__swsetup_r+0x30>
    9cfc:	20800e17 	ldw	r2,56(r4)
    9d00:	10003126 	beq	r2,zero,9dc8 <__swsetup_r+0xf4>
    9d04:	8080030b 	ldhu	r2,12(r16)
    9d08:	10c0020c 	andi	r3,r2,8
    9d0c:	1009883a 	mov	r4,r2
    9d10:	18000f26 	beq	r3,zero,9d50 <__swsetup_r+0x7c>
    9d14:	80c00417 	ldw	r3,16(r16)
    9d18:	18001526 	beq	r3,zero,9d70 <__swsetup_r+0x9c>
    9d1c:	1100004c 	andi	r4,r2,1
    9d20:	20001c1e 	bne	r4,zero,9d94 <__swsetup_r+0xc0>
    9d24:	1080008c 	andi	r2,r2,2
    9d28:	1000291e 	bne	r2,zero,9dd0 <__swsetup_r+0xfc>
    9d2c:	80800517 	ldw	r2,20(r16)
    9d30:	80800215 	stw	r2,8(r16)
    9d34:	18001c26 	beq	r3,zero,9da8 <__swsetup_r+0xd4>
    9d38:	0005883a 	mov	r2,zero
    9d3c:	dfc00217 	ldw	ra,8(sp)
    9d40:	dc400117 	ldw	r17,4(sp)
    9d44:	dc000017 	ldw	r16,0(sp)
    9d48:	dec00304 	addi	sp,sp,12
    9d4c:	f800283a 	ret
    9d50:	2080040c 	andi	r2,r4,16
    9d54:	10002e26 	beq	r2,zero,9e10 <__swsetup_r+0x13c>
    9d58:	2080010c 	andi	r2,r4,4
    9d5c:	10001e1e 	bne	r2,zero,9dd8 <__swsetup_r+0x104>
    9d60:	80c00417 	ldw	r3,16(r16)
    9d64:	20800214 	ori	r2,r4,8
    9d68:	8080030d 	sth	r2,12(r16)
    9d6c:	183feb1e 	bne	r3,zero,9d1c <__alt_data_end+0xfffd8fdc>
    9d70:	1100a00c 	andi	r4,r2,640
    9d74:	01408004 	movi	r5,512
    9d78:	217fe826 	beq	r4,r5,9d1c <__alt_data_end+0xfffd8fdc>
    9d7c:	800b883a 	mov	r5,r16
    9d80:	8809883a 	mov	r4,r17
    9d84:	000c8900 	call	c890 <__smakebuf_r>
    9d88:	8080030b 	ldhu	r2,12(r16)
    9d8c:	80c00417 	ldw	r3,16(r16)
    9d90:	003fe206 	br	9d1c <__alt_data_end+0xfffd8fdc>
    9d94:	80800517 	ldw	r2,20(r16)
    9d98:	80000215 	stw	zero,8(r16)
    9d9c:	0085c83a 	sub	r2,zero,r2
    9da0:	80800615 	stw	r2,24(r16)
    9da4:	183fe41e 	bne	r3,zero,9d38 <__alt_data_end+0xfffd8ff8>
    9da8:	80c0030b 	ldhu	r3,12(r16)
    9dac:	0005883a 	mov	r2,zero
    9db0:	1900200c 	andi	r4,r3,128
    9db4:	203fe126 	beq	r4,zero,9d3c <__alt_data_end+0xfffd8ffc>
    9db8:	18c01014 	ori	r3,r3,64
    9dbc:	80c0030d 	sth	r3,12(r16)
    9dc0:	00bfffc4 	movi	r2,-1
    9dc4:	003fdd06 	br	9d3c <__alt_data_end+0xfffd8ffc>
    9dc8:	000bce00 	call	bce0 <__sinit>
    9dcc:	003fcd06 	br	9d04 <__alt_data_end+0xfffd8fc4>
    9dd0:	0005883a 	mov	r2,zero
    9dd4:	003fd606 	br	9d30 <__alt_data_end+0xfffd8ff0>
    9dd8:	81400c17 	ldw	r5,48(r16)
    9ddc:	28000626 	beq	r5,zero,9df8 <__swsetup_r+0x124>
    9de0:	80801004 	addi	r2,r16,64
    9de4:	28800326 	beq	r5,r2,9df4 <__swsetup_r+0x120>
    9de8:	8809883a 	mov	r4,r17
    9dec:	000be540 	call	be54 <_free_r>
    9df0:	8100030b 	ldhu	r4,12(r16)
    9df4:	80000c15 	stw	zero,48(r16)
    9df8:	80c00417 	ldw	r3,16(r16)
    9dfc:	00bff6c4 	movi	r2,-37
    9e00:	1108703a 	and	r4,r2,r4
    9e04:	80000115 	stw	zero,4(r16)
    9e08:	80c00015 	stw	r3,0(r16)
    9e0c:	003fd506 	br	9d64 <__alt_data_end+0xfffd9024>
    9e10:	00800244 	movi	r2,9
    9e14:	88800015 	stw	r2,0(r17)
    9e18:	20801014 	ori	r2,r4,64
    9e1c:	8080030d 	sth	r2,12(r16)
    9e20:	00bfffc4 	movi	r2,-1
    9e24:	003fc506 	br	9d3c <__alt_data_end+0xfffd8ffc>

00009e28 <quorem>:
    9e28:	defff204 	addi	sp,sp,-56
    9e2c:	ddc00b15 	stw	r23,44(sp)
    9e30:	20800417 	ldw	r2,16(r4)
    9e34:	2dc00417 	ldw	r23,16(r5)
    9e38:	dfc00d15 	stw	ra,52(sp)
    9e3c:	df000c15 	stw	fp,48(sp)
    9e40:	dd800a15 	stw	r22,40(sp)
    9e44:	dd400915 	stw	r21,36(sp)
    9e48:	dd000815 	stw	r20,32(sp)
    9e4c:	dcc00715 	stw	r19,28(sp)
    9e50:	dc800615 	stw	r18,24(sp)
    9e54:	dc400515 	stw	r17,20(sp)
    9e58:	dc000415 	stw	r16,16(sp)
    9e5c:	15c07a16 	blt	r2,r23,a048 <quorem+0x220>
    9e60:	bdffffc4 	addi	r23,r23,-1
    9e64:	bde9883a 	add	r20,r23,r23
    9e68:	28c00504 	addi	r3,r5,20
    9e6c:	a529883a 	add	r20,r20,r20
    9e70:	1d39883a 	add	fp,r3,r20
    9e74:	24c00504 	addi	r19,r4,20
    9e78:	d9400215 	stw	r5,8(sp)
    9e7c:	9d29883a 	add	r20,r19,r20
    9e80:	e1400017 	ldw	r5,0(fp)
    9e84:	d9000015 	stw	r4,0(sp)
    9e88:	a1000017 	ldw	r4,0(r20)
    9e8c:	29400044 	addi	r5,r5,1
    9e90:	d8c00115 	stw	r3,4(sp)
    9e94:	dd000315 	stw	r20,12(sp)
    9e98:	0004e580 	call	4e58 <__udivsi3>
    9e9c:	1025883a 	mov	r18,r2
    9ea0:	10003026 	beq	r2,zero,9f64 <quorem+0x13c>
    9ea4:	dc400117 	ldw	r17,4(sp)
    9ea8:	9829883a 	mov	r20,r19
    9eac:	002d883a 	mov	r22,zero
    9eb0:	0021883a 	mov	r16,zero
    9eb4:	8d400017 	ldw	r21,0(r17)
    9eb8:	900b883a 	mov	r5,r18
    9ebc:	8c400104 	addi	r17,r17,4
    9ec0:	a93fffcc 	andi	r4,r21,65535
    9ec4:	0004f140 	call	4f14 <__mulsi3>
    9ec8:	a808d43a 	srli	r4,r21,16
    9ecc:	900b883a 	mov	r5,r18
    9ed0:	15ad883a 	add	r22,r2,r22
    9ed4:	0004f140 	call	4f14 <__mulsi3>
    9ed8:	a1000017 	ldw	r4,0(r20)
    9edc:	b00cd43a 	srli	r6,r22,16
    9ee0:	b0ffffcc 	andi	r3,r22,65535
    9ee4:	217fffcc 	andi	r5,r4,65535
    9ee8:	2c21883a 	add	r16,r5,r16
    9eec:	80c7c83a 	sub	r3,r16,r3
    9ef0:	2008d43a 	srli	r4,r4,16
    9ef4:	1185883a 	add	r2,r2,r6
    9ef8:	1821d43a 	srai	r16,r3,16
    9efc:	117fffcc 	andi	r5,r2,65535
    9f00:	2149c83a 	sub	r4,r4,r5
    9f04:	2421883a 	add	r16,r4,r16
    9f08:	8008943a 	slli	r4,r16,16
    9f0c:	18ffffcc 	andi	r3,r3,65535
    9f10:	102cd43a 	srli	r22,r2,16
    9f14:	20c8b03a 	or	r4,r4,r3
    9f18:	a1000015 	stw	r4,0(r20)
    9f1c:	8021d43a 	srai	r16,r16,16
    9f20:	a5000104 	addi	r20,r20,4
    9f24:	e47fe32e 	bgeu	fp,r17,9eb4 <__alt_data_end+0xfffd9174>
    9f28:	d8c00317 	ldw	r3,12(sp)
    9f2c:	18800017 	ldw	r2,0(r3)
    9f30:	10000c1e 	bne	r2,zero,9f64 <quorem+0x13c>
    9f34:	18bfff04 	addi	r2,r3,-4
    9f38:	9880082e 	bgeu	r19,r2,9f5c <quorem+0x134>
    9f3c:	18ffff17 	ldw	r3,-4(r3)
    9f40:	18000326 	beq	r3,zero,9f50 <quorem+0x128>
    9f44:	00000506 	br	9f5c <quorem+0x134>
    9f48:	10c00017 	ldw	r3,0(r2)
    9f4c:	1800031e 	bne	r3,zero,9f5c <quorem+0x134>
    9f50:	10bfff04 	addi	r2,r2,-4
    9f54:	bdffffc4 	addi	r23,r23,-1
    9f58:	98bffb36 	bltu	r19,r2,9f48 <__alt_data_end+0xfffd9208>
    9f5c:	d8c00017 	ldw	r3,0(sp)
    9f60:	1dc00415 	stw	r23,16(r3)
    9f64:	d9400217 	ldw	r5,8(sp)
    9f68:	d9000017 	ldw	r4,0(sp)
    9f6c:	000e08c0 	call	e08c <__mcmp>
    9f70:	10002816 	blt	r2,zero,a014 <quorem+0x1ec>
    9f74:	dc400117 	ldw	r17,4(sp)
    9f78:	94800044 	addi	r18,r18,1
    9f7c:	980d883a 	mov	r6,r19
    9f80:	0007883a 	mov	r3,zero
    9f84:	31000017 	ldw	r4,0(r6)
    9f88:	89400017 	ldw	r5,0(r17)
    9f8c:	31800104 	addi	r6,r6,4
    9f90:	20bfffcc 	andi	r2,r4,65535
    9f94:	10c7883a 	add	r3,r2,r3
    9f98:	28bfffcc 	andi	r2,r5,65535
    9f9c:	1885c83a 	sub	r2,r3,r2
    9fa0:	280ad43a 	srli	r5,r5,16
    9fa4:	2008d43a 	srli	r4,r4,16
    9fa8:	1007d43a 	srai	r3,r2,16
    9fac:	10bfffcc 	andi	r2,r2,65535
    9fb0:	2149c83a 	sub	r4,r4,r5
    9fb4:	20c9883a 	add	r4,r4,r3
    9fb8:	200a943a 	slli	r5,r4,16
    9fbc:	8c400104 	addi	r17,r17,4
    9fc0:	2007d43a 	srai	r3,r4,16
    9fc4:	2884b03a 	or	r2,r5,r2
    9fc8:	30bfff15 	stw	r2,-4(r6)
    9fcc:	e47fed2e 	bgeu	fp,r17,9f84 <__alt_data_end+0xfffd9244>
    9fd0:	bdc5883a 	add	r2,r23,r23
    9fd4:	1085883a 	add	r2,r2,r2
    9fd8:	9887883a 	add	r3,r19,r2
    9fdc:	18800017 	ldw	r2,0(r3)
    9fe0:	10000c1e 	bne	r2,zero,a014 <quorem+0x1ec>
    9fe4:	18bfff04 	addi	r2,r3,-4
    9fe8:	9880082e 	bgeu	r19,r2,a00c <quorem+0x1e4>
    9fec:	18ffff17 	ldw	r3,-4(r3)
    9ff0:	18000326 	beq	r3,zero,a000 <quorem+0x1d8>
    9ff4:	00000506 	br	a00c <quorem+0x1e4>
    9ff8:	10c00017 	ldw	r3,0(r2)
    9ffc:	1800031e 	bne	r3,zero,a00c <quorem+0x1e4>
    a000:	10bfff04 	addi	r2,r2,-4
    a004:	bdffffc4 	addi	r23,r23,-1
    a008:	98bffb36 	bltu	r19,r2,9ff8 <__alt_data_end+0xfffd92b8>
    a00c:	d8c00017 	ldw	r3,0(sp)
    a010:	1dc00415 	stw	r23,16(r3)
    a014:	9005883a 	mov	r2,r18
    a018:	dfc00d17 	ldw	ra,52(sp)
    a01c:	df000c17 	ldw	fp,48(sp)
    a020:	ddc00b17 	ldw	r23,44(sp)
    a024:	dd800a17 	ldw	r22,40(sp)
    a028:	dd400917 	ldw	r21,36(sp)
    a02c:	dd000817 	ldw	r20,32(sp)
    a030:	dcc00717 	ldw	r19,28(sp)
    a034:	dc800617 	ldw	r18,24(sp)
    a038:	dc400517 	ldw	r17,20(sp)
    a03c:	dc000417 	ldw	r16,16(sp)
    a040:	dec00e04 	addi	sp,sp,56
    a044:	f800283a 	ret
    a048:	0005883a 	mov	r2,zero
    a04c:	003ff206 	br	a018 <__alt_data_end+0xfffd92d8>

0000a050 <_dtoa_r>:
    a050:	20801017 	ldw	r2,64(r4)
    a054:	deffde04 	addi	sp,sp,-136
    a058:	df002015 	stw	fp,128(sp)
    a05c:	dcc01b15 	stw	r19,108(sp)
    a060:	dc801a15 	stw	r18,104(sp)
    a064:	dc401915 	stw	r17,100(sp)
    a068:	dc001815 	stw	r16,96(sp)
    a06c:	dfc02115 	stw	ra,132(sp)
    a070:	ddc01f15 	stw	r23,124(sp)
    a074:	dd801e15 	stw	r22,120(sp)
    a078:	dd401d15 	stw	r21,116(sp)
    a07c:	dd001c15 	stw	r20,112(sp)
    a080:	d9c00315 	stw	r7,12(sp)
    a084:	2039883a 	mov	fp,r4
    a088:	3023883a 	mov	r17,r6
    a08c:	2825883a 	mov	r18,r5
    a090:	dc002417 	ldw	r16,144(sp)
    a094:	3027883a 	mov	r19,r6
    a098:	10000826 	beq	r2,zero,a0bc <_dtoa_r+0x6c>
    a09c:	21801117 	ldw	r6,68(r4)
    a0a0:	00c00044 	movi	r3,1
    a0a4:	100b883a 	mov	r5,r2
    a0a8:	1986983a 	sll	r3,r3,r6
    a0ac:	11800115 	stw	r6,4(r2)
    a0b0:	10c00215 	stw	r3,8(r2)
    a0b4:	000d7b00 	call	d7b0 <_Bfree>
    a0b8:	e0001015 	stw	zero,64(fp)
    a0bc:	88002e16 	blt	r17,zero,a178 <_dtoa_r+0x128>
    a0c0:	80000015 	stw	zero,0(r16)
    a0c4:	889ffc2c 	andhi	r2,r17,32752
    a0c8:	00dffc34 	movhi	r3,32752
    a0cc:	10c01c26 	beq	r2,r3,a140 <_dtoa_r+0xf0>
    a0d0:	000d883a 	mov	r6,zero
    a0d4:	000f883a 	mov	r7,zero
    a0d8:	9009883a 	mov	r4,r18
    a0dc:	980b883a 	mov	r5,r19
    a0e0:	00061b80 	call	61b8 <__eqdf2>
    a0e4:	10002b1e 	bne	r2,zero,a194 <_dtoa_r+0x144>
    a0e8:	d9c02317 	ldw	r7,140(sp)
    a0ec:	00800044 	movi	r2,1
    a0f0:	38800015 	stw	r2,0(r7)
    a0f4:	d8802517 	ldw	r2,148(sp)
    a0f8:	10019e26 	beq	r2,zero,a774 <_dtoa_r+0x724>
    a0fc:	d8c02517 	ldw	r3,148(sp)
    a100:	008000b4 	movhi	r2,2
    a104:	10b23544 	addi	r2,r2,-14123
    a108:	18800015 	stw	r2,0(r3)
    a10c:	10bfffc4 	addi	r2,r2,-1
    a110:	dfc02117 	ldw	ra,132(sp)
    a114:	df002017 	ldw	fp,128(sp)
    a118:	ddc01f17 	ldw	r23,124(sp)
    a11c:	dd801e17 	ldw	r22,120(sp)
    a120:	dd401d17 	ldw	r21,116(sp)
    a124:	dd001c17 	ldw	r20,112(sp)
    a128:	dcc01b17 	ldw	r19,108(sp)
    a12c:	dc801a17 	ldw	r18,104(sp)
    a130:	dc401917 	ldw	r17,100(sp)
    a134:	dc001817 	ldw	r16,96(sp)
    a138:	dec02204 	addi	sp,sp,136
    a13c:	f800283a 	ret
    a140:	d8c02317 	ldw	r3,140(sp)
    a144:	0089c3c4 	movi	r2,9999
    a148:	18800015 	stw	r2,0(r3)
    a14c:	90017726 	beq	r18,zero,a72c <_dtoa_r+0x6dc>
    a150:	008000b4 	movhi	r2,2
    a154:	10b24104 	addi	r2,r2,-14076
    a158:	d9002517 	ldw	r4,148(sp)
    a15c:	203fec26 	beq	r4,zero,a110 <__alt_data_end+0xfffd93d0>
    a160:	10c000c7 	ldb	r3,3(r2)
    a164:	1801781e 	bne	r3,zero,a748 <_dtoa_r+0x6f8>
    a168:	10c000c4 	addi	r3,r2,3
    a16c:	d9802517 	ldw	r6,148(sp)
    a170:	30c00015 	stw	r3,0(r6)
    a174:	003fe606 	br	a110 <__alt_data_end+0xfffd93d0>
    a178:	04e00034 	movhi	r19,32768
    a17c:	9cffffc4 	addi	r19,r19,-1
    a180:	00800044 	movi	r2,1
    a184:	8ce6703a 	and	r19,r17,r19
    a188:	80800015 	stw	r2,0(r16)
    a18c:	9823883a 	mov	r17,r19
    a190:	003fcc06 	br	a0c4 <__alt_data_end+0xfffd9384>
    a194:	d8800204 	addi	r2,sp,8
    a198:	d8800015 	stw	r2,0(sp)
    a19c:	d9c00104 	addi	r7,sp,4
    a1a0:	900b883a 	mov	r5,r18
    a1a4:	980d883a 	mov	r6,r19
    a1a8:	e009883a 	mov	r4,fp
    a1ac:	8820d53a 	srli	r16,r17,20
    a1b0:	000e4580 	call	e458 <__d2b>
    a1b4:	d8800915 	stw	r2,36(sp)
    a1b8:	8001651e 	bne	r16,zero,a750 <_dtoa_r+0x700>
    a1bc:	dd800217 	ldw	r22,8(sp)
    a1c0:	dc000117 	ldw	r16,4(sp)
    a1c4:	00800804 	movi	r2,32
    a1c8:	b421883a 	add	r16,r22,r16
    a1cc:	80c10c84 	addi	r3,r16,1074
    a1d0:	10c2d10e 	bge	r2,r3,ad18 <_dtoa_r+0xcc8>
    a1d4:	00801004 	movi	r2,64
    a1d8:	81010484 	addi	r4,r16,1042
    a1dc:	10c7c83a 	sub	r3,r2,r3
    a1e0:	9108d83a 	srl	r4,r18,r4
    a1e4:	88e2983a 	sll	r17,r17,r3
    a1e8:	2448b03a 	or	r4,r4,r17
    a1ec:	0011b940 	call	11b94 <__floatunsidf>
    a1f0:	017f8434 	movhi	r5,65040
    a1f4:	01800044 	movi	r6,1
    a1f8:	1009883a 	mov	r4,r2
    a1fc:	194b883a 	add	r5,r3,r5
    a200:	843fffc4 	addi	r16,r16,-1
    a204:	d9801115 	stw	r6,68(sp)
    a208:	000d883a 	mov	r6,zero
    a20c:	01cffe34 	movhi	r7,16376
    a210:	0006c7c0 	call	6c7c <__subdf3>
    a214:	0198dbf4 	movhi	r6,25455
    a218:	01cff4f4 	movhi	r7,16339
    a21c:	3190d844 	addi	r6,r6,17249
    a220:	39e1e9c4 	addi	r7,r7,-30809
    a224:	1009883a 	mov	r4,r2
    a228:	180b883a 	mov	r5,r3
    a22c:	00064100 	call	6410 <__muldf3>
    a230:	01a2d874 	movhi	r6,35681
    a234:	01cff1f4 	movhi	r7,16327
    a238:	31b22cc4 	addi	r6,r6,-14157
    a23c:	39e28a04 	addi	r7,r7,-30168
    a240:	180b883a 	mov	r5,r3
    a244:	1009883a 	mov	r4,r2
    a248:	0004f3c0 	call	4f3c <__adddf3>
    a24c:	8009883a 	mov	r4,r16
    a250:	1029883a 	mov	r20,r2
    a254:	1823883a 	mov	r17,r3
    a258:	00075f80 	call	75f8 <__floatsidf>
    a25c:	019427f4 	movhi	r6,20639
    a260:	01cff4f4 	movhi	r7,16339
    a264:	319e7ec4 	addi	r6,r6,31227
    a268:	39d104c4 	addi	r7,r7,17427
    a26c:	1009883a 	mov	r4,r2
    a270:	180b883a 	mov	r5,r3
    a274:	00064100 	call	6410 <__muldf3>
    a278:	100d883a 	mov	r6,r2
    a27c:	180f883a 	mov	r7,r3
    a280:	a009883a 	mov	r4,r20
    a284:	880b883a 	mov	r5,r17
    a288:	0004f3c0 	call	4f3c <__adddf3>
    a28c:	1009883a 	mov	r4,r2
    a290:	180b883a 	mov	r5,r3
    a294:	1029883a 	mov	r20,r2
    a298:	1823883a 	mov	r17,r3
    a29c:	00075780 	call	7578 <__fixdfsi>
    a2a0:	000d883a 	mov	r6,zero
    a2a4:	000f883a 	mov	r7,zero
    a2a8:	a009883a 	mov	r4,r20
    a2ac:	880b883a 	mov	r5,r17
    a2b0:	d8800515 	stw	r2,20(sp)
    a2b4:	000631c0 	call	631c <__ledf2>
    a2b8:	10028716 	blt	r2,zero,acd8 <_dtoa_r+0xc88>
    a2bc:	d8c00517 	ldw	r3,20(sp)
    a2c0:	00800584 	movi	r2,22
    a2c4:	10c27536 	bltu	r2,r3,ac9c <_dtoa_r+0xc4c>
    a2c8:	180490fa 	slli	r2,r3,3
    a2cc:	00c000b4 	movhi	r3,2
    a2d0:	18f25c04 	addi	r3,r3,-13968
    a2d4:	1885883a 	add	r2,r3,r2
    a2d8:	11000017 	ldw	r4,0(r2)
    a2dc:	11400117 	ldw	r5,4(r2)
    a2e0:	900d883a 	mov	r6,r18
    a2e4:	980f883a 	mov	r7,r19
    a2e8:	00062400 	call	6240 <__gedf2>
    a2ec:	00828d0e 	bge	zero,r2,ad24 <_dtoa_r+0xcd4>
    a2f0:	d9000517 	ldw	r4,20(sp)
    a2f4:	d8000e15 	stw	zero,56(sp)
    a2f8:	213fffc4 	addi	r4,r4,-1
    a2fc:	d9000515 	stw	r4,20(sp)
    a300:	b42dc83a 	sub	r22,r22,r16
    a304:	b5bfffc4 	addi	r22,r22,-1
    a308:	b0026f16 	blt	r22,zero,acc8 <_dtoa_r+0xc78>
    a30c:	d8000815 	stw	zero,32(sp)
    a310:	d9c00517 	ldw	r7,20(sp)
    a314:	38026416 	blt	r7,zero,aca8 <_dtoa_r+0xc58>
    a318:	b1ed883a 	add	r22,r22,r7
    a31c:	d9c00d15 	stw	r7,52(sp)
    a320:	d8000a15 	stw	zero,40(sp)
    a324:	d9800317 	ldw	r6,12(sp)
    a328:	00800244 	movi	r2,9
    a32c:	11811436 	bltu	r2,r6,a780 <_dtoa_r+0x730>
    a330:	00800144 	movi	r2,5
    a334:	1184e10e 	bge	r2,r6,b6bc <_dtoa_r+0x166c>
    a338:	31bfff04 	addi	r6,r6,-4
    a33c:	d9800315 	stw	r6,12(sp)
    a340:	0023883a 	mov	r17,zero
    a344:	d9800317 	ldw	r6,12(sp)
    a348:	008000c4 	movi	r2,3
    a34c:	30836726 	beq	r6,r2,b0ec <_dtoa_r+0x109c>
    a350:	1183410e 	bge	r2,r6,b058 <_dtoa_r+0x1008>
    a354:	d9c00317 	ldw	r7,12(sp)
    a358:	00800104 	movi	r2,4
    a35c:	38827c26 	beq	r7,r2,ad50 <_dtoa_r+0xd00>
    a360:	00800144 	movi	r2,5
    a364:	3884c41e 	bne	r7,r2,b678 <_dtoa_r+0x1628>
    a368:	00800044 	movi	r2,1
    a36c:	d8800b15 	stw	r2,44(sp)
    a370:	d8c00517 	ldw	r3,20(sp)
    a374:	d9002217 	ldw	r4,136(sp)
    a378:	1907883a 	add	r3,r3,r4
    a37c:	19800044 	addi	r6,r3,1
    a380:	d8c00c15 	stw	r3,48(sp)
    a384:	d9800615 	stw	r6,24(sp)
    a388:	0183a40e 	bge	zero,r6,b21c <_dtoa_r+0x11cc>
    a38c:	d9800617 	ldw	r6,24(sp)
    a390:	3021883a 	mov	r16,r6
    a394:	e0001115 	stw	zero,68(fp)
    a398:	008005c4 	movi	r2,23
    a39c:	1184c92e 	bgeu	r2,r6,b6c4 <_dtoa_r+0x1674>
    a3a0:	00c00044 	movi	r3,1
    a3a4:	00800104 	movi	r2,4
    a3a8:	1085883a 	add	r2,r2,r2
    a3ac:	11000504 	addi	r4,r2,20
    a3b0:	180b883a 	mov	r5,r3
    a3b4:	18c00044 	addi	r3,r3,1
    a3b8:	313ffb2e 	bgeu	r6,r4,a3a8 <__alt_data_end+0xfffd9668>
    a3bc:	e1401115 	stw	r5,68(fp)
    a3c0:	e009883a 	mov	r4,fp
    a3c4:	000d7080 	call	d708 <_Balloc>
    a3c8:	d8800715 	stw	r2,28(sp)
    a3cc:	e0801015 	stw	r2,64(fp)
    a3d0:	00800384 	movi	r2,14
    a3d4:	1400f736 	bltu	r2,r16,a7b4 <_dtoa_r+0x764>
    a3d8:	8800f626 	beq	r17,zero,a7b4 <_dtoa_r+0x764>
    a3dc:	d9c00517 	ldw	r7,20(sp)
    a3e0:	01c39a0e 	bge	zero,r7,b24c <_dtoa_r+0x11fc>
    a3e4:	388003cc 	andi	r2,r7,15
    a3e8:	100490fa 	slli	r2,r2,3
    a3ec:	382bd13a 	srai	r21,r7,4
    a3f0:	00c000b4 	movhi	r3,2
    a3f4:	18f25c04 	addi	r3,r3,-13968
    a3f8:	1885883a 	add	r2,r3,r2
    a3fc:	a8c0040c 	andi	r3,r21,16
    a400:	12400017 	ldw	r9,0(r2)
    a404:	12000117 	ldw	r8,4(r2)
    a408:	18037926 	beq	r3,zero,b1f0 <_dtoa_r+0x11a0>
    a40c:	008000b4 	movhi	r2,2
    a410:	10b25204 	addi	r2,r2,-14008
    a414:	11800817 	ldw	r6,32(r2)
    a418:	11c00917 	ldw	r7,36(r2)
    a41c:	9009883a 	mov	r4,r18
    a420:	980b883a 	mov	r5,r19
    a424:	da001715 	stw	r8,92(sp)
    a428:	da401615 	stw	r9,88(sp)
    a42c:	00057e80 	call	57e8 <__divdf3>
    a430:	da001717 	ldw	r8,92(sp)
    a434:	da401617 	ldw	r9,88(sp)
    a438:	ad4003cc 	andi	r21,r21,15
    a43c:	040000c4 	movi	r16,3
    a440:	1023883a 	mov	r17,r2
    a444:	1829883a 	mov	r20,r3
    a448:	a8001126 	beq	r21,zero,a490 <_dtoa_r+0x440>
    a44c:	05c000b4 	movhi	r23,2
    a450:	bdf25204 	addi	r23,r23,-14008
    a454:	4805883a 	mov	r2,r9
    a458:	4007883a 	mov	r3,r8
    a45c:	a980004c 	andi	r6,r21,1
    a460:	1009883a 	mov	r4,r2
    a464:	a82bd07a 	srai	r21,r21,1
    a468:	180b883a 	mov	r5,r3
    a46c:	30000426 	beq	r6,zero,a480 <_dtoa_r+0x430>
    a470:	b9800017 	ldw	r6,0(r23)
    a474:	b9c00117 	ldw	r7,4(r23)
    a478:	84000044 	addi	r16,r16,1
    a47c:	00064100 	call	6410 <__muldf3>
    a480:	bdc00204 	addi	r23,r23,8
    a484:	a83ff51e 	bne	r21,zero,a45c <__alt_data_end+0xfffd971c>
    a488:	1013883a 	mov	r9,r2
    a48c:	1811883a 	mov	r8,r3
    a490:	480d883a 	mov	r6,r9
    a494:	400f883a 	mov	r7,r8
    a498:	8809883a 	mov	r4,r17
    a49c:	a00b883a 	mov	r5,r20
    a4a0:	00057e80 	call	57e8 <__divdf3>
    a4a4:	d8800f15 	stw	r2,60(sp)
    a4a8:	d8c01015 	stw	r3,64(sp)
    a4ac:	d8c00e17 	ldw	r3,56(sp)
    a4b0:	18000626 	beq	r3,zero,a4cc <_dtoa_r+0x47c>
    a4b4:	d9000f17 	ldw	r4,60(sp)
    a4b8:	d9401017 	ldw	r5,64(sp)
    a4bc:	000d883a 	mov	r6,zero
    a4c0:	01cffc34 	movhi	r7,16368
    a4c4:	000631c0 	call	631c <__ledf2>
    a4c8:	10040b16 	blt	r2,zero,b4f8 <_dtoa_r+0x14a8>
    a4cc:	8009883a 	mov	r4,r16
    a4d0:	00075f80 	call	75f8 <__floatsidf>
    a4d4:	d9800f17 	ldw	r6,60(sp)
    a4d8:	d9c01017 	ldw	r7,64(sp)
    a4dc:	1009883a 	mov	r4,r2
    a4e0:	180b883a 	mov	r5,r3
    a4e4:	00064100 	call	6410 <__muldf3>
    a4e8:	000d883a 	mov	r6,zero
    a4ec:	01d00734 	movhi	r7,16412
    a4f0:	1009883a 	mov	r4,r2
    a4f4:	180b883a 	mov	r5,r3
    a4f8:	0004f3c0 	call	4f3c <__adddf3>
    a4fc:	1021883a 	mov	r16,r2
    a500:	d8800617 	ldw	r2,24(sp)
    a504:	047f3034 	movhi	r17,64704
    a508:	1c63883a 	add	r17,r3,r17
    a50c:	10031826 	beq	r2,zero,b170 <_dtoa_r+0x1120>
    a510:	d8c00517 	ldw	r3,20(sp)
    a514:	db000617 	ldw	r12,24(sp)
    a518:	d8c01315 	stw	r3,76(sp)
    a51c:	d9000b17 	ldw	r4,44(sp)
    a520:	20038f26 	beq	r4,zero,b360 <_dtoa_r+0x1310>
    a524:	60bfffc4 	addi	r2,r12,-1
    a528:	100490fa 	slli	r2,r2,3
    a52c:	00c000b4 	movhi	r3,2
    a530:	18f25c04 	addi	r3,r3,-13968
    a534:	1885883a 	add	r2,r3,r2
    a538:	11800017 	ldw	r6,0(r2)
    a53c:	11c00117 	ldw	r7,4(r2)
    a540:	d8800717 	ldw	r2,28(sp)
    a544:	0009883a 	mov	r4,zero
    a548:	014ff834 	movhi	r5,16352
    a54c:	db001615 	stw	r12,88(sp)
    a550:	15c00044 	addi	r23,r2,1
    a554:	00057e80 	call	57e8 <__divdf3>
    a558:	800d883a 	mov	r6,r16
    a55c:	880f883a 	mov	r7,r17
    a560:	1009883a 	mov	r4,r2
    a564:	180b883a 	mov	r5,r3
    a568:	0006c7c0 	call	6c7c <__subdf3>
    a56c:	d9401017 	ldw	r5,64(sp)
    a570:	d9000f17 	ldw	r4,60(sp)
    a574:	102b883a 	mov	r21,r2
    a578:	d8c01215 	stw	r3,72(sp)
    a57c:	00075780 	call	7578 <__fixdfsi>
    a580:	1009883a 	mov	r4,r2
    a584:	1029883a 	mov	r20,r2
    a588:	00075f80 	call	75f8 <__floatsidf>
    a58c:	d9000f17 	ldw	r4,60(sp)
    a590:	d9401017 	ldw	r5,64(sp)
    a594:	100d883a 	mov	r6,r2
    a598:	180f883a 	mov	r7,r3
    a59c:	0006c7c0 	call	6c7c <__subdf3>
    a5a0:	1823883a 	mov	r17,r3
    a5a4:	d8c00717 	ldw	r3,28(sp)
    a5a8:	d9401217 	ldw	r5,72(sp)
    a5ac:	a2000c04 	addi	r8,r20,48
    a5b0:	1021883a 	mov	r16,r2
    a5b4:	1a000005 	stb	r8,0(r3)
    a5b8:	800d883a 	mov	r6,r16
    a5bc:	880f883a 	mov	r7,r17
    a5c0:	a809883a 	mov	r4,r21
    a5c4:	4029883a 	mov	r20,r8
    a5c8:	00062400 	call	6240 <__gedf2>
    a5cc:	00841d16 	blt	zero,r2,b644 <_dtoa_r+0x15f4>
    a5d0:	800d883a 	mov	r6,r16
    a5d4:	880f883a 	mov	r7,r17
    a5d8:	0009883a 	mov	r4,zero
    a5dc:	014ffc34 	movhi	r5,16368
    a5e0:	0006c7c0 	call	6c7c <__subdf3>
    a5e4:	d9401217 	ldw	r5,72(sp)
    a5e8:	100d883a 	mov	r6,r2
    a5ec:	180f883a 	mov	r7,r3
    a5f0:	a809883a 	mov	r4,r21
    a5f4:	00062400 	call	6240 <__gedf2>
    a5f8:	db001617 	ldw	r12,88(sp)
    a5fc:	00840e16 	blt	zero,r2,b638 <_dtoa_r+0x15e8>
    a600:	00800044 	movi	r2,1
    a604:	13006b0e 	bge	r2,r12,a7b4 <_dtoa_r+0x764>
    a608:	d9000717 	ldw	r4,28(sp)
    a60c:	dd800f15 	stw	r22,60(sp)
    a610:	dcc01015 	stw	r19,64(sp)
    a614:	2319883a 	add	r12,r4,r12
    a618:	dcc01217 	ldw	r19,72(sp)
    a61c:	602d883a 	mov	r22,r12
    a620:	dc801215 	stw	r18,72(sp)
    a624:	b825883a 	mov	r18,r23
    a628:	00000906 	br	a650 <_dtoa_r+0x600>
    a62c:	0006c7c0 	call	6c7c <__subdf3>
    a630:	a80d883a 	mov	r6,r21
    a634:	980f883a 	mov	r7,r19
    a638:	1009883a 	mov	r4,r2
    a63c:	180b883a 	mov	r5,r3
    a640:	000631c0 	call	631c <__ledf2>
    a644:	1003e816 	blt	r2,zero,b5e8 <_dtoa_r+0x1598>
    a648:	b825883a 	mov	r18,r23
    a64c:	bd83e926 	beq	r23,r22,b5f4 <_dtoa_r+0x15a4>
    a650:	a809883a 	mov	r4,r21
    a654:	980b883a 	mov	r5,r19
    a658:	000d883a 	mov	r6,zero
    a65c:	01d00934 	movhi	r7,16420
    a660:	00064100 	call	6410 <__muldf3>
    a664:	000d883a 	mov	r6,zero
    a668:	01d00934 	movhi	r7,16420
    a66c:	8009883a 	mov	r4,r16
    a670:	880b883a 	mov	r5,r17
    a674:	102b883a 	mov	r21,r2
    a678:	1827883a 	mov	r19,r3
    a67c:	00064100 	call	6410 <__muldf3>
    a680:	180b883a 	mov	r5,r3
    a684:	1009883a 	mov	r4,r2
    a688:	1821883a 	mov	r16,r3
    a68c:	1023883a 	mov	r17,r2
    a690:	00075780 	call	7578 <__fixdfsi>
    a694:	1009883a 	mov	r4,r2
    a698:	1029883a 	mov	r20,r2
    a69c:	00075f80 	call	75f8 <__floatsidf>
    a6a0:	8809883a 	mov	r4,r17
    a6a4:	800b883a 	mov	r5,r16
    a6a8:	100d883a 	mov	r6,r2
    a6ac:	180f883a 	mov	r7,r3
    a6b0:	0006c7c0 	call	6c7c <__subdf3>
    a6b4:	a5000c04 	addi	r20,r20,48
    a6b8:	a80d883a 	mov	r6,r21
    a6bc:	980f883a 	mov	r7,r19
    a6c0:	1009883a 	mov	r4,r2
    a6c4:	180b883a 	mov	r5,r3
    a6c8:	95000005 	stb	r20,0(r18)
    a6cc:	1021883a 	mov	r16,r2
    a6d0:	1823883a 	mov	r17,r3
    a6d4:	000631c0 	call	631c <__ledf2>
    a6d8:	bdc00044 	addi	r23,r23,1
    a6dc:	800d883a 	mov	r6,r16
    a6e0:	880f883a 	mov	r7,r17
    a6e4:	0009883a 	mov	r4,zero
    a6e8:	014ffc34 	movhi	r5,16368
    a6ec:	103fcf0e 	bge	r2,zero,a62c <__alt_data_end+0xfffd98ec>
    a6f0:	d8c01317 	ldw	r3,76(sp)
    a6f4:	d8c00515 	stw	r3,20(sp)
    a6f8:	d9400917 	ldw	r5,36(sp)
    a6fc:	e009883a 	mov	r4,fp
    a700:	000d7b00 	call	d7b0 <_Bfree>
    a704:	d9000517 	ldw	r4,20(sp)
    a708:	d9802317 	ldw	r6,140(sp)
    a70c:	d9c02517 	ldw	r7,148(sp)
    a710:	b8000005 	stb	zero,0(r23)
    a714:	20800044 	addi	r2,r4,1
    a718:	30800015 	stw	r2,0(r6)
    a71c:	3802aa26 	beq	r7,zero,b1c8 <_dtoa_r+0x1178>
    a720:	3dc00015 	stw	r23,0(r7)
    a724:	d8800717 	ldw	r2,28(sp)
    a728:	003e7906 	br	a110 <__alt_data_end+0xfffd93d0>
    a72c:	00800434 	movhi	r2,16
    a730:	10bfffc4 	addi	r2,r2,-1
    a734:	88a2703a 	and	r17,r17,r2
    a738:	883e851e 	bne	r17,zero,a150 <__alt_data_end+0xfffd9410>
    a73c:	008000b4 	movhi	r2,2
    a740:	10b23e04 	addi	r2,r2,-14088
    a744:	003e8406 	br	a158 <__alt_data_end+0xfffd9418>
    a748:	10c00204 	addi	r3,r2,8
    a74c:	003e8706 	br	a16c <__alt_data_end+0xfffd942c>
    a750:	01400434 	movhi	r5,16
    a754:	297fffc4 	addi	r5,r5,-1
    a758:	994a703a 	and	r5,r19,r5
    a75c:	9009883a 	mov	r4,r18
    a760:	843f0044 	addi	r16,r16,-1023
    a764:	294ffc34 	orhi	r5,r5,16368
    a768:	dd800217 	ldw	r22,8(sp)
    a76c:	d8001115 	stw	zero,68(sp)
    a770:	003ea506 	br	a208 <__alt_data_end+0xfffd94c8>
    a774:	008000b4 	movhi	r2,2
    a778:	10b23504 	addi	r2,r2,-14124
    a77c:	003e6406 	br	a110 <__alt_data_end+0xfffd93d0>
    a780:	e0001115 	stw	zero,68(fp)
    a784:	000b883a 	mov	r5,zero
    a788:	e009883a 	mov	r4,fp
    a78c:	000d7080 	call	d708 <_Balloc>
    a790:	01bfffc4 	movi	r6,-1
    a794:	01c00044 	movi	r7,1
    a798:	d8800715 	stw	r2,28(sp)
    a79c:	d9800c15 	stw	r6,48(sp)
    a7a0:	e0801015 	stw	r2,64(fp)
    a7a4:	d8000315 	stw	zero,12(sp)
    a7a8:	d9c00b15 	stw	r7,44(sp)
    a7ac:	d9800615 	stw	r6,24(sp)
    a7b0:	d8002215 	stw	zero,136(sp)
    a7b4:	d8800117 	ldw	r2,4(sp)
    a7b8:	10008916 	blt	r2,zero,a9e0 <_dtoa_r+0x990>
    a7bc:	d9000517 	ldw	r4,20(sp)
    a7c0:	00c00384 	movi	r3,14
    a7c4:	19008616 	blt	r3,r4,a9e0 <_dtoa_r+0x990>
    a7c8:	200490fa 	slli	r2,r4,3
    a7cc:	00c000b4 	movhi	r3,2
    a7d0:	d9802217 	ldw	r6,136(sp)
    a7d4:	18f25c04 	addi	r3,r3,-13968
    a7d8:	1885883a 	add	r2,r3,r2
    a7dc:	14000017 	ldw	r16,0(r2)
    a7e0:	14400117 	ldw	r17,4(r2)
    a7e4:	30016316 	blt	r6,zero,ad74 <_dtoa_r+0xd24>
    a7e8:	800d883a 	mov	r6,r16
    a7ec:	880f883a 	mov	r7,r17
    a7f0:	9009883a 	mov	r4,r18
    a7f4:	980b883a 	mov	r5,r19
    a7f8:	00057e80 	call	57e8 <__divdf3>
    a7fc:	180b883a 	mov	r5,r3
    a800:	1009883a 	mov	r4,r2
    a804:	00075780 	call	7578 <__fixdfsi>
    a808:	1009883a 	mov	r4,r2
    a80c:	102b883a 	mov	r21,r2
    a810:	00075f80 	call	75f8 <__floatsidf>
    a814:	800d883a 	mov	r6,r16
    a818:	880f883a 	mov	r7,r17
    a81c:	1009883a 	mov	r4,r2
    a820:	180b883a 	mov	r5,r3
    a824:	00064100 	call	6410 <__muldf3>
    a828:	100d883a 	mov	r6,r2
    a82c:	180f883a 	mov	r7,r3
    a830:	9009883a 	mov	r4,r18
    a834:	980b883a 	mov	r5,r19
    a838:	0006c7c0 	call	6c7c <__subdf3>
    a83c:	d9c00717 	ldw	r7,28(sp)
    a840:	1009883a 	mov	r4,r2
    a844:	a8800c04 	addi	r2,r21,48
    a848:	38800005 	stb	r2,0(r7)
    a84c:	3dc00044 	addi	r23,r7,1
    a850:	d9c00617 	ldw	r7,24(sp)
    a854:	01800044 	movi	r6,1
    a858:	180b883a 	mov	r5,r3
    a85c:	2005883a 	mov	r2,r4
    a860:	39803826 	beq	r7,r6,a944 <_dtoa_r+0x8f4>
    a864:	000d883a 	mov	r6,zero
    a868:	01d00934 	movhi	r7,16420
    a86c:	00064100 	call	6410 <__muldf3>
    a870:	000d883a 	mov	r6,zero
    a874:	000f883a 	mov	r7,zero
    a878:	1009883a 	mov	r4,r2
    a87c:	180b883a 	mov	r5,r3
    a880:	1025883a 	mov	r18,r2
    a884:	1827883a 	mov	r19,r3
    a888:	00061b80 	call	61b8 <__eqdf2>
    a88c:	103f9a26 	beq	r2,zero,a6f8 <__alt_data_end+0xfffd99b8>
    a890:	d9c00617 	ldw	r7,24(sp)
    a894:	d8c00717 	ldw	r3,28(sp)
    a898:	b829883a 	mov	r20,r23
    a89c:	38bfffc4 	addi	r2,r7,-1
    a8a0:	18ad883a 	add	r22,r3,r2
    a8a4:	00000a06 	br	a8d0 <_dtoa_r+0x880>
    a8a8:	00064100 	call	6410 <__muldf3>
    a8ac:	000d883a 	mov	r6,zero
    a8b0:	000f883a 	mov	r7,zero
    a8b4:	1009883a 	mov	r4,r2
    a8b8:	180b883a 	mov	r5,r3
    a8bc:	1025883a 	mov	r18,r2
    a8c0:	1827883a 	mov	r19,r3
    a8c4:	b829883a 	mov	r20,r23
    a8c8:	00061b80 	call	61b8 <__eqdf2>
    a8cc:	103f8a26 	beq	r2,zero,a6f8 <__alt_data_end+0xfffd99b8>
    a8d0:	800d883a 	mov	r6,r16
    a8d4:	880f883a 	mov	r7,r17
    a8d8:	9009883a 	mov	r4,r18
    a8dc:	980b883a 	mov	r5,r19
    a8e0:	00057e80 	call	57e8 <__divdf3>
    a8e4:	180b883a 	mov	r5,r3
    a8e8:	1009883a 	mov	r4,r2
    a8ec:	00075780 	call	7578 <__fixdfsi>
    a8f0:	1009883a 	mov	r4,r2
    a8f4:	102b883a 	mov	r21,r2
    a8f8:	00075f80 	call	75f8 <__floatsidf>
    a8fc:	800d883a 	mov	r6,r16
    a900:	880f883a 	mov	r7,r17
    a904:	1009883a 	mov	r4,r2
    a908:	180b883a 	mov	r5,r3
    a90c:	00064100 	call	6410 <__muldf3>
    a910:	100d883a 	mov	r6,r2
    a914:	180f883a 	mov	r7,r3
    a918:	9009883a 	mov	r4,r18
    a91c:	980b883a 	mov	r5,r19
    a920:	0006c7c0 	call	6c7c <__subdf3>
    a924:	aa000c04 	addi	r8,r21,48
    a928:	a2000005 	stb	r8,0(r20)
    a92c:	000d883a 	mov	r6,zero
    a930:	01d00934 	movhi	r7,16420
    a934:	1009883a 	mov	r4,r2
    a938:	180b883a 	mov	r5,r3
    a93c:	a5c00044 	addi	r23,r20,1
    a940:	b53fd91e 	bne	r22,r20,a8a8 <__alt_data_end+0xfffd9b68>
    a944:	100d883a 	mov	r6,r2
    a948:	180f883a 	mov	r7,r3
    a94c:	1009883a 	mov	r4,r2
    a950:	180b883a 	mov	r5,r3
    a954:	0004f3c0 	call	4f3c <__adddf3>
    a958:	100d883a 	mov	r6,r2
    a95c:	180f883a 	mov	r7,r3
    a960:	8009883a 	mov	r4,r16
    a964:	880b883a 	mov	r5,r17
    a968:	1027883a 	mov	r19,r2
    a96c:	1825883a 	mov	r18,r3
    a970:	000631c0 	call	631c <__ledf2>
    a974:	10000816 	blt	r2,zero,a998 <_dtoa_r+0x948>
    a978:	980d883a 	mov	r6,r19
    a97c:	900f883a 	mov	r7,r18
    a980:	8009883a 	mov	r4,r16
    a984:	880b883a 	mov	r5,r17
    a988:	00061b80 	call	61b8 <__eqdf2>
    a98c:	103f5a1e 	bne	r2,zero,a6f8 <__alt_data_end+0xfffd99b8>
    a990:	ad40004c 	andi	r21,r21,1
    a994:	a83f5826 	beq	r21,zero,a6f8 <__alt_data_end+0xfffd99b8>
    a998:	bd3fffc3 	ldbu	r20,-1(r23)
    a99c:	b8bfffc4 	addi	r2,r23,-1
    a9a0:	1007883a 	mov	r3,r2
    a9a4:	01400e44 	movi	r5,57
    a9a8:	d9800717 	ldw	r6,28(sp)
    a9ac:	00000506 	br	a9c4 <_dtoa_r+0x974>
    a9b0:	18ffffc4 	addi	r3,r3,-1
    a9b4:	11824726 	beq	r2,r6,b2d4 <_dtoa_r+0x1284>
    a9b8:	1d000003 	ldbu	r20,0(r3)
    a9bc:	102f883a 	mov	r23,r2
    a9c0:	10bfffc4 	addi	r2,r2,-1
    a9c4:	a1003fcc 	andi	r4,r20,255
    a9c8:	2100201c 	xori	r4,r4,128
    a9cc:	213fe004 	addi	r4,r4,-128
    a9d0:	217ff726 	beq	r4,r5,a9b0 <__alt_data_end+0xfffd9c70>
    a9d4:	a2000044 	addi	r8,r20,1
    a9d8:	12000005 	stb	r8,0(r2)
    a9dc:	003f4606 	br	a6f8 <__alt_data_end+0xfffd99b8>
    a9e0:	d9000b17 	ldw	r4,44(sp)
    a9e4:	2000c826 	beq	r4,zero,ad08 <_dtoa_r+0xcb8>
    a9e8:	d9800317 	ldw	r6,12(sp)
    a9ec:	00c00044 	movi	r3,1
    a9f0:	1980f90e 	bge	r3,r6,add8 <_dtoa_r+0xd88>
    a9f4:	d8800617 	ldw	r2,24(sp)
    a9f8:	d8c00a17 	ldw	r3,40(sp)
    a9fc:	157fffc4 	addi	r21,r2,-1
    aa00:	1d41f316 	blt	r3,r21,b1d0 <_dtoa_r+0x1180>
    aa04:	1d6bc83a 	sub	r21,r3,r21
    aa08:	d9c00617 	ldw	r7,24(sp)
    aa0c:	3802aa16 	blt	r7,zero,b4b8 <_dtoa_r+0x1468>
    aa10:	dd000817 	ldw	r20,32(sp)
    aa14:	d8800617 	ldw	r2,24(sp)
    aa18:	d8c00817 	ldw	r3,32(sp)
    aa1c:	01400044 	movi	r5,1
    aa20:	e009883a 	mov	r4,fp
    aa24:	1887883a 	add	r3,r3,r2
    aa28:	d8c00815 	stw	r3,32(sp)
    aa2c:	b0ad883a 	add	r22,r22,r2
    aa30:	000db3c0 	call	db3c <__i2b>
    aa34:	1023883a 	mov	r17,r2
    aa38:	a0000826 	beq	r20,zero,aa5c <_dtoa_r+0xa0c>
    aa3c:	0580070e 	bge	zero,r22,aa5c <_dtoa_r+0xa0c>
    aa40:	a005883a 	mov	r2,r20
    aa44:	b500b916 	blt	r22,r20,ad2c <_dtoa_r+0xcdc>
    aa48:	d9000817 	ldw	r4,32(sp)
    aa4c:	a0a9c83a 	sub	r20,r20,r2
    aa50:	b0adc83a 	sub	r22,r22,r2
    aa54:	2089c83a 	sub	r4,r4,r2
    aa58:	d9000815 	stw	r4,32(sp)
    aa5c:	d9800a17 	ldw	r6,40(sp)
    aa60:	0181810e 	bge	zero,r6,b068 <_dtoa_r+0x1018>
    aa64:	d9c00b17 	ldw	r7,44(sp)
    aa68:	3800b326 	beq	r7,zero,ad38 <_dtoa_r+0xce8>
    aa6c:	a800b226 	beq	r21,zero,ad38 <_dtoa_r+0xce8>
    aa70:	880b883a 	mov	r5,r17
    aa74:	a80d883a 	mov	r6,r21
    aa78:	e009883a 	mov	r4,fp
    aa7c:	000de040 	call	de04 <__pow5mult>
    aa80:	d9800917 	ldw	r6,36(sp)
    aa84:	100b883a 	mov	r5,r2
    aa88:	e009883a 	mov	r4,fp
    aa8c:	1023883a 	mov	r17,r2
    aa90:	000db780 	call	db78 <__multiply>
    aa94:	1021883a 	mov	r16,r2
    aa98:	d8800a17 	ldw	r2,40(sp)
    aa9c:	d9400917 	ldw	r5,36(sp)
    aaa0:	e009883a 	mov	r4,fp
    aaa4:	1545c83a 	sub	r2,r2,r21
    aaa8:	d8800a15 	stw	r2,40(sp)
    aaac:	000d7b00 	call	d7b0 <_Bfree>
    aab0:	d8c00a17 	ldw	r3,40(sp)
    aab4:	18009f1e 	bne	r3,zero,ad34 <_dtoa_r+0xce4>
    aab8:	05c00044 	movi	r23,1
    aabc:	e009883a 	mov	r4,fp
    aac0:	b80b883a 	mov	r5,r23
    aac4:	000db3c0 	call	db3c <__i2b>
    aac8:	d9000d17 	ldw	r4,52(sp)
    aacc:	102b883a 	mov	r21,r2
    aad0:	2000ce26 	beq	r4,zero,ae0c <_dtoa_r+0xdbc>
    aad4:	200d883a 	mov	r6,r4
    aad8:	100b883a 	mov	r5,r2
    aadc:	e009883a 	mov	r4,fp
    aae0:	000de040 	call	de04 <__pow5mult>
    aae4:	d9800317 	ldw	r6,12(sp)
    aae8:	102b883a 	mov	r21,r2
    aaec:	b981810e 	bge	r23,r6,b0f4 <_dtoa_r+0x10a4>
    aaf0:	0027883a 	mov	r19,zero
    aaf4:	a8800417 	ldw	r2,16(r21)
    aaf8:	05c00804 	movi	r23,32
    aafc:	10800104 	addi	r2,r2,4
    ab00:	1085883a 	add	r2,r2,r2
    ab04:	1085883a 	add	r2,r2,r2
    ab08:	a885883a 	add	r2,r21,r2
    ab0c:	11000017 	ldw	r4,0(r2)
    ab10:	000da240 	call	da24 <__hi0bits>
    ab14:	b885c83a 	sub	r2,r23,r2
    ab18:	1585883a 	add	r2,r2,r22
    ab1c:	108007cc 	andi	r2,r2,31
    ab20:	1000b326 	beq	r2,zero,adf0 <_dtoa_r+0xda0>
    ab24:	00c00804 	movi	r3,32
    ab28:	1887c83a 	sub	r3,r3,r2
    ab2c:	01000104 	movi	r4,4
    ab30:	20c2cd0e 	bge	r4,r3,b668 <_dtoa_r+0x1618>
    ab34:	00c00704 	movi	r3,28
    ab38:	1885c83a 	sub	r2,r3,r2
    ab3c:	d8c00817 	ldw	r3,32(sp)
    ab40:	a0a9883a 	add	r20,r20,r2
    ab44:	b0ad883a 	add	r22,r22,r2
    ab48:	1887883a 	add	r3,r3,r2
    ab4c:	d8c00815 	stw	r3,32(sp)
    ab50:	d9800817 	ldw	r6,32(sp)
    ab54:	0180040e 	bge	zero,r6,ab68 <_dtoa_r+0xb18>
    ab58:	800b883a 	mov	r5,r16
    ab5c:	e009883a 	mov	r4,fp
    ab60:	000df440 	call	df44 <__lshift>
    ab64:	1021883a 	mov	r16,r2
    ab68:	0580050e 	bge	zero,r22,ab80 <_dtoa_r+0xb30>
    ab6c:	a80b883a 	mov	r5,r21
    ab70:	b00d883a 	mov	r6,r22
    ab74:	e009883a 	mov	r4,fp
    ab78:	000df440 	call	df44 <__lshift>
    ab7c:	102b883a 	mov	r21,r2
    ab80:	d9c00e17 	ldw	r7,56(sp)
    ab84:	3801211e 	bne	r7,zero,b00c <_dtoa_r+0xfbc>
    ab88:	d9800617 	ldw	r6,24(sp)
    ab8c:	0181380e 	bge	zero,r6,b070 <_dtoa_r+0x1020>
    ab90:	d8c00b17 	ldw	r3,44(sp)
    ab94:	1800ab1e 	bne	r3,zero,ae44 <_dtoa_r+0xdf4>
    ab98:	dc800717 	ldw	r18,28(sp)
    ab9c:	dcc00617 	ldw	r19,24(sp)
    aba0:	9029883a 	mov	r20,r18
    aba4:	00000206 	br	abb0 <_dtoa_r+0xb60>
    aba8:	000d7d80 	call	d7d8 <__multadd>
    abac:	1021883a 	mov	r16,r2
    abb0:	a80b883a 	mov	r5,r21
    abb4:	8009883a 	mov	r4,r16
    abb8:	0009e280 	call	9e28 <quorem>
    abbc:	10800c04 	addi	r2,r2,48
    abc0:	90800005 	stb	r2,0(r18)
    abc4:	94800044 	addi	r18,r18,1
    abc8:	9507c83a 	sub	r3,r18,r20
    abcc:	000f883a 	mov	r7,zero
    abd0:	01800284 	movi	r6,10
    abd4:	800b883a 	mov	r5,r16
    abd8:	e009883a 	mov	r4,fp
    abdc:	1cfff216 	blt	r3,r19,aba8 <__alt_data_end+0xfffd9e68>
    abe0:	1011883a 	mov	r8,r2
    abe4:	d8800617 	ldw	r2,24(sp)
    abe8:	0082370e 	bge	zero,r2,b4c8 <_dtoa_r+0x1478>
    abec:	d9000717 	ldw	r4,28(sp)
    abf0:	0025883a 	mov	r18,zero
    abf4:	20af883a 	add	r23,r4,r2
    abf8:	01800044 	movi	r6,1
    abfc:	800b883a 	mov	r5,r16
    ac00:	e009883a 	mov	r4,fp
    ac04:	da001715 	stw	r8,92(sp)
    ac08:	000df440 	call	df44 <__lshift>
    ac0c:	a80b883a 	mov	r5,r21
    ac10:	1009883a 	mov	r4,r2
    ac14:	d8800915 	stw	r2,36(sp)
    ac18:	000e08c0 	call	e08c <__mcmp>
    ac1c:	da001717 	ldw	r8,92(sp)
    ac20:	0081800e 	bge	zero,r2,b224 <_dtoa_r+0x11d4>
    ac24:	b93fffc3 	ldbu	r4,-1(r23)
    ac28:	b8bfffc4 	addi	r2,r23,-1
    ac2c:	1007883a 	mov	r3,r2
    ac30:	01800e44 	movi	r6,57
    ac34:	d9c00717 	ldw	r7,28(sp)
    ac38:	00000506 	br	ac50 <_dtoa_r+0xc00>
    ac3c:	18ffffc4 	addi	r3,r3,-1
    ac40:	11c12326 	beq	r2,r7,b0d0 <_dtoa_r+0x1080>
    ac44:	19000003 	ldbu	r4,0(r3)
    ac48:	102f883a 	mov	r23,r2
    ac4c:	10bfffc4 	addi	r2,r2,-1
    ac50:	21403fcc 	andi	r5,r4,255
    ac54:	2940201c 	xori	r5,r5,128
    ac58:	297fe004 	addi	r5,r5,-128
    ac5c:	29bff726 	beq	r5,r6,ac3c <__alt_data_end+0xfffd9efc>
    ac60:	21000044 	addi	r4,r4,1
    ac64:	11000005 	stb	r4,0(r2)
    ac68:	a80b883a 	mov	r5,r21
    ac6c:	e009883a 	mov	r4,fp
    ac70:	000d7b00 	call	d7b0 <_Bfree>
    ac74:	883ea026 	beq	r17,zero,a6f8 <__alt_data_end+0xfffd99b8>
    ac78:	90000426 	beq	r18,zero,ac8c <_dtoa_r+0xc3c>
    ac7c:	94400326 	beq	r18,r17,ac8c <_dtoa_r+0xc3c>
    ac80:	900b883a 	mov	r5,r18
    ac84:	e009883a 	mov	r4,fp
    ac88:	000d7b00 	call	d7b0 <_Bfree>
    ac8c:	880b883a 	mov	r5,r17
    ac90:	e009883a 	mov	r4,fp
    ac94:	000d7b00 	call	d7b0 <_Bfree>
    ac98:	003e9706 	br	a6f8 <__alt_data_end+0xfffd99b8>
    ac9c:	01800044 	movi	r6,1
    aca0:	d9800e15 	stw	r6,56(sp)
    aca4:	003d9606 	br	a300 <__alt_data_end+0xfffd95c0>
    aca8:	d8800817 	ldw	r2,32(sp)
    acac:	d8c00517 	ldw	r3,20(sp)
    acb0:	d8000d15 	stw	zero,52(sp)
    acb4:	10c5c83a 	sub	r2,r2,r3
    acb8:	00c9c83a 	sub	r4,zero,r3
    acbc:	d8800815 	stw	r2,32(sp)
    acc0:	d9000a15 	stw	r4,40(sp)
    acc4:	003d9706 	br	a324 <__alt_data_end+0xfffd95e4>
    acc8:	05adc83a 	sub	r22,zero,r22
    accc:	dd800815 	stw	r22,32(sp)
    acd0:	002d883a 	mov	r22,zero
    acd4:	003d8e06 	br	a310 <__alt_data_end+0xfffd95d0>
    acd8:	d9000517 	ldw	r4,20(sp)
    acdc:	00075f80 	call	75f8 <__floatsidf>
    ace0:	100d883a 	mov	r6,r2
    ace4:	180f883a 	mov	r7,r3
    ace8:	a009883a 	mov	r4,r20
    acec:	880b883a 	mov	r5,r17
    acf0:	00061b80 	call	61b8 <__eqdf2>
    acf4:	103d7126 	beq	r2,zero,a2bc <__alt_data_end+0xfffd957c>
    acf8:	d9c00517 	ldw	r7,20(sp)
    acfc:	39ffffc4 	addi	r7,r7,-1
    ad00:	d9c00515 	stw	r7,20(sp)
    ad04:	003d6d06 	br	a2bc <__alt_data_end+0xfffd957c>
    ad08:	dd400a17 	ldw	r21,40(sp)
    ad0c:	dd000817 	ldw	r20,32(sp)
    ad10:	0023883a 	mov	r17,zero
    ad14:	003f4806 	br	aa38 <__alt_data_end+0xfffd9cf8>
    ad18:	10e3c83a 	sub	r17,r2,r3
    ad1c:	9448983a 	sll	r4,r18,r17
    ad20:	003d3206 	br	a1ec <__alt_data_end+0xfffd94ac>
    ad24:	d8000e15 	stw	zero,56(sp)
    ad28:	003d7506 	br	a300 <__alt_data_end+0xfffd95c0>
    ad2c:	b005883a 	mov	r2,r22
    ad30:	003f4506 	br	aa48 <__alt_data_end+0xfffd9d08>
    ad34:	dc000915 	stw	r16,36(sp)
    ad38:	d9800a17 	ldw	r6,40(sp)
    ad3c:	d9400917 	ldw	r5,36(sp)
    ad40:	e009883a 	mov	r4,fp
    ad44:	000de040 	call	de04 <__pow5mult>
    ad48:	1021883a 	mov	r16,r2
    ad4c:	003f5a06 	br	aab8 <__alt_data_end+0xfffd9d78>
    ad50:	01c00044 	movi	r7,1
    ad54:	d9c00b15 	stw	r7,44(sp)
    ad58:	d8802217 	ldw	r2,136(sp)
    ad5c:	0081280e 	bge	zero,r2,b200 <_dtoa_r+0x11b0>
    ad60:	100d883a 	mov	r6,r2
    ad64:	1021883a 	mov	r16,r2
    ad68:	d8800c15 	stw	r2,48(sp)
    ad6c:	d8800615 	stw	r2,24(sp)
    ad70:	003d8806 	br	a394 <__alt_data_end+0xfffd9654>
    ad74:	d8800617 	ldw	r2,24(sp)
    ad78:	00be9b16 	blt	zero,r2,a7e8 <__alt_data_end+0xfffd9aa8>
    ad7c:	10010f1e 	bne	r2,zero,b1bc <_dtoa_r+0x116c>
    ad80:	880b883a 	mov	r5,r17
    ad84:	000d883a 	mov	r6,zero
    ad88:	01d00534 	movhi	r7,16404
    ad8c:	8009883a 	mov	r4,r16
    ad90:	00064100 	call	6410 <__muldf3>
    ad94:	900d883a 	mov	r6,r18
    ad98:	980f883a 	mov	r7,r19
    ad9c:	1009883a 	mov	r4,r2
    ada0:	180b883a 	mov	r5,r3
    ada4:	00062400 	call	6240 <__gedf2>
    ada8:	002b883a 	mov	r21,zero
    adac:	0023883a 	mov	r17,zero
    adb0:	1000bf16 	blt	r2,zero,b0b0 <_dtoa_r+0x1060>
    adb4:	d9802217 	ldw	r6,136(sp)
    adb8:	ddc00717 	ldw	r23,28(sp)
    adbc:	018c303a 	nor	r6,zero,r6
    adc0:	d9800515 	stw	r6,20(sp)
    adc4:	a80b883a 	mov	r5,r21
    adc8:	e009883a 	mov	r4,fp
    adcc:	000d7b00 	call	d7b0 <_Bfree>
    add0:	883e4926 	beq	r17,zero,a6f8 <__alt_data_end+0xfffd99b8>
    add4:	003fad06 	br	ac8c <__alt_data_end+0xfffd9f4c>
    add8:	d9c01117 	ldw	r7,68(sp)
    addc:	3801bc26 	beq	r7,zero,b4d0 <_dtoa_r+0x1480>
    ade0:	10810cc4 	addi	r2,r2,1075
    ade4:	dd400a17 	ldw	r21,40(sp)
    ade8:	dd000817 	ldw	r20,32(sp)
    adec:	003f0a06 	br	aa18 <__alt_data_end+0xfffd9cd8>
    adf0:	00800704 	movi	r2,28
    adf4:	d9000817 	ldw	r4,32(sp)
    adf8:	a0a9883a 	add	r20,r20,r2
    adfc:	b0ad883a 	add	r22,r22,r2
    ae00:	2089883a 	add	r4,r4,r2
    ae04:	d9000815 	stw	r4,32(sp)
    ae08:	003f5106 	br	ab50 <__alt_data_end+0xfffd9e10>
    ae0c:	d8c00317 	ldw	r3,12(sp)
    ae10:	b8c1fc0e 	bge	r23,r3,b604 <_dtoa_r+0x15b4>
    ae14:	0027883a 	mov	r19,zero
    ae18:	b805883a 	mov	r2,r23
    ae1c:	003f3e06 	br	ab18 <__alt_data_end+0xfffd9dd8>
    ae20:	880b883a 	mov	r5,r17
    ae24:	e009883a 	mov	r4,fp
    ae28:	000f883a 	mov	r7,zero
    ae2c:	01800284 	movi	r6,10
    ae30:	000d7d80 	call	d7d8 <__multadd>
    ae34:	d9000c17 	ldw	r4,48(sp)
    ae38:	1023883a 	mov	r17,r2
    ae3c:	0102040e 	bge	zero,r4,b650 <_dtoa_r+0x1600>
    ae40:	d9000615 	stw	r4,24(sp)
    ae44:	0500050e 	bge	zero,r20,ae5c <_dtoa_r+0xe0c>
    ae48:	880b883a 	mov	r5,r17
    ae4c:	a00d883a 	mov	r6,r20
    ae50:	e009883a 	mov	r4,fp
    ae54:	000df440 	call	df44 <__lshift>
    ae58:	1023883a 	mov	r17,r2
    ae5c:	9801241e 	bne	r19,zero,b2f0 <_dtoa_r+0x12a0>
    ae60:	8829883a 	mov	r20,r17
    ae64:	d9000617 	ldw	r4,24(sp)
    ae68:	dcc00717 	ldw	r19,28(sp)
    ae6c:	9480004c 	andi	r18,r18,1
    ae70:	20bfffc4 	addi	r2,r4,-1
    ae74:	9885883a 	add	r2,r19,r2
    ae78:	d8800415 	stw	r2,16(sp)
    ae7c:	dc800615 	stw	r18,24(sp)
    ae80:	a80b883a 	mov	r5,r21
    ae84:	8009883a 	mov	r4,r16
    ae88:	0009e280 	call	9e28 <quorem>
    ae8c:	880b883a 	mov	r5,r17
    ae90:	8009883a 	mov	r4,r16
    ae94:	102f883a 	mov	r23,r2
    ae98:	000e08c0 	call	e08c <__mcmp>
    ae9c:	a80b883a 	mov	r5,r21
    aea0:	a00d883a 	mov	r6,r20
    aea4:	e009883a 	mov	r4,fp
    aea8:	102d883a 	mov	r22,r2
    aeac:	000e0ec0 	call	e0ec <__mdiff>
    aeb0:	1007883a 	mov	r3,r2
    aeb4:	10800317 	ldw	r2,12(r2)
    aeb8:	bc800c04 	addi	r18,r23,48
    aebc:	180b883a 	mov	r5,r3
    aec0:	10004e1e 	bne	r2,zero,affc <_dtoa_r+0xfac>
    aec4:	8009883a 	mov	r4,r16
    aec8:	d8c01615 	stw	r3,88(sp)
    aecc:	000e08c0 	call	e08c <__mcmp>
    aed0:	d8c01617 	ldw	r3,88(sp)
    aed4:	e009883a 	mov	r4,fp
    aed8:	d8801615 	stw	r2,88(sp)
    aedc:	180b883a 	mov	r5,r3
    aee0:	000d7b00 	call	d7b0 <_Bfree>
    aee4:	d8801617 	ldw	r2,88(sp)
    aee8:	1000041e 	bne	r2,zero,aefc <_dtoa_r+0xeac>
    aeec:	d9800317 	ldw	r6,12(sp)
    aef0:	3000021e 	bne	r6,zero,aefc <_dtoa_r+0xeac>
    aef4:	d8c00617 	ldw	r3,24(sp)
    aef8:	18003726 	beq	r3,zero,afd8 <_dtoa_r+0xf88>
    aefc:	b0002016 	blt	r22,zero,af80 <_dtoa_r+0xf30>
    af00:	b000041e 	bne	r22,zero,af14 <_dtoa_r+0xec4>
    af04:	d9000317 	ldw	r4,12(sp)
    af08:	2000021e 	bne	r4,zero,af14 <_dtoa_r+0xec4>
    af0c:	d8c00617 	ldw	r3,24(sp)
    af10:	18001b26 	beq	r3,zero,af80 <_dtoa_r+0xf30>
    af14:	00810716 	blt	zero,r2,b334 <_dtoa_r+0x12e4>
    af18:	d8c00417 	ldw	r3,16(sp)
    af1c:	9d800044 	addi	r22,r19,1
    af20:	9c800005 	stb	r18,0(r19)
    af24:	b02f883a 	mov	r23,r22
    af28:	98c10626 	beq	r19,r3,b344 <_dtoa_r+0x12f4>
    af2c:	800b883a 	mov	r5,r16
    af30:	000f883a 	mov	r7,zero
    af34:	01800284 	movi	r6,10
    af38:	e009883a 	mov	r4,fp
    af3c:	000d7d80 	call	d7d8 <__multadd>
    af40:	1021883a 	mov	r16,r2
    af44:	000f883a 	mov	r7,zero
    af48:	01800284 	movi	r6,10
    af4c:	880b883a 	mov	r5,r17
    af50:	e009883a 	mov	r4,fp
    af54:	8d002526 	beq	r17,r20,afec <_dtoa_r+0xf9c>
    af58:	000d7d80 	call	d7d8 <__multadd>
    af5c:	a00b883a 	mov	r5,r20
    af60:	000f883a 	mov	r7,zero
    af64:	01800284 	movi	r6,10
    af68:	e009883a 	mov	r4,fp
    af6c:	1023883a 	mov	r17,r2
    af70:	000d7d80 	call	d7d8 <__multadd>
    af74:	1029883a 	mov	r20,r2
    af78:	b027883a 	mov	r19,r22
    af7c:	003fc006 	br	ae80 <__alt_data_end+0xfffda140>
    af80:	9011883a 	mov	r8,r18
    af84:	00800e0e 	bge	zero,r2,afc0 <_dtoa_r+0xf70>
    af88:	800b883a 	mov	r5,r16
    af8c:	01800044 	movi	r6,1
    af90:	e009883a 	mov	r4,fp
    af94:	da001715 	stw	r8,92(sp)
    af98:	000df440 	call	df44 <__lshift>
    af9c:	a80b883a 	mov	r5,r21
    afa0:	1009883a 	mov	r4,r2
    afa4:	1021883a 	mov	r16,r2
    afa8:	000e08c0 	call	e08c <__mcmp>
    afac:	da001717 	ldw	r8,92(sp)
    afb0:	0081960e 	bge	zero,r2,b60c <_dtoa_r+0x15bc>
    afb4:	00800e44 	movi	r2,57
    afb8:	40817026 	beq	r8,r2,b57c <_dtoa_r+0x152c>
    afbc:	ba000c44 	addi	r8,r23,49
    afc0:	8825883a 	mov	r18,r17
    afc4:	9dc00044 	addi	r23,r19,1
    afc8:	9a000005 	stb	r8,0(r19)
    afcc:	a023883a 	mov	r17,r20
    afd0:	dc000915 	stw	r16,36(sp)
    afd4:	003f2406 	br	ac68 <__alt_data_end+0xfffd9f28>
    afd8:	00800e44 	movi	r2,57
    afdc:	9011883a 	mov	r8,r18
    afe0:	90816626 	beq	r18,r2,b57c <_dtoa_r+0x152c>
    afe4:	05bff516 	blt	zero,r22,afbc <__alt_data_end+0xfffda27c>
    afe8:	003ff506 	br	afc0 <__alt_data_end+0xfffda280>
    afec:	000d7d80 	call	d7d8 <__multadd>
    aff0:	1023883a 	mov	r17,r2
    aff4:	1029883a 	mov	r20,r2
    aff8:	003fdf06 	br	af78 <__alt_data_end+0xfffda238>
    affc:	e009883a 	mov	r4,fp
    b000:	000d7b00 	call	d7b0 <_Bfree>
    b004:	00800044 	movi	r2,1
    b008:	003fbc06 	br	aefc <__alt_data_end+0xfffda1bc>
    b00c:	a80b883a 	mov	r5,r21
    b010:	8009883a 	mov	r4,r16
    b014:	000e08c0 	call	e08c <__mcmp>
    b018:	103edb0e 	bge	r2,zero,ab88 <__alt_data_end+0xfffd9e48>
    b01c:	800b883a 	mov	r5,r16
    b020:	000f883a 	mov	r7,zero
    b024:	01800284 	movi	r6,10
    b028:	e009883a 	mov	r4,fp
    b02c:	000d7d80 	call	d7d8 <__multadd>
    b030:	1021883a 	mov	r16,r2
    b034:	d8800517 	ldw	r2,20(sp)
    b038:	d8c00b17 	ldw	r3,44(sp)
    b03c:	10bfffc4 	addi	r2,r2,-1
    b040:	d8800515 	stw	r2,20(sp)
    b044:	183f761e 	bne	r3,zero,ae20 <__alt_data_end+0xfffda0e0>
    b048:	d9000c17 	ldw	r4,48(sp)
    b04c:	0101730e 	bge	zero,r4,b61c <_dtoa_r+0x15cc>
    b050:	d9000615 	stw	r4,24(sp)
    b054:	003ed006 	br	ab98 <__alt_data_end+0xfffd9e58>
    b058:	00800084 	movi	r2,2
    b05c:	3081861e 	bne	r6,r2,b678 <_dtoa_r+0x1628>
    b060:	d8000b15 	stw	zero,44(sp)
    b064:	003f3c06 	br	ad58 <__alt_data_end+0xfffda018>
    b068:	dc000917 	ldw	r16,36(sp)
    b06c:	003e9206 	br	aab8 <__alt_data_end+0xfffd9d78>
    b070:	d9c00317 	ldw	r7,12(sp)
    b074:	00800084 	movi	r2,2
    b078:	11fec50e 	bge	r2,r7,ab90 <__alt_data_end+0xfffd9e50>
    b07c:	d9000617 	ldw	r4,24(sp)
    b080:	20013c1e 	bne	r4,zero,b574 <_dtoa_r+0x1524>
    b084:	a80b883a 	mov	r5,r21
    b088:	000f883a 	mov	r7,zero
    b08c:	01800144 	movi	r6,5
    b090:	e009883a 	mov	r4,fp
    b094:	000d7d80 	call	d7d8 <__multadd>
    b098:	100b883a 	mov	r5,r2
    b09c:	8009883a 	mov	r4,r16
    b0a0:	102b883a 	mov	r21,r2
    b0a4:	000e08c0 	call	e08c <__mcmp>
    b0a8:	dc000915 	stw	r16,36(sp)
    b0ac:	00bf410e 	bge	zero,r2,adb4 <__alt_data_end+0xfffda074>
    b0b0:	d9c00717 	ldw	r7,28(sp)
    b0b4:	00800c44 	movi	r2,49
    b0b8:	38800005 	stb	r2,0(r7)
    b0bc:	d8800517 	ldw	r2,20(sp)
    b0c0:	3dc00044 	addi	r23,r7,1
    b0c4:	10800044 	addi	r2,r2,1
    b0c8:	d8800515 	stw	r2,20(sp)
    b0cc:	003f3d06 	br	adc4 <__alt_data_end+0xfffda084>
    b0d0:	d9800517 	ldw	r6,20(sp)
    b0d4:	d9c00717 	ldw	r7,28(sp)
    b0d8:	00800c44 	movi	r2,49
    b0dc:	31800044 	addi	r6,r6,1
    b0e0:	d9800515 	stw	r6,20(sp)
    b0e4:	38800005 	stb	r2,0(r7)
    b0e8:	003edf06 	br	ac68 <__alt_data_end+0xfffd9f28>
    b0ec:	d8000b15 	stw	zero,44(sp)
    b0f0:	003c9f06 	br	a370 <__alt_data_end+0xfffd9630>
    b0f4:	903e7e1e 	bne	r18,zero,aaf0 <__alt_data_end+0xfffd9db0>
    b0f8:	00800434 	movhi	r2,16
    b0fc:	10bfffc4 	addi	r2,r2,-1
    b100:	9884703a 	and	r2,r19,r2
    b104:	1000ea1e 	bne	r2,zero,b4b0 <_dtoa_r+0x1460>
    b108:	9cdffc2c 	andhi	r19,r19,32752
    b10c:	9800e826 	beq	r19,zero,b4b0 <_dtoa_r+0x1460>
    b110:	d9c00817 	ldw	r7,32(sp)
    b114:	b5800044 	addi	r22,r22,1
    b118:	04c00044 	movi	r19,1
    b11c:	39c00044 	addi	r7,r7,1
    b120:	d9c00815 	stw	r7,32(sp)
    b124:	d8800d17 	ldw	r2,52(sp)
    b128:	103e721e 	bne	r2,zero,aaf4 <__alt_data_end+0xfffd9db4>
    b12c:	00800044 	movi	r2,1
    b130:	003e7906 	br	ab18 <__alt_data_end+0xfffd9dd8>
    b134:	8009883a 	mov	r4,r16
    b138:	00075f80 	call	75f8 <__floatsidf>
    b13c:	d9800f17 	ldw	r6,60(sp)
    b140:	d9c01017 	ldw	r7,64(sp)
    b144:	1009883a 	mov	r4,r2
    b148:	180b883a 	mov	r5,r3
    b14c:	00064100 	call	6410 <__muldf3>
    b150:	000d883a 	mov	r6,zero
    b154:	01d00734 	movhi	r7,16412
    b158:	1009883a 	mov	r4,r2
    b15c:	180b883a 	mov	r5,r3
    b160:	0004f3c0 	call	4f3c <__adddf3>
    b164:	047f3034 	movhi	r17,64704
    b168:	1021883a 	mov	r16,r2
    b16c:	1c63883a 	add	r17,r3,r17
    b170:	d9000f17 	ldw	r4,60(sp)
    b174:	d9401017 	ldw	r5,64(sp)
    b178:	000d883a 	mov	r6,zero
    b17c:	01d00534 	movhi	r7,16404
    b180:	0006c7c0 	call	6c7c <__subdf3>
    b184:	800d883a 	mov	r6,r16
    b188:	880f883a 	mov	r7,r17
    b18c:	1009883a 	mov	r4,r2
    b190:	180b883a 	mov	r5,r3
    b194:	102b883a 	mov	r21,r2
    b198:	1829883a 	mov	r20,r3
    b19c:	00062400 	call	6240 <__gedf2>
    b1a0:	00806c16 	blt	zero,r2,b354 <_dtoa_r+0x1304>
    b1a4:	89e0003c 	xorhi	r7,r17,32768
    b1a8:	800d883a 	mov	r6,r16
    b1ac:	a809883a 	mov	r4,r21
    b1b0:	a00b883a 	mov	r5,r20
    b1b4:	000631c0 	call	631c <__ledf2>
    b1b8:	103d7e0e 	bge	r2,zero,a7b4 <__alt_data_end+0xfffd9a74>
    b1bc:	002b883a 	mov	r21,zero
    b1c0:	0023883a 	mov	r17,zero
    b1c4:	003efb06 	br	adb4 <__alt_data_end+0xfffda074>
    b1c8:	d8800717 	ldw	r2,28(sp)
    b1cc:	003bd006 	br	a110 <__alt_data_end+0xfffd93d0>
    b1d0:	d9000a17 	ldw	r4,40(sp)
    b1d4:	d9800d17 	ldw	r6,52(sp)
    b1d8:	dd400a15 	stw	r21,40(sp)
    b1dc:	a905c83a 	sub	r2,r21,r4
    b1e0:	308d883a 	add	r6,r6,r2
    b1e4:	d9800d15 	stw	r6,52(sp)
    b1e8:	002b883a 	mov	r21,zero
    b1ec:	003e0606 	br	aa08 <__alt_data_end+0xfffd9cc8>
    b1f0:	9023883a 	mov	r17,r18
    b1f4:	9829883a 	mov	r20,r19
    b1f8:	04000084 	movi	r16,2
    b1fc:	003c9206 	br	a448 <__alt_data_end+0xfffd9708>
    b200:	04000044 	movi	r16,1
    b204:	dc000c15 	stw	r16,48(sp)
    b208:	dc000615 	stw	r16,24(sp)
    b20c:	dc002215 	stw	r16,136(sp)
    b210:	e0001115 	stw	zero,68(fp)
    b214:	000b883a 	mov	r5,zero
    b218:	003c6906 	br	a3c0 <__alt_data_end+0xfffd9680>
    b21c:	3021883a 	mov	r16,r6
    b220:	003ffb06 	br	b210 <__alt_data_end+0xfffda4d0>
    b224:	1000021e 	bne	r2,zero,b230 <_dtoa_r+0x11e0>
    b228:	4200004c 	andi	r8,r8,1
    b22c:	403e7d1e 	bne	r8,zero,ac24 <__alt_data_end+0xfffd9ee4>
    b230:	01000c04 	movi	r4,48
    b234:	00000106 	br	b23c <_dtoa_r+0x11ec>
    b238:	102f883a 	mov	r23,r2
    b23c:	b8bfffc4 	addi	r2,r23,-1
    b240:	10c00007 	ldb	r3,0(r2)
    b244:	193ffc26 	beq	r3,r4,b238 <__alt_data_end+0xfffda4f8>
    b248:	003e8706 	br	ac68 <__alt_data_end+0xfffd9f28>
    b24c:	d8800517 	ldw	r2,20(sp)
    b250:	00a3c83a 	sub	r17,zero,r2
    b254:	8800a426 	beq	r17,zero,b4e8 <_dtoa_r+0x1498>
    b258:	888003cc 	andi	r2,r17,15
    b25c:	100490fa 	slli	r2,r2,3
    b260:	00c000b4 	movhi	r3,2
    b264:	18f25c04 	addi	r3,r3,-13968
    b268:	1885883a 	add	r2,r3,r2
    b26c:	11800017 	ldw	r6,0(r2)
    b270:	11c00117 	ldw	r7,4(r2)
    b274:	9009883a 	mov	r4,r18
    b278:	980b883a 	mov	r5,r19
    b27c:	8823d13a 	srai	r17,r17,4
    b280:	00064100 	call	6410 <__muldf3>
    b284:	d8800f15 	stw	r2,60(sp)
    b288:	d8c01015 	stw	r3,64(sp)
    b28c:	8800e826 	beq	r17,zero,b630 <_dtoa_r+0x15e0>
    b290:	050000b4 	movhi	r20,2
    b294:	a5325204 	addi	r20,r20,-14008
    b298:	04000084 	movi	r16,2
    b29c:	8980004c 	andi	r6,r17,1
    b2a0:	1009883a 	mov	r4,r2
    b2a4:	8823d07a 	srai	r17,r17,1
    b2a8:	180b883a 	mov	r5,r3
    b2ac:	30000426 	beq	r6,zero,b2c0 <_dtoa_r+0x1270>
    b2b0:	a1800017 	ldw	r6,0(r20)
    b2b4:	a1c00117 	ldw	r7,4(r20)
    b2b8:	84000044 	addi	r16,r16,1
    b2bc:	00064100 	call	6410 <__muldf3>
    b2c0:	a5000204 	addi	r20,r20,8
    b2c4:	883ff51e 	bne	r17,zero,b29c <__alt_data_end+0xfffda55c>
    b2c8:	d8800f15 	stw	r2,60(sp)
    b2cc:	d8c01015 	stw	r3,64(sp)
    b2d0:	003c7606 	br	a4ac <__alt_data_end+0xfffd976c>
    b2d4:	00c00c04 	movi	r3,48
    b2d8:	10c00005 	stb	r3,0(r2)
    b2dc:	d8c00517 	ldw	r3,20(sp)
    b2e0:	bd3fffc3 	ldbu	r20,-1(r23)
    b2e4:	18c00044 	addi	r3,r3,1
    b2e8:	d8c00515 	stw	r3,20(sp)
    b2ec:	003db906 	br	a9d4 <__alt_data_end+0xfffd9c94>
    b2f0:	89400117 	ldw	r5,4(r17)
    b2f4:	e009883a 	mov	r4,fp
    b2f8:	000d7080 	call	d708 <_Balloc>
    b2fc:	89800417 	ldw	r6,16(r17)
    b300:	89400304 	addi	r5,r17,12
    b304:	11000304 	addi	r4,r2,12
    b308:	31800084 	addi	r6,r6,2
    b30c:	318d883a 	add	r6,r6,r6
    b310:	318d883a 	add	r6,r6,r6
    b314:	1027883a 	mov	r19,r2
    b318:	000d33c0 	call	d33c <memcpy>
    b31c:	01800044 	movi	r6,1
    b320:	980b883a 	mov	r5,r19
    b324:	e009883a 	mov	r4,fp
    b328:	000df440 	call	df44 <__lshift>
    b32c:	1029883a 	mov	r20,r2
    b330:	003ecc06 	br	ae64 <__alt_data_end+0xfffda124>
    b334:	00800e44 	movi	r2,57
    b338:	90809026 	beq	r18,r2,b57c <_dtoa_r+0x152c>
    b33c:	92000044 	addi	r8,r18,1
    b340:	003f1f06 	br	afc0 <__alt_data_end+0xfffda280>
    b344:	9011883a 	mov	r8,r18
    b348:	8825883a 	mov	r18,r17
    b34c:	a023883a 	mov	r17,r20
    b350:	003e2906 	br	abf8 <__alt_data_end+0xfffd9eb8>
    b354:	002b883a 	mov	r21,zero
    b358:	0023883a 	mov	r17,zero
    b35c:	003f5406 	br	b0b0 <__alt_data_end+0xfffda370>
    b360:	61bfffc4 	addi	r6,r12,-1
    b364:	300490fa 	slli	r2,r6,3
    b368:	00c000b4 	movhi	r3,2
    b36c:	18f25c04 	addi	r3,r3,-13968
    b370:	1885883a 	add	r2,r3,r2
    b374:	11000017 	ldw	r4,0(r2)
    b378:	11400117 	ldw	r5,4(r2)
    b37c:	d8800717 	ldw	r2,28(sp)
    b380:	880f883a 	mov	r7,r17
    b384:	d9801215 	stw	r6,72(sp)
    b388:	800d883a 	mov	r6,r16
    b38c:	db001615 	stw	r12,88(sp)
    b390:	15c00044 	addi	r23,r2,1
    b394:	00064100 	call	6410 <__muldf3>
    b398:	d9401017 	ldw	r5,64(sp)
    b39c:	d9000f17 	ldw	r4,60(sp)
    b3a0:	d8c01515 	stw	r3,84(sp)
    b3a4:	d8801415 	stw	r2,80(sp)
    b3a8:	00075780 	call	7578 <__fixdfsi>
    b3ac:	1009883a 	mov	r4,r2
    b3b0:	1021883a 	mov	r16,r2
    b3b4:	00075f80 	call	75f8 <__floatsidf>
    b3b8:	d9000f17 	ldw	r4,60(sp)
    b3bc:	d9401017 	ldw	r5,64(sp)
    b3c0:	100d883a 	mov	r6,r2
    b3c4:	180f883a 	mov	r7,r3
    b3c8:	0006c7c0 	call	6c7c <__subdf3>
    b3cc:	1829883a 	mov	r20,r3
    b3d0:	d8c00717 	ldw	r3,28(sp)
    b3d4:	84000c04 	addi	r16,r16,48
    b3d8:	1023883a 	mov	r17,r2
    b3dc:	1c000005 	stb	r16,0(r3)
    b3e0:	db001617 	ldw	r12,88(sp)
    b3e4:	00800044 	movi	r2,1
    b3e8:	60802226 	beq	r12,r2,b474 <_dtoa_r+0x1424>
    b3ec:	d9c00717 	ldw	r7,28(sp)
    b3f0:	8805883a 	mov	r2,r17
    b3f4:	b82b883a 	mov	r21,r23
    b3f8:	3b19883a 	add	r12,r7,r12
    b3fc:	6023883a 	mov	r17,r12
    b400:	a007883a 	mov	r3,r20
    b404:	dc800f15 	stw	r18,60(sp)
    b408:	000d883a 	mov	r6,zero
    b40c:	01d00934 	movhi	r7,16420
    b410:	1009883a 	mov	r4,r2
    b414:	180b883a 	mov	r5,r3
    b418:	00064100 	call	6410 <__muldf3>
    b41c:	180b883a 	mov	r5,r3
    b420:	1009883a 	mov	r4,r2
    b424:	1829883a 	mov	r20,r3
    b428:	1025883a 	mov	r18,r2
    b42c:	00075780 	call	7578 <__fixdfsi>
    b430:	1009883a 	mov	r4,r2
    b434:	1021883a 	mov	r16,r2
    b438:	00075f80 	call	75f8 <__floatsidf>
    b43c:	100d883a 	mov	r6,r2
    b440:	180f883a 	mov	r7,r3
    b444:	9009883a 	mov	r4,r18
    b448:	a00b883a 	mov	r5,r20
    b44c:	84000c04 	addi	r16,r16,48
    b450:	0006c7c0 	call	6c7c <__subdf3>
    b454:	ad400044 	addi	r21,r21,1
    b458:	ac3fffc5 	stb	r16,-1(r21)
    b45c:	ac7fea1e 	bne	r21,r17,b408 <__alt_data_end+0xfffda6c8>
    b460:	1023883a 	mov	r17,r2
    b464:	d8801217 	ldw	r2,72(sp)
    b468:	dc800f17 	ldw	r18,60(sp)
    b46c:	1829883a 	mov	r20,r3
    b470:	b8af883a 	add	r23,r23,r2
    b474:	d9001417 	ldw	r4,80(sp)
    b478:	d9401517 	ldw	r5,84(sp)
    b47c:	000d883a 	mov	r6,zero
    b480:	01cff834 	movhi	r7,16352
    b484:	0004f3c0 	call	4f3c <__adddf3>
    b488:	880d883a 	mov	r6,r17
    b48c:	a00f883a 	mov	r7,r20
    b490:	1009883a 	mov	r4,r2
    b494:	180b883a 	mov	r5,r3
    b498:	000631c0 	call	631c <__ledf2>
    b49c:	10003e0e 	bge	r2,zero,b598 <_dtoa_r+0x1548>
    b4a0:	d9001317 	ldw	r4,76(sp)
    b4a4:	bd3fffc3 	ldbu	r20,-1(r23)
    b4a8:	d9000515 	stw	r4,20(sp)
    b4ac:	003d3b06 	br	a99c <__alt_data_end+0xfffd9c5c>
    b4b0:	0027883a 	mov	r19,zero
    b4b4:	003f1b06 	br	b124 <__alt_data_end+0xfffda3e4>
    b4b8:	d8800817 	ldw	r2,32(sp)
    b4bc:	11e9c83a 	sub	r20,r2,r7
    b4c0:	0005883a 	mov	r2,zero
    b4c4:	003d5406 	br	aa18 <__alt_data_end+0xfffd9cd8>
    b4c8:	00800044 	movi	r2,1
    b4cc:	003dc706 	br	abec <__alt_data_end+0xfffd9eac>
    b4d0:	d8c00217 	ldw	r3,8(sp)
    b4d4:	00800d84 	movi	r2,54
    b4d8:	dd400a17 	ldw	r21,40(sp)
    b4dc:	10c5c83a 	sub	r2,r2,r3
    b4e0:	dd000817 	ldw	r20,32(sp)
    b4e4:	003d4c06 	br	aa18 <__alt_data_end+0xfffd9cd8>
    b4e8:	dc800f15 	stw	r18,60(sp)
    b4ec:	dcc01015 	stw	r19,64(sp)
    b4f0:	04000084 	movi	r16,2
    b4f4:	003bed06 	br	a4ac <__alt_data_end+0xfffd976c>
    b4f8:	d9000617 	ldw	r4,24(sp)
    b4fc:	203f0d26 	beq	r4,zero,b134 <__alt_data_end+0xfffda3f4>
    b500:	d9800c17 	ldw	r6,48(sp)
    b504:	01bcab0e 	bge	zero,r6,a7b4 <__alt_data_end+0xfffd9a74>
    b508:	d9401017 	ldw	r5,64(sp)
    b50c:	d9000f17 	ldw	r4,60(sp)
    b510:	000d883a 	mov	r6,zero
    b514:	01d00934 	movhi	r7,16420
    b518:	00064100 	call	6410 <__muldf3>
    b51c:	81000044 	addi	r4,r16,1
    b520:	d8800f15 	stw	r2,60(sp)
    b524:	d8c01015 	stw	r3,64(sp)
    b528:	00075f80 	call	75f8 <__floatsidf>
    b52c:	d9800f17 	ldw	r6,60(sp)
    b530:	d9c01017 	ldw	r7,64(sp)
    b534:	1009883a 	mov	r4,r2
    b538:	180b883a 	mov	r5,r3
    b53c:	00064100 	call	6410 <__muldf3>
    b540:	01d00734 	movhi	r7,16412
    b544:	000d883a 	mov	r6,zero
    b548:	1009883a 	mov	r4,r2
    b54c:	180b883a 	mov	r5,r3
    b550:	0004f3c0 	call	4f3c <__adddf3>
    b554:	d9c00517 	ldw	r7,20(sp)
    b558:	047f3034 	movhi	r17,64704
    b55c:	1021883a 	mov	r16,r2
    b560:	39ffffc4 	addi	r7,r7,-1
    b564:	d9c01315 	stw	r7,76(sp)
    b568:	1c63883a 	add	r17,r3,r17
    b56c:	db000c17 	ldw	r12,48(sp)
    b570:	003bea06 	br	a51c <__alt_data_end+0xfffd97dc>
    b574:	dc000915 	stw	r16,36(sp)
    b578:	003e0e06 	br	adb4 <__alt_data_end+0xfffda074>
    b57c:	01000e44 	movi	r4,57
    b580:	8825883a 	mov	r18,r17
    b584:	9dc00044 	addi	r23,r19,1
    b588:	99000005 	stb	r4,0(r19)
    b58c:	a023883a 	mov	r17,r20
    b590:	dc000915 	stw	r16,36(sp)
    b594:	003da406 	br	ac28 <__alt_data_end+0xfffd9ee8>
    b598:	d9801417 	ldw	r6,80(sp)
    b59c:	d9c01517 	ldw	r7,84(sp)
    b5a0:	0009883a 	mov	r4,zero
    b5a4:	014ff834 	movhi	r5,16352
    b5a8:	0006c7c0 	call	6c7c <__subdf3>
    b5ac:	880d883a 	mov	r6,r17
    b5b0:	a00f883a 	mov	r7,r20
    b5b4:	1009883a 	mov	r4,r2
    b5b8:	180b883a 	mov	r5,r3
    b5bc:	00062400 	call	6240 <__gedf2>
    b5c0:	00bc7c0e 	bge	zero,r2,a7b4 <__alt_data_end+0xfffd9a74>
    b5c4:	01000c04 	movi	r4,48
    b5c8:	00000106 	br	b5d0 <_dtoa_r+0x1580>
    b5cc:	102f883a 	mov	r23,r2
    b5d0:	b8bfffc4 	addi	r2,r23,-1
    b5d4:	10c00007 	ldb	r3,0(r2)
    b5d8:	193ffc26 	beq	r3,r4,b5cc <__alt_data_end+0xfffda88c>
    b5dc:	d9801317 	ldw	r6,76(sp)
    b5e0:	d9800515 	stw	r6,20(sp)
    b5e4:	003c4406 	br	a6f8 <__alt_data_end+0xfffd99b8>
    b5e8:	d9801317 	ldw	r6,76(sp)
    b5ec:	d9800515 	stw	r6,20(sp)
    b5f0:	003cea06 	br	a99c <__alt_data_end+0xfffd9c5c>
    b5f4:	dd800f17 	ldw	r22,60(sp)
    b5f8:	dcc01017 	ldw	r19,64(sp)
    b5fc:	dc801217 	ldw	r18,72(sp)
    b600:	003c6c06 	br	a7b4 <__alt_data_end+0xfffd9a74>
    b604:	903e031e 	bne	r18,zero,ae14 <__alt_data_end+0xfffda0d4>
    b608:	003ebb06 	br	b0f8 <__alt_data_end+0xfffda3b8>
    b60c:	103e6c1e 	bne	r2,zero,afc0 <__alt_data_end+0xfffda280>
    b610:	4080004c 	andi	r2,r8,1
    b614:	103e6a26 	beq	r2,zero,afc0 <__alt_data_end+0xfffda280>
    b618:	003e6606 	br	afb4 <__alt_data_end+0xfffda274>
    b61c:	d8c00317 	ldw	r3,12(sp)
    b620:	00800084 	movi	r2,2
    b624:	10c02916 	blt	r2,r3,b6cc <_dtoa_r+0x167c>
    b628:	d9000c17 	ldw	r4,48(sp)
    b62c:	003e8806 	br	b050 <__alt_data_end+0xfffda310>
    b630:	04000084 	movi	r16,2
    b634:	003b9d06 	br	a4ac <__alt_data_end+0xfffd976c>
    b638:	d9001317 	ldw	r4,76(sp)
    b63c:	d9000515 	stw	r4,20(sp)
    b640:	003cd606 	br	a99c <__alt_data_end+0xfffd9c5c>
    b644:	d8801317 	ldw	r2,76(sp)
    b648:	d8800515 	stw	r2,20(sp)
    b64c:	003c2a06 	br	a6f8 <__alt_data_end+0xfffd99b8>
    b650:	d9800317 	ldw	r6,12(sp)
    b654:	00800084 	movi	r2,2
    b658:	11801516 	blt	r2,r6,b6b0 <_dtoa_r+0x1660>
    b65c:	d9c00c17 	ldw	r7,48(sp)
    b660:	d9c00615 	stw	r7,24(sp)
    b664:	003df706 	br	ae44 <__alt_data_end+0xfffda104>
    b668:	193d3926 	beq	r3,r4,ab50 <__alt_data_end+0xfffd9e10>
    b66c:	00c00f04 	movi	r3,60
    b670:	1885c83a 	sub	r2,r3,r2
    b674:	003ddf06 	br	adf4 <__alt_data_end+0xfffda0b4>
    b678:	e009883a 	mov	r4,fp
    b67c:	e0001115 	stw	zero,68(fp)
    b680:	000b883a 	mov	r5,zero
    b684:	000d7080 	call	d708 <_Balloc>
    b688:	d8800715 	stw	r2,28(sp)
    b68c:	d8c00717 	ldw	r3,28(sp)
    b690:	00bfffc4 	movi	r2,-1
    b694:	01000044 	movi	r4,1
    b698:	d8800c15 	stw	r2,48(sp)
    b69c:	e0c01015 	stw	r3,64(fp)
    b6a0:	d9000b15 	stw	r4,44(sp)
    b6a4:	d8800615 	stw	r2,24(sp)
    b6a8:	d8002215 	stw	zero,136(sp)
    b6ac:	003c4106 	br	a7b4 <__alt_data_end+0xfffd9a74>
    b6b0:	d8c00c17 	ldw	r3,48(sp)
    b6b4:	d8c00615 	stw	r3,24(sp)
    b6b8:	003e7006 	br	b07c <__alt_data_end+0xfffda33c>
    b6bc:	04400044 	movi	r17,1
    b6c0:	003b2006 	br	a344 <__alt_data_end+0xfffd9604>
    b6c4:	000b883a 	mov	r5,zero
    b6c8:	003b3d06 	br	a3c0 <__alt_data_end+0xfffd9680>
    b6cc:	d8800c17 	ldw	r2,48(sp)
    b6d0:	d8800615 	stw	r2,24(sp)
    b6d4:	003e6906 	br	b07c <__alt_data_end+0xfffda33c>

0000b6d8 <__sflush_r>:
    b6d8:	2880030b 	ldhu	r2,12(r5)
    b6dc:	defffb04 	addi	sp,sp,-20
    b6e0:	dcc00315 	stw	r19,12(sp)
    b6e4:	dc400115 	stw	r17,4(sp)
    b6e8:	dfc00415 	stw	ra,16(sp)
    b6ec:	dc800215 	stw	r18,8(sp)
    b6f0:	dc000015 	stw	r16,0(sp)
    b6f4:	10c0020c 	andi	r3,r2,8
    b6f8:	2823883a 	mov	r17,r5
    b6fc:	2027883a 	mov	r19,r4
    b700:	1800311e 	bne	r3,zero,b7c8 <__sflush_r+0xf0>
    b704:	28c00117 	ldw	r3,4(r5)
    b708:	10820014 	ori	r2,r2,2048
    b70c:	2880030d 	sth	r2,12(r5)
    b710:	00c04b0e 	bge	zero,r3,b840 <__sflush_r+0x168>
    b714:	8a000a17 	ldw	r8,40(r17)
    b718:	40002326 	beq	r8,zero,b7a8 <__sflush_r+0xd0>
    b71c:	9c000017 	ldw	r16,0(r19)
    b720:	10c4000c 	andi	r3,r2,4096
    b724:	98000015 	stw	zero,0(r19)
    b728:	18004826 	beq	r3,zero,b84c <__sflush_r+0x174>
    b72c:	89801417 	ldw	r6,80(r17)
    b730:	10c0010c 	andi	r3,r2,4
    b734:	18000626 	beq	r3,zero,b750 <__sflush_r+0x78>
    b738:	88c00117 	ldw	r3,4(r17)
    b73c:	88800c17 	ldw	r2,48(r17)
    b740:	30cdc83a 	sub	r6,r6,r3
    b744:	10000226 	beq	r2,zero,b750 <__sflush_r+0x78>
    b748:	88800f17 	ldw	r2,60(r17)
    b74c:	308dc83a 	sub	r6,r6,r2
    b750:	89400717 	ldw	r5,28(r17)
    b754:	000f883a 	mov	r7,zero
    b758:	9809883a 	mov	r4,r19
    b75c:	403ee83a 	callr	r8
    b760:	00ffffc4 	movi	r3,-1
    b764:	10c04426 	beq	r2,r3,b878 <__sflush_r+0x1a0>
    b768:	88c0030b 	ldhu	r3,12(r17)
    b76c:	89000417 	ldw	r4,16(r17)
    b770:	88000115 	stw	zero,4(r17)
    b774:	197dffcc 	andi	r5,r3,63487
    b778:	8940030d 	sth	r5,12(r17)
    b77c:	89000015 	stw	r4,0(r17)
    b780:	18c4000c 	andi	r3,r3,4096
    b784:	18002c1e 	bne	r3,zero,b838 <__sflush_r+0x160>
    b788:	89400c17 	ldw	r5,48(r17)
    b78c:	9c000015 	stw	r16,0(r19)
    b790:	28000526 	beq	r5,zero,b7a8 <__sflush_r+0xd0>
    b794:	88801004 	addi	r2,r17,64
    b798:	28800226 	beq	r5,r2,b7a4 <__sflush_r+0xcc>
    b79c:	9809883a 	mov	r4,r19
    b7a0:	000be540 	call	be54 <_free_r>
    b7a4:	88000c15 	stw	zero,48(r17)
    b7a8:	0005883a 	mov	r2,zero
    b7ac:	dfc00417 	ldw	ra,16(sp)
    b7b0:	dcc00317 	ldw	r19,12(sp)
    b7b4:	dc800217 	ldw	r18,8(sp)
    b7b8:	dc400117 	ldw	r17,4(sp)
    b7bc:	dc000017 	ldw	r16,0(sp)
    b7c0:	dec00504 	addi	sp,sp,20
    b7c4:	f800283a 	ret
    b7c8:	2c800417 	ldw	r18,16(r5)
    b7cc:	903ff626 	beq	r18,zero,b7a8 <__alt_data_end+0xfffdaa68>
    b7d0:	2c000017 	ldw	r16,0(r5)
    b7d4:	108000cc 	andi	r2,r2,3
    b7d8:	2c800015 	stw	r18,0(r5)
    b7dc:	84a1c83a 	sub	r16,r16,r18
    b7e0:	1000131e 	bne	r2,zero,b830 <__sflush_r+0x158>
    b7e4:	28800517 	ldw	r2,20(r5)
    b7e8:	88800215 	stw	r2,8(r17)
    b7ec:	04000316 	blt	zero,r16,b7fc <__sflush_r+0x124>
    b7f0:	003fed06 	br	b7a8 <__alt_data_end+0xfffdaa68>
    b7f4:	90a5883a 	add	r18,r18,r2
    b7f8:	043feb0e 	bge	zero,r16,b7a8 <__alt_data_end+0xfffdaa68>
    b7fc:	88800917 	ldw	r2,36(r17)
    b800:	89400717 	ldw	r5,28(r17)
    b804:	800f883a 	mov	r7,r16
    b808:	900d883a 	mov	r6,r18
    b80c:	9809883a 	mov	r4,r19
    b810:	103ee83a 	callr	r2
    b814:	80a1c83a 	sub	r16,r16,r2
    b818:	00bff616 	blt	zero,r2,b7f4 <__alt_data_end+0xfffdaab4>
    b81c:	88c0030b 	ldhu	r3,12(r17)
    b820:	00bfffc4 	movi	r2,-1
    b824:	18c01014 	ori	r3,r3,64
    b828:	88c0030d 	sth	r3,12(r17)
    b82c:	003fdf06 	br	b7ac <__alt_data_end+0xfffdaa6c>
    b830:	0005883a 	mov	r2,zero
    b834:	003fec06 	br	b7e8 <__alt_data_end+0xfffdaaa8>
    b838:	88801415 	stw	r2,80(r17)
    b83c:	003fd206 	br	b788 <__alt_data_end+0xfffdaa48>
    b840:	28c00f17 	ldw	r3,60(r5)
    b844:	00ffb316 	blt	zero,r3,b714 <__alt_data_end+0xfffda9d4>
    b848:	003fd706 	br	b7a8 <__alt_data_end+0xfffdaa68>
    b84c:	89400717 	ldw	r5,28(r17)
    b850:	000d883a 	mov	r6,zero
    b854:	01c00044 	movi	r7,1
    b858:	9809883a 	mov	r4,r19
    b85c:	403ee83a 	callr	r8
    b860:	100d883a 	mov	r6,r2
    b864:	00bfffc4 	movi	r2,-1
    b868:	30801426 	beq	r6,r2,b8bc <__sflush_r+0x1e4>
    b86c:	8880030b 	ldhu	r2,12(r17)
    b870:	8a000a17 	ldw	r8,40(r17)
    b874:	003fae06 	br	b730 <__alt_data_end+0xfffda9f0>
    b878:	98c00017 	ldw	r3,0(r19)
    b87c:	183fba26 	beq	r3,zero,b768 <__alt_data_end+0xfffdaa28>
    b880:	01000744 	movi	r4,29
    b884:	19000626 	beq	r3,r4,b8a0 <__sflush_r+0x1c8>
    b888:	01000584 	movi	r4,22
    b88c:	19000426 	beq	r3,r4,b8a0 <__sflush_r+0x1c8>
    b890:	88c0030b 	ldhu	r3,12(r17)
    b894:	18c01014 	ori	r3,r3,64
    b898:	88c0030d 	sth	r3,12(r17)
    b89c:	003fc306 	br	b7ac <__alt_data_end+0xfffdaa6c>
    b8a0:	8880030b 	ldhu	r2,12(r17)
    b8a4:	88c00417 	ldw	r3,16(r17)
    b8a8:	88000115 	stw	zero,4(r17)
    b8ac:	10bdffcc 	andi	r2,r2,63487
    b8b0:	8880030d 	sth	r2,12(r17)
    b8b4:	88c00015 	stw	r3,0(r17)
    b8b8:	003fb306 	br	b788 <__alt_data_end+0xfffdaa48>
    b8bc:	98800017 	ldw	r2,0(r19)
    b8c0:	103fea26 	beq	r2,zero,b86c <__alt_data_end+0xfffdab2c>
    b8c4:	00c00744 	movi	r3,29
    b8c8:	10c00226 	beq	r2,r3,b8d4 <__sflush_r+0x1fc>
    b8cc:	00c00584 	movi	r3,22
    b8d0:	10c0031e 	bne	r2,r3,b8e0 <__sflush_r+0x208>
    b8d4:	9c000015 	stw	r16,0(r19)
    b8d8:	0005883a 	mov	r2,zero
    b8dc:	003fb306 	br	b7ac <__alt_data_end+0xfffdaa6c>
    b8e0:	88c0030b 	ldhu	r3,12(r17)
    b8e4:	3005883a 	mov	r2,r6
    b8e8:	18c01014 	ori	r3,r3,64
    b8ec:	88c0030d 	sth	r3,12(r17)
    b8f0:	003fae06 	br	b7ac <__alt_data_end+0xfffdaa6c>

0000b8f4 <_fflush_r>:
    b8f4:	defffd04 	addi	sp,sp,-12
    b8f8:	dc000115 	stw	r16,4(sp)
    b8fc:	dfc00215 	stw	ra,8(sp)
    b900:	2021883a 	mov	r16,r4
    b904:	20000226 	beq	r4,zero,b910 <_fflush_r+0x1c>
    b908:	20800e17 	ldw	r2,56(r4)
    b90c:	10000c26 	beq	r2,zero,b940 <_fflush_r+0x4c>
    b910:	2880030f 	ldh	r2,12(r5)
    b914:	1000051e 	bne	r2,zero,b92c <_fflush_r+0x38>
    b918:	0005883a 	mov	r2,zero
    b91c:	dfc00217 	ldw	ra,8(sp)
    b920:	dc000117 	ldw	r16,4(sp)
    b924:	dec00304 	addi	sp,sp,12
    b928:	f800283a 	ret
    b92c:	8009883a 	mov	r4,r16
    b930:	dfc00217 	ldw	ra,8(sp)
    b934:	dc000117 	ldw	r16,4(sp)
    b938:	dec00304 	addi	sp,sp,12
    b93c:	000b6d81 	jmpi	b6d8 <__sflush_r>
    b940:	d9400015 	stw	r5,0(sp)
    b944:	000bce00 	call	bce0 <__sinit>
    b948:	d9400017 	ldw	r5,0(sp)
    b94c:	003ff006 	br	b910 <__alt_data_end+0xfffdabd0>

0000b950 <fflush>:
    b950:	20000526 	beq	r4,zero,b968 <fflush+0x18>
    b954:	008000b4 	movhi	r2,2
    b958:	10b99a04 	addi	r2,r2,-6552
    b95c:	200b883a 	mov	r5,r4
    b960:	11000017 	ldw	r4,0(r2)
    b964:	000b8f41 	jmpi	b8f4 <_fflush_r>
    b968:	008000b4 	movhi	r2,2
    b96c:	10b99904 	addi	r2,r2,-6556
    b970:	11000017 	ldw	r4,0(r2)
    b974:	01400074 	movhi	r5,1
    b978:	296e3d04 	addi	r5,r5,-18188
    b97c:	000c6f01 	jmpi	c6f0 <_fwalk_reent>

0000b980 <__fp_unlock>:
    b980:	0005883a 	mov	r2,zero
    b984:	f800283a 	ret

0000b988 <_cleanup_r>:
    b988:	01400074 	movhi	r5,1
    b98c:	29420604 	addi	r5,r5,2072
    b990:	000c6f01 	jmpi	c6f0 <_fwalk_reent>

0000b994 <__sinit.part.1>:
    b994:	defff704 	addi	sp,sp,-36
    b998:	00c00074 	movhi	r3,1
    b99c:	dfc00815 	stw	ra,32(sp)
    b9a0:	ddc00715 	stw	r23,28(sp)
    b9a4:	dd800615 	stw	r22,24(sp)
    b9a8:	dd400515 	stw	r21,20(sp)
    b9ac:	dd000415 	stw	r20,16(sp)
    b9b0:	dcc00315 	stw	r19,12(sp)
    b9b4:	dc800215 	stw	r18,8(sp)
    b9b8:	dc400115 	stw	r17,4(sp)
    b9bc:	dc000015 	stw	r16,0(sp)
    b9c0:	18ee6204 	addi	r3,r3,-18040
    b9c4:	24000117 	ldw	r16,4(r4)
    b9c8:	20c00f15 	stw	r3,60(r4)
    b9cc:	2080bb04 	addi	r2,r4,748
    b9d0:	00c000c4 	movi	r3,3
    b9d4:	20c0b915 	stw	r3,740(r4)
    b9d8:	2080ba15 	stw	r2,744(r4)
    b9dc:	2000b815 	stw	zero,736(r4)
    b9e0:	05c00204 	movi	r23,8
    b9e4:	00800104 	movi	r2,4
    b9e8:	2025883a 	mov	r18,r4
    b9ec:	b80d883a 	mov	r6,r23
    b9f0:	81001704 	addi	r4,r16,92
    b9f4:	000b883a 	mov	r5,zero
    b9f8:	80000015 	stw	zero,0(r16)
    b9fc:	80000115 	stw	zero,4(r16)
    ba00:	80000215 	stw	zero,8(r16)
    ba04:	8080030d 	sth	r2,12(r16)
    ba08:	80001915 	stw	zero,100(r16)
    ba0c:	8000038d 	sth	zero,14(r16)
    ba10:	80000415 	stw	zero,16(r16)
    ba14:	80000515 	stw	zero,20(r16)
    ba18:	80000615 	stw	zero,24(r16)
    ba1c:	000d5e00 	call	d5e0 <memset>
    ba20:	05800074 	movhi	r22,1
    ba24:	94400217 	ldw	r17,8(r18)
    ba28:	05400074 	movhi	r21,1
    ba2c:	05000074 	movhi	r20,1
    ba30:	04c00074 	movhi	r19,1
    ba34:	b5bb5e04 	addi	r22,r22,-4744
    ba38:	ad7b7504 	addi	r21,r21,-4652
    ba3c:	a53b9404 	addi	r20,r20,-4528
    ba40:	9cfbab04 	addi	r19,r19,-4436
    ba44:	85800815 	stw	r22,32(r16)
    ba48:	85400915 	stw	r21,36(r16)
    ba4c:	85000a15 	stw	r20,40(r16)
    ba50:	84c00b15 	stw	r19,44(r16)
    ba54:	84000715 	stw	r16,28(r16)
    ba58:	00800284 	movi	r2,10
    ba5c:	8880030d 	sth	r2,12(r17)
    ba60:	00800044 	movi	r2,1
    ba64:	b80d883a 	mov	r6,r23
    ba68:	89001704 	addi	r4,r17,92
    ba6c:	000b883a 	mov	r5,zero
    ba70:	88000015 	stw	zero,0(r17)
    ba74:	88000115 	stw	zero,4(r17)
    ba78:	88000215 	stw	zero,8(r17)
    ba7c:	88001915 	stw	zero,100(r17)
    ba80:	8880038d 	sth	r2,14(r17)
    ba84:	88000415 	stw	zero,16(r17)
    ba88:	88000515 	stw	zero,20(r17)
    ba8c:	88000615 	stw	zero,24(r17)
    ba90:	000d5e00 	call	d5e0 <memset>
    ba94:	94000317 	ldw	r16,12(r18)
    ba98:	00800484 	movi	r2,18
    ba9c:	8c400715 	stw	r17,28(r17)
    baa0:	8d800815 	stw	r22,32(r17)
    baa4:	8d400915 	stw	r21,36(r17)
    baa8:	8d000a15 	stw	r20,40(r17)
    baac:	8cc00b15 	stw	r19,44(r17)
    bab0:	8080030d 	sth	r2,12(r16)
    bab4:	00800084 	movi	r2,2
    bab8:	80000015 	stw	zero,0(r16)
    babc:	80000115 	stw	zero,4(r16)
    bac0:	80000215 	stw	zero,8(r16)
    bac4:	80001915 	stw	zero,100(r16)
    bac8:	8080038d 	sth	r2,14(r16)
    bacc:	80000415 	stw	zero,16(r16)
    bad0:	80000515 	stw	zero,20(r16)
    bad4:	80000615 	stw	zero,24(r16)
    bad8:	b80d883a 	mov	r6,r23
    badc:	000b883a 	mov	r5,zero
    bae0:	81001704 	addi	r4,r16,92
    bae4:	000d5e00 	call	d5e0 <memset>
    bae8:	00800044 	movi	r2,1
    baec:	84000715 	stw	r16,28(r16)
    baf0:	85800815 	stw	r22,32(r16)
    baf4:	85400915 	stw	r21,36(r16)
    baf8:	85000a15 	stw	r20,40(r16)
    bafc:	84c00b15 	stw	r19,44(r16)
    bb00:	90800e15 	stw	r2,56(r18)
    bb04:	dfc00817 	ldw	ra,32(sp)
    bb08:	ddc00717 	ldw	r23,28(sp)
    bb0c:	dd800617 	ldw	r22,24(sp)
    bb10:	dd400517 	ldw	r21,20(sp)
    bb14:	dd000417 	ldw	r20,16(sp)
    bb18:	dcc00317 	ldw	r19,12(sp)
    bb1c:	dc800217 	ldw	r18,8(sp)
    bb20:	dc400117 	ldw	r17,4(sp)
    bb24:	dc000017 	ldw	r16,0(sp)
    bb28:	dec00904 	addi	sp,sp,36
    bb2c:	f800283a 	ret

0000bb30 <__fp_lock>:
    bb30:	0005883a 	mov	r2,zero
    bb34:	f800283a 	ret

0000bb38 <__sfmoreglue>:
    bb38:	defffc04 	addi	sp,sp,-16
    bb3c:	dc800215 	stw	r18,8(sp)
    bb40:	2825883a 	mov	r18,r5
    bb44:	dc000015 	stw	r16,0(sp)
    bb48:	01401a04 	movi	r5,104
    bb4c:	2021883a 	mov	r16,r4
    bb50:	913fffc4 	addi	r4,r18,-1
    bb54:	dfc00315 	stw	ra,12(sp)
    bb58:	dc400115 	stw	r17,4(sp)
    bb5c:	0004f140 	call	4f14 <__mulsi3>
    bb60:	8009883a 	mov	r4,r16
    bb64:	11401d04 	addi	r5,r2,116
    bb68:	1023883a 	mov	r17,r2
    bb6c:	000ca4c0 	call	ca4c <_malloc_r>
    bb70:	1021883a 	mov	r16,r2
    bb74:	10000726 	beq	r2,zero,bb94 <__sfmoreglue+0x5c>
    bb78:	11000304 	addi	r4,r2,12
    bb7c:	10000015 	stw	zero,0(r2)
    bb80:	14800115 	stw	r18,4(r2)
    bb84:	11000215 	stw	r4,8(r2)
    bb88:	89801a04 	addi	r6,r17,104
    bb8c:	000b883a 	mov	r5,zero
    bb90:	000d5e00 	call	d5e0 <memset>
    bb94:	8005883a 	mov	r2,r16
    bb98:	dfc00317 	ldw	ra,12(sp)
    bb9c:	dc800217 	ldw	r18,8(sp)
    bba0:	dc400117 	ldw	r17,4(sp)
    bba4:	dc000017 	ldw	r16,0(sp)
    bba8:	dec00404 	addi	sp,sp,16
    bbac:	f800283a 	ret

0000bbb0 <__sfp>:
    bbb0:	defffb04 	addi	sp,sp,-20
    bbb4:	dc000015 	stw	r16,0(sp)
    bbb8:	040000b4 	movhi	r16,2
    bbbc:	84399904 	addi	r16,r16,-6556
    bbc0:	dcc00315 	stw	r19,12(sp)
    bbc4:	2027883a 	mov	r19,r4
    bbc8:	81000017 	ldw	r4,0(r16)
    bbcc:	dfc00415 	stw	ra,16(sp)
    bbd0:	dc800215 	stw	r18,8(sp)
    bbd4:	20800e17 	ldw	r2,56(r4)
    bbd8:	dc400115 	stw	r17,4(sp)
    bbdc:	1000021e 	bne	r2,zero,bbe8 <__sfp+0x38>
    bbe0:	000b9940 	call	b994 <__sinit.part.1>
    bbe4:	81000017 	ldw	r4,0(r16)
    bbe8:	2480b804 	addi	r18,r4,736
    bbec:	047fffc4 	movi	r17,-1
    bbf0:	91000117 	ldw	r4,4(r18)
    bbf4:	94000217 	ldw	r16,8(r18)
    bbf8:	213fffc4 	addi	r4,r4,-1
    bbfc:	20000a16 	blt	r4,zero,bc28 <__sfp+0x78>
    bc00:	8080030f 	ldh	r2,12(r16)
    bc04:	10000c26 	beq	r2,zero,bc38 <__sfp+0x88>
    bc08:	80c01d04 	addi	r3,r16,116
    bc0c:	00000206 	br	bc18 <__sfp+0x68>
    bc10:	18bfe60f 	ldh	r2,-104(r3)
    bc14:	10000826 	beq	r2,zero,bc38 <__sfp+0x88>
    bc18:	213fffc4 	addi	r4,r4,-1
    bc1c:	1c3ffd04 	addi	r16,r3,-12
    bc20:	18c01a04 	addi	r3,r3,104
    bc24:	247ffa1e 	bne	r4,r17,bc10 <__alt_data_end+0xfffdaed0>
    bc28:	90800017 	ldw	r2,0(r18)
    bc2c:	10001d26 	beq	r2,zero,bca4 <__sfp+0xf4>
    bc30:	1025883a 	mov	r18,r2
    bc34:	003fee06 	br	bbf0 <__alt_data_end+0xfffdaeb0>
    bc38:	00bfffc4 	movi	r2,-1
    bc3c:	8080038d 	sth	r2,14(r16)
    bc40:	00800044 	movi	r2,1
    bc44:	8080030d 	sth	r2,12(r16)
    bc48:	80001915 	stw	zero,100(r16)
    bc4c:	80000015 	stw	zero,0(r16)
    bc50:	80000215 	stw	zero,8(r16)
    bc54:	80000115 	stw	zero,4(r16)
    bc58:	80000415 	stw	zero,16(r16)
    bc5c:	80000515 	stw	zero,20(r16)
    bc60:	80000615 	stw	zero,24(r16)
    bc64:	01800204 	movi	r6,8
    bc68:	000b883a 	mov	r5,zero
    bc6c:	81001704 	addi	r4,r16,92
    bc70:	000d5e00 	call	d5e0 <memset>
    bc74:	8005883a 	mov	r2,r16
    bc78:	80000c15 	stw	zero,48(r16)
    bc7c:	80000d15 	stw	zero,52(r16)
    bc80:	80001115 	stw	zero,68(r16)
    bc84:	80001215 	stw	zero,72(r16)
    bc88:	dfc00417 	ldw	ra,16(sp)
    bc8c:	dcc00317 	ldw	r19,12(sp)
    bc90:	dc800217 	ldw	r18,8(sp)
    bc94:	dc400117 	ldw	r17,4(sp)
    bc98:	dc000017 	ldw	r16,0(sp)
    bc9c:	dec00504 	addi	sp,sp,20
    bca0:	f800283a 	ret
    bca4:	01400104 	movi	r5,4
    bca8:	9809883a 	mov	r4,r19
    bcac:	000bb380 	call	bb38 <__sfmoreglue>
    bcb0:	90800015 	stw	r2,0(r18)
    bcb4:	103fde1e 	bne	r2,zero,bc30 <__alt_data_end+0xfffdaef0>
    bcb8:	00800304 	movi	r2,12
    bcbc:	98800015 	stw	r2,0(r19)
    bcc0:	0005883a 	mov	r2,zero
    bcc4:	003ff006 	br	bc88 <__alt_data_end+0xfffdaf48>

0000bcc8 <_cleanup>:
    bcc8:	008000b4 	movhi	r2,2
    bccc:	10b99904 	addi	r2,r2,-6556
    bcd0:	11000017 	ldw	r4,0(r2)
    bcd4:	01400074 	movhi	r5,1
    bcd8:	29420604 	addi	r5,r5,2072
    bcdc:	000c6f01 	jmpi	c6f0 <_fwalk_reent>

0000bce0 <__sinit>:
    bce0:	20800e17 	ldw	r2,56(r4)
    bce4:	10000126 	beq	r2,zero,bcec <__sinit+0xc>
    bce8:	f800283a 	ret
    bcec:	000b9941 	jmpi	b994 <__sinit.part.1>

0000bcf0 <__sfp_lock_acquire>:
    bcf0:	f800283a 	ret

0000bcf4 <__sfp_lock_release>:
    bcf4:	f800283a 	ret

0000bcf8 <__sinit_lock_acquire>:
    bcf8:	f800283a 	ret

0000bcfc <__sinit_lock_release>:
    bcfc:	f800283a 	ret

0000bd00 <__fp_lock_all>:
    bd00:	008000b4 	movhi	r2,2
    bd04:	10b99a04 	addi	r2,r2,-6552
    bd08:	11000017 	ldw	r4,0(r2)
    bd0c:	01400074 	movhi	r5,1
    bd10:	296ecc04 	addi	r5,r5,-17616
    bd14:	000c62c1 	jmpi	c62c <_fwalk>

0000bd18 <__fp_unlock_all>:
    bd18:	008000b4 	movhi	r2,2
    bd1c:	10b99a04 	addi	r2,r2,-6552
    bd20:	11000017 	ldw	r4,0(r2)
    bd24:	01400074 	movhi	r5,1
    bd28:	296e6004 	addi	r5,r5,-18048
    bd2c:	000c62c1 	jmpi	c62c <_fwalk>

0000bd30 <_malloc_trim_r>:
    bd30:	defffb04 	addi	sp,sp,-20
    bd34:	dcc00315 	stw	r19,12(sp)
    bd38:	04c000b4 	movhi	r19,2
    bd3c:	dc800215 	stw	r18,8(sp)
    bd40:	dc400115 	stw	r17,4(sp)
    bd44:	dc000015 	stw	r16,0(sp)
    bd48:	dfc00415 	stw	ra,16(sp)
    bd4c:	2821883a 	mov	r16,r5
    bd50:	9cf41104 	addi	r19,r19,-12220
    bd54:	2025883a 	mov	r18,r4
    bd58:	00126ec0 	call	126ec <__malloc_lock>
    bd5c:	98800217 	ldw	r2,8(r19)
    bd60:	14400117 	ldw	r17,4(r2)
    bd64:	00bfff04 	movi	r2,-4
    bd68:	88a2703a 	and	r17,r17,r2
    bd6c:	8c21c83a 	sub	r16,r17,r16
    bd70:	8403fbc4 	addi	r16,r16,4079
    bd74:	8020d33a 	srli	r16,r16,12
    bd78:	0083ffc4 	movi	r2,4095
    bd7c:	843fffc4 	addi	r16,r16,-1
    bd80:	8020933a 	slli	r16,r16,12
    bd84:	1400060e 	bge	r2,r16,bda0 <_malloc_trim_r+0x70>
    bd88:	000b883a 	mov	r5,zero
    bd8c:	9009883a 	mov	r4,r18
    bd90:	000ed240 	call	ed24 <_sbrk_r>
    bd94:	98c00217 	ldw	r3,8(r19)
    bd98:	1c47883a 	add	r3,r3,r17
    bd9c:	10c00a26 	beq	r2,r3,bdc8 <_malloc_trim_r+0x98>
    bda0:	9009883a 	mov	r4,r18
    bda4:	001280c0 	call	1280c <__malloc_unlock>
    bda8:	0005883a 	mov	r2,zero
    bdac:	dfc00417 	ldw	ra,16(sp)
    bdb0:	dcc00317 	ldw	r19,12(sp)
    bdb4:	dc800217 	ldw	r18,8(sp)
    bdb8:	dc400117 	ldw	r17,4(sp)
    bdbc:	dc000017 	ldw	r16,0(sp)
    bdc0:	dec00504 	addi	sp,sp,20
    bdc4:	f800283a 	ret
    bdc8:	040bc83a 	sub	r5,zero,r16
    bdcc:	9009883a 	mov	r4,r18
    bdd0:	000ed240 	call	ed24 <_sbrk_r>
    bdd4:	00ffffc4 	movi	r3,-1
    bdd8:	10c00d26 	beq	r2,r3,be10 <_malloc_trim_r+0xe0>
    bddc:	00c000b4 	movhi	r3,2
    bde0:	18c0cd04 	addi	r3,r3,820
    bde4:	18800017 	ldw	r2,0(r3)
    bde8:	99000217 	ldw	r4,8(r19)
    bdec:	8c23c83a 	sub	r17,r17,r16
    bdf0:	8c400054 	ori	r17,r17,1
    bdf4:	1421c83a 	sub	r16,r2,r16
    bdf8:	24400115 	stw	r17,4(r4)
    bdfc:	9009883a 	mov	r4,r18
    be00:	1c000015 	stw	r16,0(r3)
    be04:	001280c0 	call	1280c <__malloc_unlock>
    be08:	00800044 	movi	r2,1
    be0c:	003fe706 	br	bdac <__alt_data_end+0xfffdb06c>
    be10:	000b883a 	mov	r5,zero
    be14:	9009883a 	mov	r4,r18
    be18:	000ed240 	call	ed24 <_sbrk_r>
    be1c:	99000217 	ldw	r4,8(r19)
    be20:	014003c4 	movi	r5,15
    be24:	1107c83a 	sub	r3,r2,r4
    be28:	28ffdd0e 	bge	r5,r3,bda0 <__alt_data_end+0xfffdb060>
    be2c:	014000b4 	movhi	r5,2
    be30:	29799c04 	addi	r5,r5,-6544
    be34:	29400017 	ldw	r5,0(r5)
    be38:	18c00054 	ori	r3,r3,1
    be3c:	20c00115 	stw	r3,4(r4)
    be40:	00c000b4 	movhi	r3,2
    be44:	1145c83a 	sub	r2,r2,r5
    be48:	18c0cd04 	addi	r3,r3,820
    be4c:	18800015 	stw	r2,0(r3)
    be50:	003fd306 	br	bda0 <__alt_data_end+0xfffdb060>

0000be54 <_free_r>:
    be54:	28004126 	beq	r5,zero,bf5c <_free_r+0x108>
    be58:	defffd04 	addi	sp,sp,-12
    be5c:	dc400115 	stw	r17,4(sp)
    be60:	dc000015 	stw	r16,0(sp)
    be64:	2023883a 	mov	r17,r4
    be68:	2821883a 	mov	r16,r5
    be6c:	dfc00215 	stw	ra,8(sp)
    be70:	00126ec0 	call	126ec <__malloc_lock>
    be74:	81ffff17 	ldw	r7,-4(r16)
    be78:	00bfff84 	movi	r2,-2
    be7c:	010000b4 	movhi	r4,2
    be80:	81bffe04 	addi	r6,r16,-8
    be84:	3884703a 	and	r2,r7,r2
    be88:	21341104 	addi	r4,r4,-12220
    be8c:	308b883a 	add	r5,r6,r2
    be90:	2a400117 	ldw	r9,4(r5)
    be94:	22000217 	ldw	r8,8(r4)
    be98:	00ffff04 	movi	r3,-4
    be9c:	48c6703a 	and	r3,r9,r3
    bea0:	2a005726 	beq	r5,r8,c000 <_free_r+0x1ac>
    bea4:	28c00115 	stw	r3,4(r5)
    bea8:	39c0004c 	andi	r7,r7,1
    beac:	3800091e 	bne	r7,zero,bed4 <_free_r+0x80>
    beb0:	823ffe17 	ldw	r8,-8(r16)
    beb4:	22400204 	addi	r9,r4,8
    beb8:	320dc83a 	sub	r6,r6,r8
    bebc:	31c00217 	ldw	r7,8(r6)
    bec0:	1205883a 	add	r2,r2,r8
    bec4:	3a406526 	beq	r7,r9,c05c <_free_r+0x208>
    bec8:	32000317 	ldw	r8,12(r6)
    becc:	3a000315 	stw	r8,12(r7)
    bed0:	41c00215 	stw	r7,8(r8)
    bed4:	28cf883a 	add	r7,r5,r3
    bed8:	39c00117 	ldw	r7,4(r7)
    bedc:	39c0004c 	andi	r7,r7,1
    bee0:	38003a26 	beq	r7,zero,bfcc <_free_r+0x178>
    bee4:	10c00054 	ori	r3,r2,1
    bee8:	30c00115 	stw	r3,4(r6)
    beec:	3087883a 	add	r3,r6,r2
    bef0:	18800015 	stw	r2,0(r3)
    bef4:	00c07fc4 	movi	r3,511
    bef8:	18801936 	bltu	r3,r2,bf60 <_free_r+0x10c>
    befc:	1004d0fa 	srli	r2,r2,3
    bf00:	01c00044 	movi	r7,1
    bf04:	21400117 	ldw	r5,4(r4)
    bf08:	10c00044 	addi	r3,r2,1
    bf0c:	18c7883a 	add	r3,r3,r3
    bf10:	1005d0ba 	srai	r2,r2,2
    bf14:	18c7883a 	add	r3,r3,r3
    bf18:	18c7883a 	add	r3,r3,r3
    bf1c:	1907883a 	add	r3,r3,r4
    bf20:	3884983a 	sll	r2,r7,r2
    bf24:	19c00017 	ldw	r7,0(r3)
    bf28:	1a3ffe04 	addi	r8,r3,-8
    bf2c:	1144b03a 	or	r2,r2,r5
    bf30:	32000315 	stw	r8,12(r6)
    bf34:	31c00215 	stw	r7,8(r6)
    bf38:	20800115 	stw	r2,4(r4)
    bf3c:	19800015 	stw	r6,0(r3)
    bf40:	39800315 	stw	r6,12(r7)
    bf44:	8809883a 	mov	r4,r17
    bf48:	dfc00217 	ldw	ra,8(sp)
    bf4c:	dc400117 	ldw	r17,4(sp)
    bf50:	dc000017 	ldw	r16,0(sp)
    bf54:	dec00304 	addi	sp,sp,12
    bf58:	001280c1 	jmpi	1280c <__malloc_unlock>
    bf5c:	f800283a 	ret
    bf60:	100ad27a 	srli	r5,r2,9
    bf64:	00c00104 	movi	r3,4
    bf68:	19404a36 	bltu	r3,r5,c094 <_free_r+0x240>
    bf6c:	100ad1ba 	srli	r5,r2,6
    bf70:	28c00e44 	addi	r3,r5,57
    bf74:	18c7883a 	add	r3,r3,r3
    bf78:	29400e04 	addi	r5,r5,56
    bf7c:	18c7883a 	add	r3,r3,r3
    bf80:	18c7883a 	add	r3,r3,r3
    bf84:	1909883a 	add	r4,r3,r4
    bf88:	20c00017 	ldw	r3,0(r4)
    bf8c:	01c000b4 	movhi	r7,2
    bf90:	213ffe04 	addi	r4,r4,-8
    bf94:	39f41104 	addi	r7,r7,-12220
    bf98:	20c04426 	beq	r4,r3,c0ac <_free_r+0x258>
    bf9c:	01ffff04 	movi	r7,-4
    bfa0:	19400117 	ldw	r5,4(r3)
    bfa4:	29ca703a 	and	r5,r5,r7
    bfa8:	1140022e 	bgeu	r2,r5,bfb4 <_free_r+0x160>
    bfac:	18c00217 	ldw	r3,8(r3)
    bfb0:	20fffb1e 	bne	r4,r3,bfa0 <__alt_data_end+0xfffdb260>
    bfb4:	19000317 	ldw	r4,12(r3)
    bfb8:	31000315 	stw	r4,12(r6)
    bfbc:	30c00215 	stw	r3,8(r6)
    bfc0:	21800215 	stw	r6,8(r4)
    bfc4:	19800315 	stw	r6,12(r3)
    bfc8:	003fde06 	br	bf44 <__alt_data_end+0xfffdb204>
    bfcc:	29c00217 	ldw	r7,8(r5)
    bfd0:	10c5883a 	add	r2,r2,r3
    bfd4:	00c000b4 	movhi	r3,2
    bfd8:	18f41304 	addi	r3,r3,-12212
    bfdc:	38c03b26 	beq	r7,r3,c0cc <_free_r+0x278>
    bfe0:	2a000317 	ldw	r8,12(r5)
    bfe4:	11400054 	ori	r5,r2,1
    bfe8:	3087883a 	add	r3,r6,r2
    bfec:	3a000315 	stw	r8,12(r7)
    bff0:	41c00215 	stw	r7,8(r8)
    bff4:	31400115 	stw	r5,4(r6)
    bff8:	18800015 	stw	r2,0(r3)
    bffc:	003fbd06 	br	bef4 <__alt_data_end+0xfffdb1b4>
    c000:	39c0004c 	andi	r7,r7,1
    c004:	10c5883a 	add	r2,r2,r3
    c008:	3800071e 	bne	r7,zero,c028 <_free_r+0x1d4>
    c00c:	81fffe17 	ldw	r7,-8(r16)
    c010:	31cdc83a 	sub	r6,r6,r7
    c014:	30c00317 	ldw	r3,12(r6)
    c018:	31400217 	ldw	r5,8(r6)
    c01c:	11c5883a 	add	r2,r2,r7
    c020:	28c00315 	stw	r3,12(r5)
    c024:	19400215 	stw	r5,8(r3)
    c028:	10c00054 	ori	r3,r2,1
    c02c:	30c00115 	stw	r3,4(r6)
    c030:	00c000b4 	movhi	r3,2
    c034:	18f99d04 	addi	r3,r3,-6540
    c038:	18c00017 	ldw	r3,0(r3)
    c03c:	21800215 	stw	r6,8(r4)
    c040:	10ffc036 	bltu	r2,r3,bf44 <__alt_data_end+0xfffdb204>
    c044:	008000b4 	movhi	r2,2
    c048:	1080ab04 	addi	r2,r2,684
    c04c:	11400017 	ldw	r5,0(r2)
    c050:	8809883a 	mov	r4,r17
    c054:	000bd300 	call	bd30 <_malloc_trim_r>
    c058:	003fba06 	br	bf44 <__alt_data_end+0xfffdb204>
    c05c:	28c9883a 	add	r4,r5,r3
    c060:	21000117 	ldw	r4,4(r4)
    c064:	2100004c 	andi	r4,r4,1
    c068:	2000391e 	bne	r4,zero,c150 <_free_r+0x2fc>
    c06c:	29c00217 	ldw	r7,8(r5)
    c070:	29000317 	ldw	r4,12(r5)
    c074:	1885883a 	add	r2,r3,r2
    c078:	10c00054 	ori	r3,r2,1
    c07c:	39000315 	stw	r4,12(r7)
    c080:	21c00215 	stw	r7,8(r4)
    c084:	30c00115 	stw	r3,4(r6)
    c088:	308d883a 	add	r6,r6,r2
    c08c:	30800015 	stw	r2,0(r6)
    c090:	003fac06 	br	bf44 <__alt_data_end+0xfffdb204>
    c094:	00c00504 	movi	r3,20
    c098:	19401536 	bltu	r3,r5,c0f0 <_free_r+0x29c>
    c09c:	28c01704 	addi	r3,r5,92
    c0a0:	18c7883a 	add	r3,r3,r3
    c0a4:	294016c4 	addi	r5,r5,91
    c0a8:	003fb406 	br	bf7c <__alt_data_end+0xfffdb23c>
    c0ac:	280bd0ba 	srai	r5,r5,2
    c0b0:	00c00044 	movi	r3,1
    c0b4:	38800117 	ldw	r2,4(r7)
    c0b8:	194a983a 	sll	r5,r3,r5
    c0bc:	2007883a 	mov	r3,r4
    c0c0:	2884b03a 	or	r2,r5,r2
    c0c4:	38800115 	stw	r2,4(r7)
    c0c8:	003fbb06 	br	bfb8 <__alt_data_end+0xfffdb278>
    c0cc:	21800515 	stw	r6,20(r4)
    c0d0:	21800415 	stw	r6,16(r4)
    c0d4:	10c00054 	ori	r3,r2,1
    c0d8:	31c00315 	stw	r7,12(r6)
    c0dc:	31c00215 	stw	r7,8(r6)
    c0e0:	30c00115 	stw	r3,4(r6)
    c0e4:	308d883a 	add	r6,r6,r2
    c0e8:	30800015 	stw	r2,0(r6)
    c0ec:	003f9506 	br	bf44 <__alt_data_end+0xfffdb204>
    c0f0:	00c01504 	movi	r3,84
    c0f4:	19400536 	bltu	r3,r5,c10c <_free_r+0x2b8>
    c0f8:	100ad33a 	srli	r5,r2,12
    c0fc:	28c01bc4 	addi	r3,r5,111
    c100:	18c7883a 	add	r3,r3,r3
    c104:	29401b84 	addi	r5,r5,110
    c108:	003f9c06 	br	bf7c <__alt_data_end+0xfffdb23c>
    c10c:	00c05504 	movi	r3,340
    c110:	19400536 	bltu	r3,r5,c128 <_free_r+0x2d4>
    c114:	100ad3fa 	srli	r5,r2,15
    c118:	28c01e04 	addi	r3,r5,120
    c11c:	18c7883a 	add	r3,r3,r3
    c120:	29401dc4 	addi	r5,r5,119
    c124:	003f9506 	br	bf7c <__alt_data_end+0xfffdb23c>
    c128:	00c15504 	movi	r3,1364
    c12c:	19400536 	bltu	r3,r5,c144 <_free_r+0x2f0>
    c130:	100ad4ba 	srli	r5,r2,18
    c134:	28c01f44 	addi	r3,r5,125
    c138:	18c7883a 	add	r3,r3,r3
    c13c:	29401f04 	addi	r5,r5,124
    c140:	003f8e06 	br	bf7c <__alt_data_end+0xfffdb23c>
    c144:	00c03f84 	movi	r3,254
    c148:	01401f84 	movi	r5,126
    c14c:	003f8b06 	br	bf7c <__alt_data_end+0xfffdb23c>
    c150:	10c00054 	ori	r3,r2,1
    c154:	30c00115 	stw	r3,4(r6)
    c158:	308d883a 	add	r6,r6,r2
    c15c:	30800015 	stw	r2,0(r6)
    c160:	003f7806 	br	bf44 <__alt_data_end+0xfffdb204>

0000c164 <__sfvwrite_r>:
    c164:	30800217 	ldw	r2,8(r6)
    c168:	10006726 	beq	r2,zero,c308 <__sfvwrite_r+0x1a4>
    c16c:	28c0030b 	ldhu	r3,12(r5)
    c170:	defff404 	addi	sp,sp,-48
    c174:	dd400715 	stw	r21,28(sp)
    c178:	dd000615 	stw	r20,24(sp)
    c17c:	dc000215 	stw	r16,8(sp)
    c180:	dfc00b15 	stw	ra,44(sp)
    c184:	df000a15 	stw	fp,40(sp)
    c188:	ddc00915 	stw	r23,36(sp)
    c18c:	dd800815 	stw	r22,32(sp)
    c190:	dcc00515 	stw	r19,20(sp)
    c194:	dc800415 	stw	r18,16(sp)
    c198:	dc400315 	stw	r17,12(sp)
    c19c:	1880020c 	andi	r2,r3,8
    c1a0:	2821883a 	mov	r16,r5
    c1a4:	202b883a 	mov	r21,r4
    c1a8:	3029883a 	mov	r20,r6
    c1ac:	10002726 	beq	r2,zero,c24c <__sfvwrite_r+0xe8>
    c1b0:	28800417 	ldw	r2,16(r5)
    c1b4:	10002526 	beq	r2,zero,c24c <__sfvwrite_r+0xe8>
    c1b8:	1880008c 	andi	r2,r3,2
    c1bc:	a4400017 	ldw	r17,0(r20)
    c1c0:	10002a26 	beq	r2,zero,c26c <__sfvwrite_r+0x108>
    c1c4:	05a00034 	movhi	r22,32768
    c1c8:	0027883a 	mov	r19,zero
    c1cc:	0025883a 	mov	r18,zero
    c1d0:	b5bf0004 	addi	r22,r22,-1024
    c1d4:	980d883a 	mov	r6,r19
    c1d8:	a809883a 	mov	r4,r21
    c1dc:	90004626 	beq	r18,zero,c2f8 <__sfvwrite_r+0x194>
    c1e0:	900f883a 	mov	r7,r18
    c1e4:	b480022e 	bgeu	r22,r18,c1f0 <__sfvwrite_r+0x8c>
    c1e8:	01e00034 	movhi	r7,32768
    c1ec:	39ff0004 	addi	r7,r7,-1024
    c1f0:	80800917 	ldw	r2,36(r16)
    c1f4:	81400717 	ldw	r5,28(r16)
    c1f8:	103ee83a 	callr	r2
    c1fc:	00805a0e 	bge	zero,r2,c368 <__sfvwrite_r+0x204>
    c200:	a0c00217 	ldw	r3,8(r20)
    c204:	98a7883a 	add	r19,r19,r2
    c208:	90a5c83a 	sub	r18,r18,r2
    c20c:	1885c83a 	sub	r2,r3,r2
    c210:	a0800215 	stw	r2,8(r20)
    c214:	103fef1e 	bne	r2,zero,c1d4 <__alt_data_end+0xfffdb494>
    c218:	0005883a 	mov	r2,zero
    c21c:	dfc00b17 	ldw	ra,44(sp)
    c220:	df000a17 	ldw	fp,40(sp)
    c224:	ddc00917 	ldw	r23,36(sp)
    c228:	dd800817 	ldw	r22,32(sp)
    c22c:	dd400717 	ldw	r21,28(sp)
    c230:	dd000617 	ldw	r20,24(sp)
    c234:	dcc00517 	ldw	r19,20(sp)
    c238:	dc800417 	ldw	r18,16(sp)
    c23c:	dc400317 	ldw	r17,12(sp)
    c240:	dc000217 	ldw	r16,8(sp)
    c244:	dec00c04 	addi	sp,sp,48
    c248:	f800283a 	ret
    c24c:	800b883a 	mov	r5,r16
    c250:	a809883a 	mov	r4,r21
    c254:	0009cd40 	call	9cd4 <__swsetup_r>
    c258:	1000ee1e 	bne	r2,zero,c614 <__sfvwrite_r+0x4b0>
    c25c:	80c0030b 	ldhu	r3,12(r16)
    c260:	a4400017 	ldw	r17,0(r20)
    c264:	1880008c 	andi	r2,r3,2
    c268:	103fd61e 	bne	r2,zero,c1c4 <__alt_data_end+0xfffdb484>
    c26c:	1880004c 	andi	r2,r3,1
    c270:	1000421e 	bne	r2,zero,c37c <__sfvwrite_r+0x218>
    c274:	0039883a 	mov	fp,zero
    c278:	0025883a 	mov	r18,zero
    c27c:	90001a26 	beq	r18,zero,c2e8 <__sfvwrite_r+0x184>
    c280:	1880800c 	andi	r2,r3,512
    c284:	84c00217 	ldw	r19,8(r16)
    c288:	10002126 	beq	r2,zero,c310 <__sfvwrite_r+0x1ac>
    c28c:	982f883a 	mov	r23,r19
    c290:	94c09636 	bltu	r18,r19,c4ec <__sfvwrite_r+0x388>
    c294:	1881200c 	andi	r2,r3,1152
    c298:	1000a11e 	bne	r2,zero,c520 <__sfvwrite_r+0x3bc>
    c29c:	81000017 	ldw	r4,0(r16)
    c2a0:	b80d883a 	mov	r6,r23
    c2a4:	e00b883a 	mov	r5,fp
    c2a8:	000d4840 	call	d484 <memmove>
    c2ac:	80c00217 	ldw	r3,8(r16)
    c2b0:	81000017 	ldw	r4,0(r16)
    c2b4:	9005883a 	mov	r2,r18
    c2b8:	1ce7c83a 	sub	r19,r3,r19
    c2bc:	25cf883a 	add	r7,r4,r23
    c2c0:	84c00215 	stw	r19,8(r16)
    c2c4:	81c00015 	stw	r7,0(r16)
    c2c8:	a0c00217 	ldw	r3,8(r20)
    c2cc:	e0b9883a 	add	fp,fp,r2
    c2d0:	90a5c83a 	sub	r18,r18,r2
    c2d4:	18a7c83a 	sub	r19,r3,r2
    c2d8:	a4c00215 	stw	r19,8(r20)
    c2dc:	983fce26 	beq	r19,zero,c218 <__alt_data_end+0xfffdb4d8>
    c2e0:	80c0030b 	ldhu	r3,12(r16)
    c2e4:	903fe61e 	bne	r18,zero,c280 <__alt_data_end+0xfffdb540>
    c2e8:	8f000017 	ldw	fp,0(r17)
    c2ec:	8c800117 	ldw	r18,4(r17)
    c2f0:	8c400204 	addi	r17,r17,8
    c2f4:	003fe106 	br	c27c <__alt_data_end+0xfffdb53c>
    c2f8:	8cc00017 	ldw	r19,0(r17)
    c2fc:	8c800117 	ldw	r18,4(r17)
    c300:	8c400204 	addi	r17,r17,8
    c304:	003fb306 	br	c1d4 <__alt_data_end+0xfffdb494>
    c308:	0005883a 	mov	r2,zero
    c30c:	f800283a 	ret
    c310:	81000017 	ldw	r4,0(r16)
    c314:	80800417 	ldw	r2,16(r16)
    c318:	11005a36 	bltu	r2,r4,c484 <__sfvwrite_r+0x320>
    c31c:	85c00517 	ldw	r23,20(r16)
    c320:	95c05836 	bltu	r18,r23,c484 <__sfvwrite_r+0x320>
    c324:	00a00034 	movhi	r2,32768
    c328:	10bfffc4 	addi	r2,r2,-1
    c32c:	9009883a 	mov	r4,r18
    c330:	1480012e 	bgeu	r2,r18,c338 <__sfvwrite_r+0x1d4>
    c334:	1009883a 	mov	r4,r2
    c338:	b80b883a 	mov	r5,r23
    c33c:	0004d600 	call	4d60 <__divsi3>
    c340:	b80b883a 	mov	r5,r23
    c344:	1009883a 	mov	r4,r2
    c348:	0004f140 	call	4f14 <__mulsi3>
    c34c:	81400717 	ldw	r5,28(r16)
    c350:	80c00917 	ldw	r3,36(r16)
    c354:	100f883a 	mov	r7,r2
    c358:	e00d883a 	mov	r6,fp
    c35c:	a809883a 	mov	r4,r21
    c360:	183ee83a 	callr	r3
    c364:	00bfd816 	blt	zero,r2,c2c8 <__alt_data_end+0xfffdb588>
    c368:	8080030b 	ldhu	r2,12(r16)
    c36c:	10801014 	ori	r2,r2,64
    c370:	8080030d 	sth	r2,12(r16)
    c374:	00bfffc4 	movi	r2,-1
    c378:	003fa806 	br	c21c <__alt_data_end+0xfffdb4dc>
    c37c:	0027883a 	mov	r19,zero
    c380:	0011883a 	mov	r8,zero
    c384:	0039883a 	mov	fp,zero
    c388:	0025883a 	mov	r18,zero
    c38c:	90001f26 	beq	r18,zero,c40c <__sfvwrite_r+0x2a8>
    c390:	40005a26 	beq	r8,zero,c4fc <__sfvwrite_r+0x398>
    c394:	982d883a 	mov	r22,r19
    c398:	94c0012e 	bgeu	r18,r19,c3a0 <__sfvwrite_r+0x23c>
    c39c:	902d883a 	mov	r22,r18
    c3a0:	81000017 	ldw	r4,0(r16)
    c3a4:	80800417 	ldw	r2,16(r16)
    c3a8:	b02f883a 	mov	r23,r22
    c3ac:	81c00517 	ldw	r7,20(r16)
    c3b0:	1100032e 	bgeu	r2,r4,c3c0 <__sfvwrite_r+0x25c>
    c3b4:	80c00217 	ldw	r3,8(r16)
    c3b8:	38c7883a 	add	r3,r7,r3
    c3bc:	1d801816 	blt	r3,r22,c420 <__sfvwrite_r+0x2bc>
    c3c0:	b1c03e16 	blt	r22,r7,c4bc <__sfvwrite_r+0x358>
    c3c4:	80800917 	ldw	r2,36(r16)
    c3c8:	81400717 	ldw	r5,28(r16)
    c3cc:	e00d883a 	mov	r6,fp
    c3d0:	da000115 	stw	r8,4(sp)
    c3d4:	a809883a 	mov	r4,r21
    c3d8:	103ee83a 	callr	r2
    c3dc:	102f883a 	mov	r23,r2
    c3e0:	da000117 	ldw	r8,4(sp)
    c3e4:	00bfe00e 	bge	zero,r2,c368 <__alt_data_end+0xfffdb628>
    c3e8:	9de7c83a 	sub	r19,r19,r23
    c3ec:	98001f26 	beq	r19,zero,c46c <__sfvwrite_r+0x308>
    c3f0:	a0800217 	ldw	r2,8(r20)
    c3f4:	e5f9883a 	add	fp,fp,r23
    c3f8:	95e5c83a 	sub	r18,r18,r23
    c3fc:	15efc83a 	sub	r23,r2,r23
    c400:	a5c00215 	stw	r23,8(r20)
    c404:	b83f8426 	beq	r23,zero,c218 <__alt_data_end+0xfffdb4d8>
    c408:	903fe11e 	bne	r18,zero,c390 <__alt_data_end+0xfffdb650>
    c40c:	8f000017 	ldw	fp,0(r17)
    c410:	8c800117 	ldw	r18,4(r17)
    c414:	0011883a 	mov	r8,zero
    c418:	8c400204 	addi	r17,r17,8
    c41c:	003fdb06 	br	c38c <__alt_data_end+0xfffdb64c>
    c420:	180d883a 	mov	r6,r3
    c424:	e00b883a 	mov	r5,fp
    c428:	da000115 	stw	r8,4(sp)
    c42c:	d8c00015 	stw	r3,0(sp)
    c430:	000d4840 	call	d484 <memmove>
    c434:	d8c00017 	ldw	r3,0(sp)
    c438:	80800017 	ldw	r2,0(r16)
    c43c:	800b883a 	mov	r5,r16
    c440:	a809883a 	mov	r4,r21
    c444:	10c5883a 	add	r2,r2,r3
    c448:	80800015 	stw	r2,0(r16)
    c44c:	d8c00015 	stw	r3,0(sp)
    c450:	000b8f40 	call	b8f4 <_fflush_r>
    c454:	d8c00017 	ldw	r3,0(sp)
    c458:	da000117 	ldw	r8,4(sp)
    c45c:	103fc21e 	bne	r2,zero,c368 <__alt_data_end+0xfffdb628>
    c460:	182f883a 	mov	r23,r3
    c464:	9de7c83a 	sub	r19,r19,r23
    c468:	983fe11e 	bne	r19,zero,c3f0 <__alt_data_end+0xfffdb6b0>
    c46c:	800b883a 	mov	r5,r16
    c470:	a809883a 	mov	r4,r21
    c474:	000b8f40 	call	b8f4 <_fflush_r>
    c478:	103fbb1e 	bne	r2,zero,c368 <__alt_data_end+0xfffdb628>
    c47c:	0011883a 	mov	r8,zero
    c480:	003fdb06 	br	c3f0 <__alt_data_end+0xfffdb6b0>
    c484:	94c0012e 	bgeu	r18,r19,c48c <__sfvwrite_r+0x328>
    c488:	9027883a 	mov	r19,r18
    c48c:	980d883a 	mov	r6,r19
    c490:	e00b883a 	mov	r5,fp
    c494:	000d4840 	call	d484 <memmove>
    c498:	80800217 	ldw	r2,8(r16)
    c49c:	80c00017 	ldw	r3,0(r16)
    c4a0:	14c5c83a 	sub	r2,r2,r19
    c4a4:	1cc7883a 	add	r3,r3,r19
    c4a8:	80800215 	stw	r2,8(r16)
    c4ac:	80c00015 	stw	r3,0(r16)
    c4b0:	10004326 	beq	r2,zero,c5c0 <__sfvwrite_r+0x45c>
    c4b4:	9805883a 	mov	r2,r19
    c4b8:	003f8306 	br	c2c8 <__alt_data_end+0xfffdb588>
    c4bc:	b00d883a 	mov	r6,r22
    c4c0:	e00b883a 	mov	r5,fp
    c4c4:	da000115 	stw	r8,4(sp)
    c4c8:	000d4840 	call	d484 <memmove>
    c4cc:	80800217 	ldw	r2,8(r16)
    c4d0:	80c00017 	ldw	r3,0(r16)
    c4d4:	da000117 	ldw	r8,4(sp)
    c4d8:	1585c83a 	sub	r2,r2,r22
    c4dc:	1dad883a 	add	r22,r3,r22
    c4e0:	80800215 	stw	r2,8(r16)
    c4e4:	85800015 	stw	r22,0(r16)
    c4e8:	003fbf06 	br	c3e8 <__alt_data_end+0xfffdb6a8>
    c4ec:	81000017 	ldw	r4,0(r16)
    c4f0:	9027883a 	mov	r19,r18
    c4f4:	902f883a 	mov	r23,r18
    c4f8:	003f6906 	br	c2a0 <__alt_data_end+0xfffdb560>
    c4fc:	900d883a 	mov	r6,r18
    c500:	01400284 	movi	r5,10
    c504:	e009883a 	mov	r4,fp
    c508:	000d2580 	call	d258 <memchr>
    c50c:	10003e26 	beq	r2,zero,c608 <__sfvwrite_r+0x4a4>
    c510:	10800044 	addi	r2,r2,1
    c514:	1727c83a 	sub	r19,r2,fp
    c518:	02000044 	movi	r8,1
    c51c:	003f9d06 	br	c394 <__alt_data_end+0xfffdb654>
    c520:	80800517 	ldw	r2,20(r16)
    c524:	81400417 	ldw	r5,16(r16)
    c528:	81c00017 	ldw	r7,0(r16)
    c52c:	10a7883a 	add	r19,r2,r2
    c530:	9885883a 	add	r2,r19,r2
    c534:	1026d7fa 	srli	r19,r2,31
    c538:	396dc83a 	sub	r22,r7,r5
    c53c:	b1000044 	addi	r4,r22,1
    c540:	9885883a 	add	r2,r19,r2
    c544:	1027d07a 	srai	r19,r2,1
    c548:	2485883a 	add	r2,r4,r18
    c54c:	980d883a 	mov	r6,r19
    c550:	9880022e 	bgeu	r19,r2,c55c <__sfvwrite_r+0x3f8>
    c554:	1027883a 	mov	r19,r2
    c558:	100d883a 	mov	r6,r2
    c55c:	18c1000c 	andi	r3,r3,1024
    c560:	18001c26 	beq	r3,zero,c5d4 <__sfvwrite_r+0x470>
    c564:	300b883a 	mov	r5,r6
    c568:	a809883a 	mov	r4,r21
    c56c:	000ca4c0 	call	ca4c <_malloc_r>
    c570:	102f883a 	mov	r23,r2
    c574:	10002926 	beq	r2,zero,c61c <__sfvwrite_r+0x4b8>
    c578:	81400417 	ldw	r5,16(r16)
    c57c:	b00d883a 	mov	r6,r22
    c580:	1009883a 	mov	r4,r2
    c584:	000d33c0 	call	d33c <memcpy>
    c588:	8080030b 	ldhu	r2,12(r16)
    c58c:	00fedfc4 	movi	r3,-1153
    c590:	10c4703a 	and	r2,r2,r3
    c594:	10802014 	ori	r2,r2,128
    c598:	8080030d 	sth	r2,12(r16)
    c59c:	bd89883a 	add	r4,r23,r22
    c5a0:	9d8fc83a 	sub	r7,r19,r22
    c5a4:	85c00415 	stw	r23,16(r16)
    c5a8:	84c00515 	stw	r19,20(r16)
    c5ac:	81000015 	stw	r4,0(r16)
    c5b0:	9027883a 	mov	r19,r18
    c5b4:	81c00215 	stw	r7,8(r16)
    c5b8:	902f883a 	mov	r23,r18
    c5bc:	003f3806 	br	c2a0 <__alt_data_end+0xfffdb560>
    c5c0:	800b883a 	mov	r5,r16
    c5c4:	a809883a 	mov	r4,r21
    c5c8:	000b8f40 	call	b8f4 <_fflush_r>
    c5cc:	103fb926 	beq	r2,zero,c4b4 <__alt_data_end+0xfffdb774>
    c5d0:	003f6506 	br	c368 <__alt_data_end+0xfffdb628>
    c5d4:	a809883a 	mov	r4,r21
    c5d8:	000e7c00 	call	e7c0 <_realloc_r>
    c5dc:	102f883a 	mov	r23,r2
    c5e0:	103fee1e 	bne	r2,zero,c59c <__alt_data_end+0xfffdb85c>
    c5e4:	81400417 	ldw	r5,16(r16)
    c5e8:	a809883a 	mov	r4,r21
    c5ec:	000be540 	call	be54 <_free_r>
    c5f0:	8080030b 	ldhu	r2,12(r16)
    c5f4:	00ffdfc4 	movi	r3,-129
    c5f8:	1884703a 	and	r2,r3,r2
    c5fc:	00c00304 	movi	r3,12
    c600:	a8c00015 	stw	r3,0(r21)
    c604:	003f5906 	br	c36c <__alt_data_end+0xfffdb62c>
    c608:	94c00044 	addi	r19,r18,1
    c60c:	02000044 	movi	r8,1
    c610:	003f6006 	br	c394 <__alt_data_end+0xfffdb654>
    c614:	00bfffc4 	movi	r2,-1
    c618:	003f0006 	br	c21c <__alt_data_end+0xfffdb4dc>
    c61c:	00800304 	movi	r2,12
    c620:	a8800015 	stw	r2,0(r21)
    c624:	8080030b 	ldhu	r2,12(r16)
    c628:	003f5006 	br	c36c <__alt_data_end+0xfffdb62c>

0000c62c <_fwalk>:
    c62c:	defff704 	addi	sp,sp,-36
    c630:	dd000415 	stw	r20,16(sp)
    c634:	dfc00815 	stw	ra,32(sp)
    c638:	ddc00715 	stw	r23,28(sp)
    c63c:	dd800615 	stw	r22,24(sp)
    c640:	dd400515 	stw	r21,20(sp)
    c644:	dcc00315 	stw	r19,12(sp)
    c648:	dc800215 	stw	r18,8(sp)
    c64c:	dc400115 	stw	r17,4(sp)
    c650:	dc000015 	stw	r16,0(sp)
    c654:	2500b804 	addi	r20,r4,736
    c658:	a0002326 	beq	r20,zero,c6e8 <_fwalk+0xbc>
    c65c:	282b883a 	mov	r21,r5
    c660:	002f883a 	mov	r23,zero
    c664:	05800044 	movi	r22,1
    c668:	04ffffc4 	movi	r19,-1
    c66c:	a4400117 	ldw	r17,4(r20)
    c670:	a4800217 	ldw	r18,8(r20)
    c674:	8c7fffc4 	addi	r17,r17,-1
    c678:	88000d16 	blt	r17,zero,c6b0 <_fwalk+0x84>
    c67c:	94000304 	addi	r16,r18,12
    c680:	94800384 	addi	r18,r18,14
    c684:	8080000b 	ldhu	r2,0(r16)
    c688:	8c7fffc4 	addi	r17,r17,-1
    c68c:	813ffd04 	addi	r4,r16,-12
    c690:	b080042e 	bgeu	r22,r2,c6a4 <_fwalk+0x78>
    c694:	9080000f 	ldh	r2,0(r18)
    c698:	14c00226 	beq	r2,r19,c6a4 <_fwalk+0x78>
    c69c:	a83ee83a 	callr	r21
    c6a0:	b8aeb03a 	or	r23,r23,r2
    c6a4:	84001a04 	addi	r16,r16,104
    c6a8:	94801a04 	addi	r18,r18,104
    c6ac:	8cfff51e 	bne	r17,r19,c684 <__alt_data_end+0xfffdb944>
    c6b0:	a5000017 	ldw	r20,0(r20)
    c6b4:	a03fed1e 	bne	r20,zero,c66c <__alt_data_end+0xfffdb92c>
    c6b8:	b805883a 	mov	r2,r23
    c6bc:	dfc00817 	ldw	ra,32(sp)
    c6c0:	ddc00717 	ldw	r23,28(sp)
    c6c4:	dd800617 	ldw	r22,24(sp)
    c6c8:	dd400517 	ldw	r21,20(sp)
    c6cc:	dd000417 	ldw	r20,16(sp)
    c6d0:	dcc00317 	ldw	r19,12(sp)
    c6d4:	dc800217 	ldw	r18,8(sp)
    c6d8:	dc400117 	ldw	r17,4(sp)
    c6dc:	dc000017 	ldw	r16,0(sp)
    c6e0:	dec00904 	addi	sp,sp,36
    c6e4:	f800283a 	ret
    c6e8:	002f883a 	mov	r23,zero
    c6ec:	003ff206 	br	c6b8 <__alt_data_end+0xfffdb978>

0000c6f0 <_fwalk_reent>:
    c6f0:	defff704 	addi	sp,sp,-36
    c6f4:	dd000415 	stw	r20,16(sp)
    c6f8:	dfc00815 	stw	ra,32(sp)
    c6fc:	ddc00715 	stw	r23,28(sp)
    c700:	dd800615 	stw	r22,24(sp)
    c704:	dd400515 	stw	r21,20(sp)
    c708:	dcc00315 	stw	r19,12(sp)
    c70c:	dc800215 	stw	r18,8(sp)
    c710:	dc400115 	stw	r17,4(sp)
    c714:	dc000015 	stw	r16,0(sp)
    c718:	2500b804 	addi	r20,r4,736
    c71c:	a0002326 	beq	r20,zero,c7ac <_fwalk_reent+0xbc>
    c720:	282b883a 	mov	r21,r5
    c724:	2027883a 	mov	r19,r4
    c728:	002f883a 	mov	r23,zero
    c72c:	05800044 	movi	r22,1
    c730:	04bfffc4 	movi	r18,-1
    c734:	a4400117 	ldw	r17,4(r20)
    c738:	a4000217 	ldw	r16,8(r20)
    c73c:	8c7fffc4 	addi	r17,r17,-1
    c740:	88000c16 	blt	r17,zero,c774 <_fwalk_reent+0x84>
    c744:	84000304 	addi	r16,r16,12
    c748:	8080000b 	ldhu	r2,0(r16)
    c74c:	8c7fffc4 	addi	r17,r17,-1
    c750:	817ffd04 	addi	r5,r16,-12
    c754:	b080052e 	bgeu	r22,r2,c76c <_fwalk_reent+0x7c>
    c758:	8080008f 	ldh	r2,2(r16)
    c75c:	9809883a 	mov	r4,r19
    c760:	14800226 	beq	r2,r18,c76c <_fwalk_reent+0x7c>
    c764:	a83ee83a 	callr	r21
    c768:	b8aeb03a 	or	r23,r23,r2
    c76c:	84001a04 	addi	r16,r16,104
    c770:	8cbff51e 	bne	r17,r18,c748 <__alt_data_end+0xfffdba08>
    c774:	a5000017 	ldw	r20,0(r20)
    c778:	a03fee1e 	bne	r20,zero,c734 <__alt_data_end+0xfffdb9f4>
    c77c:	b805883a 	mov	r2,r23
    c780:	dfc00817 	ldw	ra,32(sp)
    c784:	ddc00717 	ldw	r23,28(sp)
    c788:	dd800617 	ldw	r22,24(sp)
    c78c:	dd400517 	ldw	r21,20(sp)
    c790:	dd000417 	ldw	r20,16(sp)
    c794:	dcc00317 	ldw	r19,12(sp)
    c798:	dc800217 	ldw	r18,8(sp)
    c79c:	dc400117 	ldw	r17,4(sp)
    c7a0:	dc000017 	ldw	r16,0(sp)
    c7a4:	dec00904 	addi	sp,sp,36
    c7a8:	f800283a 	ret
    c7ac:	002f883a 	mov	r23,zero
    c7b0:	003ff206 	br	c77c <__alt_data_end+0xfffdba3c>

0000c7b4 <_setlocale_r>:
    c7b4:	30001b26 	beq	r6,zero,c824 <_setlocale_r+0x70>
    c7b8:	014000b4 	movhi	r5,2
    c7bc:	defffe04 	addi	sp,sp,-8
    c7c0:	29724204 	addi	r5,r5,-14072
    c7c4:	3009883a 	mov	r4,r6
    c7c8:	dc000015 	stw	r16,0(sp)
    c7cc:	dfc00115 	stw	ra,4(sp)
    c7d0:	3021883a 	mov	r16,r6
    c7d4:	000eeb40 	call	eeb4 <strcmp>
    c7d8:	1000061e 	bne	r2,zero,c7f4 <_setlocale_r+0x40>
    c7dc:	008000b4 	movhi	r2,2
    c7e0:	10b22304 	addi	r2,r2,-14196
    c7e4:	dfc00117 	ldw	ra,4(sp)
    c7e8:	dc000017 	ldw	r16,0(sp)
    c7ec:	dec00204 	addi	sp,sp,8
    c7f0:	f800283a 	ret
    c7f4:	014000b4 	movhi	r5,2
    c7f8:	29722304 	addi	r5,r5,-14196
    c7fc:	8009883a 	mov	r4,r16
    c800:	000eeb40 	call	eeb4 <strcmp>
    c804:	103ff526 	beq	r2,zero,c7dc <__alt_data_end+0xfffdba9c>
    c808:	014000b4 	movhi	r5,2
    c80c:	29722d04 	addi	r5,r5,-14156
    c810:	8009883a 	mov	r4,r16
    c814:	000eeb40 	call	eeb4 <strcmp>
    c818:	103ff026 	beq	r2,zero,c7dc <__alt_data_end+0xfffdba9c>
    c81c:	0005883a 	mov	r2,zero
    c820:	003ff006 	br	c7e4 <__alt_data_end+0xfffdbaa4>
    c824:	008000b4 	movhi	r2,2
    c828:	10b22304 	addi	r2,r2,-14196
    c82c:	f800283a 	ret

0000c830 <__locale_charset>:
    c830:	008000b4 	movhi	r2,2
    c834:	10b3fb04 	addi	r2,r2,-12308
    c838:	f800283a 	ret

0000c83c <__locale_mb_cur_max>:
    c83c:	008000b4 	movhi	r2,2
    c840:	10b99b04 	addi	r2,r2,-6548
    c844:	10800017 	ldw	r2,0(r2)
    c848:	f800283a 	ret

0000c84c <__locale_msgcharset>:
    c84c:	008000b4 	movhi	r2,2
    c850:	10b3f304 	addi	r2,r2,-12340
    c854:	f800283a 	ret

0000c858 <__locale_cjk_lang>:
    c858:	0005883a 	mov	r2,zero
    c85c:	f800283a 	ret

0000c860 <_localeconv_r>:
    c860:	008000b4 	movhi	r2,2
    c864:	10b40304 	addi	r2,r2,-12276
    c868:	f800283a 	ret

0000c86c <setlocale>:
    c86c:	008000b4 	movhi	r2,2
    c870:	10b99a04 	addi	r2,r2,-6552
    c874:	280d883a 	mov	r6,r5
    c878:	200b883a 	mov	r5,r4
    c87c:	11000017 	ldw	r4,0(r2)
    c880:	000c7b41 	jmpi	c7b4 <_setlocale_r>

0000c884 <localeconv>:
    c884:	008000b4 	movhi	r2,2
    c888:	10b40304 	addi	r2,r2,-12276
    c88c:	f800283a 	ret

0000c890 <__smakebuf_r>:
    c890:	2880030b 	ldhu	r2,12(r5)
    c894:	10c0008c 	andi	r3,r2,2
    c898:	1800411e 	bne	r3,zero,c9a0 <__smakebuf_r+0x110>
    c89c:	deffec04 	addi	sp,sp,-80
    c8a0:	dc000f15 	stw	r16,60(sp)
    c8a4:	2821883a 	mov	r16,r5
    c8a8:	2940038f 	ldh	r5,14(r5)
    c8ac:	dc401015 	stw	r17,64(sp)
    c8b0:	dfc01315 	stw	ra,76(sp)
    c8b4:	dcc01215 	stw	r19,72(sp)
    c8b8:	dc801115 	stw	r18,68(sp)
    c8bc:	2023883a 	mov	r17,r4
    c8c0:	28001c16 	blt	r5,zero,c934 <__smakebuf_r+0xa4>
    c8c4:	d80d883a 	mov	r6,sp
    c8c8:	0010b240 	call	10b24 <_fstat_r>
    c8cc:	10001816 	blt	r2,zero,c930 <__smakebuf_r+0xa0>
    c8d0:	d8800117 	ldw	r2,4(sp)
    c8d4:	00e00014 	movui	r3,32768
    c8d8:	10bc000c 	andi	r2,r2,61440
    c8dc:	14c80020 	cmpeqi	r19,r2,8192
    c8e0:	10c03726 	beq	r2,r3,c9c0 <__smakebuf_r+0x130>
    c8e4:	80c0030b 	ldhu	r3,12(r16)
    c8e8:	18c20014 	ori	r3,r3,2048
    c8ec:	80c0030d 	sth	r3,12(r16)
    c8f0:	00c80004 	movi	r3,8192
    c8f4:	10c0521e 	bne	r2,r3,ca40 <__smakebuf_r+0x1b0>
    c8f8:	8140038f 	ldh	r5,14(r16)
    c8fc:	8809883a 	mov	r4,r17
    c900:	0010b800 	call	10b80 <_isatty_r>
    c904:	10004c26 	beq	r2,zero,ca38 <__smakebuf_r+0x1a8>
    c908:	8080030b 	ldhu	r2,12(r16)
    c90c:	80c010c4 	addi	r3,r16,67
    c910:	80c00015 	stw	r3,0(r16)
    c914:	10800054 	ori	r2,r2,1
    c918:	8080030d 	sth	r2,12(r16)
    c91c:	00800044 	movi	r2,1
    c920:	80c00415 	stw	r3,16(r16)
    c924:	80800515 	stw	r2,20(r16)
    c928:	04810004 	movi	r18,1024
    c92c:	00000706 	br	c94c <__smakebuf_r+0xbc>
    c930:	8080030b 	ldhu	r2,12(r16)
    c934:	10c0200c 	andi	r3,r2,128
    c938:	18001f1e 	bne	r3,zero,c9b8 <__smakebuf_r+0x128>
    c93c:	04810004 	movi	r18,1024
    c940:	10820014 	ori	r2,r2,2048
    c944:	8080030d 	sth	r2,12(r16)
    c948:	0027883a 	mov	r19,zero
    c94c:	900b883a 	mov	r5,r18
    c950:	8809883a 	mov	r4,r17
    c954:	000ca4c0 	call	ca4c <_malloc_r>
    c958:	10002c26 	beq	r2,zero,ca0c <__smakebuf_r+0x17c>
    c95c:	80c0030b 	ldhu	r3,12(r16)
    c960:	01000074 	movhi	r4,1
    c964:	212e6204 	addi	r4,r4,-18040
    c968:	89000f15 	stw	r4,60(r17)
    c96c:	18c02014 	ori	r3,r3,128
    c970:	80c0030d 	sth	r3,12(r16)
    c974:	80800015 	stw	r2,0(r16)
    c978:	80800415 	stw	r2,16(r16)
    c97c:	84800515 	stw	r18,20(r16)
    c980:	98001a1e 	bne	r19,zero,c9ec <__smakebuf_r+0x15c>
    c984:	dfc01317 	ldw	ra,76(sp)
    c988:	dcc01217 	ldw	r19,72(sp)
    c98c:	dc801117 	ldw	r18,68(sp)
    c990:	dc401017 	ldw	r17,64(sp)
    c994:	dc000f17 	ldw	r16,60(sp)
    c998:	dec01404 	addi	sp,sp,80
    c99c:	f800283a 	ret
    c9a0:	288010c4 	addi	r2,r5,67
    c9a4:	28800015 	stw	r2,0(r5)
    c9a8:	28800415 	stw	r2,16(r5)
    c9ac:	00800044 	movi	r2,1
    c9b0:	28800515 	stw	r2,20(r5)
    c9b4:	f800283a 	ret
    c9b8:	04801004 	movi	r18,64
    c9bc:	003fe006 	br	c940 <__alt_data_end+0xfffdbc00>
    c9c0:	81000a17 	ldw	r4,40(r16)
    c9c4:	00c00074 	movhi	r3,1
    c9c8:	18fb9404 	addi	r3,r3,-4528
    c9cc:	20ffc51e 	bne	r4,r3,c8e4 <__alt_data_end+0xfffdbba4>
    c9d0:	8080030b 	ldhu	r2,12(r16)
    c9d4:	04810004 	movi	r18,1024
    c9d8:	84801315 	stw	r18,76(r16)
    c9dc:	1484b03a 	or	r2,r2,r18
    c9e0:	8080030d 	sth	r2,12(r16)
    c9e4:	0027883a 	mov	r19,zero
    c9e8:	003fd806 	br	c94c <__alt_data_end+0xfffdbc0c>
    c9ec:	8140038f 	ldh	r5,14(r16)
    c9f0:	8809883a 	mov	r4,r17
    c9f4:	0010b800 	call	10b80 <_isatty_r>
    c9f8:	103fe226 	beq	r2,zero,c984 <__alt_data_end+0xfffdbc44>
    c9fc:	8080030b 	ldhu	r2,12(r16)
    ca00:	10800054 	ori	r2,r2,1
    ca04:	8080030d 	sth	r2,12(r16)
    ca08:	003fde06 	br	c984 <__alt_data_end+0xfffdbc44>
    ca0c:	8080030b 	ldhu	r2,12(r16)
    ca10:	10c0800c 	andi	r3,r2,512
    ca14:	183fdb1e 	bne	r3,zero,c984 <__alt_data_end+0xfffdbc44>
    ca18:	10800094 	ori	r2,r2,2
    ca1c:	80c010c4 	addi	r3,r16,67
    ca20:	8080030d 	sth	r2,12(r16)
    ca24:	00800044 	movi	r2,1
    ca28:	80c00015 	stw	r3,0(r16)
    ca2c:	80c00415 	stw	r3,16(r16)
    ca30:	80800515 	stw	r2,20(r16)
    ca34:	003fd306 	br	c984 <__alt_data_end+0xfffdbc44>
    ca38:	04810004 	movi	r18,1024
    ca3c:	003fc306 	br	c94c <__alt_data_end+0xfffdbc0c>
    ca40:	0027883a 	mov	r19,zero
    ca44:	04810004 	movi	r18,1024
    ca48:	003fc006 	br	c94c <__alt_data_end+0xfffdbc0c>

0000ca4c <_malloc_r>:
    ca4c:	defff504 	addi	sp,sp,-44
    ca50:	dc800315 	stw	r18,12(sp)
    ca54:	dfc00a15 	stw	ra,40(sp)
    ca58:	df000915 	stw	fp,36(sp)
    ca5c:	ddc00815 	stw	r23,32(sp)
    ca60:	dd800715 	stw	r22,28(sp)
    ca64:	dd400615 	stw	r21,24(sp)
    ca68:	dd000515 	stw	r20,20(sp)
    ca6c:	dcc00415 	stw	r19,16(sp)
    ca70:	dc400215 	stw	r17,8(sp)
    ca74:	dc000115 	stw	r16,4(sp)
    ca78:	288002c4 	addi	r2,r5,11
    ca7c:	00c00584 	movi	r3,22
    ca80:	2025883a 	mov	r18,r4
    ca84:	18807f2e 	bgeu	r3,r2,cc84 <_malloc_r+0x238>
    ca88:	047ffe04 	movi	r17,-8
    ca8c:	1462703a 	and	r17,r2,r17
    ca90:	8800a316 	blt	r17,zero,cd20 <_malloc_r+0x2d4>
    ca94:	8940a236 	bltu	r17,r5,cd20 <_malloc_r+0x2d4>
    ca98:	00126ec0 	call	126ec <__malloc_lock>
    ca9c:	00807dc4 	movi	r2,503
    caa0:	1441e92e 	bgeu	r2,r17,d248 <_malloc_r+0x7fc>
    caa4:	8804d27a 	srli	r2,r17,9
    caa8:	1000a126 	beq	r2,zero,cd30 <_malloc_r+0x2e4>
    caac:	00c00104 	movi	r3,4
    cab0:	18811e36 	bltu	r3,r2,cf2c <_malloc_r+0x4e0>
    cab4:	8804d1ba 	srli	r2,r17,6
    cab8:	12000e44 	addi	r8,r2,57
    cabc:	11c00e04 	addi	r7,r2,56
    cac0:	4209883a 	add	r4,r8,r8
    cac4:	04c000b4 	movhi	r19,2
    cac8:	2109883a 	add	r4,r4,r4
    cacc:	9cf41104 	addi	r19,r19,-12220
    cad0:	2109883a 	add	r4,r4,r4
    cad4:	9909883a 	add	r4,r19,r4
    cad8:	24000117 	ldw	r16,4(r4)
    cadc:	213ffe04 	addi	r4,r4,-8
    cae0:	24009726 	beq	r4,r16,cd40 <_malloc_r+0x2f4>
    cae4:	80800117 	ldw	r2,4(r16)
    cae8:	01bfff04 	movi	r6,-4
    caec:	014003c4 	movi	r5,15
    caf0:	1184703a 	and	r2,r2,r6
    caf4:	1447c83a 	sub	r3,r2,r17
    caf8:	28c00716 	blt	r5,r3,cb18 <_malloc_r+0xcc>
    cafc:	1800920e 	bge	r3,zero,cd48 <_malloc_r+0x2fc>
    cb00:	84000317 	ldw	r16,12(r16)
    cb04:	24008e26 	beq	r4,r16,cd40 <_malloc_r+0x2f4>
    cb08:	80800117 	ldw	r2,4(r16)
    cb0c:	1184703a 	and	r2,r2,r6
    cb10:	1447c83a 	sub	r3,r2,r17
    cb14:	28fff90e 	bge	r5,r3,cafc <__alt_data_end+0xfffdbdbc>
    cb18:	3809883a 	mov	r4,r7
    cb1c:	018000b4 	movhi	r6,2
    cb20:	9c000417 	ldw	r16,16(r19)
    cb24:	31b41104 	addi	r6,r6,-12220
    cb28:	32000204 	addi	r8,r6,8
    cb2c:	82013426 	beq	r16,r8,d000 <_malloc_r+0x5b4>
    cb30:	80c00117 	ldw	r3,4(r16)
    cb34:	00bfff04 	movi	r2,-4
    cb38:	188e703a 	and	r7,r3,r2
    cb3c:	3c45c83a 	sub	r2,r7,r17
    cb40:	00c003c4 	movi	r3,15
    cb44:	18811f16 	blt	r3,r2,cfc4 <_malloc_r+0x578>
    cb48:	32000515 	stw	r8,20(r6)
    cb4c:	32000415 	stw	r8,16(r6)
    cb50:	10007f0e 	bge	r2,zero,cd50 <_malloc_r+0x304>
    cb54:	00807fc4 	movi	r2,511
    cb58:	11c0fd36 	bltu	r2,r7,cf50 <_malloc_r+0x504>
    cb5c:	3806d0fa 	srli	r3,r7,3
    cb60:	01c00044 	movi	r7,1
    cb64:	30800117 	ldw	r2,4(r6)
    cb68:	19400044 	addi	r5,r3,1
    cb6c:	294b883a 	add	r5,r5,r5
    cb70:	1807d0ba 	srai	r3,r3,2
    cb74:	294b883a 	add	r5,r5,r5
    cb78:	294b883a 	add	r5,r5,r5
    cb7c:	298b883a 	add	r5,r5,r6
    cb80:	38c6983a 	sll	r3,r7,r3
    cb84:	29c00017 	ldw	r7,0(r5)
    cb88:	2a7ffe04 	addi	r9,r5,-8
    cb8c:	1886b03a 	or	r3,r3,r2
    cb90:	82400315 	stw	r9,12(r16)
    cb94:	81c00215 	stw	r7,8(r16)
    cb98:	30c00115 	stw	r3,4(r6)
    cb9c:	2c000015 	stw	r16,0(r5)
    cba0:	3c000315 	stw	r16,12(r7)
    cba4:	2005d0ba 	srai	r2,r4,2
    cba8:	01400044 	movi	r5,1
    cbac:	288a983a 	sll	r5,r5,r2
    cbb0:	19406f36 	bltu	r3,r5,cd70 <_malloc_r+0x324>
    cbb4:	28c4703a 	and	r2,r5,r3
    cbb8:	10000a1e 	bne	r2,zero,cbe4 <_malloc_r+0x198>
    cbbc:	00bfff04 	movi	r2,-4
    cbc0:	294b883a 	add	r5,r5,r5
    cbc4:	2088703a 	and	r4,r4,r2
    cbc8:	28c4703a 	and	r2,r5,r3
    cbcc:	21000104 	addi	r4,r4,4
    cbd0:	1000041e 	bne	r2,zero,cbe4 <_malloc_r+0x198>
    cbd4:	294b883a 	add	r5,r5,r5
    cbd8:	28c4703a 	and	r2,r5,r3
    cbdc:	21000104 	addi	r4,r4,4
    cbe0:	103ffc26 	beq	r2,zero,cbd4 <__alt_data_end+0xfffdbe94>
    cbe4:	02bfff04 	movi	r10,-4
    cbe8:	024003c4 	movi	r9,15
    cbec:	21800044 	addi	r6,r4,1
    cbf0:	318d883a 	add	r6,r6,r6
    cbf4:	318d883a 	add	r6,r6,r6
    cbf8:	318d883a 	add	r6,r6,r6
    cbfc:	998d883a 	add	r6,r19,r6
    cc00:	333ffe04 	addi	r12,r6,-8
    cc04:	2017883a 	mov	r11,r4
    cc08:	31800104 	addi	r6,r6,4
    cc0c:	34000017 	ldw	r16,0(r6)
    cc10:	31fffd04 	addi	r7,r6,-12
    cc14:	81c0041e 	bne	r16,r7,cc28 <_malloc_r+0x1dc>
    cc18:	0000fb06 	br	d008 <_malloc_r+0x5bc>
    cc1c:	1801030e 	bge	r3,zero,d02c <_malloc_r+0x5e0>
    cc20:	84000317 	ldw	r16,12(r16)
    cc24:	81c0f826 	beq	r16,r7,d008 <_malloc_r+0x5bc>
    cc28:	80800117 	ldw	r2,4(r16)
    cc2c:	1284703a 	and	r2,r2,r10
    cc30:	1447c83a 	sub	r3,r2,r17
    cc34:	48fff90e 	bge	r9,r3,cc1c <__alt_data_end+0xfffdbedc>
    cc38:	80800317 	ldw	r2,12(r16)
    cc3c:	81000217 	ldw	r4,8(r16)
    cc40:	89400054 	ori	r5,r17,1
    cc44:	81400115 	stw	r5,4(r16)
    cc48:	20800315 	stw	r2,12(r4)
    cc4c:	11000215 	stw	r4,8(r2)
    cc50:	8463883a 	add	r17,r16,r17
    cc54:	9c400515 	stw	r17,20(r19)
    cc58:	9c400415 	stw	r17,16(r19)
    cc5c:	18800054 	ori	r2,r3,1
    cc60:	88800115 	stw	r2,4(r17)
    cc64:	8a000315 	stw	r8,12(r17)
    cc68:	8a000215 	stw	r8,8(r17)
    cc6c:	88e3883a 	add	r17,r17,r3
    cc70:	88c00015 	stw	r3,0(r17)
    cc74:	9009883a 	mov	r4,r18
    cc78:	001280c0 	call	1280c <__malloc_unlock>
    cc7c:	80800204 	addi	r2,r16,8
    cc80:	00001b06 	br	ccf0 <_malloc_r+0x2a4>
    cc84:	04400404 	movi	r17,16
    cc88:	89402536 	bltu	r17,r5,cd20 <_malloc_r+0x2d4>
    cc8c:	00126ec0 	call	126ec <__malloc_lock>
    cc90:	00800184 	movi	r2,6
    cc94:	01000084 	movi	r4,2
    cc98:	04c000b4 	movhi	r19,2
    cc9c:	1085883a 	add	r2,r2,r2
    cca0:	9cf41104 	addi	r19,r19,-12220
    cca4:	1085883a 	add	r2,r2,r2
    cca8:	9885883a 	add	r2,r19,r2
    ccac:	14000117 	ldw	r16,4(r2)
    ccb0:	10fffe04 	addi	r3,r2,-8
    ccb4:	80c0d926 	beq	r16,r3,d01c <_malloc_r+0x5d0>
    ccb8:	80c00117 	ldw	r3,4(r16)
    ccbc:	81000317 	ldw	r4,12(r16)
    ccc0:	00bfff04 	movi	r2,-4
    ccc4:	1884703a 	and	r2,r3,r2
    ccc8:	81400217 	ldw	r5,8(r16)
    cccc:	8085883a 	add	r2,r16,r2
    ccd0:	10c00117 	ldw	r3,4(r2)
    ccd4:	29000315 	stw	r4,12(r5)
    ccd8:	21400215 	stw	r5,8(r4)
    ccdc:	18c00054 	ori	r3,r3,1
    cce0:	10c00115 	stw	r3,4(r2)
    cce4:	9009883a 	mov	r4,r18
    cce8:	001280c0 	call	1280c <__malloc_unlock>
    ccec:	80800204 	addi	r2,r16,8
    ccf0:	dfc00a17 	ldw	ra,40(sp)
    ccf4:	df000917 	ldw	fp,36(sp)
    ccf8:	ddc00817 	ldw	r23,32(sp)
    ccfc:	dd800717 	ldw	r22,28(sp)
    cd00:	dd400617 	ldw	r21,24(sp)
    cd04:	dd000517 	ldw	r20,20(sp)
    cd08:	dcc00417 	ldw	r19,16(sp)
    cd0c:	dc800317 	ldw	r18,12(sp)
    cd10:	dc400217 	ldw	r17,8(sp)
    cd14:	dc000117 	ldw	r16,4(sp)
    cd18:	dec00b04 	addi	sp,sp,44
    cd1c:	f800283a 	ret
    cd20:	00800304 	movi	r2,12
    cd24:	90800015 	stw	r2,0(r18)
    cd28:	0005883a 	mov	r2,zero
    cd2c:	003ff006 	br	ccf0 <__alt_data_end+0xfffdbfb0>
    cd30:	01002004 	movi	r4,128
    cd34:	02001004 	movi	r8,64
    cd38:	01c00fc4 	movi	r7,63
    cd3c:	003f6106 	br	cac4 <__alt_data_end+0xfffdbd84>
    cd40:	4009883a 	mov	r4,r8
    cd44:	003f7506 	br	cb1c <__alt_data_end+0xfffdbddc>
    cd48:	81000317 	ldw	r4,12(r16)
    cd4c:	003fde06 	br	ccc8 <__alt_data_end+0xfffdbf88>
    cd50:	81c5883a 	add	r2,r16,r7
    cd54:	11400117 	ldw	r5,4(r2)
    cd58:	9009883a 	mov	r4,r18
    cd5c:	29400054 	ori	r5,r5,1
    cd60:	11400115 	stw	r5,4(r2)
    cd64:	001280c0 	call	1280c <__malloc_unlock>
    cd68:	80800204 	addi	r2,r16,8
    cd6c:	003fe006 	br	ccf0 <__alt_data_end+0xfffdbfb0>
    cd70:	9c000217 	ldw	r16,8(r19)
    cd74:	00bfff04 	movi	r2,-4
    cd78:	85800117 	ldw	r22,4(r16)
    cd7c:	b0ac703a 	and	r22,r22,r2
    cd80:	b4400336 	bltu	r22,r17,cd90 <_malloc_r+0x344>
    cd84:	b445c83a 	sub	r2,r22,r17
    cd88:	00c003c4 	movi	r3,15
    cd8c:	18805d16 	blt	r3,r2,cf04 <_malloc_r+0x4b8>
    cd90:	05c000b4 	movhi	r23,2
    cd94:	008000b4 	movhi	r2,2
    cd98:	1080ab04 	addi	r2,r2,684
    cd9c:	bdf99c04 	addi	r23,r23,-6544
    cda0:	15400017 	ldw	r21,0(r2)
    cda4:	b8c00017 	ldw	r3,0(r23)
    cda8:	00bfffc4 	movi	r2,-1
    cdac:	858d883a 	add	r6,r16,r22
    cdb0:	8d6b883a 	add	r21,r17,r21
    cdb4:	1880ea26 	beq	r3,r2,d160 <_malloc_r+0x714>
    cdb8:	ad4403c4 	addi	r21,r21,4111
    cdbc:	00bc0004 	movi	r2,-4096
    cdc0:	a8aa703a 	and	r21,r21,r2
    cdc4:	a80b883a 	mov	r5,r21
    cdc8:	9009883a 	mov	r4,r18
    cdcc:	d9800015 	stw	r6,0(sp)
    cdd0:	000ed240 	call	ed24 <_sbrk_r>
    cdd4:	1029883a 	mov	r20,r2
    cdd8:	00bfffc4 	movi	r2,-1
    cddc:	d9800017 	ldw	r6,0(sp)
    cde0:	a080e826 	beq	r20,r2,d184 <_malloc_r+0x738>
    cde4:	a180a636 	bltu	r20,r6,d080 <_malloc_r+0x634>
    cde8:	070000b4 	movhi	fp,2
    cdec:	e700cd04 	addi	fp,fp,820
    cdf0:	e0800017 	ldw	r2,0(fp)
    cdf4:	a887883a 	add	r3,r21,r2
    cdf8:	e0c00015 	stw	r3,0(fp)
    cdfc:	3500e626 	beq	r6,r20,d198 <_malloc_r+0x74c>
    ce00:	b9000017 	ldw	r4,0(r23)
    ce04:	00bfffc4 	movi	r2,-1
    ce08:	2080ee26 	beq	r4,r2,d1c4 <_malloc_r+0x778>
    ce0c:	a185c83a 	sub	r2,r20,r6
    ce10:	10c5883a 	add	r2,r2,r3
    ce14:	e0800015 	stw	r2,0(fp)
    ce18:	a0c001cc 	andi	r3,r20,7
    ce1c:	1800bc26 	beq	r3,zero,d110 <_malloc_r+0x6c4>
    ce20:	a0e9c83a 	sub	r20,r20,r3
    ce24:	00840204 	movi	r2,4104
    ce28:	a5000204 	addi	r20,r20,8
    ce2c:	10c7c83a 	sub	r3,r2,r3
    ce30:	a545883a 	add	r2,r20,r21
    ce34:	1083ffcc 	andi	r2,r2,4095
    ce38:	18abc83a 	sub	r21,r3,r2
    ce3c:	a80b883a 	mov	r5,r21
    ce40:	9009883a 	mov	r4,r18
    ce44:	000ed240 	call	ed24 <_sbrk_r>
    ce48:	00ffffc4 	movi	r3,-1
    ce4c:	10c0e126 	beq	r2,r3,d1d4 <_malloc_r+0x788>
    ce50:	1505c83a 	sub	r2,r2,r20
    ce54:	1545883a 	add	r2,r2,r21
    ce58:	10800054 	ori	r2,r2,1
    ce5c:	e0c00017 	ldw	r3,0(fp)
    ce60:	9d000215 	stw	r20,8(r19)
    ce64:	a0800115 	stw	r2,4(r20)
    ce68:	a8c7883a 	add	r3,r21,r3
    ce6c:	e0c00015 	stw	r3,0(fp)
    ce70:	84c00e26 	beq	r16,r19,ceac <_malloc_r+0x460>
    ce74:	018003c4 	movi	r6,15
    ce78:	3580a72e 	bgeu	r6,r22,d118 <_malloc_r+0x6cc>
    ce7c:	81400117 	ldw	r5,4(r16)
    ce80:	013ffe04 	movi	r4,-8
    ce84:	b0bffd04 	addi	r2,r22,-12
    ce88:	1104703a 	and	r2,r2,r4
    ce8c:	2900004c 	andi	r4,r5,1
    ce90:	2088b03a 	or	r4,r4,r2
    ce94:	81000115 	stw	r4,4(r16)
    ce98:	01400144 	movi	r5,5
    ce9c:	8089883a 	add	r4,r16,r2
    cea0:	21400115 	stw	r5,4(r4)
    cea4:	21400215 	stw	r5,8(r4)
    cea8:	3080cd36 	bltu	r6,r2,d1e0 <_malloc_r+0x794>
    ceac:	008000b4 	movhi	r2,2
    ceb0:	1080aa04 	addi	r2,r2,680
    ceb4:	11000017 	ldw	r4,0(r2)
    ceb8:	20c0012e 	bgeu	r4,r3,cec0 <_malloc_r+0x474>
    cebc:	10c00015 	stw	r3,0(r2)
    cec0:	008000b4 	movhi	r2,2
    cec4:	1080a904 	addi	r2,r2,676
    cec8:	11000017 	ldw	r4,0(r2)
    cecc:	9c000217 	ldw	r16,8(r19)
    ced0:	20c0012e 	bgeu	r4,r3,ced8 <_malloc_r+0x48c>
    ced4:	10c00015 	stw	r3,0(r2)
    ced8:	80c00117 	ldw	r3,4(r16)
    cedc:	00bfff04 	movi	r2,-4
    cee0:	1886703a 	and	r3,r3,r2
    cee4:	1c45c83a 	sub	r2,r3,r17
    cee8:	1c400236 	bltu	r3,r17,cef4 <_malloc_r+0x4a8>
    ceec:	00c003c4 	movi	r3,15
    cef0:	18800416 	blt	r3,r2,cf04 <_malloc_r+0x4b8>
    cef4:	9009883a 	mov	r4,r18
    cef8:	001280c0 	call	1280c <__malloc_unlock>
    cefc:	0005883a 	mov	r2,zero
    cf00:	003f7b06 	br	ccf0 <__alt_data_end+0xfffdbfb0>
    cf04:	88c00054 	ori	r3,r17,1
    cf08:	80c00115 	stw	r3,4(r16)
    cf0c:	8463883a 	add	r17,r16,r17
    cf10:	10800054 	ori	r2,r2,1
    cf14:	9c400215 	stw	r17,8(r19)
    cf18:	88800115 	stw	r2,4(r17)
    cf1c:	9009883a 	mov	r4,r18
    cf20:	001280c0 	call	1280c <__malloc_unlock>
    cf24:	80800204 	addi	r2,r16,8
    cf28:	003f7106 	br	ccf0 <__alt_data_end+0xfffdbfb0>
    cf2c:	00c00504 	movi	r3,20
    cf30:	18804a2e 	bgeu	r3,r2,d05c <_malloc_r+0x610>
    cf34:	00c01504 	movi	r3,84
    cf38:	18806e36 	bltu	r3,r2,d0f4 <_malloc_r+0x6a8>
    cf3c:	8804d33a 	srli	r2,r17,12
    cf40:	12001bc4 	addi	r8,r2,111
    cf44:	11c01b84 	addi	r7,r2,110
    cf48:	4209883a 	add	r4,r8,r8
    cf4c:	003edd06 	br	cac4 <__alt_data_end+0xfffdbd84>
    cf50:	3804d27a 	srli	r2,r7,9
    cf54:	00c00104 	movi	r3,4
    cf58:	1880442e 	bgeu	r3,r2,d06c <_malloc_r+0x620>
    cf5c:	00c00504 	movi	r3,20
    cf60:	18808136 	bltu	r3,r2,d168 <_malloc_r+0x71c>
    cf64:	11401704 	addi	r5,r2,92
    cf68:	10c016c4 	addi	r3,r2,91
    cf6c:	294b883a 	add	r5,r5,r5
    cf70:	294b883a 	add	r5,r5,r5
    cf74:	294b883a 	add	r5,r5,r5
    cf78:	994b883a 	add	r5,r19,r5
    cf7c:	28800017 	ldw	r2,0(r5)
    cf80:	018000b4 	movhi	r6,2
    cf84:	297ffe04 	addi	r5,r5,-8
    cf88:	31b41104 	addi	r6,r6,-12220
    cf8c:	28806526 	beq	r5,r2,d124 <_malloc_r+0x6d8>
    cf90:	01bfff04 	movi	r6,-4
    cf94:	10c00117 	ldw	r3,4(r2)
    cf98:	1986703a 	and	r3,r3,r6
    cf9c:	38c0022e 	bgeu	r7,r3,cfa8 <_malloc_r+0x55c>
    cfa0:	10800217 	ldw	r2,8(r2)
    cfa4:	28bffb1e 	bne	r5,r2,cf94 <__alt_data_end+0xfffdc254>
    cfa8:	11400317 	ldw	r5,12(r2)
    cfac:	98c00117 	ldw	r3,4(r19)
    cfb0:	81400315 	stw	r5,12(r16)
    cfb4:	80800215 	stw	r2,8(r16)
    cfb8:	2c000215 	stw	r16,8(r5)
    cfbc:	14000315 	stw	r16,12(r2)
    cfc0:	003ef806 	br	cba4 <__alt_data_end+0xfffdbe64>
    cfc4:	88c00054 	ori	r3,r17,1
    cfc8:	80c00115 	stw	r3,4(r16)
    cfcc:	8463883a 	add	r17,r16,r17
    cfd0:	34400515 	stw	r17,20(r6)
    cfd4:	34400415 	stw	r17,16(r6)
    cfd8:	10c00054 	ori	r3,r2,1
    cfdc:	8a000315 	stw	r8,12(r17)
    cfe0:	8a000215 	stw	r8,8(r17)
    cfe4:	88c00115 	stw	r3,4(r17)
    cfe8:	88a3883a 	add	r17,r17,r2
    cfec:	88800015 	stw	r2,0(r17)
    cff0:	9009883a 	mov	r4,r18
    cff4:	001280c0 	call	1280c <__malloc_unlock>
    cff8:	80800204 	addi	r2,r16,8
    cffc:	003f3c06 	br	ccf0 <__alt_data_end+0xfffdbfb0>
    d000:	30c00117 	ldw	r3,4(r6)
    d004:	003ee706 	br	cba4 <__alt_data_end+0xfffdbe64>
    d008:	5ac00044 	addi	r11,r11,1
    d00c:	588000cc 	andi	r2,r11,3
    d010:	31800204 	addi	r6,r6,8
    d014:	103efd1e 	bne	r2,zero,cc0c <__alt_data_end+0xfffdbecc>
    d018:	00002406 	br	d0ac <_malloc_r+0x660>
    d01c:	14000317 	ldw	r16,12(r2)
    d020:	143f251e 	bne	r2,r16,ccb8 <__alt_data_end+0xfffdbf78>
    d024:	21000084 	addi	r4,r4,2
    d028:	003ebc06 	br	cb1c <__alt_data_end+0xfffdbddc>
    d02c:	8085883a 	add	r2,r16,r2
    d030:	10c00117 	ldw	r3,4(r2)
    d034:	81000317 	ldw	r4,12(r16)
    d038:	81400217 	ldw	r5,8(r16)
    d03c:	18c00054 	ori	r3,r3,1
    d040:	10c00115 	stw	r3,4(r2)
    d044:	29000315 	stw	r4,12(r5)
    d048:	21400215 	stw	r5,8(r4)
    d04c:	9009883a 	mov	r4,r18
    d050:	001280c0 	call	1280c <__malloc_unlock>
    d054:	80800204 	addi	r2,r16,8
    d058:	003f2506 	br	ccf0 <__alt_data_end+0xfffdbfb0>
    d05c:	12001704 	addi	r8,r2,92
    d060:	11c016c4 	addi	r7,r2,91
    d064:	4209883a 	add	r4,r8,r8
    d068:	003e9606 	br	cac4 <__alt_data_end+0xfffdbd84>
    d06c:	3804d1ba 	srli	r2,r7,6
    d070:	11400e44 	addi	r5,r2,57
    d074:	10c00e04 	addi	r3,r2,56
    d078:	294b883a 	add	r5,r5,r5
    d07c:	003fbc06 	br	cf70 <__alt_data_end+0xfffdc230>
    d080:	84ff5926 	beq	r16,r19,cde8 <__alt_data_end+0xfffdc0a8>
    d084:	008000b4 	movhi	r2,2
    d088:	10b41104 	addi	r2,r2,-12220
    d08c:	14000217 	ldw	r16,8(r2)
    d090:	00bfff04 	movi	r2,-4
    d094:	80c00117 	ldw	r3,4(r16)
    d098:	1886703a 	and	r3,r3,r2
    d09c:	003f9106 	br	cee4 <__alt_data_end+0xfffdc1a4>
    d0a0:	60800217 	ldw	r2,8(r12)
    d0a4:	213fffc4 	addi	r4,r4,-1
    d0a8:	1300651e 	bne	r2,r12,d240 <_malloc_r+0x7f4>
    d0ac:	208000cc 	andi	r2,r4,3
    d0b0:	633ffe04 	addi	r12,r12,-8
    d0b4:	103ffa1e 	bne	r2,zero,d0a0 <__alt_data_end+0xfffdc360>
    d0b8:	98800117 	ldw	r2,4(r19)
    d0bc:	0146303a 	nor	r3,zero,r5
    d0c0:	1884703a 	and	r2,r3,r2
    d0c4:	98800115 	stw	r2,4(r19)
    d0c8:	294b883a 	add	r5,r5,r5
    d0cc:	117f2836 	bltu	r2,r5,cd70 <__alt_data_end+0xfffdc030>
    d0d0:	283f2726 	beq	r5,zero,cd70 <__alt_data_end+0xfffdc030>
    d0d4:	2886703a 	and	r3,r5,r2
    d0d8:	5809883a 	mov	r4,r11
    d0dc:	183ec31e 	bne	r3,zero,cbec <__alt_data_end+0xfffdbeac>
    d0e0:	294b883a 	add	r5,r5,r5
    d0e4:	2886703a 	and	r3,r5,r2
    d0e8:	21000104 	addi	r4,r4,4
    d0ec:	183ffc26 	beq	r3,zero,d0e0 <__alt_data_end+0xfffdc3a0>
    d0f0:	003ebe06 	br	cbec <__alt_data_end+0xfffdbeac>
    d0f4:	00c05504 	movi	r3,340
    d0f8:	18801236 	bltu	r3,r2,d144 <_malloc_r+0x6f8>
    d0fc:	8804d3fa 	srli	r2,r17,15
    d100:	12001e04 	addi	r8,r2,120
    d104:	11c01dc4 	addi	r7,r2,119
    d108:	4209883a 	add	r4,r8,r8
    d10c:	003e6d06 	br	cac4 <__alt_data_end+0xfffdbd84>
    d110:	00c40004 	movi	r3,4096
    d114:	003f4606 	br	ce30 <__alt_data_end+0xfffdc0f0>
    d118:	00800044 	movi	r2,1
    d11c:	a0800115 	stw	r2,4(r20)
    d120:	003f7406 	br	cef4 <__alt_data_end+0xfffdc1b4>
    d124:	1805d0ba 	srai	r2,r3,2
    d128:	01c00044 	movi	r7,1
    d12c:	30c00117 	ldw	r3,4(r6)
    d130:	388e983a 	sll	r7,r7,r2
    d134:	2805883a 	mov	r2,r5
    d138:	38c6b03a 	or	r3,r7,r3
    d13c:	30c00115 	stw	r3,4(r6)
    d140:	003f9b06 	br	cfb0 <__alt_data_end+0xfffdc270>
    d144:	00c15504 	movi	r3,1364
    d148:	18801a36 	bltu	r3,r2,d1b4 <_malloc_r+0x768>
    d14c:	8804d4ba 	srli	r2,r17,18
    d150:	12001f44 	addi	r8,r2,125
    d154:	11c01f04 	addi	r7,r2,124
    d158:	4209883a 	add	r4,r8,r8
    d15c:	003e5906 	br	cac4 <__alt_data_end+0xfffdbd84>
    d160:	ad400404 	addi	r21,r21,16
    d164:	003f1706 	br	cdc4 <__alt_data_end+0xfffdc084>
    d168:	00c01504 	movi	r3,84
    d16c:	18802336 	bltu	r3,r2,d1fc <_malloc_r+0x7b0>
    d170:	3804d33a 	srli	r2,r7,12
    d174:	11401bc4 	addi	r5,r2,111
    d178:	10c01b84 	addi	r3,r2,110
    d17c:	294b883a 	add	r5,r5,r5
    d180:	003f7b06 	br	cf70 <__alt_data_end+0xfffdc230>
    d184:	9c000217 	ldw	r16,8(r19)
    d188:	00bfff04 	movi	r2,-4
    d18c:	80c00117 	ldw	r3,4(r16)
    d190:	1886703a 	and	r3,r3,r2
    d194:	003f5306 	br	cee4 <__alt_data_end+0xfffdc1a4>
    d198:	3083ffcc 	andi	r2,r6,4095
    d19c:	103f181e 	bne	r2,zero,ce00 <__alt_data_end+0xfffdc0c0>
    d1a0:	99000217 	ldw	r4,8(r19)
    d1a4:	b545883a 	add	r2,r22,r21
    d1a8:	10800054 	ori	r2,r2,1
    d1ac:	20800115 	stw	r2,4(r4)
    d1b0:	003f3e06 	br	ceac <__alt_data_end+0xfffdc16c>
    d1b4:	01003f84 	movi	r4,254
    d1b8:	02001fc4 	movi	r8,127
    d1bc:	01c01f84 	movi	r7,126
    d1c0:	003e4006 	br	cac4 <__alt_data_end+0xfffdbd84>
    d1c4:	008000b4 	movhi	r2,2
    d1c8:	10b99c04 	addi	r2,r2,-6544
    d1cc:	15000015 	stw	r20,0(r2)
    d1d0:	003f1106 	br	ce18 <__alt_data_end+0xfffdc0d8>
    d1d4:	00800044 	movi	r2,1
    d1d8:	002b883a 	mov	r21,zero
    d1dc:	003f1f06 	br	ce5c <__alt_data_end+0xfffdc11c>
    d1e0:	81400204 	addi	r5,r16,8
    d1e4:	9009883a 	mov	r4,r18
    d1e8:	000be540 	call	be54 <_free_r>
    d1ec:	008000b4 	movhi	r2,2
    d1f0:	1080cd04 	addi	r2,r2,820
    d1f4:	10c00017 	ldw	r3,0(r2)
    d1f8:	003f2c06 	br	ceac <__alt_data_end+0xfffdc16c>
    d1fc:	00c05504 	movi	r3,340
    d200:	18800536 	bltu	r3,r2,d218 <_malloc_r+0x7cc>
    d204:	3804d3fa 	srli	r2,r7,15
    d208:	11401e04 	addi	r5,r2,120
    d20c:	10c01dc4 	addi	r3,r2,119
    d210:	294b883a 	add	r5,r5,r5
    d214:	003f5606 	br	cf70 <__alt_data_end+0xfffdc230>
    d218:	00c15504 	movi	r3,1364
    d21c:	18800536 	bltu	r3,r2,d234 <_malloc_r+0x7e8>
    d220:	3804d4ba 	srli	r2,r7,18
    d224:	11401f44 	addi	r5,r2,125
    d228:	10c01f04 	addi	r3,r2,124
    d22c:	294b883a 	add	r5,r5,r5
    d230:	003f4f06 	br	cf70 <__alt_data_end+0xfffdc230>
    d234:	01403f84 	movi	r5,254
    d238:	00c01f84 	movi	r3,126
    d23c:	003f4c06 	br	cf70 <__alt_data_end+0xfffdc230>
    d240:	98800117 	ldw	r2,4(r19)
    d244:	003fa006 	br	d0c8 <__alt_data_end+0xfffdc388>
    d248:	8808d0fa 	srli	r4,r17,3
    d24c:	20800044 	addi	r2,r4,1
    d250:	1085883a 	add	r2,r2,r2
    d254:	003e9006 	br	cc98 <__alt_data_end+0xfffdbf58>

0000d258 <memchr>:
    d258:	208000cc 	andi	r2,r4,3
    d25c:	280f883a 	mov	r7,r5
    d260:	10003426 	beq	r2,zero,d334 <memchr+0xdc>
    d264:	30bfffc4 	addi	r2,r6,-1
    d268:	30001a26 	beq	r6,zero,d2d4 <memchr+0x7c>
    d26c:	20c00003 	ldbu	r3,0(r4)
    d270:	29803fcc 	andi	r6,r5,255
    d274:	30c0051e 	bne	r6,r3,d28c <memchr+0x34>
    d278:	00001806 	br	d2dc <memchr+0x84>
    d27c:	10001526 	beq	r2,zero,d2d4 <memchr+0x7c>
    d280:	20c00003 	ldbu	r3,0(r4)
    d284:	10bfffc4 	addi	r2,r2,-1
    d288:	30c01426 	beq	r6,r3,d2dc <memchr+0x84>
    d28c:	21000044 	addi	r4,r4,1
    d290:	20c000cc 	andi	r3,r4,3
    d294:	183ff91e 	bne	r3,zero,d27c <__alt_data_end+0xfffdc53c>
    d298:	020000c4 	movi	r8,3
    d29c:	40801136 	bltu	r8,r2,d2e4 <memchr+0x8c>
    d2a0:	10000c26 	beq	r2,zero,d2d4 <memchr+0x7c>
    d2a4:	20c00003 	ldbu	r3,0(r4)
    d2a8:	29403fcc 	andi	r5,r5,255
    d2ac:	28c00b26 	beq	r5,r3,d2dc <memchr+0x84>
    d2b0:	20c00044 	addi	r3,r4,1
    d2b4:	39803fcc 	andi	r6,r7,255
    d2b8:	2089883a 	add	r4,r4,r2
    d2bc:	00000306 	br	d2cc <memchr+0x74>
    d2c0:	18c00044 	addi	r3,r3,1
    d2c4:	197fffc3 	ldbu	r5,-1(r3)
    d2c8:	31400526 	beq	r6,r5,d2e0 <memchr+0x88>
    d2cc:	1805883a 	mov	r2,r3
    d2d0:	20fffb1e 	bne	r4,r3,d2c0 <__alt_data_end+0xfffdc580>
    d2d4:	0005883a 	mov	r2,zero
    d2d8:	f800283a 	ret
    d2dc:	2005883a 	mov	r2,r4
    d2e0:	f800283a 	ret
    d2e4:	28c03fcc 	andi	r3,r5,255
    d2e8:	1812923a 	slli	r9,r3,8
    d2ec:	02ffbff4 	movhi	r11,65279
    d2f0:	02a02074 	movhi	r10,32897
    d2f4:	48d2b03a 	or	r9,r9,r3
    d2f8:	4806943a 	slli	r3,r9,16
    d2fc:	5affbfc4 	addi	r11,r11,-257
    d300:	52a02004 	addi	r10,r10,-32640
    d304:	48d2b03a 	or	r9,r9,r3
    d308:	20c00017 	ldw	r3,0(r4)
    d30c:	48c6f03a 	xor	r3,r9,r3
    d310:	1acd883a 	add	r6,r3,r11
    d314:	00c6303a 	nor	r3,zero,r3
    d318:	30c6703a 	and	r3,r6,r3
    d31c:	1a86703a 	and	r3,r3,r10
    d320:	183fe01e 	bne	r3,zero,d2a4 <__alt_data_end+0xfffdc564>
    d324:	10bfff04 	addi	r2,r2,-4
    d328:	21000104 	addi	r4,r4,4
    d32c:	40bff636 	bltu	r8,r2,d308 <__alt_data_end+0xfffdc5c8>
    d330:	003fdb06 	br	d2a0 <__alt_data_end+0xfffdc560>
    d334:	3005883a 	mov	r2,r6
    d338:	003fd706 	br	d298 <__alt_data_end+0xfffdc558>

0000d33c <memcpy>:
    d33c:	defffd04 	addi	sp,sp,-12
    d340:	dfc00215 	stw	ra,8(sp)
    d344:	dc400115 	stw	r17,4(sp)
    d348:	dc000015 	stw	r16,0(sp)
    d34c:	00c003c4 	movi	r3,15
    d350:	2005883a 	mov	r2,r4
    d354:	1980452e 	bgeu	r3,r6,d46c <memcpy+0x130>
    d358:	2906b03a 	or	r3,r5,r4
    d35c:	18c000cc 	andi	r3,r3,3
    d360:	1800441e 	bne	r3,zero,d474 <memcpy+0x138>
    d364:	347ffc04 	addi	r17,r6,-16
    d368:	8822d13a 	srli	r17,r17,4
    d36c:	28c00104 	addi	r3,r5,4
    d370:	23400104 	addi	r13,r4,4
    d374:	8820913a 	slli	r16,r17,4
    d378:	2b000204 	addi	r12,r5,8
    d37c:	22c00204 	addi	r11,r4,8
    d380:	84000504 	addi	r16,r16,20
    d384:	2a800304 	addi	r10,r5,12
    d388:	22400304 	addi	r9,r4,12
    d38c:	2c21883a 	add	r16,r5,r16
    d390:	2811883a 	mov	r8,r5
    d394:	200f883a 	mov	r7,r4
    d398:	41000017 	ldw	r4,0(r8)
    d39c:	1fc00017 	ldw	ra,0(r3)
    d3a0:	63c00017 	ldw	r15,0(r12)
    d3a4:	39000015 	stw	r4,0(r7)
    d3a8:	53800017 	ldw	r14,0(r10)
    d3ac:	6fc00015 	stw	ra,0(r13)
    d3b0:	5bc00015 	stw	r15,0(r11)
    d3b4:	4b800015 	stw	r14,0(r9)
    d3b8:	18c00404 	addi	r3,r3,16
    d3bc:	39c00404 	addi	r7,r7,16
    d3c0:	42000404 	addi	r8,r8,16
    d3c4:	6b400404 	addi	r13,r13,16
    d3c8:	63000404 	addi	r12,r12,16
    d3cc:	5ac00404 	addi	r11,r11,16
    d3d0:	52800404 	addi	r10,r10,16
    d3d4:	4a400404 	addi	r9,r9,16
    d3d8:	1c3fef1e 	bne	r3,r16,d398 <__alt_data_end+0xfffdc658>
    d3dc:	89c00044 	addi	r7,r17,1
    d3e0:	380e913a 	slli	r7,r7,4
    d3e4:	310003cc 	andi	r4,r6,15
    d3e8:	02c000c4 	movi	r11,3
    d3ec:	11c7883a 	add	r3,r2,r7
    d3f0:	29cb883a 	add	r5,r5,r7
    d3f4:	5900212e 	bgeu	r11,r4,d47c <memcpy+0x140>
    d3f8:	1813883a 	mov	r9,r3
    d3fc:	2811883a 	mov	r8,r5
    d400:	200f883a 	mov	r7,r4
    d404:	42800017 	ldw	r10,0(r8)
    d408:	4a400104 	addi	r9,r9,4
    d40c:	39ffff04 	addi	r7,r7,-4
    d410:	4abfff15 	stw	r10,-4(r9)
    d414:	42000104 	addi	r8,r8,4
    d418:	59fffa36 	bltu	r11,r7,d404 <__alt_data_end+0xfffdc6c4>
    d41c:	213fff04 	addi	r4,r4,-4
    d420:	2008d0ba 	srli	r4,r4,2
    d424:	318000cc 	andi	r6,r6,3
    d428:	21000044 	addi	r4,r4,1
    d42c:	2109883a 	add	r4,r4,r4
    d430:	2109883a 	add	r4,r4,r4
    d434:	1907883a 	add	r3,r3,r4
    d438:	290b883a 	add	r5,r5,r4
    d43c:	30000626 	beq	r6,zero,d458 <memcpy+0x11c>
    d440:	198d883a 	add	r6,r3,r6
    d444:	29c00003 	ldbu	r7,0(r5)
    d448:	18c00044 	addi	r3,r3,1
    d44c:	29400044 	addi	r5,r5,1
    d450:	19ffffc5 	stb	r7,-1(r3)
    d454:	19bffb1e 	bne	r3,r6,d444 <__alt_data_end+0xfffdc704>
    d458:	dfc00217 	ldw	ra,8(sp)
    d45c:	dc400117 	ldw	r17,4(sp)
    d460:	dc000017 	ldw	r16,0(sp)
    d464:	dec00304 	addi	sp,sp,12
    d468:	f800283a 	ret
    d46c:	2007883a 	mov	r3,r4
    d470:	003ff206 	br	d43c <__alt_data_end+0xfffdc6fc>
    d474:	2007883a 	mov	r3,r4
    d478:	003ff106 	br	d440 <__alt_data_end+0xfffdc700>
    d47c:	200d883a 	mov	r6,r4
    d480:	003fee06 	br	d43c <__alt_data_end+0xfffdc6fc>

0000d484 <memmove>:
    d484:	2005883a 	mov	r2,r4
    d488:	29000b2e 	bgeu	r5,r4,d4b8 <memmove+0x34>
    d48c:	298f883a 	add	r7,r5,r6
    d490:	21c0092e 	bgeu	r4,r7,d4b8 <memmove+0x34>
    d494:	2187883a 	add	r3,r4,r6
    d498:	198bc83a 	sub	r5,r3,r6
    d49c:	30004826 	beq	r6,zero,d5c0 <memmove+0x13c>
    d4a0:	39ffffc4 	addi	r7,r7,-1
    d4a4:	39000003 	ldbu	r4,0(r7)
    d4a8:	18ffffc4 	addi	r3,r3,-1
    d4ac:	19000005 	stb	r4,0(r3)
    d4b0:	28fffb1e 	bne	r5,r3,d4a0 <__alt_data_end+0xfffdc760>
    d4b4:	f800283a 	ret
    d4b8:	00c003c4 	movi	r3,15
    d4bc:	1980412e 	bgeu	r3,r6,d5c4 <memmove+0x140>
    d4c0:	2886b03a 	or	r3,r5,r2
    d4c4:	18c000cc 	andi	r3,r3,3
    d4c8:	1800401e 	bne	r3,zero,d5cc <memmove+0x148>
    d4cc:	33fffc04 	addi	r15,r6,-16
    d4d0:	781ed13a 	srli	r15,r15,4
    d4d4:	28c00104 	addi	r3,r5,4
    d4d8:	13400104 	addi	r13,r2,4
    d4dc:	781c913a 	slli	r14,r15,4
    d4e0:	2b000204 	addi	r12,r5,8
    d4e4:	12c00204 	addi	r11,r2,8
    d4e8:	73800504 	addi	r14,r14,20
    d4ec:	2a800304 	addi	r10,r5,12
    d4f0:	12400304 	addi	r9,r2,12
    d4f4:	2b9d883a 	add	r14,r5,r14
    d4f8:	2811883a 	mov	r8,r5
    d4fc:	100f883a 	mov	r7,r2
    d500:	41000017 	ldw	r4,0(r8)
    d504:	39c00404 	addi	r7,r7,16
    d508:	18c00404 	addi	r3,r3,16
    d50c:	393ffc15 	stw	r4,-16(r7)
    d510:	193ffc17 	ldw	r4,-16(r3)
    d514:	6b400404 	addi	r13,r13,16
    d518:	5ac00404 	addi	r11,r11,16
    d51c:	693ffc15 	stw	r4,-16(r13)
    d520:	61000017 	ldw	r4,0(r12)
    d524:	4a400404 	addi	r9,r9,16
    d528:	42000404 	addi	r8,r8,16
    d52c:	593ffc15 	stw	r4,-16(r11)
    d530:	51000017 	ldw	r4,0(r10)
    d534:	63000404 	addi	r12,r12,16
    d538:	52800404 	addi	r10,r10,16
    d53c:	493ffc15 	stw	r4,-16(r9)
    d540:	1bbfef1e 	bne	r3,r14,d500 <__alt_data_end+0xfffdc7c0>
    d544:	79000044 	addi	r4,r15,1
    d548:	2008913a 	slli	r4,r4,4
    d54c:	328003cc 	andi	r10,r6,15
    d550:	02c000c4 	movi	r11,3
    d554:	1107883a 	add	r3,r2,r4
    d558:	290b883a 	add	r5,r5,r4
    d55c:	5a801e2e 	bgeu	r11,r10,d5d8 <memmove+0x154>
    d560:	1813883a 	mov	r9,r3
    d564:	2811883a 	mov	r8,r5
    d568:	500f883a 	mov	r7,r10
    d56c:	41000017 	ldw	r4,0(r8)
    d570:	4a400104 	addi	r9,r9,4
    d574:	39ffff04 	addi	r7,r7,-4
    d578:	493fff15 	stw	r4,-4(r9)
    d57c:	42000104 	addi	r8,r8,4
    d580:	59fffa36 	bltu	r11,r7,d56c <__alt_data_end+0xfffdc82c>
    d584:	513fff04 	addi	r4,r10,-4
    d588:	2008d0ba 	srli	r4,r4,2
    d58c:	318000cc 	andi	r6,r6,3
    d590:	21000044 	addi	r4,r4,1
    d594:	2109883a 	add	r4,r4,r4
    d598:	2109883a 	add	r4,r4,r4
    d59c:	1907883a 	add	r3,r3,r4
    d5a0:	290b883a 	add	r5,r5,r4
    d5a4:	30000b26 	beq	r6,zero,d5d4 <memmove+0x150>
    d5a8:	198d883a 	add	r6,r3,r6
    d5ac:	29c00003 	ldbu	r7,0(r5)
    d5b0:	18c00044 	addi	r3,r3,1
    d5b4:	29400044 	addi	r5,r5,1
    d5b8:	19ffffc5 	stb	r7,-1(r3)
    d5bc:	19bffb1e 	bne	r3,r6,d5ac <__alt_data_end+0xfffdc86c>
    d5c0:	f800283a 	ret
    d5c4:	1007883a 	mov	r3,r2
    d5c8:	003ff606 	br	d5a4 <__alt_data_end+0xfffdc864>
    d5cc:	1007883a 	mov	r3,r2
    d5d0:	003ff506 	br	d5a8 <__alt_data_end+0xfffdc868>
    d5d4:	f800283a 	ret
    d5d8:	500d883a 	mov	r6,r10
    d5dc:	003ff106 	br	d5a4 <__alt_data_end+0xfffdc864>

0000d5e0 <memset>:
    d5e0:	20c000cc 	andi	r3,r4,3
    d5e4:	2005883a 	mov	r2,r4
    d5e8:	18004426 	beq	r3,zero,d6fc <memset+0x11c>
    d5ec:	31ffffc4 	addi	r7,r6,-1
    d5f0:	30004026 	beq	r6,zero,d6f4 <memset+0x114>
    d5f4:	2813883a 	mov	r9,r5
    d5f8:	200d883a 	mov	r6,r4
    d5fc:	2007883a 	mov	r3,r4
    d600:	00000406 	br	d614 <memset+0x34>
    d604:	3a3fffc4 	addi	r8,r7,-1
    d608:	31800044 	addi	r6,r6,1
    d60c:	38003926 	beq	r7,zero,d6f4 <memset+0x114>
    d610:	400f883a 	mov	r7,r8
    d614:	18c00044 	addi	r3,r3,1
    d618:	32400005 	stb	r9,0(r6)
    d61c:	1a0000cc 	andi	r8,r3,3
    d620:	403ff81e 	bne	r8,zero,d604 <__alt_data_end+0xfffdc8c4>
    d624:	010000c4 	movi	r4,3
    d628:	21c02d2e 	bgeu	r4,r7,d6e0 <memset+0x100>
    d62c:	29003fcc 	andi	r4,r5,255
    d630:	200c923a 	slli	r6,r4,8
    d634:	3108b03a 	or	r4,r6,r4
    d638:	200c943a 	slli	r6,r4,16
    d63c:	218cb03a 	or	r6,r4,r6
    d640:	010003c4 	movi	r4,15
    d644:	21c0182e 	bgeu	r4,r7,d6a8 <memset+0xc8>
    d648:	3b3ffc04 	addi	r12,r7,-16
    d64c:	6018d13a 	srli	r12,r12,4
    d650:	1a000104 	addi	r8,r3,4
    d654:	1ac00204 	addi	r11,r3,8
    d658:	6008913a 	slli	r4,r12,4
    d65c:	1a800304 	addi	r10,r3,12
    d660:	1813883a 	mov	r9,r3
    d664:	21000504 	addi	r4,r4,20
    d668:	1909883a 	add	r4,r3,r4
    d66c:	49800015 	stw	r6,0(r9)
    d670:	41800015 	stw	r6,0(r8)
    d674:	59800015 	stw	r6,0(r11)
    d678:	51800015 	stw	r6,0(r10)
    d67c:	42000404 	addi	r8,r8,16
    d680:	4a400404 	addi	r9,r9,16
    d684:	5ac00404 	addi	r11,r11,16
    d688:	52800404 	addi	r10,r10,16
    d68c:	413ff71e 	bne	r8,r4,d66c <__alt_data_end+0xfffdc92c>
    d690:	63000044 	addi	r12,r12,1
    d694:	6018913a 	slli	r12,r12,4
    d698:	39c003cc 	andi	r7,r7,15
    d69c:	010000c4 	movi	r4,3
    d6a0:	1b07883a 	add	r3,r3,r12
    d6a4:	21c00e2e 	bgeu	r4,r7,d6e0 <memset+0x100>
    d6a8:	1813883a 	mov	r9,r3
    d6ac:	3811883a 	mov	r8,r7
    d6b0:	010000c4 	movi	r4,3
    d6b4:	49800015 	stw	r6,0(r9)
    d6b8:	423fff04 	addi	r8,r8,-4
    d6bc:	4a400104 	addi	r9,r9,4
    d6c0:	223ffc36 	bltu	r4,r8,d6b4 <__alt_data_end+0xfffdc974>
    d6c4:	393fff04 	addi	r4,r7,-4
    d6c8:	2008d0ba 	srli	r4,r4,2
    d6cc:	39c000cc 	andi	r7,r7,3
    d6d0:	21000044 	addi	r4,r4,1
    d6d4:	2109883a 	add	r4,r4,r4
    d6d8:	2109883a 	add	r4,r4,r4
    d6dc:	1907883a 	add	r3,r3,r4
    d6e0:	38000526 	beq	r7,zero,d6f8 <memset+0x118>
    d6e4:	19cf883a 	add	r7,r3,r7
    d6e8:	19400005 	stb	r5,0(r3)
    d6ec:	18c00044 	addi	r3,r3,1
    d6f0:	38fffd1e 	bne	r7,r3,d6e8 <__alt_data_end+0xfffdc9a8>
    d6f4:	f800283a 	ret
    d6f8:	f800283a 	ret
    d6fc:	2007883a 	mov	r3,r4
    d700:	300f883a 	mov	r7,r6
    d704:	003fc706 	br	d624 <__alt_data_end+0xfffdc8e4>

0000d708 <_Balloc>:
    d708:	20801317 	ldw	r2,76(r4)
    d70c:	defffc04 	addi	sp,sp,-16
    d710:	dc400115 	stw	r17,4(sp)
    d714:	dc000015 	stw	r16,0(sp)
    d718:	dfc00315 	stw	ra,12(sp)
    d71c:	dc800215 	stw	r18,8(sp)
    d720:	2023883a 	mov	r17,r4
    d724:	2821883a 	mov	r16,r5
    d728:	10000f26 	beq	r2,zero,d768 <_Balloc+0x60>
    d72c:	8407883a 	add	r3,r16,r16
    d730:	18c7883a 	add	r3,r3,r3
    d734:	10c7883a 	add	r3,r2,r3
    d738:	18800017 	ldw	r2,0(r3)
    d73c:	10001126 	beq	r2,zero,d784 <_Balloc+0x7c>
    d740:	11000017 	ldw	r4,0(r2)
    d744:	19000015 	stw	r4,0(r3)
    d748:	10000415 	stw	zero,16(r2)
    d74c:	10000315 	stw	zero,12(r2)
    d750:	dfc00317 	ldw	ra,12(sp)
    d754:	dc800217 	ldw	r18,8(sp)
    d758:	dc400117 	ldw	r17,4(sp)
    d75c:	dc000017 	ldw	r16,0(sp)
    d760:	dec00404 	addi	sp,sp,16
    d764:	f800283a 	ret
    d768:	01800844 	movi	r6,33
    d76c:	01400104 	movi	r5,4
    d770:	001073c0 	call	1073c <_calloc_r>
    d774:	88801315 	stw	r2,76(r17)
    d778:	103fec1e 	bne	r2,zero,d72c <__alt_data_end+0xfffdc9ec>
    d77c:	0005883a 	mov	r2,zero
    d780:	003ff306 	br	d750 <__alt_data_end+0xfffdca10>
    d784:	01400044 	movi	r5,1
    d788:	2c24983a 	sll	r18,r5,r16
    d78c:	8809883a 	mov	r4,r17
    d790:	91800144 	addi	r6,r18,5
    d794:	318d883a 	add	r6,r6,r6
    d798:	318d883a 	add	r6,r6,r6
    d79c:	001073c0 	call	1073c <_calloc_r>
    d7a0:	103ff626 	beq	r2,zero,d77c <__alt_data_end+0xfffdca3c>
    d7a4:	14000115 	stw	r16,4(r2)
    d7a8:	14800215 	stw	r18,8(r2)
    d7ac:	003fe606 	br	d748 <__alt_data_end+0xfffdca08>

0000d7b0 <_Bfree>:
    d7b0:	28000826 	beq	r5,zero,d7d4 <_Bfree+0x24>
    d7b4:	28c00117 	ldw	r3,4(r5)
    d7b8:	20801317 	ldw	r2,76(r4)
    d7bc:	18c7883a 	add	r3,r3,r3
    d7c0:	18c7883a 	add	r3,r3,r3
    d7c4:	10c5883a 	add	r2,r2,r3
    d7c8:	10c00017 	ldw	r3,0(r2)
    d7cc:	28c00015 	stw	r3,0(r5)
    d7d0:	11400015 	stw	r5,0(r2)
    d7d4:	f800283a 	ret

0000d7d8 <__multadd>:
    d7d8:	defff704 	addi	sp,sp,-36
    d7dc:	dc800215 	stw	r18,8(sp)
    d7e0:	2c800417 	ldw	r18,16(r5)
    d7e4:	dd800615 	stw	r22,24(sp)
    d7e8:	dd400515 	stw	r21,20(sp)
    d7ec:	dd000415 	stw	r20,16(sp)
    d7f0:	dcc00315 	stw	r19,12(sp)
    d7f4:	dc400115 	stw	r17,4(sp)
    d7f8:	dc000015 	stw	r16,0(sp)
    d7fc:	dfc00815 	stw	ra,32(sp)
    d800:	ddc00715 	stw	r23,28(sp)
    d804:	2827883a 	mov	r19,r5
    d808:	2029883a 	mov	r20,r4
    d80c:	3023883a 	mov	r17,r6
    d810:	3821883a 	mov	r16,r7
    d814:	2d400504 	addi	r21,r5,20
    d818:	002d883a 	mov	r22,zero
    d81c:	adc00017 	ldw	r23,0(r21)
    d820:	880b883a 	mov	r5,r17
    d824:	ad400104 	addi	r21,r21,4
    d828:	b93fffcc 	andi	r4,r23,65535
    d82c:	0004f140 	call	4f14 <__mulsi3>
    d830:	b808d43a 	srli	r4,r23,16
    d834:	880b883a 	mov	r5,r17
    d838:	1421883a 	add	r16,r2,r16
    d83c:	0004f140 	call	4f14 <__mulsi3>
    d840:	800ed43a 	srli	r7,r16,16
    d844:	80ffffcc 	andi	r3,r16,65535
    d848:	b5800044 	addi	r22,r22,1
    d84c:	11c5883a 	add	r2,r2,r7
    d850:	100e943a 	slli	r7,r2,16
    d854:	1020d43a 	srli	r16,r2,16
    d858:	38c7883a 	add	r3,r7,r3
    d85c:	a8ffff15 	stw	r3,-4(r21)
    d860:	b4bfee16 	blt	r22,r18,d81c <__alt_data_end+0xfffdcadc>
    d864:	80000926 	beq	r16,zero,d88c <__multadd+0xb4>
    d868:	98800217 	ldw	r2,8(r19)
    d86c:	9080130e 	bge	r18,r2,d8bc <__multadd+0xe4>
    d870:	90800144 	addi	r2,r18,5
    d874:	1085883a 	add	r2,r2,r2
    d878:	1085883a 	add	r2,r2,r2
    d87c:	9885883a 	add	r2,r19,r2
    d880:	14000015 	stw	r16,0(r2)
    d884:	94800044 	addi	r18,r18,1
    d888:	9c800415 	stw	r18,16(r19)
    d88c:	9805883a 	mov	r2,r19
    d890:	dfc00817 	ldw	ra,32(sp)
    d894:	ddc00717 	ldw	r23,28(sp)
    d898:	dd800617 	ldw	r22,24(sp)
    d89c:	dd400517 	ldw	r21,20(sp)
    d8a0:	dd000417 	ldw	r20,16(sp)
    d8a4:	dcc00317 	ldw	r19,12(sp)
    d8a8:	dc800217 	ldw	r18,8(sp)
    d8ac:	dc400117 	ldw	r17,4(sp)
    d8b0:	dc000017 	ldw	r16,0(sp)
    d8b4:	dec00904 	addi	sp,sp,36
    d8b8:	f800283a 	ret
    d8bc:	99400117 	ldw	r5,4(r19)
    d8c0:	a009883a 	mov	r4,r20
    d8c4:	29400044 	addi	r5,r5,1
    d8c8:	000d7080 	call	d708 <_Balloc>
    d8cc:	99800417 	ldw	r6,16(r19)
    d8d0:	99400304 	addi	r5,r19,12
    d8d4:	11000304 	addi	r4,r2,12
    d8d8:	31800084 	addi	r6,r6,2
    d8dc:	318d883a 	add	r6,r6,r6
    d8e0:	318d883a 	add	r6,r6,r6
    d8e4:	1023883a 	mov	r17,r2
    d8e8:	000d33c0 	call	d33c <memcpy>
    d8ec:	98000a26 	beq	r19,zero,d918 <__multadd+0x140>
    d8f0:	98c00117 	ldw	r3,4(r19)
    d8f4:	a0801317 	ldw	r2,76(r20)
    d8f8:	18c7883a 	add	r3,r3,r3
    d8fc:	18c7883a 	add	r3,r3,r3
    d900:	10c5883a 	add	r2,r2,r3
    d904:	10c00017 	ldw	r3,0(r2)
    d908:	98c00015 	stw	r3,0(r19)
    d90c:	14c00015 	stw	r19,0(r2)
    d910:	8827883a 	mov	r19,r17
    d914:	003fd606 	br	d870 <__alt_data_end+0xfffdcb30>
    d918:	8827883a 	mov	r19,r17
    d91c:	003fd406 	br	d870 <__alt_data_end+0xfffdcb30>

0000d920 <__s2b>:
    d920:	defff904 	addi	sp,sp,-28
    d924:	dc400115 	stw	r17,4(sp)
    d928:	dc000015 	stw	r16,0(sp)
    d92c:	2023883a 	mov	r17,r4
    d930:	2821883a 	mov	r16,r5
    d934:	39000204 	addi	r4,r7,8
    d938:	01400244 	movi	r5,9
    d93c:	dcc00315 	stw	r19,12(sp)
    d940:	dc800215 	stw	r18,8(sp)
    d944:	dfc00615 	stw	ra,24(sp)
    d948:	dd400515 	stw	r21,20(sp)
    d94c:	dd000415 	stw	r20,16(sp)
    d950:	3825883a 	mov	r18,r7
    d954:	3027883a 	mov	r19,r6
    d958:	0004d600 	call	4d60 <__divsi3>
    d95c:	00c00044 	movi	r3,1
    d960:	000b883a 	mov	r5,zero
    d964:	1880030e 	bge	r3,r2,d974 <__s2b+0x54>
    d968:	18c7883a 	add	r3,r3,r3
    d96c:	29400044 	addi	r5,r5,1
    d970:	18bffd16 	blt	r3,r2,d968 <__alt_data_end+0xfffdcc28>
    d974:	8809883a 	mov	r4,r17
    d978:	000d7080 	call	d708 <_Balloc>
    d97c:	d8c00717 	ldw	r3,28(sp)
    d980:	10c00515 	stw	r3,20(r2)
    d984:	00c00044 	movi	r3,1
    d988:	10c00415 	stw	r3,16(r2)
    d98c:	00c00244 	movi	r3,9
    d990:	1cc0210e 	bge	r3,r19,da18 <__s2b+0xf8>
    d994:	80eb883a 	add	r21,r16,r3
    d998:	a829883a 	mov	r20,r21
    d99c:	84e1883a 	add	r16,r16,r19
    d9a0:	a1c00007 	ldb	r7,0(r20)
    d9a4:	01800284 	movi	r6,10
    d9a8:	a5000044 	addi	r20,r20,1
    d9ac:	100b883a 	mov	r5,r2
    d9b0:	39fff404 	addi	r7,r7,-48
    d9b4:	8809883a 	mov	r4,r17
    d9b8:	000d7d80 	call	d7d8 <__multadd>
    d9bc:	a43ff81e 	bne	r20,r16,d9a0 <__alt_data_end+0xfffdcc60>
    d9c0:	ace1883a 	add	r16,r21,r19
    d9c4:	843ffe04 	addi	r16,r16,-8
    d9c8:	9c800a0e 	bge	r19,r18,d9f4 <__s2b+0xd4>
    d9cc:	94e5c83a 	sub	r18,r18,r19
    d9d0:	84a5883a 	add	r18,r16,r18
    d9d4:	81c00007 	ldb	r7,0(r16)
    d9d8:	01800284 	movi	r6,10
    d9dc:	84000044 	addi	r16,r16,1
    d9e0:	100b883a 	mov	r5,r2
    d9e4:	39fff404 	addi	r7,r7,-48
    d9e8:	8809883a 	mov	r4,r17
    d9ec:	000d7d80 	call	d7d8 <__multadd>
    d9f0:	84bff81e 	bne	r16,r18,d9d4 <__alt_data_end+0xfffdcc94>
    d9f4:	dfc00617 	ldw	ra,24(sp)
    d9f8:	dd400517 	ldw	r21,20(sp)
    d9fc:	dd000417 	ldw	r20,16(sp)
    da00:	dcc00317 	ldw	r19,12(sp)
    da04:	dc800217 	ldw	r18,8(sp)
    da08:	dc400117 	ldw	r17,4(sp)
    da0c:	dc000017 	ldw	r16,0(sp)
    da10:	dec00704 	addi	sp,sp,28
    da14:	f800283a 	ret
    da18:	84000284 	addi	r16,r16,10
    da1c:	1827883a 	mov	r19,r3
    da20:	003fe906 	br	d9c8 <__alt_data_end+0xfffdcc88>

0000da24 <__hi0bits>:
    da24:	20bfffec 	andhi	r2,r4,65535
    da28:	1000141e 	bne	r2,zero,da7c <__hi0bits+0x58>
    da2c:	2008943a 	slli	r4,r4,16
    da30:	00800404 	movi	r2,16
    da34:	20ffc02c 	andhi	r3,r4,65280
    da38:	1800021e 	bne	r3,zero,da44 <__hi0bits+0x20>
    da3c:	2008923a 	slli	r4,r4,8
    da40:	10800204 	addi	r2,r2,8
    da44:	20fc002c 	andhi	r3,r4,61440
    da48:	1800021e 	bne	r3,zero,da54 <__hi0bits+0x30>
    da4c:	2008913a 	slli	r4,r4,4
    da50:	10800104 	addi	r2,r2,4
    da54:	20f0002c 	andhi	r3,r4,49152
    da58:	1800031e 	bne	r3,zero,da68 <__hi0bits+0x44>
    da5c:	2109883a 	add	r4,r4,r4
    da60:	10800084 	addi	r2,r2,2
    da64:	2109883a 	add	r4,r4,r4
    da68:	20000316 	blt	r4,zero,da78 <__hi0bits+0x54>
    da6c:	2110002c 	andhi	r4,r4,16384
    da70:	2000041e 	bne	r4,zero,da84 <__hi0bits+0x60>
    da74:	00800804 	movi	r2,32
    da78:	f800283a 	ret
    da7c:	0005883a 	mov	r2,zero
    da80:	003fec06 	br	da34 <__alt_data_end+0xfffdccf4>
    da84:	10800044 	addi	r2,r2,1
    da88:	f800283a 	ret

0000da8c <__lo0bits>:
    da8c:	20c00017 	ldw	r3,0(r4)
    da90:	188001cc 	andi	r2,r3,7
    da94:	10000826 	beq	r2,zero,dab8 <__lo0bits+0x2c>
    da98:	1880004c 	andi	r2,r3,1
    da9c:	1000211e 	bne	r2,zero,db24 <__lo0bits+0x98>
    daa0:	1880008c 	andi	r2,r3,2
    daa4:	1000211e 	bne	r2,zero,db2c <__lo0bits+0xa0>
    daa8:	1806d0ba 	srli	r3,r3,2
    daac:	00800084 	movi	r2,2
    dab0:	20c00015 	stw	r3,0(r4)
    dab4:	f800283a 	ret
    dab8:	18bfffcc 	andi	r2,r3,65535
    dabc:	10001326 	beq	r2,zero,db0c <__lo0bits+0x80>
    dac0:	0005883a 	mov	r2,zero
    dac4:	19403fcc 	andi	r5,r3,255
    dac8:	2800021e 	bne	r5,zero,dad4 <__lo0bits+0x48>
    dacc:	1806d23a 	srli	r3,r3,8
    dad0:	10800204 	addi	r2,r2,8
    dad4:	194003cc 	andi	r5,r3,15
    dad8:	2800021e 	bne	r5,zero,dae4 <__lo0bits+0x58>
    dadc:	1806d13a 	srli	r3,r3,4
    dae0:	10800104 	addi	r2,r2,4
    dae4:	194000cc 	andi	r5,r3,3
    dae8:	2800021e 	bne	r5,zero,daf4 <__lo0bits+0x68>
    daec:	1806d0ba 	srli	r3,r3,2
    daf0:	10800084 	addi	r2,r2,2
    daf4:	1940004c 	andi	r5,r3,1
    daf8:	2800081e 	bne	r5,zero,db1c <__lo0bits+0x90>
    dafc:	1806d07a 	srli	r3,r3,1
    db00:	1800051e 	bne	r3,zero,db18 <__lo0bits+0x8c>
    db04:	00800804 	movi	r2,32
    db08:	f800283a 	ret
    db0c:	1806d43a 	srli	r3,r3,16
    db10:	00800404 	movi	r2,16
    db14:	003feb06 	br	dac4 <__alt_data_end+0xfffdcd84>
    db18:	10800044 	addi	r2,r2,1
    db1c:	20c00015 	stw	r3,0(r4)
    db20:	f800283a 	ret
    db24:	0005883a 	mov	r2,zero
    db28:	f800283a 	ret
    db2c:	1806d07a 	srli	r3,r3,1
    db30:	00800044 	movi	r2,1
    db34:	20c00015 	stw	r3,0(r4)
    db38:	f800283a 	ret

0000db3c <__i2b>:
    db3c:	defffd04 	addi	sp,sp,-12
    db40:	dc000015 	stw	r16,0(sp)
    db44:	04000044 	movi	r16,1
    db48:	dc400115 	stw	r17,4(sp)
    db4c:	2823883a 	mov	r17,r5
    db50:	800b883a 	mov	r5,r16
    db54:	dfc00215 	stw	ra,8(sp)
    db58:	000d7080 	call	d708 <_Balloc>
    db5c:	14400515 	stw	r17,20(r2)
    db60:	14000415 	stw	r16,16(r2)
    db64:	dfc00217 	ldw	ra,8(sp)
    db68:	dc400117 	ldw	r17,4(sp)
    db6c:	dc000017 	ldw	r16,0(sp)
    db70:	dec00304 	addi	sp,sp,12
    db74:	f800283a 	ret

0000db78 <__multiply>:
    db78:	deffef04 	addi	sp,sp,-68
    db7c:	dc400815 	stw	r17,32(sp)
    db80:	dc000715 	stw	r16,28(sp)
    db84:	34400417 	ldw	r17,16(r6)
    db88:	2c000417 	ldw	r16,16(r5)
    db8c:	dd800d15 	stw	r22,52(sp)
    db90:	dc800915 	stw	r18,36(sp)
    db94:	dfc01015 	stw	ra,64(sp)
    db98:	df000f15 	stw	fp,60(sp)
    db9c:	ddc00e15 	stw	r23,56(sp)
    dba0:	dd400c15 	stw	r21,48(sp)
    dba4:	dd000b15 	stw	r20,44(sp)
    dba8:	dcc00a15 	stw	r19,40(sp)
    dbac:	2825883a 	mov	r18,r5
    dbb0:	302d883a 	mov	r22,r6
    dbb4:	8440050e 	bge	r16,r17,dbcc <__multiply+0x54>
    dbb8:	8007883a 	mov	r3,r16
    dbbc:	3025883a 	mov	r18,r6
    dbc0:	8821883a 	mov	r16,r17
    dbc4:	282d883a 	mov	r22,r5
    dbc8:	1823883a 	mov	r17,r3
    dbcc:	90800217 	ldw	r2,8(r18)
    dbd0:	8447883a 	add	r3,r16,r17
    dbd4:	d8c00215 	stw	r3,8(sp)
    dbd8:	91400117 	ldw	r5,4(r18)
    dbdc:	10c0010e 	bge	r2,r3,dbe4 <__multiply+0x6c>
    dbe0:	29400044 	addi	r5,r5,1
    dbe4:	000d7080 	call	d708 <_Balloc>
    dbe8:	d8c00217 	ldw	r3,8(sp)
    dbec:	d8800615 	stw	r2,24(sp)
    dbf0:	18eb883a 	add	r21,r3,r3
    dbf4:	ad6b883a 	add	r21,r21,r21
    dbf8:	10c00504 	addi	r3,r2,20
    dbfc:	1d6b883a 	add	r21,r3,r21
    dc00:	d8c00115 	stw	r3,4(sp)
    dc04:	dd400315 	stw	r21,12(sp)
    dc08:	1805883a 	mov	r2,r3
    dc0c:	1d40042e 	bgeu	r3,r21,dc20 <__multiply+0xa8>
    dc10:	d8c00317 	ldw	r3,12(sp)
    dc14:	10000015 	stw	zero,0(r2)
    dc18:	10800104 	addi	r2,r2,4
    dc1c:	10fffc36 	bltu	r2,r3,dc10 <__alt_data_end+0xfffdced0>
    dc20:	8c63883a 	add	r17,r17,r17
    dc24:	b5800504 	addi	r22,r22,20
    dc28:	8c63883a 	add	r17,r17,r17
    dc2c:	94800504 	addi	r18,r18,20
    dc30:	8421883a 	add	r16,r16,r16
    dc34:	b463883a 	add	r17,r22,r17
    dc38:	8421883a 	add	r16,r16,r16
    dc3c:	dd800015 	stw	r22,0(sp)
    dc40:	dc800415 	stw	r18,16(sp)
    dc44:	dc400515 	stw	r17,20(sp)
    dc48:	9429883a 	add	r20,r18,r16
    dc4c:	b4404f2e 	bgeu	r22,r17,dd8c <__multiply+0x214>
    dc50:	d8c00017 	ldw	r3,0(sp)
    dc54:	1c800017 	ldw	r18,0(r3)
    dc58:	947fffcc 	andi	r17,r18,65535
    dc5c:	88001e26 	beq	r17,zero,dcd8 <__multiply+0x160>
    dc60:	dd800117 	ldw	r22,4(sp)
    dc64:	dd400417 	ldw	r21,16(sp)
    dc68:	0027883a 	mov	r19,zero
    dc6c:	ac800017 	ldw	r18,0(r21)
    dc70:	b4000017 	ldw	r16,0(r22)
    dc74:	880b883a 	mov	r5,r17
    dc78:	913fffcc 	andi	r4,r18,65535
    dc7c:	0004f140 	call	4f14 <__mulsi3>
    dc80:	9008d43a 	srli	r4,r18,16
    dc84:	84bfffcc 	andi	r18,r16,65535
    dc88:	1485883a 	add	r2,r2,r18
    dc8c:	14e5883a 	add	r18,r2,r19
    dc90:	8020d43a 	srli	r16,r16,16
    dc94:	9026d43a 	srli	r19,r18,16
    dc98:	880b883a 	mov	r5,r17
    dc9c:	0004f140 	call	4f14 <__mulsi3>
    dca0:	1405883a 	add	r2,r2,r16
    dca4:	14e1883a 	add	r16,r2,r19
    dca8:	90ffffcc 	andi	r3,r18,65535
    dcac:	8024943a 	slli	r18,r16,16
    dcb0:	ad400104 	addi	r21,r21,4
    dcb4:	b005883a 	mov	r2,r22
    dcb8:	90c6b03a 	or	r3,r18,r3
    dcbc:	b0c00015 	stw	r3,0(r22)
    dcc0:	8026d43a 	srli	r19,r16,16
    dcc4:	b5800104 	addi	r22,r22,4
    dcc8:	ad3fe836 	bltu	r21,r20,dc6c <__alt_data_end+0xfffdcf2c>
    dccc:	d8c00017 	ldw	r3,0(sp)
    dcd0:	14c00115 	stw	r19,4(r2)
    dcd4:	1c800017 	ldw	r18,0(r3)
    dcd8:	9024d43a 	srli	r18,r18,16
    dcdc:	90002226 	beq	r18,zero,dd68 <__multiply+0x1f0>
    dce0:	d8c00117 	ldw	r3,4(sp)
    dce4:	dd800417 	ldw	r22,16(sp)
    dce8:	002f883a 	mov	r23,zero
    dcec:	1f000017 	ldw	fp,0(r3)
    dcf0:	1823883a 	mov	r17,r3
    dcf4:	182b883a 	mov	r21,r3
    dcf8:	e021883a 	mov	r16,fp
    dcfc:	00000106 	br	dd04 <__multiply+0x18c>
    dd00:	982b883a 	mov	r21,r19
    dd04:	b100000b 	ldhu	r4,0(r22)
    dd08:	8020d43a 	srli	r16,r16,16
    dd0c:	900b883a 	mov	r5,r18
    dd10:	0004f140 	call	4f14 <__mulsi3>
    dd14:	1405883a 	add	r2,r2,r16
    dd18:	15ef883a 	add	r23,r2,r23
    dd1c:	b804943a 	slli	r2,r23,16
    dd20:	e0ffffcc 	andi	r3,fp,65535
    dd24:	8c400104 	addi	r17,r17,4
    dd28:	10c6b03a 	or	r3,r2,r3
    dd2c:	88ffff15 	stw	r3,-4(r17)
    dd30:	b5800104 	addi	r22,r22,4
    dd34:	b13fff17 	ldw	r4,-4(r22)
    dd38:	acc00104 	addi	r19,r21,4
    dd3c:	900b883a 	mov	r5,r18
    dd40:	2008d43a 	srli	r4,r4,16
    dd44:	9c000017 	ldw	r16,0(r19)
    dd48:	0004f140 	call	4f14 <__mulsi3>
    dd4c:	b806d43a 	srli	r3,r23,16
    dd50:	813fffcc 	andi	r4,r16,65535
    dd54:	1105883a 	add	r2,r2,r4
    dd58:	10f9883a 	add	fp,r2,r3
    dd5c:	e02ed43a 	srli	r23,fp,16
    dd60:	b53fe736 	bltu	r22,r20,dd00 <__alt_data_end+0xfffdcfc0>
    dd64:	af000115 	stw	fp,4(r21)
    dd68:	d8c00017 	ldw	r3,0(sp)
    dd6c:	d9000517 	ldw	r4,20(sp)
    dd70:	18c00104 	addi	r3,r3,4
    dd74:	d8c00015 	stw	r3,0(sp)
    dd78:	d8c00117 	ldw	r3,4(sp)
    dd7c:	18c00104 	addi	r3,r3,4
    dd80:	d8c00115 	stw	r3,4(sp)
    dd84:	d8c00017 	ldw	r3,0(sp)
    dd88:	193fb136 	bltu	r3,r4,dc50 <__alt_data_end+0xfffdcf10>
    dd8c:	d8c00217 	ldw	r3,8(sp)
    dd90:	00c00c0e 	bge	zero,r3,ddc4 <__multiply+0x24c>
    dd94:	d8c00317 	ldw	r3,12(sp)
    dd98:	18bfff17 	ldw	r2,-4(r3)
    dd9c:	1d7fff04 	addi	r21,r3,-4
    dda0:	10000326 	beq	r2,zero,ddb0 <__multiply+0x238>
    dda4:	00000706 	br	ddc4 <__multiply+0x24c>
    dda8:	a8800017 	ldw	r2,0(r21)
    ddac:	1000051e 	bne	r2,zero,ddc4 <__multiply+0x24c>
    ddb0:	d8c00217 	ldw	r3,8(sp)
    ddb4:	ad7fff04 	addi	r21,r21,-4
    ddb8:	18ffffc4 	addi	r3,r3,-1
    ddbc:	d8c00215 	stw	r3,8(sp)
    ddc0:	183ff91e 	bne	r3,zero,dda8 <__alt_data_end+0xfffdd068>
    ddc4:	d8c00617 	ldw	r3,24(sp)
    ddc8:	d9000217 	ldw	r4,8(sp)
    ddcc:	1805883a 	mov	r2,r3
    ddd0:	19000415 	stw	r4,16(r3)
    ddd4:	dfc01017 	ldw	ra,64(sp)
    ddd8:	df000f17 	ldw	fp,60(sp)
    dddc:	ddc00e17 	ldw	r23,56(sp)
    dde0:	dd800d17 	ldw	r22,52(sp)
    dde4:	dd400c17 	ldw	r21,48(sp)
    dde8:	dd000b17 	ldw	r20,44(sp)
    ddec:	dcc00a17 	ldw	r19,40(sp)
    ddf0:	dc800917 	ldw	r18,36(sp)
    ddf4:	dc400817 	ldw	r17,32(sp)
    ddf8:	dc000717 	ldw	r16,28(sp)
    ddfc:	dec01104 	addi	sp,sp,68
    de00:	f800283a 	ret

0000de04 <__pow5mult>:
    de04:	defffa04 	addi	sp,sp,-24
    de08:	dcc00315 	stw	r19,12(sp)
    de0c:	dc000015 	stw	r16,0(sp)
    de10:	dfc00515 	stw	ra,20(sp)
    de14:	dd000415 	stw	r20,16(sp)
    de18:	dc800215 	stw	r18,8(sp)
    de1c:	dc400115 	stw	r17,4(sp)
    de20:	308000cc 	andi	r2,r6,3
    de24:	3021883a 	mov	r16,r6
    de28:	2027883a 	mov	r19,r4
    de2c:	10002f1e 	bne	r2,zero,deec <__pow5mult+0xe8>
    de30:	2825883a 	mov	r18,r5
    de34:	8021d0ba 	srai	r16,r16,2
    de38:	80001a26 	beq	r16,zero,dea4 <__pow5mult+0xa0>
    de3c:	9c401217 	ldw	r17,72(r19)
    de40:	8800061e 	bne	r17,zero,de5c <__pow5mult+0x58>
    de44:	00003406 	br	df18 <__pow5mult+0x114>
    de48:	8021d07a 	srai	r16,r16,1
    de4c:	80001526 	beq	r16,zero,dea4 <__pow5mult+0xa0>
    de50:	88800017 	ldw	r2,0(r17)
    de54:	10001c26 	beq	r2,zero,dec8 <__pow5mult+0xc4>
    de58:	1023883a 	mov	r17,r2
    de5c:	8080004c 	andi	r2,r16,1
    de60:	103ff926 	beq	r2,zero,de48 <__alt_data_end+0xfffdd108>
    de64:	880d883a 	mov	r6,r17
    de68:	900b883a 	mov	r5,r18
    de6c:	9809883a 	mov	r4,r19
    de70:	000db780 	call	db78 <__multiply>
    de74:	90001b26 	beq	r18,zero,dee4 <__pow5mult+0xe0>
    de78:	91000117 	ldw	r4,4(r18)
    de7c:	98c01317 	ldw	r3,76(r19)
    de80:	8021d07a 	srai	r16,r16,1
    de84:	2109883a 	add	r4,r4,r4
    de88:	2109883a 	add	r4,r4,r4
    de8c:	1907883a 	add	r3,r3,r4
    de90:	19000017 	ldw	r4,0(r3)
    de94:	91000015 	stw	r4,0(r18)
    de98:	1c800015 	stw	r18,0(r3)
    de9c:	1025883a 	mov	r18,r2
    dea0:	803feb1e 	bne	r16,zero,de50 <__alt_data_end+0xfffdd110>
    dea4:	9005883a 	mov	r2,r18
    dea8:	dfc00517 	ldw	ra,20(sp)
    deac:	dd000417 	ldw	r20,16(sp)
    deb0:	dcc00317 	ldw	r19,12(sp)
    deb4:	dc800217 	ldw	r18,8(sp)
    deb8:	dc400117 	ldw	r17,4(sp)
    debc:	dc000017 	ldw	r16,0(sp)
    dec0:	dec00604 	addi	sp,sp,24
    dec4:	f800283a 	ret
    dec8:	880d883a 	mov	r6,r17
    decc:	880b883a 	mov	r5,r17
    ded0:	9809883a 	mov	r4,r19
    ded4:	000db780 	call	db78 <__multiply>
    ded8:	88800015 	stw	r2,0(r17)
    dedc:	10000015 	stw	zero,0(r2)
    dee0:	003fdd06 	br	de58 <__alt_data_end+0xfffdd118>
    dee4:	1025883a 	mov	r18,r2
    dee8:	003fd706 	br	de48 <__alt_data_end+0xfffdd108>
    deec:	10bfffc4 	addi	r2,r2,-1
    def0:	1085883a 	add	r2,r2,r2
    def4:	00c000b4 	movhi	r3,2
    def8:	18f24504 	addi	r3,r3,-14060
    defc:	1085883a 	add	r2,r2,r2
    df00:	1885883a 	add	r2,r3,r2
    df04:	11800017 	ldw	r6,0(r2)
    df08:	000f883a 	mov	r7,zero
    df0c:	000d7d80 	call	d7d8 <__multadd>
    df10:	1025883a 	mov	r18,r2
    df14:	003fc706 	br	de34 <__alt_data_end+0xfffdd0f4>
    df18:	05000044 	movi	r20,1
    df1c:	a00b883a 	mov	r5,r20
    df20:	9809883a 	mov	r4,r19
    df24:	000d7080 	call	d708 <_Balloc>
    df28:	1023883a 	mov	r17,r2
    df2c:	00809c44 	movi	r2,625
    df30:	88800515 	stw	r2,20(r17)
    df34:	8d000415 	stw	r20,16(r17)
    df38:	9c401215 	stw	r17,72(r19)
    df3c:	88000015 	stw	zero,0(r17)
    df40:	003fc606 	br	de5c <__alt_data_end+0xfffdd11c>

0000df44 <__lshift>:
    df44:	defff904 	addi	sp,sp,-28
    df48:	dd400515 	stw	r21,20(sp)
    df4c:	dcc00315 	stw	r19,12(sp)
    df50:	302bd17a 	srai	r21,r6,5
    df54:	2cc00417 	ldw	r19,16(r5)
    df58:	28800217 	ldw	r2,8(r5)
    df5c:	dd000415 	stw	r20,16(sp)
    df60:	ace7883a 	add	r19,r21,r19
    df64:	dc800215 	stw	r18,8(sp)
    df68:	dc400115 	stw	r17,4(sp)
    df6c:	dc000015 	stw	r16,0(sp)
    df70:	dfc00615 	stw	ra,24(sp)
    df74:	9c000044 	addi	r16,r19,1
    df78:	2823883a 	mov	r17,r5
    df7c:	3029883a 	mov	r20,r6
    df80:	2025883a 	mov	r18,r4
    df84:	29400117 	ldw	r5,4(r5)
    df88:	1400030e 	bge	r2,r16,df98 <__lshift+0x54>
    df8c:	1085883a 	add	r2,r2,r2
    df90:	29400044 	addi	r5,r5,1
    df94:	143ffd16 	blt	r2,r16,df8c <__alt_data_end+0xfffdd24c>
    df98:	9009883a 	mov	r4,r18
    df9c:	000d7080 	call	d708 <_Balloc>
    dfa0:	10c00504 	addi	r3,r2,20
    dfa4:	0540070e 	bge	zero,r21,dfc4 <__lshift+0x80>
    dfa8:	ad6b883a 	add	r21,r21,r21
    dfac:	ad6b883a 	add	r21,r21,r21
    dfb0:	1809883a 	mov	r4,r3
    dfb4:	1d47883a 	add	r3,r3,r21
    dfb8:	20000015 	stw	zero,0(r4)
    dfbc:	21000104 	addi	r4,r4,4
    dfc0:	193ffd1e 	bne	r3,r4,dfb8 <__alt_data_end+0xfffdd278>
    dfc4:	8a000417 	ldw	r8,16(r17)
    dfc8:	89000504 	addi	r4,r17,20
    dfcc:	a18007cc 	andi	r6,r20,31
    dfd0:	4211883a 	add	r8,r8,r8
    dfd4:	4211883a 	add	r8,r8,r8
    dfd8:	2211883a 	add	r8,r4,r8
    dfdc:	30002326 	beq	r6,zero,e06c <__lshift+0x128>
    dfe0:	02400804 	movi	r9,32
    dfe4:	4993c83a 	sub	r9,r9,r6
    dfe8:	000b883a 	mov	r5,zero
    dfec:	21c00017 	ldw	r7,0(r4)
    dff0:	1815883a 	mov	r10,r3
    dff4:	18c00104 	addi	r3,r3,4
    dff8:	398e983a 	sll	r7,r7,r6
    dffc:	21000104 	addi	r4,r4,4
    e000:	394ab03a 	or	r5,r7,r5
    e004:	197fff15 	stw	r5,-4(r3)
    e008:	217fff17 	ldw	r5,-4(r4)
    e00c:	2a4ad83a 	srl	r5,r5,r9
    e010:	223ff636 	bltu	r4,r8,dfec <__alt_data_end+0xfffdd2ac>
    e014:	51400115 	stw	r5,4(r10)
    e018:	28001a1e 	bne	r5,zero,e084 <__lshift+0x140>
    e01c:	843fffc4 	addi	r16,r16,-1
    e020:	14000415 	stw	r16,16(r2)
    e024:	88000826 	beq	r17,zero,e048 <__lshift+0x104>
    e028:	89000117 	ldw	r4,4(r17)
    e02c:	90c01317 	ldw	r3,76(r18)
    e030:	2109883a 	add	r4,r4,r4
    e034:	2109883a 	add	r4,r4,r4
    e038:	1907883a 	add	r3,r3,r4
    e03c:	19000017 	ldw	r4,0(r3)
    e040:	89000015 	stw	r4,0(r17)
    e044:	1c400015 	stw	r17,0(r3)
    e048:	dfc00617 	ldw	ra,24(sp)
    e04c:	dd400517 	ldw	r21,20(sp)
    e050:	dd000417 	ldw	r20,16(sp)
    e054:	dcc00317 	ldw	r19,12(sp)
    e058:	dc800217 	ldw	r18,8(sp)
    e05c:	dc400117 	ldw	r17,4(sp)
    e060:	dc000017 	ldw	r16,0(sp)
    e064:	dec00704 	addi	sp,sp,28
    e068:	f800283a 	ret
    e06c:	21400017 	ldw	r5,0(r4)
    e070:	18c00104 	addi	r3,r3,4
    e074:	21000104 	addi	r4,r4,4
    e078:	197fff15 	stw	r5,-4(r3)
    e07c:	223ffb36 	bltu	r4,r8,e06c <__alt_data_end+0xfffdd32c>
    e080:	003fe606 	br	e01c <__alt_data_end+0xfffdd2dc>
    e084:	9c000084 	addi	r16,r19,2
    e088:	003fe406 	br	e01c <__alt_data_end+0xfffdd2dc>

0000e08c <__mcmp>:
    e08c:	20800417 	ldw	r2,16(r4)
    e090:	28c00417 	ldw	r3,16(r5)
    e094:	10c5c83a 	sub	r2,r2,r3
    e098:	1000111e 	bne	r2,zero,e0e0 <__mcmp+0x54>
    e09c:	18c7883a 	add	r3,r3,r3
    e0a0:	18c7883a 	add	r3,r3,r3
    e0a4:	21000504 	addi	r4,r4,20
    e0a8:	29400504 	addi	r5,r5,20
    e0ac:	20c5883a 	add	r2,r4,r3
    e0b0:	28cb883a 	add	r5,r5,r3
    e0b4:	00000106 	br	e0bc <__mcmp+0x30>
    e0b8:	20800a2e 	bgeu	r4,r2,e0e4 <__mcmp+0x58>
    e0bc:	10bfff04 	addi	r2,r2,-4
    e0c0:	297fff04 	addi	r5,r5,-4
    e0c4:	11800017 	ldw	r6,0(r2)
    e0c8:	28c00017 	ldw	r3,0(r5)
    e0cc:	30fffa26 	beq	r6,r3,e0b8 <__alt_data_end+0xfffdd378>
    e0d0:	30c00236 	bltu	r6,r3,e0dc <__mcmp+0x50>
    e0d4:	00800044 	movi	r2,1
    e0d8:	f800283a 	ret
    e0dc:	00bfffc4 	movi	r2,-1
    e0e0:	f800283a 	ret
    e0e4:	0005883a 	mov	r2,zero
    e0e8:	f800283a 	ret

0000e0ec <__mdiff>:
    e0ec:	28c00417 	ldw	r3,16(r5)
    e0f0:	30800417 	ldw	r2,16(r6)
    e0f4:	defffa04 	addi	sp,sp,-24
    e0f8:	dcc00315 	stw	r19,12(sp)
    e0fc:	dc800215 	stw	r18,8(sp)
    e100:	dfc00515 	stw	ra,20(sp)
    e104:	dd000415 	stw	r20,16(sp)
    e108:	dc400115 	stw	r17,4(sp)
    e10c:	dc000015 	stw	r16,0(sp)
    e110:	1887c83a 	sub	r3,r3,r2
    e114:	2825883a 	mov	r18,r5
    e118:	3027883a 	mov	r19,r6
    e11c:	1800141e 	bne	r3,zero,e170 <__mdiff+0x84>
    e120:	1085883a 	add	r2,r2,r2
    e124:	1085883a 	add	r2,r2,r2
    e128:	2a000504 	addi	r8,r5,20
    e12c:	34000504 	addi	r16,r6,20
    e130:	4087883a 	add	r3,r8,r2
    e134:	8085883a 	add	r2,r16,r2
    e138:	00000106 	br	e140 <__mdiff+0x54>
    e13c:	40c0592e 	bgeu	r8,r3,e2a4 <__mdiff+0x1b8>
    e140:	18ffff04 	addi	r3,r3,-4
    e144:	10bfff04 	addi	r2,r2,-4
    e148:	19c00017 	ldw	r7,0(r3)
    e14c:	11400017 	ldw	r5,0(r2)
    e150:	397ffa26 	beq	r7,r5,e13c <__alt_data_end+0xfffdd3fc>
    e154:	3940592e 	bgeu	r7,r5,e2bc <__mdiff+0x1d0>
    e158:	9005883a 	mov	r2,r18
    e15c:	4023883a 	mov	r17,r8
    e160:	9825883a 	mov	r18,r19
    e164:	05000044 	movi	r20,1
    e168:	1027883a 	mov	r19,r2
    e16c:	00000406 	br	e180 <__mdiff+0x94>
    e170:	18005616 	blt	r3,zero,e2cc <__mdiff+0x1e0>
    e174:	34400504 	addi	r17,r6,20
    e178:	2c000504 	addi	r16,r5,20
    e17c:	0029883a 	mov	r20,zero
    e180:	91400117 	ldw	r5,4(r18)
    e184:	000d7080 	call	d708 <_Balloc>
    e188:	92400417 	ldw	r9,16(r18)
    e18c:	9b000417 	ldw	r12,16(r19)
    e190:	12c00504 	addi	r11,r2,20
    e194:	4a51883a 	add	r8,r9,r9
    e198:	6319883a 	add	r12,r12,r12
    e19c:	4211883a 	add	r8,r8,r8
    e1a0:	6319883a 	add	r12,r12,r12
    e1a4:	15000315 	stw	r20,12(r2)
    e1a8:	8211883a 	add	r8,r16,r8
    e1ac:	8b19883a 	add	r12,r17,r12
    e1b0:	0007883a 	mov	r3,zero
    e1b4:	81400017 	ldw	r5,0(r16)
    e1b8:	89c00017 	ldw	r7,0(r17)
    e1bc:	59800104 	addi	r6,r11,4
    e1c0:	293fffcc 	andi	r4,r5,65535
    e1c4:	20c7883a 	add	r3,r4,r3
    e1c8:	393fffcc 	andi	r4,r7,65535
    e1cc:	1909c83a 	sub	r4,r3,r4
    e1d0:	280ad43a 	srli	r5,r5,16
    e1d4:	380ed43a 	srli	r7,r7,16
    e1d8:	2007d43a 	srai	r3,r4,16
    e1dc:	213fffcc 	andi	r4,r4,65535
    e1e0:	29cbc83a 	sub	r5,r5,r7
    e1e4:	28c7883a 	add	r3,r5,r3
    e1e8:	180a943a 	slli	r5,r3,16
    e1ec:	8c400104 	addi	r17,r17,4
    e1f0:	84000104 	addi	r16,r16,4
    e1f4:	2908b03a 	or	r4,r5,r4
    e1f8:	59000015 	stw	r4,0(r11)
    e1fc:	1807d43a 	srai	r3,r3,16
    e200:	3015883a 	mov	r10,r6
    e204:	3017883a 	mov	r11,r6
    e208:	8b3fea36 	bltu	r17,r12,e1b4 <__alt_data_end+0xfffdd474>
    e20c:	8200162e 	bgeu	r16,r8,e268 <__mdiff+0x17c>
    e210:	8017883a 	mov	r11,r16
    e214:	59400017 	ldw	r5,0(r11)
    e218:	31800104 	addi	r6,r6,4
    e21c:	5ac00104 	addi	r11,r11,4
    e220:	293fffcc 	andi	r4,r5,65535
    e224:	20c7883a 	add	r3,r4,r3
    e228:	280ed43a 	srli	r7,r5,16
    e22c:	180bd43a 	srai	r5,r3,16
    e230:	193fffcc 	andi	r4,r3,65535
    e234:	3947883a 	add	r3,r7,r5
    e238:	180a943a 	slli	r5,r3,16
    e23c:	1807d43a 	srai	r3,r3,16
    e240:	2908b03a 	or	r4,r5,r4
    e244:	313fff15 	stw	r4,-4(r6)
    e248:	5a3ff236 	bltu	r11,r8,e214 <__alt_data_end+0xfffdd4d4>
    e24c:	0406303a 	nor	r3,zero,r16
    e250:	1a07883a 	add	r3,r3,r8
    e254:	1806d0ba 	srli	r3,r3,2
    e258:	18c00044 	addi	r3,r3,1
    e25c:	18c7883a 	add	r3,r3,r3
    e260:	18c7883a 	add	r3,r3,r3
    e264:	50d5883a 	add	r10,r10,r3
    e268:	50ffff04 	addi	r3,r10,-4
    e26c:	2000041e 	bne	r4,zero,e280 <__mdiff+0x194>
    e270:	18ffff04 	addi	r3,r3,-4
    e274:	19000017 	ldw	r4,0(r3)
    e278:	4a7fffc4 	addi	r9,r9,-1
    e27c:	203ffc26 	beq	r4,zero,e270 <__alt_data_end+0xfffdd530>
    e280:	12400415 	stw	r9,16(r2)
    e284:	dfc00517 	ldw	ra,20(sp)
    e288:	dd000417 	ldw	r20,16(sp)
    e28c:	dcc00317 	ldw	r19,12(sp)
    e290:	dc800217 	ldw	r18,8(sp)
    e294:	dc400117 	ldw	r17,4(sp)
    e298:	dc000017 	ldw	r16,0(sp)
    e29c:	dec00604 	addi	sp,sp,24
    e2a0:	f800283a 	ret
    e2a4:	000b883a 	mov	r5,zero
    e2a8:	000d7080 	call	d708 <_Balloc>
    e2ac:	00c00044 	movi	r3,1
    e2b0:	10c00415 	stw	r3,16(r2)
    e2b4:	10000515 	stw	zero,20(r2)
    e2b8:	003ff206 	br	e284 <__alt_data_end+0xfffdd544>
    e2bc:	8023883a 	mov	r17,r16
    e2c0:	0029883a 	mov	r20,zero
    e2c4:	4021883a 	mov	r16,r8
    e2c8:	003fad06 	br	e180 <__alt_data_end+0xfffdd440>
    e2cc:	9005883a 	mov	r2,r18
    e2d0:	94400504 	addi	r17,r18,20
    e2d4:	9c000504 	addi	r16,r19,20
    e2d8:	9825883a 	mov	r18,r19
    e2dc:	05000044 	movi	r20,1
    e2e0:	1027883a 	mov	r19,r2
    e2e4:	003fa606 	br	e180 <__alt_data_end+0xfffdd440>

0000e2e8 <__ulp>:
    e2e8:	295ffc2c 	andhi	r5,r5,32752
    e2ec:	00bf3034 	movhi	r2,64704
    e2f0:	2887883a 	add	r3,r5,r2
    e2f4:	00c0020e 	bge	zero,r3,e300 <__ulp+0x18>
    e2f8:	0005883a 	mov	r2,zero
    e2fc:	f800283a 	ret
    e300:	00c7c83a 	sub	r3,zero,r3
    e304:	1807d53a 	srai	r3,r3,20
    e308:	008004c4 	movi	r2,19
    e30c:	10c00b0e 	bge	r2,r3,e33c <__ulp+0x54>
    e310:	18bffb04 	addi	r2,r3,-20
    e314:	01000784 	movi	r4,30
    e318:	0007883a 	mov	r3,zero
    e31c:	20800516 	blt	r4,r2,e334 <__ulp+0x4c>
    e320:	010007c4 	movi	r4,31
    e324:	2089c83a 	sub	r4,r4,r2
    e328:	00800044 	movi	r2,1
    e32c:	1104983a 	sll	r2,r2,r4
    e330:	f800283a 	ret
    e334:	00800044 	movi	r2,1
    e338:	f800283a 	ret
    e33c:	01400234 	movhi	r5,8
    e340:	28c7d83a 	sra	r3,r5,r3
    e344:	0005883a 	mov	r2,zero
    e348:	f800283a 	ret

0000e34c <__b2d>:
    e34c:	defffa04 	addi	sp,sp,-24
    e350:	dc000015 	stw	r16,0(sp)
    e354:	24000417 	ldw	r16,16(r4)
    e358:	dc400115 	stw	r17,4(sp)
    e35c:	24400504 	addi	r17,r4,20
    e360:	8421883a 	add	r16,r16,r16
    e364:	8421883a 	add	r16,r16,r16
    e368:	8c21883a 	add	r16,r17,r16
    e36c:	dc800215 	stw	r18,8(sp)
    e370:	84bfff17 	ldw	r18,-4(r16)
    e374:	dd000415 	stw	r20,16(sp)
    e378:	dcc00315 	stw	r19,12(sp)
    e37c:	9009883a 	mov	r4,r18
    e380:	2829883a 	mov	r20,r5
    e384:	dfc00515 	stw	ra,20(sp)
    e388:	000da240 	call	da24 <__hi0bits>
    e38c:	00c00804 	movi	r3,32
    e390:	1889c83a 	sub	r4,r3,r2
    e394:	a1000015 	stw	r4,0(r20)
    e398:	01000284 	movi	r4,10
    e39c:	84ffff04 	addi	r19,r16,-4
    e3a0:	20801216 	blt	r4,r2,e3ec <__b2d+0xa0>
    e3a4:	018002c4 	movi	r6,11
    e3a8:	308dc83a 	sub	r6,r6,r2
    e3ac:	9186d83a 	srl	r3,r18,r6
    e3b0:	18cffc34 	orhi	r3,r3,16368
    e3b4:	8cc0212e 	bgeu	r17,r19,e43c <__b2d+0xf0>
    e3b8:	813ffe17 	ldw	r4,-8(r16)
    e3bc:	218cd83a 	srl	r6,r4,r6
    e3c0:	10800544 	addi	r2,r2,21
    e3c4:	9084983a 	sll	r2,r18,r2
    e3c8:	1184b03a 	or	r2,r2,r6
    e3cc:	dfc00517 	ldw	ra,20(sp)
    e3d0:	dd000417 	ldw	r20,16(sp)
    e3d4:	dcc00317 	ldw	r19,12(sp)
    e3d8:	dc800217 	ldw	r18,8(sp)
    e3dc:	dc400117 	ldw	r17,4(sp)
    e3e0:	dc000017 	ldw	r16,0(sp)
    e3e4:	dec00604 	addi	sp,sp,24
    e3e8:	f800283a 	ret
    e3ec:	8cc00f2e 	bgeu	r17,r19,e42c <__b2d+0xe0>
    e3f0:	117ffd44 	addi	r5,r2,-11
    e3f4:	80bffe17 	ldw	r2,-8(r16)
    e3f8:	28000e26 	beq	r5,zero,e434 <__b2d+0xe8>
    e3fc:	1949c83a 	sub	r4,r3,r5
    e400:	9164983a 	sll	r18,r18,r5
    e404:	1106d83a 	srl	r3,r2,r4
    e408:	81bffe04 	addi	r6,r16,-8
    e40c:	948ffc34 	orhi	r18,r18,16368
    e410:	90c6b03a 	or	r3,r18,r3
    e414:	89800e2e 	bgeu	r17,r6,e450 <__b2d+0x104>
    e418:	81bffd17 	ldw	r6,-12(r16)
    e41c:	1144983a 	sll	r2,r2,r5
    e420:	310ad83a 	srl	r5,r6,r4
    e424:	2884b03a 	or	r2,r5,r2
    e428:	003fe806 	br	e3cc <__alt_data_end+0xfffdd68c>
    e42c:	10bffd44 	addi	r2,r2,-11
    e430:	1000041e 	bne	r2,zero,e444 <__b2d+0xf8>
    e434:	90cffc34 	orhi	r3,r18,16368
    e438:	003fe406 	br	e3cc <__alt_data_end+0xfffdd68c>
    e43c:	000d883a 	mov	r6,zero
    e440:	003fdf06 	br	e3c0 <__alt_data_end+0xfffdd680>
    e444:	90a4983a 	sll	r18,r18,r2
    e448:	0005883a 	mov	r2,zero
    e44c:	003ff906 	br	e434 <__alt_data_end+0xfffdd6f4>
    e450:	1144983a 	sll	r2,r2,r5
    e454:	003fdd06 	br	e3cc <__alt_data_end+0xfffdd68c>

0000e458 <__d2b>:
    e458:	defff804 	addi	sp,sp,-32
    e45c:	dc000215 	stw	r16,8(sp)
    e460:	3021883a 	mov	r16,r6
    e464:	dc400315 	stw	r17,12(sp)
    e468:	8022907a 	slli	r17,r16,1
    e46c:	dd000615 	stw	r20,24(sp)
    e470:	2829883a 	mov	r20,r5
    e474:	01400044 	movi	r5,1
    e478:	dcc00515 	stw	r19,20(sp)
    e47c:	dc800415 	stw	r18,16(sp)
    e480:	dfc00715 	stw	ra,28(sp)
    e484:	3825883a 	mov	r18,r7
    e488:	8822d57a 	srli	r17,r17,21
    e48c:	000d7080 	call	d708 <_Balloc>
    e490:	1027883a 	mov	r19,r2
    e494:	00800434 	movhi	r2,16
    e498:	10bfffc4 	addi	r2,r2,-1
    e49c:	808c703a 	and	r6,r16,r2
    e4a0:	88000126 	beq	r17,zero,e4a8 <__d2b+0x50>
    e4a4:	31800434 	orhi	r6,r6,16
    e4a8:	d9800015 	stw	r6,0(sp)
    e4ac:	a0002426 	beq	r20,zero,e540 <__d2b+0xe8>
    e4b0:	d9000104 	addi	r4,sp,4
    e4b4:	dd000115 	stw	r20,4(sp)
    e4b8:	000da8c0 	call	da8c <__lo0bits>
    e4bc:	d8c00017 	ldw	r3,0(sp)
    e4c0:	10002f1e 	bne	r2,zero,e580 <__d2b+0x128>
    e4c4:	d9000117 	ldw	r4,4(sp)
    e4c8:	99000515 	stw	r4,20(r19)
    e4cc:	1821003a 	cmpeq	r16,r3,zero
    e4d0:	01000084 	movi	r4,2
    e4d4:	2421c83a 	sub	r16,r4,r16
    e4d8:	98c00615 	stw	r3,24(r19)
    e4dc:	9c000415 	stw	r16,16(r19)
    e4e0:	88001f1e 	bne	r17,zero,e560 <__d2b+0x108>
    e4e4:	10bef384 	addi	r2,r2,-1074
    e4e8:	90800015 	stw	r2,0(r18)
    e4ec:	00900034 	movhi	r2,16384
    e4f0:	10bfffc4 	addi	r2,r2,-1
    e4f4:	8085883a 	add	r2,r16,r2
    e4f8:	1085883a 	add	r2,r2,r2
    e4fc:	1085883a 	add	r2,r2,r2
    e500:	9885883a 	add	r2,r19,r2
    e504:	11000517 	ldw	r4,20(r2)
    e508:	8020917a 	slli	r16,r16,5
    e50c:	000da240 	call	da24 <__hi0bits>
    e510:	d8c00817 	ldw	r3,32(sp)
    e514:	8085c83a 	sub	r2,r16,r2
    e518:	18800015 	stw	r2,0(r3)
    e51c:	9805883a 	mov	r2,r19
    e520:	dfc00717 	ldw	ra,28(sp)
    e524:	dd000617 	ldw	r20,24(sp)
    e528:	dcc00517 	ldw	r19,20(sp)
    e52c:	dc800417 	ldw	r18,16(sp)
    e530:	dc400317 	ldw	r17,12(sp)
    e534:	dc000217 	ldw	r16,8(sp)
    e538:	dec00804 	addi	sp,sp,32
    e53c:	f800283a 	ret
    e540:	d809883a 	mov	r4,sp
    e544:	000da8c0 	call	da8c <__lo0bits>
    e548:	d8c00017 	ldw	r3,0(sp)
    e54c:	04000044 	movi	r16,1
    e550:	9c000415 	stw	r16,16(r19)
    e554:	98c00515 	stw	r3,20(r19)
    e558:	10800804 	addi	r2,r2,32
    e55c:	883fe126 	beq	r17,zero,e4e4 <__alt_data_end+0xfffdd7a4>
    e560:	00c00d44 	movi	r3,53
    e564:	8c7ef344 	addi	r17,r17,-1075
    e568:	88a3883a 	add	r17,r17,r2
    e56c:	1885c83a 	sub	r2,r3,r2
    e570:	d8c00817 	ldw	r3,32(sp)
    e574:	94400015 	stw	r17,0(r18)
    e578:	18800015 	stw	r2,0(r3)
    e57c:	003fe706 	br	e51c <__alt_data_end+0xfffdd7dc>
    e580:	01000804 	movi	r4,32
    e584:	2089c83a 	sub	r4,r4,r2
    e588:	1908983a 	sll	r4,r3,r4
    e58c:	d9400117 	ldw	r5,4(sp)
    e590:	1886d83a 	srl	r3,r3,r2
    e594:	2148b03a 	or	r4,r4,r5
    e598:	99000515 	stw	r4,20(r19)
    e59c:	d8c00015 	stw	r3,0(sp)
    e5a0:	003fca06 	br	e4cc <__alt_data_end+0xfffdd78c>

0000e5a4 <__ratio>:
    e5a4:	defff904 	addi	sp,sp,-28
    e5a8:	dc400315 	stw	r17,12(sp)
    e5ac:	2823883a 	mov	r17,r5
    e5b0:	d9400104 	addi	r5,sp,4
    e5b4:	dfc00615 	stw	ra,24(sp)
    e5b8:	dcc00515 	stw	r19,20(sp)
    e5bc:	dc800415 	stw	r18,16(sp)
    e5c0:	2027883a 	mov	r19,r4
    e5c4:	dc000215 	stw	r16,8(sp)
    e5c8:	000e34c0 	call	e34c <__b2d>
    e5cc:	d80b883a 	mov	r5,sp
    e5d0:	8809883a 	mov	r4,r17
    e5d4:	1025883a 	mov	r18,r2
    e5d8:	1821883a 	mov	r16,r3
    e5dc:	000e34c0 	call	e34c <__b2d>
    e5e0:	8a000417 	ldw	r8,16(r17)
    e5e4:	99000417 	ldw	r4,16(r19)
    e5e8:	d9400117 	ldw	r5,4(sp)
    e5ec:	2209c83a 	sub	r4,r4,r8
    e5f0:	2010917a 	slli	r8,r4,5
    e5f4:	d9000017 	ldw	r4,0(sp)
    e5f8:	2909c83a 	sub	r4,r5,r4
    e5fc:	4109883a 	add	r4,r8,r4
    e600:	01000e0e 	bge	zero,r4,e63c <__ratio+0x98>
    e604:	2008953a 	slli	r4,r4,20
    e608:	2421883a 	add	r16,r4,r16
    e60c:	100d883a 	mov	r6,r2
    e610:	180f883a 	mov	r7,r3
    e614:	9009883a 	mov	r4,r18
    e618:	800b883a 	mov	r5,r16
    e61c:	00057e80 	call	57e8 <__divdf3>
    e620:	dfc00617 	ldw	ra,24(sp)
    e624:	dcc00517 	ldw	r19,20(sp)
    e628:	dc800417 	ldw	r18,16(sp)
    e62c:	dc400317 	ldw	r17,12(sp)
    e630:	dc000217 	ldw	r16,8(sp)
    e634:	dec00704 	addi	sp,sp,28
    e638:	f800283a 	ret
    e63c:	2008953a 	slli	r4,r4,20
    e640:	1907c83a 	sub	r3,r3,r4
    e644:	003ff106 	br	e60c <__alt_data_end+0xfffdd8cc>

0000e648 <_mprec_log10>:
    e648:	defffe04 	addi	sp,sp,-8
    e64c:	dc000015 	stw	r16,0(sp)
    e650:	dfc00115 	stw	ra,4(sp)
    e654:	008005c4 	movi	r2,23
    e658:	2021883a 	mov	r16,r4
    e65c:	11000d0e 	bge	r2,r4,e694 <_mprec_log10+0x4c>
    e660:	0005883a 	mov	r2,zero
    e664:	00cffc34 	movhi	r3,16368
    e668:	843fffc4 	addi	r16,r16,-1
    e66c:	000d883a 	mov	r6,zero
    e670:	01d00934 	movhi	r7,16420
    e674:	1009883a 	mov	r4,r2
    e678:	180b883a 	mov	r5,r3
    e67c:	00064100 	call	6410 <__muldf3>
    e680:	803ff91e 	bne	r16,zero,e668 <__alt_data_end+0xfffdd928>
    e684:	dfc00117 	ldw	ra,4(sp)
    e688:	dc000017 	ldw	r16,0(sp)
    e68c:	dec00204 	addi	sp,sp,8
    e690:	f800283a 	ret
    e694:	202090fa 	slli	r16,r4,3
    e698:	008000b4 	movhi	r2,2
    e69c:	10b25c04 	addi	r2,r2,-13968
    e6a0:	1421883a 	add	r16,r2,r16
    e6a4:	80800017 	ldw	r2,0(r16)
    e6a8:	80c00117 	ldw	r3,4(r16)
    e6ac:	dfc00117 	ldw	ra,4(sp)
    e6b0:	dc000017 	ldw	r16,0(sp)
    e6b4:	dec00204 	addi	sp,sp,8
    e6b8:	f800283a 	ret

0000e6bc <__copybits>:
    e6bc:	297fffc4 	addi	r5,r5,-1
    e6c0:	280fd17a 	srai	r7,r5,5
    e6c4:	30c00417 	ldw	r3,16(r6)
    e6c8:	30800504 	addi	r2,r6,20
    e6cc:	39c00044 	addi	r7,r7,1
    e6d0:	18c7883a 	add	r3,r3,r3
    e6d4:	39cf883a 	add	r7,r7,r7
    e6d8:	18c7883a 	add	r3,r3,r3
    e6dc:	39cf883a 	add	r7,r7,r7
    e6e0:	10c7883a 	add	r3,r2,r3
    e6e4:	21cf883a 	add	r7,r4,r7
    e6e8:	10c00d2e 	bgeu	r2,r3,e720 <__copybits+0x64>
    e6ec:	200b883a 	mov	r5,r4
    e6f0:	12000017 	ldw	r8,0(r2)
    e6f4:	29400104 	addi	r5,r5,4
    e6f8:	10800104 	addi	r2,r2,4
    e6fc:	2a3fff15 	stw	r8,-4(r5)
    e700:	10fffb36 	bltu	r2,r3,e6f0 <__alt_data_end+0xfffdd9b0>
    e704:	1985c83a 	sub	r2,r3,r6
    e708:	10bffac4 	addi	r2,r2,-21
    e70c:	1004d0ba 	srli	r2,r2,2
    e710:	10800044 	addi	r2,r2,1
    e714:	1085883a 	add	r2,r2,r2
    e718:	1085883a 	add	r2,r2,r2
    e71c:	2089883a 	add	r4,r4,r2
    e720:	21c0032e 	bgeu	r4,r7,e730 <__copybits+0x74>
    e724:	20000015 	stw	zero,0(r4)
    e728:	21000104 	addi	r4,r4,4
    e72c:	21fffd36 	bltu	r4,r7,e724 <__alt_data_end+0xfffdd9e4>
    e730:	f800283a 	ret

0000e734 <__any_on>:
    e734:	20c00417 	ldw	r3,16(r4)
    e738:	2805d17a 	srai	r2,r5,5
    e73c:	21000504 	addi	r4,r4,20
    e740:	18800d0e 	bge	r3,r2,e778 <__any_on+0x44>
    e744:	18c7883a 	add	r3,r3,r3
    e748:	18c7883a 	add	r3,r3,r3
    e74c:	20c7883a 	add	r3,r4,r3
    e750:	20c0192e 	bgeu	r4,r3,e7b8 <__any_on+0x84>
    e754:	18bfff17 	ldw	r2,-4(r3)
    e758:	18ffff04 	addi	r3,r3,-4
    e75c:	1000041e 	bne	r2,zero,e770 <__any_on+0x3c>
    e760:	20c0142e 	bgeu	r4,r3,e7b4 <__any_on+0x80>
    e764:	18ffff04 	addi	r3,r3,-4
    e768:	19400017 	ldw	r5,0(r3)
    e76c:	283ffc26 	beq	r5,zero,e760 <__alt_data_end+0xfffdda20>
    e770:	00800044 	movi	r2,1
    e774:	f800283a 	ret
    e778:	10c00a0e 	bge	r2,r3,e7a4 <__any_on+0x70>
    e77c:	1085883a 	add	r2,r2,r2
    e780:	1085883a 	add	r2,r2,r2
    e784:	294007cc 	andi	r5,r5,31
    e788:	2087883a 	add	r3,r4,r2
    e78c:	283ff026 	beq	r5,zero,e750 <__alt_data_end+0xfffdda10>
    e790:	19800017 	ldw	r6,0(r3)
    e794:	3144d83a 	srl	r2,r6,r5
    e798:	114a983a 	sll	r5,r2,r5
    e79c:	317ff41e 	bne	r6,r5,e770 <__alt_data_end+0xfffdda30>
    e7a0:	003feb06 	br	e750 <__alt_data_end+0xfffdda10>
    e7a4:	1085883a 	add	r2,r2,r2
    e7a8:	1085883a 	add	r2,r2,r2
    e7ac:	2087883a 	add	r3,r4,r2
    e7b0:	003fe706 	br	e750 <__alt_data_end+0xfffdda10>
    e7b4:	f800283a 	ret
    e7b8:	0005883a 	mov	r2,zero
    e7bc:	f800283a 	ret

0000e7c0 <_realloc_r>:
    e7c0:	defff604 	addi	sp,sp,-40
    e7c4:	dc800215 	stw	r18,8(sp)
    e7c8:	dfc00915 	stw	ra,36(sp)
    e7cc:	df000815 	stw	fp,32(sp)
    e7d0:	ddc00715 	stw	r23,28(sp)
    e7d4:	dd800615 	stw	r22,24(sp)
    e7d8:	dd400515 	stw	r21,20(sp)
    e7dc:	dd000415 	stw	r20,16(sp)
    e7e0:	dcc00315 	stw	r19,12(sp)
    e7e4:	dc400115 	stw	r17,4(sp)
    e7e8:	dc000015 	stw	r16,0(sp)
    e7ec:	3025883a 	mov	r18,r6
    e7f0:	2800b726 	beq	r5,zero,ead0 <_realloc_r+0x310>
    e7f4:	282b883a 	mov	r21,r5
    e7f8:	2029883a 	mov	r20,r4
    e7fc:	00126ec0 	call	126ec <__malloc_lock>
    e800:	a8bfff17 	ldw	r2,-4(r21)
    e804:	043fff04 	movi	r16,-4
    e808:	90c002c4 	addi	r3,r18,11
    e80c:	01000584 	movi	r4,22
    e810:	acfffe04 	addi	r19,r21,-8
    e814:	1420703a 	and	r16,r2,r16
    e818:	20c0332e 	bgeu	r4,r3,e8e8 <_realloc_r+0x128>
    e81c:	047ffe04 	movi	r17,-8
    e820:	1c62703a 	and	r17,r3,r17
    e824:	8807883a 	mov	r3,r17
    e828:	88005816 	blt	r17,zero,e98c <_realloc_r+0x1cc>
    e82c:	8c805736 	bltu	r17,r18,e98c <_realloc_r+0x1cc>
    e830:	80c0300e 	bge	r16,r3,e8f4 <_realloc_r+0x134>
    e834:	070000b4 	movhi	fp,2
    e838:	e7341104 	addi	fp,fp,-12220
    e83c:	e1c00217 	ldw	r7,8(fp)
    e840:	9c09883a 	add	r4,r19,r16
    e844:	22000117 	ldw	r8,4(r4)
    e848:	21c06326 	beq	r4,r7,e9d8 <_realloc_r+0x218>
    e84c:	017fff84 	movi	r5,-2
    e850:	414a703a 	and	r5,r8,r5
    e854:	214b883a 	add	r5,r4,r5
    e858:	29800117 	ldw	r6,4(r5)
    e85c:	3180004c 	andi	r6,r6,1
    e860:	30003f26 	beq	r6,zero,e960 <_realloc_r+0x1a0>
    e864:	1080004c 	andi	r2,r2,1
    e868:	10008326 	beq	r2,zero,ea78 <_realloc_r+0x2b8>
    e86c:	900b883a 	mov	r5,r18
    e870:	a009883a 	mov	r4,r20
    e874:	000ca4c0 	call	ca4c <_malloc_r>
    e878:	1025883a 	mov	r18,r2
    e87c:	10011e26 	beq	r2,zero,ecf8 <_realloc_r+0x538>
    e880:	a93fff17 	ldw	r4,-4(r21)
    e884:	10fffe04 	addi	r3,r2,-8
    e888:	00bfff84 	movi	r2,-2
    e88c:	2084703a 	and	r2,r4,r2
    e890:	9885883a 	add	r2,r19,r2
    e894:	1880ee26 	beq	r3,r2,ec50 <_realloc_r+0x490>
    e898:	81bfff04 	addi	r6,r16,-4
    e89c:	00800904 	movi	r2,36
    e8a0:	1180b836 	bltu	r2,r6,eb84 <_realloc_r+0x3c4>
    e8a4:	00c004c4 	movi	r3,19
    e8a8:	19809636 	bltu	r3,r6,eb04 <_realloc_r+0x344>
    e8ac:	9005883a 	mov	r2,r18
    e8b0:	a807883a 	mov	r3,r21
    e8b4:	19000017 	ldw	r4,0(r3)
    e8b8:	11000015 	stw	r4,0(r2)
    e8bc:	19000117 	ldw	r4,4(r3)
    e8c0:	11000115 	stw	r4,4(r2)
    e8c4:	18c00217 	ldw	r3,8(r3)
    e8c8:	10c00215 	stw	r3,8(r2)
    e8cc:	a80b883a 	mov	r5,r21
    e8d0:	a009883a 	mov	r4,r20
    e8d4:	000be540 	call	be54 <_free_r>
    e8d8:	a009883a 	mov	r4,r20
    e8dc:	001280c0 	call	1280c <__malloc_unlock>
    e8e0:	9005883a 	mov	r2,r18
    e8e4:	00001206 	br	e930 <_realloc_r+0x170>
    e8e8:	00c00404 	movi	r3,16
    e8ec:	1823883a 	mov	r17,r3
    e8f0:	003fce06 	br	e82c <__alt_data_end+0xfffddaec>
    e8f4:	a825883a 	mov	r18,r21
    e8f8:	8445c83a 	sub	r2,r16,r17
    e8fc:	00c003c4 	movi	r3,15
    e900:	18802636 	bltu	r3,r2,e99c <_realloc_r+0x1dc>
    e904:	99800117 	ldw	r6,4(r19)
    e908:	9c07883a 	add	r3,r19,r16
    e90c:	3180004c 	andi	r6,r6,1
    e910:	3420b03a 	or	r16,r6,r16
    e914:	9c000115 	stw	r16,4(r19)
    e918:	18800117 	ldw	r2,4(r3)
    e91c:	10800054 	ori	r2,r2,1
    e920:	18800115 	stw	r2,4(r3)
    e924:	a009883a 	mov	r4,r20
    e928:	001280c0 	call	1280c <__malloc_unlock>
    e92c:	9005883a 	mov	r2,r18
    e930:	dfc00917 	ldw	ra,36(sp)
    e934:	df000817 	ldw	fp,32(sp)
    e938:	ddc00717 	ldw	r23,28(sp)
    e93c:	dd800617 	ldw	r22,24(sp)
    e940:	dd400517 	ldw	r21,20(sp)
    e944:	dd000417 	ldw	r20,16(sp)
    e948:	dcc00317 	ldw	r19,12(sp)
    e94c:	dc800217 	ldw	r18,8(sp)
    e950:	dc400117 	ldw	r17,4(sp)
    e954:	dc000017 	ldw	r16,0(sp)
    e958:	dec00a04 	addi	sp,sp,40
    e95c:	f800283a 	ret
    e960:	017fff04 	movi	r5,-4
    e964:	414a703a 	and	r5,r8,r5
    e968:	814d883a 	add	r6,r16,r5
    e96c:	30c01f16 	blt	r6,r3,e9ec <_realloc_r+0x22c>
    e970:	20800317 	ldw	r2,12(r4)
    e974:	20c00217 	ldw	r3,8(r4)
    e978:	a825883a 	mov	r18,r21
    e97c:	3021883a 	mov	r16,r6
    e980:	18800315 	stw	r2,12(r3)
    e984:	10c00215 	stw	r3,8(r2)
    e988:	003fdb06 	br	e8f8 <__alt_data_end+0xfffddbb8>
    e98c:	00800304 	movi	r2,12
    e990:	a0800015 	stw	r2,0(r20)
    e994:	0005883a 	mov	r2,zero
    e998:	003fe506 	br	e930 <__alt_data_end+0xfffddbf0>
    e99c:	98c00117 	ldw	r3,4(r19)
    e9a0:	9c4b883a 	add	r5,r19,r17
    e9a4:	11000054 	ori	r4,r2,1
    e9a8:	18c0004c 	andi	r3,r3,1
    e9ac:	1c62b03a 	or	r17,r3,r17
    e9b0:	9c400115 	stw	r17,4(r19)
    e9b4:	29000115 	stw	r4,4(r5)
    e9b8:	2885883a 	add	r2,r5,r2
    e9bc:	10c00117 	ldw	r3,4(r2)
    e9c0:	29400204 	addi	r5,r5,8
    e9c4:	a009883a 	mov	r4,r20
    e9c8:	18c00054 	ori	r3,r3,1
    e9cc:	10c00115 	stw	r3,4(r2)
    e9d0:	000be540 	call	be54 <_free_r>
    e9d4:	003fd306 	br	e924 <__alt_data_end+0xfffddbe4>
    e9d8:	017fff04 	movi	r5,-4
    e9dc:	414a703a 	and	r5,r8,r5
    e9e0:	89800404 	addi	r6,r17,16
    e9e4:	8151883a 	add	r8,r16,r5
    e9e8:	4180590e 	bge	r8,r6,eb50 <_realloc_r+0x390>
    e9ec:	1080004c 	andi	r2,r2,1
    e9f0:	103f9e1e 	bne	r2,zero,e86c <__alt_data_end+0xfffddb2c>
    e9f4:	adbffe17 	ldw	r22,-8(r21)
    e9f8:	00bfff04 	movi	r2,-4
    e9fc:	9dadc83a 	sub	r22,r19,r22
    ea00:	b1800117 	ldw	r6,4(r22)
    ea04:	3084703a 	and	r2,r6,r2
    ea08:	20002026 	beq	r4,zero,ea8c <_realloc_r+0x2cc>
    ea0c:	80af883a 	add	r23,r16,r2
    ea10:	b96f883a 	add	r23,r23,r5
    ea14:	21c05f26 	beq	r4,r7,eb94 <_realloc_r+0x3d4>
    ea18:	b8c01c16 	blt	r23,r3,ea8c <_realloc_r+0x2cc>
    ea1c:	20800317 	ldw	r2,12(r4)
    ea20:	20c00217 	ldw	r3,8(r4)
    ea24:	81bfff04 	addi	r6,r16,-4
    ea28:	01000904 	movi	r4,36
    ea2c:	18800315 	stw	r2,12(r3)
    ea30:	10c00215 	stw	r3,8(r2)
    ea34:	b0c00217 	ldw	r3,8(r22)
    ea38:	b0800317 	ldw	r2,12(r22)
    ea3c:	b4800204 	addi	r18,r22,8
    ea40:	18800315 	stw	r2,12(r3)
    ea44:	10c00215 	stw	r3,8(r2)
    ea48:	21801b36 	bltu	r4,r6,eab8 <_realloc_r+0x2f8>
    ea4c:	008004c4 	movi	r2,19
    ea50:	1180352e 	bgeu	r2,r6,eb28 <_realloc_r+0x368>
    ea54:	a8800017 	ldw	r2,0(r21)
    ea58:	b0800215 	stw	r2,8(r22)
    ea5c:	a8800117 	ldw	r2,4(r21)
    ea60:	b0800315 	stw	r2,12(r22)
    ea64:	008006c4 	movi	r2,27
    ea68:	11807f36 	bltu	r2,r6,ec68 <_realloc_r+0x4a8>
    ea6c:	b0800404 	addi	r2,r22,16
    ea70:	ad400204 	addi	r21,r21,8
    ea74:	00002d06 	br	eb2c <_realloc_r+0x36c>
    ea78:	adbffe17 	ldw	r22,-8(r21)
    ea7c:	00bfff04 	movi	r2,-4
    ea80:	9dadc83a 	sub	r22,r19,r22
    ea84:	b1000117 	ldw	r4,4(r22)
    ea88:	2084703a 	and	r2,r4,r2
    ea8c:	b03f7726 	beq	r22,zero,e86c <__alt_data_end+0xfffddb2c>
    ea90:	80af883a 	add	r23,r16,r2
    ea94:	b8ff7516 	blt	r23,r3,e86c <__alt_data_end+0xfffddb2c>
    ea98:	b0800317 	ldw	r2,12(r22)
    ea9c:	b0c00217 	ldw	r3,8(r22)
    eaa0:	81bfff04 	addi	r6,r16,-4
    eaa4:	01000904 	movi	r4,36
    eaa8:	18800315 	stw	r2,12(r3)
    eaac:	10c00215 	stw	r3,8(r2)
    eab0:	b4800204 	addi	r18,r22,8
    eab4:	21bfe52e 	bgeu	r4,r6,ea4c <__alt_data_end+0xfffddd0c>
    eab8:	a80b883a 	mov	r5,r21
    eabc:	9009883a 	mov	r4,r18
    eac0:	000d4840 	call	d484 <memmove>
    eac4:	b821883a 	mov	r16,r23
    eac8:	b027883a 	mov	r19,r22
    eacc:	003f8a06 	br	e8f8 <__alt_data_end+0xfffddbb8>
    ead0:	300b883a 	mov	r5,r6
    ead4:	dfc00917 	ldw	ra,36(sp)
    ead8:	df000817 	ldw	fp,32(sp)
    eadc:	ddc00717 	ldw	r23,28(sp)
    eae0:	dd800617 	ldw	r22,24(sp)
    eae4:	dd400517 	ldw	r21,20(sp)
    eae8:	dd000417 	ldw	r20,16(sp)
    eaec:	dcc00317 	ldw	r19,12(sp)
    eaf0:	dc800217 	ldw	r18,8(sp)
    eaf4:	dc400117 	ldw	r17,4(sp)
    eaf8:	dc000017 	ldw	r16,0(sp)
    eafc:	dec00a04 	addi	sp,sp,40
    eb00:	000ca4c1 	jmpi	ca4c <_malloc_r>
    eb04:	a8c00017 	ldw	r3,0(r21)
    eb08:	90c00015 	stw	r3,0(r18)
    eb0c:	a8c00117 	ldw	r3,4(r21)
    eb10:	90c00115 	stw	r3,4(r18)
    eb14:	00c006c4 	movi	r3,27
    eb18:	19804536 	bltu	r3,r6,ec30 <_realloc_r+0x470>
    eb1c:	90800204 	addi	r2,r18,8
    eb20:	a8c00204 	addi	r3,r21,8
    eb24:	003f6306 	br	e8b4 <__alt_data_end+0xfffddb74>
    eb28:	9005883a 	mov	r2,r18
    eb2c:	a8c00017 	ldw	r3,0(r21)
    eb30:	b821883a 	mov	r16,r23
    eb34:	b027883a 	mov	r19,r22
    eb38:	10c00015 	stw	r3,0(r2)
    eb3c:	a8c00117 	ldw	r3,4(r21)
    eb40:	10c00115 	stw	r3,4(r2)
    eb44:	a8c00217 	ldw	r3,8(r21)
    eb48:	10c00215 	stw	r3,8(r2)
    eb4c:	003f6a06 	br	e8f8 <__alt_data_end+0xfffddbb8>
    eb50:	9c67883a 	add	r19,r19,r17
    eb54:	4445c83a 	sub	r2,r8,r17
    eb58:	e4c00215 	stw	r19,8(fp)
    eb5c:	10800054 	ori	r2,r2,1
    eb60:	98800115 	stw	r2,4(r19)
    eb64:	a8bfff17 	ldw	r2,-4(r21)
    eb68:	a009883a 	mov	r4,r20
    eb6c:	1080004c 	andi	r2,r2,1
    eb70:	1462b03a 	or	r17,r2,r17
    eb74:	ac7fff15 	stw	r17,-4(r21)
    eb78:	001280c0 	call	1280c <__malloc_unlock>
    eb7c:	a805883a 	mov	r2,r21
    eb80:	003f6b06 	br	e930 <__alt_data_end+0xfffddbf0>
    eb84:	a80b883a 	mov	r5,r21
    eb88:	9009883a 	mov	r4,r18
    eb8c:	000d4840 	call	d484 <memmove>
    eb90:	003f4e06 	br	e8cc <__alt_data_end+0xfffddb8c>
    eb94:	89000404 	addi	r4,r17,16
    eb98:	b93fbc16 	blt	r23,r4,ea8c <__alt_data_end+0xfffddd4c>
    eb9c:	b0800317 	ldw	r2,12(r22)
    eba0:	b0c00217 	ldw	r3,8(r22)
    eba4:	81bfff04 	addi	r6,r16,-4
    eba8:	01000904 	movi	r4,36
    ebac:	18800315 	stw	r2,12(r3)
    ebb0:	10c00215 	stw	r3,8(r2)
    ebb4:	b4800204 	addi	r18,r22,8
    ebb8:	21804336 	bltu	r4,r6,ecc8 <_realloc_r+0x508>
    ebbc:	008004c4 	movi	r2,19
    ebc0:	11803f2e 	bgeu	r2,r6,ecc0 <_realloc_r+0x500>
    ebc4:	a8800017 	ldw	r2,0(r21)
    ebc8:	b0800215 	stw	r2,8(r22)
    ebcc:	a8800117 	ldw	r2,4(r21)
    ebd0:	b0800315 	stw	r2,12(r22)
    ebd4:	008006c4 	movi	r2,27
    ebd8:	11803f36 	bltu	r2,r6,ecd8 <_realloc_r+0x518>
    ebdc:	b0800404 	addi	r2,r22,16
    ebe0:	ad400204 	addi	r21,r21,8
    ebe4:	a8c00017 	ldw	r3,0(r21)
    ebe8:	10c00015 	stw	r3,0(r2)
    ebec:	a8c00117 	ldw	r3,4(r21)
    ebf0:	10c00115 	stw	r3,4(r2)
    ebf4:	a8c00217 	ldw	r3,8(r21)
    ebf8:	10c00215 	stw	r3,8(r2)
    ebfc:	b447883a 	add	r3,r22,r17
    ec00:	bc45c83a 	sub	r2,r23,r17
    ec04:	e0c00215 	stw	r3,8(fp)
    ec08:	10800054 	ori	r2,r2,1
    ec0c:	18800115 	stw	r2,4(r3)
    ec10:	b0800117 	ldw	r2,4(r22)
    ec14:	a009883a 	mov	r4,r20
    ec18:	1080004c 	andi	r2,r2,1
    ec1c:	1462b03a 	or	r17,r2,r17
    ec20:	b4400115 	stw	r17,4(r22)
    ec24:	001280c0 	call	1280c <__malloc_unlock>
    ec28:	9005883a 	mov	r2,r18
    ec2c:	003f4006 	br	e930 <__alt_data_end+0xfffddbf0>
    ec30:	a8c00217 	ldw	r3,8(r21)
    ec34:	90c00215 	stw	r3,8(r18)
    ec38:	a8c00317 	ldw	r3,12(r21)
    ec3c:	90c00315 	stw	r3,12(r18)
    ec40:	30801126 	beq	r6,r2,ec88 <_realloc_r+0x4c8>
    ec44:	90800404 	addi	r2,r18,16
    ec48:	a8c00404 	addi	r3,r21,16
    ec4c:	003f1906 	br	e8b4 <__alt_data_end+0xfffddb74>
    ec50:	90ffff17 	ldw	r3,-4(r18)
    ec54:	00bfff04 	movi	r2,-4
    ec58:	a825883a 	mov	r18,r21
    ec5c:	1884703a 	and	r2,r3,r2
    ec60:	80a1883a 	add	r16,r16,r2
    ec64:	003f2406 	br	e8f8 <__alt_data_end+0xfffddbb8>
    ec68:	a8800217 	ldw	r2,8(r21)
    ec6c:	b0800415 	stw	r2,16(r22)
    ec70:	a8800317 	ldw	r2,12(r21)
    ec74:	b0800515 	stw	r2,20(r22)
    ec78:	31000a26 	beq	r6,r4,eca4 <_realloc_r+0x4e4>
    ec7c:	b0800604 	addi	r2,r22,24
    ec80:	ad400404 	addi	r21,r21,16
    ec84:	003fa906 	br	eb2c <__alt_data_end+0xfffdddec>
    ec88:	a9000417 	ldw	r4,16(r21)
    ec8c:	90800604 	addi	r2,r18,24
    ec90:	a8c00604 	addi	r3,r21,24
    ec94:	91000415 	stw	r4,16(r18)
    ec98:	a9000517 	ldw	r4,20(r21)
    ec9c:	91000515 	stw	r4,20(r18)
    eca0:	003f0406 	br	e8b4 <__alt_data_end+0xfffddb74>
    eca4:	a8c00417 	ldw	r3,16(r21)
    eca8:	ad400604 	addi	r21,r21,24
    ecac:	b0800804 	addi	r2,r22,32
    ecb0:	b0c00615 	stw	r3,24(r22)
    ecb4:	a8ffff17 	ldw	r3,-4(r21)
    ecb8:	b0c00715 	stw	r3,28(r22)
    ecbc:	003f9b06 	br	eb2c <__alt_data_end+0xfffdddec>
    ecc0:	9005883a 	mov	r2,r18
    ecc4:	003fc706 	br	ebe4 <__alt_data_end+0xfffddea4>
    ecc8:	a80b883a 	mov	r5,r21
    eccc:	9009883a 	mov	r4,r18
    ecd0:	000d4840 	call	d484 <memmove>
    ecd4:	003fc906 	br	ebfc <__alt_data_end+0xfffddebc>
    ecd8:	a8800217 	ldw	r2,8(r21)
    ecdc:	b0800415 	stw	r2,16(r22)
    ece0:	a8800317 	ldw	r2,12(r21)
    ece4:	b0800515 	stw	r2,20(r22)
    ece8:	31000726 	beq	r6,r4,ed08 <_realloc_r+0x548>
    ecec:	b0800604 	addi	r2,r22,24
    ecf0:	ad400404 	addi	r21,r21,16
    ecf4:	003fbb06 	br	ebe4 <__alt_data_end+0xfffddea4>
    ecf8:	a009883a 	mov	r4,r20
    ecfc:	001280c0 	call	1280c <__malloc_unlock>
    ed00:	0005883a 	mov	r2,zero
    ed04:	003f0a06 	br	e930 <__alt_data_end+0xfffddbf0>
    ed08:	a8c00417 	ldw	r3,16(r21)
    ed0c:	ad400604 	addi	r21,r21,24
    ed10:	b0800804 	addi	r2,r22,32
    ed14:	b0c00615 	stw	r3,24(r22)
    ed18:	a8ffff17 	ldw	r3,-4(r21)
    ed1c:	b0c00715 	stw	r3,28(r22)
    ed20:	003fb006 	br	ebe4 <__alt_data_end+0xfffddea4>

0000ed24 <_sbrk_r>:
    ed24:	defffd04 	addi	sp,sp,-12
    ed28:	dc000015 	stw	r16,0(sp)
    ed2c:	040000b4 	movhi	r16,2
    ed30:	dc400115 	stw	r17,4(sp)
    ed34:	8400ac04 	addi	r16,r16,688
    ed38:	2023883a 	mov	r17,r4
    ed3c:	2809883a 	mov	r4,r5
    ed40:	dfc00215 	stw	ra,8(sp)
    ed44:	80000015 	stw	zero,0(r16)
    ed48:	00123dc0 	call	123dc <sbrk>
    ed4c:	00ffffc4 	movi	r3,-1
    ed50:	10c00526 	beq	r2,r3,ed68 <_sbrk_r+0x44>
    ed54:	dfc00217 	ldw	ra,8(sp)
    ed58:	dc400117 	ldw	r17,4(sp)
    ed5c:	dc000017 	ldw	r16,0(sp)
    ed60:	dec00304 	addi	sp,sp,12
    ed64:	f800283a 	ret
    ed68:	80c00017 	ldw	r3,0(r16)
    ed6c:	183ff926 	beq	r3,zero,ed54 <__alt_data_end+0xfffde014>
    ed70:	88c00015 	stw	r3,0(r17)
    ed74:	003ff706 	br	ed54 <__alt_data_end+0xfffde014>

0000ed78 <__sread>:
    ed78:	defffe04 	addi	sp,sp,-8
    ed7c:	dc000015 	stw	r16,0(sp)
    ed80:	2821883a 	mov	r16,r5
    ed84:	2940038f 	ldh	r5,14(r5)
    ed88:	dfc00115 	stw	ra,4(sp)
    ed8c:	0010c340 	call	10c34 <_read_r>
    ed90:	10000716 	blt	r2,zero,edb0 <__sread+0x38>
    ed94:	80c01417 	ldw	r3,80(r16)
    ed98:	1887883a 	add	r3,r3,r2
    ed9c:	80c01415 	stw	r3,80(r16)
    eda0:	dfc00117 	ldw	ra,4(sp)
    eda4:	dc000017 	ldw	r16,0(sp)
    eda8:	dec00204 	addi	sp,sp,8
    edac:	f800283a 	ret
    edb0:	80c0030b 	ldhu	r3,12(r16)
    edb4:	18fbffcc 	andi	r3,r3,61439
    edb8:	80c0030d 	sth	r3,12(r16)
    edbc:	dfc00117 	ldw	ra,4(sp)
    edc0:	dc000017 	ldw	r16,0(sp)
    edc4:	dec00204 	addi	sp,sp,8
    edc8:	f800283a 	ret

0000edcc <__seofread>:
    edcc:	0005883a 	mov	r2,zero
    edd0:	f800283a 	ret

0000edd4 <__swrite>:
    edd4:	2880030b 	ldhu	r2,12(r5)
    edd8:	defffb04 	addi	sp,sp,-20
    eddc:	dcc00315 	stw	r19,12(sp)
    ede0:	dc800215 	stw	r18,8(sp)
    ede4:	dc400115 	stw	r17,4(sp)
    ede8:	dc000015 	stw	r16,0(sp)
    edec:	dfc00415 	stw	ra,16(sp)
    edf0:	10c0400c 	andi	r3,r2,256
    edf4:	2821883a 	mov	r16,r5
    edf8:	2023883a 	mov	r17,r4
    edfc:	3025883a 	mov	r18,r6
    ee00:	3827883a 	mov	r19,r7
    ee04:	18000526 	beq	r3,zero,ee1c <__swrite+0x48>
    ee08:	2940038f 	ldh	r5,14(r5)
    ee0c:	01c00084 	movi	r7,2
    ee10:	000d883a 	mov	r6,zero
    ee14:	0010bd40 	call	10bd4 <_lseek_r>
    ee18:	8080030b 	ldhu	r2,12(r16)
    ee1c:	8140038f 	ldh	r5,14(r16)
    ee20:	10bbffcc 	andi	r2,r2,61439
    ee24:	980f883a 	mov	r7,r19
    ee28:	900d883a 	mov	r6,r18
    ee2c:	8809883a 	mov	r4,r17
    ee30:	8080030d 	sth	r2,12(r16)
    ee34:	dfc00417 	ldw	ra,16(sp)
    ee38:	dcc00317 	ldw	r19,12(sp)
    ee3c:	dc800217 	ldw	r18,8(sp)
    ee40:	dc400117 	ldw	r17,4(sp)
    ee44:	dc000017 	ldw	r16,0(sp)
    ee48:	dec00504 	addi	sp,sp,20
    ee4c:	00106881 	jmpi	10688 <_write_r>

0000ee50 <__sseek>:
    ee50:	defffe04 	addi	sp,sp,-8
    ee54:	dc000015 	stw	r16,0(sp)
    ee58:	2821883a 	mov	r16,r5
    ee5c:	2940038f 	ldh	r5,14(r5)
    ee60:	dfc00115 	stw	ra,4(sp)
    ee64:	0010bd40 	call	10bd4 <_lseek_r>
    ee68:	00ffffc4 	movi	r3,-1
    ee6c:	10c00826 	beq	r2,r3,ee90 <__sseek+0x40>
    ee70:	80c0030b 	ldhu	r3,12(r16)
    ee74:	80801415 	stw	r2,80(r16)
    ee78:	18c40014 	ori	r3,r3,4096
    ee7c:	80c0030d 	sth	r3,12(r16)
    ee80:	dfc00117 	ldw	ra,4(sp)
    ee84:	dc000017 	ldw	r16,0(sp)
    ee88:	dec00204 	addi	sp,sp,8
    ee8c:	f800283a 	ret
    ee90:	80c0030b 	ldhu	r3,12(r16)
    ee94:	18fbffcc 	andi	r3,r3,61439
    ee98:	80c0030d 	sth	r3,12(r16)
    ee9c:	dfc00117 	ldw	ra,4(sp)
    eea0:	dc000017 	ldw	r16,0(sp)
    eea4:	dec00204 	addi	sp,sp,8
    eea8:	f800283a 	ret

0000eeac <__sclose>:
    eeac:	2940038f 	ldh	r5,14(r5)
    eeb0:	00106e81 	jmpi	106e8 <_close_r>

0000eeb4 <strcmp>:
    eeb4:	2144b03a 	or	r2,r4,r5
    eeb8:	108000cc 	andi	r2,r2,3
    eebc:	1000171e 	bne	r2,zero,ef1c <strcmp+0x68>
    eec0:	20800017 	ldw	r2,0(r4)
    eec4:	28c00017 	ldw	r3,0(r5)
    eec8:	10c0141e 	bne	r2,r3,ef1c <strcmp+0x68>
    eecc:	027fbff4 	movhi	r9,65279
    eed0:	4a7fbfc4 	addi	r9,r9,-257
    eed4:	0086303a 	nor	r3,zero,r2
    eed8:	02202074 	movhi	r8,32897
    eedc:	1245883a 	add	r2,r2,r9
    eee0:	42202004 	addi	r8,r8,-32640
    eee4:	10c4703a 	and	r2,r2,r3
    eee8:	1204703a 	and	r2,r2,r8
    eeec:	10000226 	beq	r2,zero,eef8 <strcmp+0x44>
    eef0:	00002306 	br	ef80 <strcmp+0xcc>
    eef4:	1000221e 	bne	r2,zero,ef80 <strcmp+0xcc>
    eef8:	21000104 	addi	r4,r4,4
    eefc:	20c00017 	ldw	r3,0(r4)
    ef00:	29400104 	addi	r5,r5,4
    ef04:	29800017 	ldw	r6,0(r5)
    ef08:	1a4f883a 	add	r7,r3,r9
    ef0c:	00c4303a 	nor	r2,zero,r3
    ef10:	3884703a 	and	r2,r7,r2
    ef14:	1204703a 	and	r2,r2,r8
    ef18:	19bff626 	beq	r3,r6,eef4 <__alt_data_end+0xfffde1b4>
    ef1c:	20800003 	ldbu	r2,0(r4)
    ef20:	10c03fcc 	andi	r3,r2,255
    ef24:	18c0201c 	xori	r3,r3,128
    ef28:	18ffe004 	addi	r3,r3,-128
    ef2c:	18000c26 	beq	r3,zero,ef60 <strcmp+0xac>
    ef30:	29800007 	ldb	r6,0(r5)
    ef34:	19800326 	beq	r3,r6,ef44 <strcmp+0x90>
    ef38:	00001306 	br	ef88 <strcmp+0xd4>
    ef3c:	29800007 	ldb	r6,0(r5)
    ef40:	11800b1e 	bne	r2,r6,ef70 <strcmp+0xbc>
    ef44:	21000044 	addi	r4,r4,1
    ef48:	20c00003 	ldbu	r3,0(r4)
    ef4c:	29400044 	addi	r5,r5,1
    ef50:	18803fcc 	andi	r2,r3,255
    ef54:	1080201c 	xori	r2,r2,128
    ef58:	10bfe004 	addi	r2,r2,-128
    ef5c:	103ff71e 	bne	r2,zero,ef3c <__alt_data_end+0xfffde1fc>
    ef60:	0007883a 	mov	r3,zero
    ef64:	28800003 	ldbu	r2,0(r5)
    ef68:	1885c83a 	sub	r2,r3,r2
    ef6c:	f800283a 	ret
    ef70:	28800003 	ldbu	r2,0(r5)
    ef74:	18c03fcc 	andi	r3,r3,255
    ef78:	1885c83a 	sub	r2,r3,r2
    ef7c:	f800283a 	ret
    ef80:	0005883a 	mov	r2,zero
    ef84:	f800283a 	ret
    ef88:	10c03fcc 	andi	r3,r2,255
    ef8c:	003ff506 	br	ef64 <__alt_data_end+0xfffde224>

0000ef90 <__sprint_r.part.0>:
    ef90:	28801917 	ldw	r2,100(r5)
    ef94:	defff604 	addi	sp,sp,-40
    ef98:	dd400515 	stw	r21,20(sp)
    ef9c:	dfc00915 	stw	ra,36(sp)
    efa0:	df000815 	stw	fp,32(sp)
    efa4:	ddc00715 	stw	r23,28(sp)
    efa8:	dd800615 	stw	r22,24(sp)
    efac:	dd000415 	stw	r20,16(sp)
    efb0:	dcc00315 	stw	r19,12(sp)
    efb4:	dc800215 	stw	r18,8(sp)
    efb8:	dc400115 	stw	r17,4(sp)
    efbc:	dc000015 	stw	r16,0(sp)
    efc0:	1088000c 	andi	r2,r2,8192
    efc4:	302b883a 	mov	r21,r6
    efc8:	10002e26 	beq	r2,zero,f084 <__sprint_r.part.0+0xf4>
    efcc:	30800217 	ldw	r2,8(r6)
    efd0:	35800017 	ldw	r22,0(r6)
    efd4:	10002926 	beq	r2,zero,f07c <__sprint_r.part.0+0xec>
    efd8:	2827883a 	mov	r19,r5
    efdc:	2029883a 	mov	r20,r4
    efe0:	b5c00104 	addi	r23,r22,4
    efe4:	04bfffc4 	movi	r18,-1
    efe8:	bc400017 	ldw	r17,0(r23)
    efec:	b4000017 	ldw	r16,0(r22)
    eff0:	0039883a 	mov	fp,zero
    eff4:	8822d0ba 	srli	r17,r17,2
    eff8:	8800031e 	bne	r17,zero,f008 <__sprint_r.part.0+0x78>
    effc:	00001806 	br	f060 <__sprint_r.part.0+0xd0>
    f000:	84000104 	addi	r16,r16,4
    f004:	8f001526 	beq	r17,fp,f05c <__sprint_r.part.0+0xcc>
    f008:	81400017 	ldw	r5,0(r16)
    f00c:	980d883a 	mov	r6,r19
    f010:	a009883a 	mov	r4,r20
    f014:	0010a800 	call	10a80 <_fputwc_r>
    f018:	e7000044 	addi	fp,fp,1
    f01c:	14bff81e 	bne	r2,r18,f000 <__alt_data_end+0xfffde2c0>
    f020:	9005883a 	mov	r2,r18
    f024:	a8000215 	stw	zero,8(r21)
    f028:	a8000115 	stw	zero,4(r21)
    f02c:	dfc00917 	ldw	ra,36(sp)
    f030:	df000817 	ldw	fp,32(sp)
    f034:	ddc00717 	ldw	r23,28(sp)
    f038:	dd800617 	ldw	r22,24(sp)
    f03c:	dd400517 	ldw	r21,20(sp)
    f040:	dd000417 	ldw	r20,16(sp)
    f044:	dcc00317 	ldw	r19,12(sp)
    f048:	dc800217 	ldw	r18,8(sp)
    f04c:	dc400117 	ldw	r17,4(sp)
    f050:	dc000017 	ldw	r16,0(sp)
    f054:	dec00a04 	addi	sp,sp,40
    f058:	f800283a 	ret
    f05c:	a8800217 	ldw	r2,8(r21)
    f060:	8c63883a 	add	r17,r17,r17
    f064:	8c63883a 	add	r17,r17,r17
    f068:	1445c83a 	sub	r2,r2,r17
    f06c:	a8800215 	stw	r2,8(r21)
    f070:	b5800204 	addi	r22,r22,8
    f074:	bdc00204 	addi	r23,r23,8
    f078:	103fdb1e 	bne	r2,zero,efe8 <__alt_data_end+0xfffde2a8>
    f07c:	0005883a 	mov	r2,zero
    f080:	003fe806 	br	f024 <__alt_data_end+0xfffde2e4>
    f084:	000c1640 	call	c164 <__sfvwrite_r>
    f088:	003fe606 	br	f024 <__alt_data_end+0xfffde2e4>

0000f08c <__sprint_r>:
    f08c:	30c00217 	ldw	r3,8(r6)
    f090:	18000126 	beq	r3,zero,f098 <__sprint_r+0xc>
    f094:	000ef901 	jmpi	ef90 <__sprint_r.part.0>
    f098:	30000115 	stw	zero,4(r6)
    f09c:	0005883a 	mov	r2,zero
    f0a0:	f800283a 	ret

0000f0a4 <___vfiprintf_internal_r>:
    f0a4:	deffca04 	addi	sp,sp,-216
    f0a8:	dd403115 	stw	r21,196(sp)
    f0ac:	dfc03515 	stw	ra,212(sp)
    f0b0:	df003415 	stw	fp,208(sp)
    f0b4:	ddc03315 	stw	r23,204(sp)
    f0b8:	dd803215 	stw	r22,200(sp)
    f0bc:	dd003015 	stw	r20,192(sp)
    f0c0:	dcc02f15 	stw	r19,188(sp)
    f0c4:	dc802e15 	stw	r18,184(sp)
    f0c8:	dc402d15 	stw	r17,180(sp)
    f0cc:	dc002c15 	stw	r16,176(sp)
    f0d0:	d9002115 	stw	r4,132(sp)
    f0d4:	d9402015 	stw	r5,128(sp)
    f0d8:	d9c02215 	stw	r7,136(sp)
    f0dc:	302b883a 	mov	r21,r6
    f0e0:	20000226 	beq	r4,zero,f0ec <___vfiprintf_internal_r+0x48>
    f0e4:	20800e17 	ldw	r2,56(r4)
    f0e8:	1000cf26 	beq	r2,zero,f428 <___vfiprintf_internal_r+0x384>
    f0ec:	d8c02017 	ldw	r3,128(sp)
    f0f0:	1880030b 	ldhu	r2,12(r3)
    f0f4:	10c8000c 	andi	r3,r2,8192
    f0f8:	1800071e 	bne	r3,zero,f118 <___vfiprintf_internal_r+0x74>
    f0fc:	d9402017 	ldw	r5,128(sp)
    f100:	00f7ffc4 	movi	r3,-8193
    f104:	10880014 	ori	r2,r2,8192
    f108:	29001917 	ldw	r4,100(r5)
    f10c:	2880030d 	sth	r2,12(r5)
    f110:	20c6703a 	and	r3,r4,r3
    f114:	28c01915 	stw	r3,100(r5)
    f118:	10c0020c 	andi	r3,r2,8
    f11c:	1800a526 	beq	r3,zero,f3b4 <___vfiprintf_internal_r+0x310>
    f120:	d9002017 	ldw	r4,128(sp)
    f124:	20c00417 	ldw	r3,16(r4)
    f128:	1800a226 	beq	r3,zero,f3b4 <___vfiprintf_internal_r+0x310>
    f12c:	1080068c 	andi	r2,r2,26
    f130:	00c00284 	movi	r3,10
    f134:	10c0a826 	beq	r2,r3,f3d8 <___vfiprintf_internal_r+0x334>
    f138:	d9001a04 	addi	r4,sp,104
    f13c:	d94019c4 	addi	r5,sp,103
    f140:	048000b4 	movhi	r18,2
    f144:	2145c83a 	sub	r2,r4,r5
    f148:	94b28e04 	addi	r18,r18,-13768
    f14c:	d9001e15 	stw	r4,120(sp)
    f150:	d9401f15 	stw	r5,124(sp)
    f154:	dec01a15 	stw	sp,104(sp)
    f158:	d8001c15 	stw	zero,112(sp)
    f15c:	d8001b15 	stw	zero,108(sp)
    f160:	d811883a 	mov	r8,sp
    f164:	d8002615 	stw	zero,152(sp)
    f168:	d8002415 	stw	zero,144(sp)
    f16c:	d8802815 	stw	r2,160(sp)
    f170:	a82d883a 	mov	r22,r21
    f174:	b0800007 	ldb	r2,0(r22)
    f178:	10040d26 	beq	r2,zero,101b0 <___vfiprintf_internal_r+0x110c>
    f17c:	00c00944 	movi	r3,37
    f180:	b029883a 	mov	r20,r22
    f184:	10c0021e 	bne	r2,r3,f190 <___vfiprintf_internal_r+0xec>
    f188:	00001606 	br	f1e4 <___vfiprintf_internal_r+0x140>
    f18c:	10c00326 	beq	r2,r3,f19c <___vfiprintf_internal_r+0xf8>
    f190:	a5000044 	addi	r20,r20,1
    f194:	a0800007 	ldb	r2,0(r20)
    f198:	103ffc1e 	bne	r2,zero,f18c <__alt_data_end+0xfffde44c>
    f19c:	a5a1c83a 	sub	r16,r20,r22
    f1a0:	80001026 	beq	r16,zero,f1e4 <___vfiprintf_internal_r+0x140>
    f1a4:	d8c01c17 	ldw	r3,112(sp)
    f1a8:	d8801b17 	ldw	r2,108(sp)
    f1ac:	45800015 	stw	r22,0(r8)
    f1b0:	80c7883a 	add	r3,r16,r3
    f1b4:	10800044 	addi	r2,r2,1
    f1b8:	44000115 	stw	r16,4(r8)
    f1bc:	d8c01c15 	stw	r3,112(sp)
    f1c0:	d8801b15 	stw	r2,108(sp)
    f1c4:	010001c4 	movi	r4,7
    f1c8:	2080750e 	bge	r4,r2,f3a0 <___vfiprintf_internal_r+0x2fc>
    f1cc:	1803951e 	bne	r3,zero,10024 <___vfiprintf_internal_r+0xf80>
    f1d0:	d8c02417 	ldw	r3,144(sp)
    f1d4:	d8001b15 	stw	zero,108(sp)
    f1d8:	d811883a 	mov	r8,sp
    f1dc:	1c07883a 	add	r3,r3,r16
    f1e0:	d8c02415 	stw	r3,144(sp)
    f1e4:	a0800007 	ldb	r2,0(r20)
    f1e8:	1002e026 	beq	r2,zero,fd6c <___vfiprintf_internal_r+0xcc8>
    f1ec:	a5800044 	addi	r22,r20,1
    f1f0:	a0c00047 	ldb	r3,1(r20)
    f1f4:	d8001d85 	stb	zero,118(sp)
    f1f8:	0027883a 	mov	r19,zero
    f1fc:	d8002305 	stb	zero,140(sp)
    f200:	043fffc4 	movi	r16,-1
    f204:	d8002515 	stw	zero,148(sp)
    f208:	0023883a 	mov	r17,zero
    f20c:	05001604 	movi	r20,88
    f210:	05400244 	movi	r21,9
    f214:	402f883a 	mov	r23,r8
    f218:	b5800044 	addi	r22,r22,1
    f21c:	18bff804 	addi	r2,r3,-32
    f220:	a0827736 	bltu	r20,r2,fc00 <___vfiprintf_internal_r+0xb5c>
    f224:	100490ba 	slli	r2,r2,2
    f228:	01000074 	movhi	r4,1
    f22c:	213c8f04 	addi	r4,r4,-3524
    f230:	1105883a 	add	r2,r2,r4
    f234:	10800017 	ldw	r2,0(r2)
    f238:	1000683a 	jmp	r2
    f23c:	0000f900 	call	f90 <calc_angle+0xdc>
    f240:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f244:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f248:	0000f91c 	xori	zero,zero,996
    f24c:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f250:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f254:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f258:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f25c:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f260:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f264:	0000fb24 	muli	zero,zero,1004
    f268:	0000fb48 	cmpgei	zero,zero,1005
    f26c:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f270:	0000f440 	call	f44 <calc_angle+0x90>
    f274:	0000fb5c 	xori	zero,zero,1005
    f278:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f27c:	0000f928 	cmpgeui	zero,zero,996
    f280:	0000f934 	movhi	zero,996
    f284:	0000f934 	movhi	zero,996
    f288:	0000f934 	movhi	zero,996
    f28c:	0000f934 	movhi	zero,996
    f290:	0000f934 	movhi	zero,996
    f294:	0000f934 	movhi	zero,996
    f298:	0000f934 	movhi	zero,996
    f29c:	0000f934 	movhi	zero,996
    f2a0:	0000f934 	movhi	zero,996
    f2a4:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2a8:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2ac:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2b0:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2b4:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2b8:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2bc:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2c0:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2c4:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2c8:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2cc:	0000f974 	movhi	zero,997
    f2d0:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2d4:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2d8:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2dc:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2e0:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2e4:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2e8:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2ec:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2f0:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2f4:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f2f8:	0000f9b0 	cmpltui	zero,zero,998
    f2fc:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f300:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f304:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f308:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f30c:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f310:	0000fa0c 	andi	zero,zero,1000
    f314:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f318:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f31c:	0000fa80 	call	fa8 <calc_angle+0xf4>
    f320:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f324:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f328:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f32c:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f330:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f334:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f338:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f33c:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f340:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f344:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f348:	0000f828 	cmpgeui	zero,zero,992
    f34c:	0000f858 	cmpnei	zero,zero,993
    f350:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f354:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f358:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f35c:	0000fba8 	cmpgeui	zero,zero,1006
    f360:	0000f858 	cmpnei	zero,zero,993
    f364:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f368:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f36c:	0000f700 	call	f70 <calc_angle+0xbc>
    f370:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f374:	0000f714 	movui	zero,988
    f378:	0000f74c 	andi	zero,zero,989
    f37c:	0000f44c 	andi	zero,zero,977
    f380:	0000f6f4 	movhi	zero,987
    f384:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f388:	0000fac0 	call	fac <calc_angle+0xf8>
    f38c:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f390:	0000fb0c 	andi	zero,zero,1004
    f394:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f398:	0000fc00 	call	fc0 <calc_angle+0x10c>
    f39c:	0000f7d0 	cmplti	zero,zero,991
    f3a0:	42000204 	addi	r8,r8,8
    f3a4:	d8c02417 	ldw	r3,144(sp)
    f3a8:	1c07883a 	add	r3,r3,r16
    f3ac:	d8c02415 	stw	r3,144(sp)
    f3b0:	003f8c06 	br	f1e4 <__alt_data_end+0xfffde4a4>
    f3b4:	d9402017 	ldw	r5,128(sp)
    f3b8:	d9002117 	ldw	r4,132(sp)
    f3bc:	0009cd40 	call	9cd4 <__swsetup_r>
    f3c0:	1003c11e 	bne	r2,zero,102c8 <___vfiprintf_internal_r+0x1224>
    f3c4:	d9402017 	ldw	r5,128(sp)
    f3c8:	00c00284 	movi	r3,10
    f3cc:	2880030b 	ldhu	r2,12(r5)
    f3d0:	1080068c 	andi	r2,r2,26
    f3d4:	10ff581e 	bne	r2,r3,f138 <__alt_data_end+0xfffde3f8>
    f3d8:	d8c02017 	ldw	r3,128(sp)
    f3dc:	1880038f 	ldh	r2,14(r3)
    f3e0:	103f5516 	blt	r2,zero,f138 <__alt_data_end+0xfffde3f8>
    f3e4:	d9c02217 	ldw	r7,136(sp)
    f3e8:	d9002117 	ldw	r4,132(sp)
    f3ec:	a80d883a 	mov	r6,r21
    f3f0:	180b883a 	mov	r5,r3
    f3f4:	00105cc0 	call	105cc <__sbprintf>
    f3f8:	dfc03517 	ldw	ra,212(sp)
    f3fc:	df003417 	ldw	fp,208(sp)
    f400:	ddc03317 	ldw	r23,204(sp)
    f404:	dd803217 	ldw	r22,200(sp)
    f408:	dd403117 	ldw	r21,196(sp)
    f40c:	dd003017 	ldw	r20,192(sp)
    f410:	dcc02f17 	ldw	r19,188(sp)
    f414:	dc802e17 	ldw	r18,184(sp)
    f418:	dc402d17 	ldw	r17,180(sp)
    f41c:	dc002c17 	ldw	r16,176(sp)
    f420:	dec03604 	addi	sp,sp,216
    f424:	f800283a 	ret
    f428:	000bce00 	call	bce0 <__sinit>
    f42c:	003f2f06 	br	f0ec <__alt_data_end+0xfffde3ac>
    f430:	d8c02517 	ldw	r3,148(sp)
    f434:	d8802215 	stw	r2,136(sp)
    f438:	00c7c83a 	sub	r3,zero,r3
    f43c:	d8c02515 	stw	r3,148(sp)
    f440:	8c400114 	ori	r17,r17,4
    f444:	b0c00007 	ldb	r3,0(r22)
    f448:	003f7306 	br	f218 <__alt_data_end+0xfffde4d8>
    f44c:	00800c04 	movi	r2,48
    f450:	d9402217 	ldw	r5,136(sp)
    f454:	d8801d05 	stb	r2,116(sp)
    f458:	00801e04 	movi	r2,120
    f45c:	d8801d45 	stb	r2,117(sp)
    f460:	d8001d85 	stb	zero,118(sp)
    f464:	b811883a 	mov	r8,r23
    f468:	28c00104 	addi	r3,r5,4
    f46c:	2cc00017 	ldw	r19,0(r5)
    f470:	0029883a 	mov	r20,zero
    f474:	88800094 	ori	r2,r17,2
    f478:	80032516 	blt	r16,zero,10110 <___vfiprintf_internal_r+0x106c>
    f47c:	00bfdfc4 	movi	r2,-129
    f480:	88a2703a 	and	r17,r17,r2
    f484:	d8c02215 	stw	r3,136(sp)
    f488:	8c400094 	ori	r17,r17,2
    f48c:	98032a1e 	bne	r19,zero,10138 <___vfiprintf_internal_r+0x1094>
    f490:	008000b4 	movhi	r2,2
    f494:	10b22e04 	addi	r2,r2,-14152
    f498:	d8802615 	stw	r2,152(sp)
    f49c:	002b883a 	mov	r21,zero
    f4a0:	8001741e 	bne	r16,zero,fa74 <___vfiprintf_internal_r+0x9d0>
    f4a4:	0021883a 	mov	r16,zero
    f4a8:	0029883a 	mov	r20,zero
    f4ac:	ddc01a04 	addi	r23,sp,104
    f4b0:	8027883a 	mov	r19,r16
    f4b4:	8500010e 	bge	r16,r20,f4bc <___vfiprintf_internal_r+0x418>
    f4b8:	a027883a 	mov	r19,r20
    f4bc:	ad403fcc 	andi	r21,r21,255
    f4c0:	ad40201c 	xori	r21,r21,128
    f4c4:	ad7fe004 	addi	r21,r21,-128
    f4c8:	a8000126 	beq	r21,zero,f4d0 <___vfiprintf_internal_r+0x42c>
    f4cc:	9cc00044 	addi	r19,r19,1
    f4d0:	89c0008c 	andi	r7,r17,2
    f4d4:	38000126 	beq	r7,zero,f4dc <___vfiprintf_internal_r+0x438>
    f4d8:	9cc00084 	addi	r19,r19,2
    f4dc:	88c0210c 	andi	r3,r17,132
    f4e0:	1801dd1e 	bne	r3,zero,fc58 <___vfiprintf_internal_r+0xbb4>
    f4e4:	d9402517 	ldw	r5,148(sp)
    f4e8:	2cebc83a 	sub	r21,r5,r19
    f4ec:	0541da0e 	bge	zero,r21,fc58 <___vfiprintf_internal_r+0xbb4>
    f4f0:	07000404 	movi	fp,16
    f4f4:	d8801c17 	ldw	r2,112(sp)
    f4f8:	e543be0e 	bge	fp,r21,103f4 <___vfiprintf_internal_r+0x1350>
    f4fc:	014000b4 	movhi	r5,2
    f500:	29729204 	addi	r5,r5,-13752
    f504:	dc002715 	stw	r16,156(sp)
    f508:	d9801b17 	ldw	r6,108(sp)
    f50c:	a821883a 	mov	r16,r21
    f510:	d9402315 	stw	r5,140(sp)
    f514:	028001c4 	movi	r10,7
    f518:	d9c02915 	stw	r7,164(sp)
    f51c:	182b883a 	mov	r21,r3
    f520:	00000506 	br	f538 <___vfiprintf_internal_r+0x494>
    f524:	31000084 	addi	r4,r6,2
    f528:	42000204 	addi	r8,r8,8
    f52c:	180d883a 	mov	r6,r3
    f530:	843ffc04 	addi	r16,r16,-16
    f534:	e4000f0e 	bge	fp,r16,f574 <___vfiprintf_internal_r+0x4d0>
    f538:	010000b4 	movhi	r4,2
    f53c:	10800404 	addi	r2,r2,16
    f540:	30c00044 	addi	r3,r6,1
    f544:	21329204 	addi	r4,r4,-13752
    f548:	41000015 	stw	r4,0(r8)
    f54c:	47000115 	stw	fp,4(r8)
    f550:	d8801c15 	stw	r2,112(sp)
    f554:	d8c01b15 	stw	r3,108(sp)
    f558:	50fff20e 	bge	r10,r3,f524 <__alt_data_end+0xfffde7e4>
    f55c:	1001b21e 	bne	r2,zero,fc28 <___vfiprintf_internal_r+0xb84>
    f560:	843ffc04 	addi	r16,r16,-16
    f564:	000d883a 	mov	r6,zero
    f568:	01000044 	movi	r4,1
    f56c:	d811883a 	mov	r8,sp
    f570:	e43ff116 	blt	fp,r16,f538 <__alt_data_end+0xfffde7f8>
    f574:	a807883a 	mov	r3,r21
    f578:	d9c02917 	ldw	r7,164(sp)
    f57c:	802b883a 	mov	r21,r16
    f580:	dc002717 	ldw	r16,156(sp)
    f584:	d9402317 	ldw	r5,140(sp)
    f588:	a885883a 	add	r2,r21,r2
    f58c:	45400115 	stw	r21,4(r8)
    f590:	41400015 	stw	r5,0(r8)
    f594:	d8801c15 	stw	r2,112(sp)
    f598:	d9001b15 	stw	r4,108(sp)
    f59c:	014001c4 	movi	r5,7
    f5a0:	29026216 	blt	r5,r4,ff2c <___vfiprintf_internal_r+0xe88>
    f5a4:	d9801d87 	ldb	r6,118(sp)
    f5a8:	42000204 	addi	r8,r8,8
    f5ac:	21400044 	addi	r5,r4,1
    f5b0:	3001ae1e 	bne	r6,zero,fc6c <___vfiprintf_internal_r+0xbc8>
    f5b4:	3801bb26 	beq	r7,zero,fca4 <___vfiprintf_internal_r+0xc00>
    f5b8:	d9001d04 	addi	r4,sp,116
    f5bc:	10800084 	addi	r2,r2,2
    f5c0:	41000015 	stw	r4,0(r8)
    f5c4:	01000084 	movi	r4,2
    f5c8:	41000115 	stw	r4,4(r8)
    f5cc:	d8801c15 	stw	r2,112(sp)
    f5d0:	d9401b15 	stw	r5,108(sp)
    f5d4:	010001c4 	movi	r4,7
    f5d8:	2142680e 	bge	r4,r5,ff7c <___vfiprintf_internal_r+0xed8>
    f5dc:	1002b11e 	bne	r2,zero,100a4 <___vfiprintf_internal_r+0x1000>
    f5e0:	01802004 	movi	r6,128
    f5e4:	01400044 	movi	r5,1
    f5e8:	0009883a 	mov	r4,zero
    f5ec:	d811883a 	mov	r8,sp
    f5f0:	1981ae1e 	bne	r3,r6,fcac <___vfiprintf_internal_r+0xc08>
    f5f4:	d8c02517 	ldw	r3,148(sp)
    f5f8:	1cf9c83a 	sub	fp,r3,r19
    f5fc:	0701ab0e 	bge	zero,fp,fcac <___vfiprintf_internal_r+0xc08>
    f600:	05400404 	movi	r21,16
    f604:	af03a90e 	bge	r21,fp,104ac <___vfiprintf_internal_r+0x1408>
    f608:	014000b4 	movhi	r5,2
    f60c:	29728e04 	addi	r5,r5,-13768
    f610:	d9402315 	stw	r5,140(sp)
    f614:	01c001c4 	movi	r7,7
    f618:	00000506 	br	f630 <___vfiprintf_internal_r+0x58c>
    f61c:	21800084 	addi	r6,r4,2
    f620:	42000204 	addi	r8,r8,8
    f624:	1809883a 	mov	r4,r3
    f628:	e73ffc04 	addi	fp,fp,-16
    f62c:	af000d0e 	bge	r21,fp,f664 <___vfiprintf_internal_r+0x5c0>
    f630:	10800404 	addi	r2,r2,16
    f634:	20c00044 	addi	r3,r4,1
    f638:	44800015 	stw	r18,0(r8)
    f63c:	45400115 	stw	r21,4(r8)
    f640:	d8801c15 	stw	r2,112(sp)
    f644:	d8c01b15 	stw	r3,108(sp)
    f648:	38fff40e 	bge	r7,r3,f61c <__alt_data_end+0xfffde8dc>
    f64c:	10022b1e 	bne	r2,zero,fefc <___vfiprintf_internal_r+0xe58>
    f650:	e73ffc04 	addi	fp,fp,-16
    f654:	01800044 	movi	r6,1
    f658:	0009883a 	mov	r4,zero
    f65c:	d811883a 	mov	r8,sp
    f660:	af3ff316 	blt	r21,fp,f630 <__alt_data_end+0xfffde8f0>
    f664:	d8c02317 	ldw	r3,140(sp)
    f668:	1705883a 	add	r2,r2,fp
    f66c:	47000115 	stw	fp,4(r8)
    f670:	40c00015 	stw	r3,0(r8)
    f674:	d8801c15 	stw	r2,112(sp)
    f678:	d9801b15 	stw	r6,108(sp)
    f67c:	00c001c4 	movi	r3,7
    f680:	19829416 	blt	r3,r6,100d4 <___vfiprintf_internal_r+0x1030>
    f684:	8521c83a 	sub	r16,r16,r20
    f688:	42000204 	addi	r8,r8,8
    f68c:	31400044 	addi	r5,r6,1
    f690:	3009883a 	mov	r4,r6
    f694:	04018716 	blt	zero,r16,fcb4 <___vfiprintf_internal_r+0xc10>
    f698:	a085883a 	add	r2,r20,r2
    f69c:	45c00015 	stw	r23,0(r8)
    f6a0:	45000115 	stw	r20,4(r8)
    f6a4:	d8801c15 	stw	r2,112(sp)
    f6a8:	d9401b15 	stw	r5,108(sp)
    f6ac:	00c001c4 	movi	r3,7
    f6b0:	1941c20e 	bge	r3,r5,fdbc <___vfiprintf_internal_r+0xd18>
    f6b4:	1002531e 	bne	r2,zero,10004 <___vfiprintf_internal_r+0xf60>
    f6b8:	d8001b15 	stw	zero,108(sp)
    f6bc:	8c40010c 	andi	r17,r17,4
    f6c0:	88023226 	beq	r17,zero,ff8c <___vfiprintf_internal_r+0xee8>
    f6c4:	d9002517 	ldw	r4,148(sp)
    f6c8:	24e3c83a 	sub	r17,r4,r19
    f6cc:	04432916 	blt	zero,r17,10374 <___vfiprintf_internal_r+0x12d0>
    f6d0:	d8802517 	ldw	r2,148(sp)
    f6d4:	14c0010e 	bge	r2,r19,f6dc <___vfiprintf_internal_r+0x638>
    f6d8:	9805883a 	mov	r2,r19
    f6dc:	d8c02417 	ldw	r3,144(sp)
    f6e0:	1887883a 	add	r3,r3,r2
    f6e4:	d8c02415 	stw	r3,144(sp)
    f6e8:	d8001b15 	stw	zero,108(sp)
    f6ec:	d811883a 	mov	r8,sp
    f6f0:	003ea006 	br	f174 <__alt_data_end+0xfffde434>
    f6f4:	8c400814 	ori	r17,r17,32
    f6f8:	b0c00007 	ldb	r3,0(r22)
    f6fc:	003ec606 	br	f218 <__alt_data_end+0xfffde4d8>
    f700:	b0c00007 	ldb	r3,0(r22)
    f704:	00801b04 	movi	r2,108
    f708:	18832026 	beq	r3,r2,1038c <___vfiprintf_internal_r+0x12e8>
    f70c:	8c400414 	ori	r17,r17,16
    f710:	003ec106 	br	f218 <__alt_data_end+0xfffde4d8>
    f714:	9cc03fcc 	andi	r19,r19,255
    f718:	b811883a 	mov	r8,r23
    f71c:	9803981e 	bne	r19,zero,10580 <___vfiprintf_internal_r+0x14dc>
    f720:	8880080c 	andi	r2,r17,32
    f724:	1002be26 	beq	r2,zero,10220 <___vfiprintf_internal_r+0x117c>
    f728:	d9002217 	ldw	r4,136(sp)
    f72c:	d9402417 	ldw	r5,144(sp)
    f730:	20800017 	ldw	r2,0(r4)
    f734:	2807d7fa 	srai	r3,r5,31
    f738:	21000104 	addi	r4,r4,4
    f73c:	d9002215 	stw	r4,136(sp)
    f740:	11400015 	stw	r5,0(r2)
    f744:	10c00115 	stw	r3,4(r2)
    f748:	003e8a06 	br	f174 <__alt_data_end+0xfffde434>
    f74c:	9cc03fcc 	andi	r19,r19,255
    f750:	b811883a 	mov	r8,r23
    f754:	9803871e 	bne	r19,zero,10574 <___vfiprintf_internal_r+0x14d0>
    f758:	8880080c 	andi	r2,r17,32
    f75c:	10009a26 	beq	r2,zero,f9c8 <___vfiprintf_internal_r+0x924>
    f760:	d9002217 	ldw	r4,136(sp)
    f764:	d8001d85 	stb	zero,118(sp)
    f768:	20800204 	addi	r2,r4,8
    f76c:	24c00017 	ldw	r19,0(r4)
    f770:	25000117 	ldw	r20,4(r4)
    f774:	8002a416 	blt	r16,zero,10208 <___vfiprintf_internal_r+0x1164>
    f778:	013fdfc4 	movi	r4,-129
    f77c:	9d06b03a 	or	r3,r19,r20
    f780:	d8802215 	stw	r2,136(sp)
    f784:	8922703a 	and	r17,r17,r4
    f788:	18009b26 	beq	r3,zero,f9f8 <___vfiprintf_internal_r+0x954>
    f78c:	002b883a 	mov	r21,zero
    f790:	ddc01a04 	addi	r23,sp,104
    f794:	9806d0fa 	srli	r3,r19,3
    f798:	a008977a 	slli	r4,r20,29
    f79c:	a028d0fa 	srli	r20,r20,3
    f7a0:	9cc001cc 	andi	r19,r19,7
    f7a4:	98800c04 	addi	r2,r19,48
    f7a8:	bdffffc4 	addi	r23,r23,-1
    f7ac:	20e6b03a 	or	r19,r4,r3
    f7b0:	b8800005 	stb	r2,0(r23)
    f7b4:	9d06b03a 	or	r3,r19,r20
    f7b8:	183ff61e 	bne	r3,zero,f794 <__alt_data_end+0xfffdea54>
    f7bc:	88c0004c 	andi	r3,r17,1
    f7c0:	18021f1e 	bne	r3,zero,10040 <___vfiprintf_internal_r+0xf9c>
    f7c4:	d9401e17 	ldw	r5,120(sp)
    f7c8:	2de9c83a 	sub	r20,r5,r23
    f7cc:	003f3806 	br	f4b0 <__alt_data_end+0xfffde770>
    f7d0:	9cc03fcc 	andi	r19,r19,255
    f7d4:	b811883a 	mov	r8,r23
    f7d8:	98034f1e 	bne	r19,zero,10518 <___vfiprintf_internal_r+0x1474>
    f7dc:	008000b4 	movhi	r2,2
    f7e0:	10b22e04 	addi	r2,r2,-14152
    f7e4:	d8802615 	stw	r2,152(sp)
    f7e8:	8880080c 	andi	r2,r17,32
    f7ec:	1000ac26 	beq	r2,zero,faa0 <___vfiprintf_internal_r+0x9fc>
    f7f0:	d9002217 	ldw	r4,136(sp)
    f7f4:	24c00017 	ldw	r19,0(r4)
    f7f8:	25000117 	ldw	r20,4(r4)
    f7fc:	21000204 	addi	r4,r4,8
    f800:	d9002215 	stw	r4,136(sp)
    f804:	8880004c 	andi	r2,r17,1
    f808:	1001e726 	beq	r2,zero,ffa8 <___vfiprintf_internal_r+0xf04>
    f80c:	9d04b03a 	or	r2,r19,r20
    f810:	10025c1e 	bne	r2,zero,10184 <___vfiprintf_internal_r+0x10e0>
    f814:	d8001d85 	stb	zero,118(sp)
    f818:	80024416 	blt	r16,zero,1012c <___vfiprintf_internal_r+0x1088>
    f81c:	00bfdfc4 	movi	r2,-129
    f820:	88a2703a 	and	r17,r17,r2
    f824:	003f1d06 	br	f49c <__alt_data_end+0xfffde75c>
    f828:	d8c02217 	ldw	r3,136(sp)
    f82c:	04c00044 	movi	r19,1
    f830:	b811883a 	mov	r8,r23
    f834:	18800017 	ldw	r2,0(r3)
    f838:	18c00104 	addi	r3,r3,4
    f83c:	d8001d85 	stb	zero,118(sp)
    f840:	d8801005 	stb	r2,64(sp)
    f844:	d8c02215 	stw	r3,136(sp)
    f848:	9829883a 	mov	r20,r19
    f84c:	ddc01004 	addi	r23,sp,64
    f850:	0021883a 	mov	r16,zero
    f854:	003f1e06 	br	f4d0 <__alt_data_end+0xfffde790>
    f858:	9cc03fcc 	andi	r19,r19,255
    f85c:	b811883a 	mov	r8,r23
    f860:	9803331e 	bne	r19,zero,10530 <___vfiprintf_internal_r+0x148c>
    f864:	8880080c 	andi	r2,r17,32
    f868:	10004826 	beq	r2,zero,f98c <___vfiprintf_internal_r+0x8e8>
    f86c:	d9002217 	ldw	r4,136(sp)
    f870:	20800117 	ldw	r2,4(r4)
    f874:	24c00017 	ldw	r19,0(r4)
    f878:	21000204 	addi	r4,r4,8
    f87c:	d9002215 	stw	r4,136(sp)
    f880:	1029883a 	mov	r20,r2
    f884:	10024c16 	blt	r2,zero,101b8 <___vfiprintf_internal_r+0x1114>
    f888:	dd401d83 	ldbu	r21,118(sp)
    f88c:	80007116 	blt	r16,zero,fa54 <___vfiprintf_internal_r+0x9b0>
    f890:	00ffdfc4 	movi	r3,-129
    f894:	9d04b03a 	or	r2,r19,r20
    f898:	88e2703a 	and	r17,r17,r3
    f89c:	1000d126 	beq	r2,zero,fbe4 <___vfiprintf_internal_r+0xb40>
    f8a0:	a0023526 	beq	r20,zero,10178 <___vfiprintf_internal_r+0x10d4>
    f8a4:	ddc01a04 	addi	r23,sp,104
    f8a8:	4039883a 	mov	fp,r8
    f8ac:	9809883a 	mov	r4,r19
    f8b0:	a00b883a 	mov	r5,r20
    f8b4:	01800284 	movi	r6,10
    f8b8:	000f883a 	mov	r7,zero
    f8bc:	00115d00 	call	115d0 <__umoddi3>
    f8c0:	10800c04 	addi	r2,r2,48
    f8c4:	bdffffc4 	addi	r23,r23,-1
    f8c8:	9809883a 	mov	r4,r19
    f8cc:	a00b883a 	mov	r5,r20
    f8d0:	b8800005 	stb	r2,0(r23)
    f8d4:	01800284 	movi	r6,10
    f8d8:	000f883a 	mov	r7,zero
    f8dc:	0010fd40 	call	10fd4 <__udivdi3>
    f8e0:	1027883a 	mov	r19,r2
    f8e4:	10c4b03a 	or	r2,r2,r3
    f8e8:	1829883a 	mov	r20,r3
    f8ec:	103fef1e 	bne	r2,zero,f8ac <__alt_data_end+0xfffdeb6c>
    f8f0:	d9001e17 	ldw	r4,120(sp)
    f8f4:	e011883a 	mov	r8,fp
    f8f8:	25e9c83a 	sub	r20,r4,r23
    f8fc:	003eec06 	br	f4b0 <__alt_data_end+0xfffde770>
    f900:	d8802307 	ldb	r2,140(sp)
    f904:	1002361e 	bne	r2,zero,101e0 <___vfiprintf_internal_r+0x113c>
    f908:	00c00804 	movi	r3,32
    f90c:	d8c02305 	stb	r3,140(sp)
    f910:	04c00044 	movi	r19,1
    f914:	b0c00007 	ldb	r3,0(r22)
    f918:	003e3f06 	br	f218 <__alt_data_end+0xfffde4d8>
    f91c:	8c400054 	ori	r17,r17,1
    f920:	b0c00007 	ldb	r3,0(r22)
    f924:	003e3c06 	br	f218 <__alt_data_end+0xfffde4d8>
    f928:	8c402014 	ori	r17,r17,128
    f92c:	b0c00007 	ldb	r3,0(r22)
    f930:	003e3906 	br	f218 <__alt_data_end+0xfffde4d8>
    f934:	dc002715 	stw	r16,156(sp)
    f938:	d8002515 	stw	zero,148(sp)
    f93c:	1f3ff404 	addi	fp,r3,-48
    f940:	0009883a 	mov	r4,zero
    f944:	b021883a 	mov	r16,r22
    f948:	01400284 	movi	r5,10
    f94c:	0004f140 	call	4f14 <__mulsi3>
    f950:	80c00007 	ldb	r3,0(r16)
    f954:	e089883a 	add	r4,fp,r2
    f958:	b5800044 	addi	r22,r22,1
    f95c:	1f3ff404 	addi	fp,r3,-48
    f960:	b021883a 	mov	r16,r22
    f964:	af3ff82e 	bgeu	r21,fp,f948 <__alt_data_end+0xfffdec08>
    f968:	d9002515 	stw	r4,148(sp)
    f96c:	dc002717 	ldw	r16,156(sp)
    f970:	003e2a06 	br	f21c <__alt_data_end+0xfffde4dc>
    f974:	9cc03fcc 	andi	r19,r19,255
    f978:	b811883a 	mov	r8,r23
    f97c:	9802e91e 	bne	r19,zero,10524 <___vfiprintf_internal_r+0x1480>
    f980:	8c400414 	ori	r17,r17,16
    f984:	8880080c 	andi	r2,r17,32
    f988:	103fb81e 	bne	r2,zero,f86c <__alt_data_end+0xfffdeb2c>
    f98c:	8880040c 	andi	r2,r17,16
    f990:	10022e26 	beq	r2,zero,1024c <___vfiprintf_internal_r+0x11a8>
    f994:	d9402217 	ldw	r5,136(sp)
    f998:	2cc00017 	ldw	r19,0(r5)
    f99c:	29400104 	addi	r5,r5,4
    f9a0:	d9402215 	stw	r5,136(sp)
    f9a4:	9829d7fa 	srai	r20,r19,31
    f9a8:	a005883a 	mov	r2,r20
    f9ac:	003fb506 	br	f884 <__alt_data_end+0xfffdeb44>
    f9b0:	9cc03fcc 	andi	r19,r19,255
    f9b4:	b811883a 	mov	r8,r23
    f9b8:	9802fa1e 	bne	r19,zero,105a4 <___vfiprintf_internal_r+0x1500>
    f9bc:	8c400414 	ori	r17,r17,16
    f9c0:	8880080c 	andi	r2,r17,32
    f9c4:	103f661e 	bne	r2,zero,f760 <__alt_data_end+0xfffdea20>
    f9c8:	8880040c 	andi	r2,r17,16
    f9cc:	10020626 	beq	r2,zero,101e8 <___vfiprintf_internal_r+0x1144>
    f9d0:	d9402217 	ldw	r5,136(sp)
    f9d4:	d8001d85 	stb	zero,118(sp)
    f9d8:	0029883a 	mov	r20,zero
    f9dc:	28800104 	addi	r2,r5,4
    f9e0:	2cc00017 	ldw	r19,0(r5)
    f9e4:	80020816 	blt	r16,zero,10208 <___vfiprintf_internal_r+0x1164>
    f9e8:	00ffdfc4 	movi	r3,-129
    f9ec:	d8802215 	stw	r2,136(sp)
    f9f0:	88e2703a 	and	r17,r17,r3
    f9f4:	983f651e 	bne	r19,zero,f78c <__alt_data_end+0xfffdea4c>
    f9f8:	002b883a 	mov	r21,zero
    f9fc:	8002cf26 	beq	r16,zero,1053c <___vfiprintf_internal_r+0x1498>
    fa00:	0027883a 	mov	r19,zero
    fa04:	0029883a 	mov	r20,zero
    fa08:	003f6106 	br	f790 <__alt_data_end+0xfffdea50>
    fa0c:	9cc03fcc 	andi	r19,r19,255
    fa10:	b811883a 	mov	r8,r23
    fa14:	9802e01e 	bne	r19,zero,10598 <___vfiprintf_internal_r+0x14f4>
    fa18:	8c400414 	ori	r17,r17,16
    fa1c:	8880080c 	andi	r2,r17,32
    fa20:	1000641e 	bne	r2,zero,fbb4 <___vfiprintf_internal_r+0xb10>
    fa24:	8880040c 	andi	r2,r17,16
    fa28:	1001c81e 	bne	r2,zero,1014c <___vfiprintf_internal_r+0x10a8>
    fa2c:	8880100c 	andi	r2,r17,64
    fa30:	d8001d85 	stb	zero,118(sp)
    fa34:	1002281e 	bne	r2,zero,102d8 <___vfiprintf_internal_r+0x1234>
    fa38:	d9002217 	ldw	r4,136(sp)
    fa3c:	0029883a 	mov	r20,zero
    fa40:	20800104 	addi	r2,r4,4
    fa44:	24c00017 	ldw	r19,0(r4)
    fa48:	8001c60e 	bge	r16,zero,10164 <___vfiprintf_internal_r+0x10c0>
    fa4c:	d8802215 	stw	r2,136(sp)
    fa50:	002b883a 	mov	r21,zero
    fa54:	9d04b03a 	or	r2,r19,r20
    fa58:	103f911e 	bne	r2,zero,f8a0 <__alt_data_end+0xfffdeb60>
    fa5c:	00800044 	movi	r2,1
    fa60:	10803fcc 	andi	r2,r2,255
    fa64:	00c00044 	movi	r3,1
    fa68:	10c05f26 	beq	r2,r3,fbe8 <___vfiprintf_internal_r+0xb44>
    fa6c:	00c00084 	movi	r3,2
    fa70:	10ffe31e 	bne	r2,r3,fa00 <__alt_data_end+0xfffdecc0>
    fa74:	0027883a 	mov	r19,zero
    fa78:	0029883a 	mov	r20,zero
    fa7c:	00015106 	br	ffc4 <___vfiprintf_internal_r+0xf20>
    fa80:	9cc03fcc 	andi	r19,r19,255
    fa84:	b811883a 	mov	r8,r23
    fa88:	9802c01e 	bne	r19,zero,1058c <___vfiprintf_internal_r+0x14e8>
    fa8c:	014000b4 	movhi	r5,2
    fa90:	29722904 	addi	r5,r5,-14172
    fa94:	d9402615 	stw	r5,152(sp)
    fa98:	8880080c 	andi	r2,r17,32
    fa9c:	103f541e 	bne	r2,zero,f7f0 <__alt_data_end+0xfffdeab0>
    faa0:	8880040c 	andi	r2,r17,16
    faa4:	1001f226 	beq	r2,zero,10270 <___vfiprintf_internal_r+0x11cc>
    faa8:	d9402217 	ldw	r5,136(sp)
    faac:	0029883a 	mov	r20,zero
    fab0:	2cc00017 	ldw	r19,0(r5)
    fab4:	29400104 	addi	r5,r5,4
    fab8:	d9402215 	stw	r5,136(sp)
    fabc:	003f5106 	br	f804 <__alt_data_end+0xfffdeac4>
    fac0:	d8c02217 	ldw	r3,136(sp)
    fac4:	b811883a 	mov	r8,r23
    fac8:	d8001d85 	stb	zero,118(sp)
    facc:	1dc00017 	ldw	r23,0(r3)
    fad0:	1f000104 	addi	fp,r3,4
    fad4:	b8025926 	beq	r23,zero,1043c <___vfiprintf_internal_r+0x1398>
    fad8:	80023316 	blt	r16,zero,103a8 <___vfiprintf_internal_r+0x1304>
    fadc:	800d883a 	mov	r6,r16
    fae0:	000b883a 	mov	r5,zero
    fae4:	b809883a 	mov	r4,r23
    fae8:	da002a15 	stw	r8,168(sp)
    faec:	000d2580 	call	d258 <memchr>
    faf0:	da002a17 	ldw	r8,168(sp)
    faf4:	10026826 	beq	r2,zero,10498 <___vfiprintf_internal_r+0x13f4>
    faf8:	15e9c83a 	sub	r20,r2,r23
    fafc:	dd401d83 	ldbu	r21,118(sp)
    fb00:	df002215 	stw	fp,136(sp)
    fb04:	0021883a 	mov	r16,zero
    fb08:	003e6906 	br	f4b0 <__alt_data_end+0xfffde770>
    fb0c:	9cc03fcc 	andi	r19,r19,255
    fb10:	b811883a 	mov	r8,r23
    fb14:	983fc126 	beq	r19,zero,fa1c <__alt_data_end+0xfffdecdc>
    fb18:	d8c02303 	ldbu	r3,140(sp)
    fb1c:	d8c01d85 	stb	r3,118(sp)
    fb20:	003fbe06 	br	fa1c <__alt_data_end+0xfffdecdc>
    fb24:	d9002217 	ldw	r4,136(sp)
    fb28:	d9402217 	ldw	r5,136(sp)
    fb2c:	21000017 	ldw	r4,0(r4)
    fb30:	28800104 	addi	r2,r5,4
    fb34:	d9002515 	stw	r4,148(sp)
    fb38:	203e3d16 	blt	r4,zero,f430 <__alt_data_end+0xfffde6f0>
    fb3c:	d8802215 	stw	r2,136(sp)
    fb40:	b0c00007 	ldb	r3,0(r22)
    fb44:	003db406 	br	f218 <__alt_data_end+0xfffde4d8>
    fb48:	00c00ac4 	movi	r3,43
    fb4c:	d8c02305 	stb	r3,140(sp)
    fb50:	04c00044 	movi	r19,1
    fb54:	b0c00007 	ldb	r3,0(r22)
    fb58:	003daf06 	br	f218 <__alt_data_end+0xfffde4d8>
    fb5c:	b0c00007 	ldb	r3,0(r22)
    fb60:	01000a84 	movi	r4,42
    fb64:	b4000044 	addi	r16,r22,1
    fb68:	19025e26 	beq	r3,r4,104e4 <___vfiprintf_internal_r+0x1440>
    fb6c:	1f3ff404 	addi	fp,r3,-48
    fb70:	0009883a 	mov	r4,zero
    fb74:	af025236 	bltu	r21,fp,104c0 <___vfiprintf_internal_r+0x141c>
    fb78:	01400284 	movi	r5,10
    fb7c:	0004f140 	call	4f14 <__mulsi3>
    fb80:	80c00007 	ldb	r3,0(r16)
    fb84:	1709883a 	add	r4,r2,fp
    fb88:	85800044 	addi	r22,r16,1
    fb8c:	1f3ff404 	addi	fp,r3,-48
    fb90:	b021883a 	mov	r16,r22
    fb94:	af3ff82e 	bgeu	r21,fp,fb78 <__alt_data_end+0xfffdee38>
    fb98:	2021883a 	mov	r16,r4
    fb9c:	203d9f0e 	bge	r4,zero,f21c <__alt_data_end+0xfffde4dc>
    fba0:	043fffc4 	movi	r16,-1
    fba4:	003d9d06 	br	f21c <__alt_data_end+0xfffde4dc>
    fba8:	8c401014 	ori	r17,r17,64
    fbac:	b0c00007 	ldb	r3,0(r22)
    fbb0:	003d9906 	br	f218 <__alt_data_end+0xfffde4d8>
    fbb4:	d9002217 	ldw	r4,136(sp)
    fbb8:	d8001d85 	stb	zero,118(sp)
    fbbc:	20c00204 	addi	r3,r4,8
    fbc0:	24c00017 	ldw	r19,0(r4)
    fbc4:	25000117 	ldw	r20,4(r4)
    fbc8:	8001e716 	blt	r16,zero,10368 <___vfiprintf_internal_r+0x12c4>
    fbcc:	013fdfc4 	movi	r4,-129
    fbd0:	9d04b03a 	or	r2,r19,r20
    fbd4:	d8c02215 	stw	r3,136(sp)
    fbd8:	8922703a 	and	r17,r17,r4
    fbdc:	002b883a 	mov	r21,zero
    fbe0:	103f2f1e 	bne	r2,zero,f8a0 <__alt_data_end+0xfffdeb60>
    fbe4:	803e2f26 	beq	r16,zero,f4a4 <__alt_data_end+0xfffde764>
    fbe8:	0027883a 	mov	r19,zero
    fbec:	9cc00c04 	addi	r19,r19,48
    fbf0:	dcc019c5 	stb	r19,103(sp)
    fbf4:	dd002817 	ldw	r20,160(sp)
    fbf8:	ddc019c4 	addi	r23,sp,103
    fbfc:	003e2c06 	br	f4b0 <__alt_data_end+0xfffde770>
    fc00:	9cc03fcc 	andi	r19,r19,255
    fc04:	b811883a 	mov	r8,r23
    fc08:	9802571e 	bne	r19,zero,10568 <___vfiprintf_internal_r+0x14c4>
    fc0c:	18005726 	beq	r3,zero,fd6c <___vfiprintf_internal_r+0xcc8>
    fc10:	04c00044 	movi	r19,1
    fc14:	d8c01005 	stb	r3,64(sp)
    fc18:	d8001d85 	stb	zero,118(sp)
    fc1c:	9829883a 	mov	r20,r19
    fc20:	ddc01004 	addi	r23,sp,64
    fc24:	003f0a06 	br	f850 <__alt_data_end+0xfffdeb10>
    fc28:	d9402017 	ldw	r5,128(sp)
    fc2c:	d9002117 	ldw	r4,132(sp)
    fc30:	d9801a04 	addi	r6,sp,104
    fc34:	da802a15 	stw	r10,168(sp)
    fc38:	000ef900 	call	ef90 <__sprint_r.part.0>
    fc3c:	da802a17 	ldw	r10,168(sp)
    fc40:	1000501e 	bne	r2,zero,fd84 <___vfiprintf_internal_r+0xce0>
    fc44:	d9801b17 	ldw	r6,108(sp)
    fc48:	d8801c17 	ldw	r2,112(sp)
    fc4c:	d811883a 	mov	r8,sp
    fc50:	31000044 	addi	r4,r6,1
    fc54:	003e3606 	br	f530 <__alt_data_end+0xfffde7f0>
    fc58:	d9001b17 	ldw	r4,108(sp)
    fc5c:	d8801c17 	ldw	r2,112(sp)
    fc60:	21400044 	addi	r5,r4,1
    fc64:	d9801d87 	ldb	r6,118(sp)
    fc68:	303e5226 	beq	r6,zero,f5b4 <__alt_data_end+0xfffde874>
    fc6c:	01800044 	movi	r6,1
    fc70:	d9001d84 	addi	r4,sp,118
    fc74:	1185883a 	add	r2,r2,r6
    fc78:	41000015 	stw	r4,0(r8)
    fc7c:	41800115 	stw	r6,4(r8)
    fc80:	d8801c15 	stw	r2,112(sp)
    fc84:	d9401b15 	stw	r5,108(sp)
    fc88:	010001c4 	movi	r4,7
    fc8c:	2140b00e 	bge	r4,r5,ff50 <___vfiprintf_internal_r+0xeac>
    fc90:	1000f61e 	bne	r2,zero,1006c <___vfiprintf_internal_r+0xfc8>
    fc94:	3800b31e 	bne	r7,zero,ff64 <___vfiprintf_internal_r+0xec0>
    fc98:	0009883a 	mov	r4,zero
    fc9c:	300b883a 	mov	r5,r6
    fca0:	d811883a 	mov	r8,sp
    fca4:	01802004 	movi	r6,128
    fca8:	19be5226 	beq	r3,r6,f5f4 <__alt_data_end+0xfffde8b4>
    fcac:	8521c83a 	sub	r16,r16,r20
    fcb0:	043e790e 	bge	zero,r16,f698 <__alt_data_end+0xfffde958>
    fcb4:	05400404 	movi	r21,16
    fcb8:	ac01b00e 	bge	r21,r16,1037c <___vfiprintf_internal_r+0x12d8>
    fcbc:	014000b4 	movhi	r5,2
    fcc0:	29728e04 	addi	r5,r5,-13768
    fcc4:	d9402315 	stw	r5,140(sp)
    fcc8:	070001c4 	movi	fp,7
    fccc:	00000506 	br	fce4 <___vfiprintf_internal_r+0xc40>
    fcd0:	21400084 	addi	r5,r4,2
    fcd4:	42000204 	addi	r8,r8,8
    fcd8:	1809883a 	mov	r4,r3
    fcdc:	843ffc04 	addi	r16,r16,-16
    fce0:	ac000d0e 	bge	r21,r16,fd18 <___vfiprintf_internal_r+0xc74>
    fce4:	10800404 	addi	r2,r2,16
    fce8:	20c00044 	addi	r3,r4,1
    fcec:	44800015 	stw	r18,0(r8)
    fcf0:	45400115 	stw	r21,4(r8)
    fcf4:	d8801c15 	stw	r2,112(sp)
    fcf8:	d8c01b15 	stw	r3,108(sp)
    fcfc:	e0fff40e 	bge	fp,r3,fcd0 <__alt_data_end+0xfffdef90>
    fd00:	1000101e 	bne	r2,zero,fd44 <___vfiprintf_internal_r+0xca0>
    fd04:	843ffc04 	addi	r16,r16,-16
    fd08:	01400044 	movi	r5,1
    fd0c:	0009883a 	mov	r4,zero
    fd10:	d811883a 	mov	r8,sp
    fd14:	ac3ff316 	blt	r21,r16,fce4 <__alt_data_end+0xfffdefa4>
    fd18:	d8c02317 	ldw	r3,140(sp)
    fd1c:	1405883a 	add	r2,r2,r16
    fd20:	44000115 	stw	r16,4(r8)
    fd24:	40c00015 	stw	r3,0(r8)
    fd28:	d8801c15 	stw	r2,112(sp)
    fd2c:	d9401b15 	stw	r5,108(sp)
    fd30:	00c001c4 	movi	r3,7
    fd34:	19401916 	blt	r3,r5,fd9c <___vfiprintf_internal_r+0xcf8>
    fd38:	42000204 	addi	r8,r8,8
    fd3c:	29400044 	addi	r5,r5,1
    fd40:	003e5506 	br	f698 <__alt_data_end+0xfffde958>
    fd44:	d9402017 	ldw	r5,128(sp)
    fd48:	d9002117 	ldw	r4,132(sp)
    fd4c:	d9801a04 	addi	r6,sp,104
    fd50:	000ef900 	call	ef90 <__sprint_r.part.0>
    fd54:	10000b1e 	bne	r2,zero,fd84 <___vfiprintf_internal_r+0xce0>
    fd58:	d9001b17 	ldw	r4,108(sp)
    fd5c:	d8801c17 	ldw	r2,112(sp)
    fd60:	d811883a 	mov	r8,sp
    fd64:	21400044 	addi	r5,r4,1
    fd68:	003fdc06 	br	fcdc <__alt_data_end+0xfffdef9c>
    fd6c:	d8801c17 	ldw	r2,112(sp)
    fd70:	10000426 	beq	r2,zero,fd84 <___vfiprintf_internal_r+0xce0>
    fd74:	d9402017 	ldw	r5,128(sp)
    fd78:	d9002117 	ldw	r4,132(sp)
    fd7c:	d9801a04 	addi	r6,sp,104
    fd80:	000ef900 	call	ef90 <__sprint_r.part.0>
    fd84:	d9402017 	ldw	r5,128(sp)
    fd88:	2880030b 	ldhu	r2,12(r5)
    fd8c:	1080100c 	andi	r2,r2,64
    fd90:	10014d1e 	bne	r2,zero,102c8 <___vfiprintf_internal_r+0x1224>
    fd94:	d8802417 	ldw	r2,144(sp)
    fd98:	003d9706 	br	f3f8 <__alt_data_end+0xfffde6b8>
    fd9c:	1000d21e 	bne	r2,zero,100e8 <___vfiprintf_internal_r+0x1044>
    fda0:	00c00044 	movi	r3,1
    fda4:	a005883a 	mov	r2,r20
    fda8:	ddc00015 	stw	r23,0(sp)
    fdac:	dd000115 	stw	r20,4(sp)
    fdb0:	dd001c15 	stw	r20,112(sp)
    fdb4:	d8c01b15 	stw	r3,108(sp)
    fdb8:	d811883a 	mov	r8,sp
    fdbc:	42000204 	addi	r8,r8,8
    fdc0:	8c40010c 	andi	r17,r17,4
    fdc4:	88004026 	beq	r17,zero,fec8 <___vfiprintf_internal_r+0xe24>
    fdc8:	d9002517 	ldw	r4,148(sp)
    fdcc:	24e3c83a 	sub	r17,r4,r19
    fdd0:	04403d0e 	bge	zero,r17,fec8 <___vfiprintf_internal_r+0xe24>
    fdd4:	04000404 	movi	r16,16
    fdd8:	8441a90e 	bge	r16,r17,10480 <___vfiprintf_internal_r+0x13dc>
    fddc:	00c000b4 	movhi	r3,2
    fde0:	18f29204 	addi	r3,r3,-13752
    fde4:	d9001b17 	ldw	r4,108(sp)
    fde8:	d8c02315 	stw	r3,140(sp)
    fdec:	050001c4 	movi	r20,7
    fdf0:	dd402117 	ldw	r21,132(sp)
    fdf4:	ddc02017 	ldw	r23,128(sp)
    fdf8:	00000506 	br	fe10 <___vfiprintf_internal_r+0xd6c>
    fdfc:	21400084 	addi	r5,r4,2
    fe00:	42000204 	addi	r8,r8,8
    fe04:	1809883a 	mov	r4,r3
    fe08:	8c7ffc04 	addi	r17,r17,-16
    fe0c:	84400f0e 	bge	r16,r17,fe4c <___vfiprintf_internal_r+0xda8>
    fe10:	014000b4 	movhi	r5,2
    fe14:	10800404 	addi	r2,r2,16
    fe18:	20c00044 	addi	r3,r4,1
    fe1c:	29729204 	addi	r5,r5,-13752
    fe20:	41400015 	stw	r5,0(r8)
    fe24:	44000115 	stw	r16,4(r8)
    fe28:	d8801c15 	stw	r2,112(sp)
    fe2c:	d8c01b15 	stw	r3,108(sp)
    fe30:	a0fff20e 	bge	r20,r3,fdfc <__alt_data_end+0xfffdf0bc>
    fe34:	1000141e 	bne	r2,zero,fe88 <___vfiprintf_internal_r+0xde4>
    fe38:	8c7ffc04 	addi	r17,r17,-16
    fe3c:	01400044 	movi	r5,1
    fe40:	0009883a 	mov	r4,zero
    fe44:	d811883a 	mov	r8,sp
    fe48:	847ff116 	blt	r16,r17,fe10 <__alt_data_end+0xfffdf0d0>
    fe4c:	d8c02317 	ldw	r3,140(sp)
    fe50:	1445883a 	add	r2,r2,r17
    fe54:	44400115 	stw	r17,4(r8)
    fe58:	40c00015 	stw	r3,0(r8)
    fe5c:	d8801c15 	stw	r2,112(sp)
    fe60:	d9401b15 	stw	r5,108(sp)
    fe64:	00c001c4 	movi	r3,7
    fe68:	1940170e 	bge	r3,r5,fec8 <___vfiprintf_internal_r+0xe24>
    fe6c:	1000101e 	bne	r2,zero,feb0 <___vfiprintf_internal_r+0xe0c>
    fe70:	d8802517 	ldw	r2,148(sp)
    fe74:	14c11616 	blt	r2,r19,102d0 <___vfiprintf_internal_r+0x122c>
    fe78:	d9002417 	ldw	r4,144(sp)
    fe7c:	2089883a 	add	r4,r4,r2
    fe80:	d9002415 	stw	r4,144(sp)
    fe84:	003e1806 	br	f6e8 <__alt_data_end+0xfffde9a8>
    fe88:	d9801a04 	addi	r6,sp,104
    fe8c:	b80b883a 	mov	r5,r23
    fe90:	a809883a 	mov	r4,r21
    fe94:	000ef900 	call	ef90 <__sprint_r.part.0>
    fe98:	103fba1e 	bne	r2,zero,fd84 <__alt_data_end+0xfffdf044>
    fe9c:	d9001b17 	ldw	r4,108(sp)
    fea0:	d8801c17 	ldw	r2,112(sp)
    fea4:	d811883a 	mov	r8,sp
    fea8:	21400044 	addi	r5,r4,1
    feac:	003fd606 	br	fe08 <__alt_data_end+0xfffdf0c8>
    feb0:	d9402017 	ldw	r5,128(sp)
    feb4:	d9002117 	ldw	r4,132(sp)
    feb8:	d9801a04 	addi	r6,sp,104
    febc:	000ef900 	call	ef90 <__sprint_r.part.0>
    fec0:	103fb01e 	bne	r2,zero,fd84 <__alt_data_end+0xfffdf044>
    fec4:	d8801c17 	ldw	r2,112(sp)
    fec8:	d8c02517 	ldw	r3,148(sp)
    fecc:	1cc0010e 	bge	r3,r19,fed4 <___vfiprintf_internal_r+0xe30>
    fed0:	9807883a 	mov	r3,r19
    fed4:	d9002417 	ldw	r4,144(sp)
    fed8:	20c9883a 	add	r4,r4,r3
    fedc:	d9002415 	stw	r4,144(sp)
    fee0:	103e0126 	beq	r2,zero,f6e8 <__alt_data_end+0xfffde9a8>
    fee4:	d9402017 	ldw	r5,128(sp)
    fee8:	d9002117 	ldw	r4,132(sp)
    feec:	d9801a04 	addi	r6,sp,104
    fef0:	000ef900 	call	ef90 <__sprint_r.part.0>
    fef4:	103dfc26 	beq	r2,zero,f6e8 <__alt_data_end+0xfffde9a8>
    fef8:	003fa206 	br	fd84 <__alt_data_end+0xfffdf044>
    fefc:	d9402017 	ldw	r5,128(sp)
    ff00:	d9002117 	ldw	r4,132(sp)
    ff04:	d9801a04 	addi	r6,sp,104
    ff08:	d9c02b15 	stw	r7,172(sp)
    ff0c:	000ef900 	call	ef90 <__sprint_r.part.0>
    ff10:	d9c02b17 	ldw	r7,172(sp)
    ff14:	103f9b1e 	bne	r2,zero,fd84 <__alt_data_end+0xfffdf044>
    ff18:	d9001b17 	ldw	r4,108(sp)
    ff1c:	d8801c17 	ldw	r2,112(sp)
    ff20:	d811883a 	mov	r8,sp
    ff24:	21800044 	addi	r6,r4,1
    ff28:	003dbf06 	br	f628 <__alt_data_end+0xfffde8e8>
    ff2c:	1000d81e 	bne	r2,zero,10290 <___vfiprintf_internal_r+0x11ec>
    ff30:	d9001d87 	ldb	r4,118(sp)
    ff34:	20000a26 	beq	r4,zero,ff60 <___vfiprintf_internal_r+0xebc>
    ff38:	00800044 	movi	r2,1
    ff3c:	d9001d84 	addi	r4,sp,118
    ff40:	100b883a 	mov	r5,r2
    ff44:	d9000015 	stw	r4,0(sp)
    ff48:	d8800115 	stw	r2,4(sp)
    ff4c:	d811883a 	mov	r8,sp
    ff50:	2809883a 	mov	r4,r5
    ff54:	42000204 	addi	r8,r8,8
    ff58:	29400044 	addi	r5,r5,1
    ff5c:	003d9506 	br	f5b4 <__alt_data_end+0xfffde874>
    ff60:	3800fd26 	beq	r7,zero,10358 <___vfiprintf_internal_r+0x12b4>
    ff64:	00800084 	movi	r2,2
    ff68:	d9001d04 	addi	r4,sp,116
    ff6c:	d9000015 	stw	r4,0(sp)
    ff70:	d8800115 	stw	r2,4(sp)
    ff74:	01400044 	movi	r5,1
    ff78:	d811883a 	mov	r8,sp
    ff7c:	2809883a 	mov	r4,r5
    ff80:	42000204 	addi	r8,r8,8
    ff84:	29400044 	addi	r5,r5,1
    ff88:	003f4606 	br	fca4 <__alt_data_end+0xfffdef64>
    ff8c:	d8802517 	ldw	r2,148(sp)
    ff90:	14c0010e 	bge	r2,r19,ff98 <___vfiprintf_internal_r+0xef4>
    ff94:	9805883a 	mov	r2,r19
    ff98:	d9402417 	ldw	r5,144(sp)
    ff9c:	288b883a 	add	r5,r5,r2
    ffa0:	d9402415 	stw	r5,144(sp)
    ffa4:	003dd006 	br	f6e8 <__alt_data_end+0xfffde9a8>
    ffa8:	d8001d85 	stb	zero,118(sp)
    ffac:	80005d16 	blt	r16,zero,10124 <___vfiprintf_internal_r+0x1080>
    ffb0:	00ffdfc4 	movi	r3,-129
    ffb4:	9d04b03a 	or	r2,r19,r20
    ffb8:	88e2703a 	and	r17,r17,r3
    ffbc:	103d3726 	beq	r2,zero,f49c <__alt_data_end+0xfffde75c>
    ffc0:	002b883a 	mov	r21,zero
    ffc4:	d9002617 	ldw	r4,152(sp)
    ffc8:	ddc01a04 	addi	r23,sp,104
    ffcc:	988003cc 	andi	r2,r19,15
    ffd0:	a006973a 	slli	r3,r20,28
    ffd4:	2085883a 	add	r2,r4,r2
    ffd8:	9826d13a 	srli	r19,r19,4
    ffdc:	10800003 	ldbu	r2,0(r2)
    ffe0:	a028d13a 	srli	r20,r20,4
    ffe4:	bdffffc4 	addi	r23,r23,-1
    ffe8:	1ce6b03a 	or	r19,r3,r19
    ffec:	b8800005 	stb	r2,0(r23)
    fff0:	9d04b03a 	or	r2,r19,r20
    fff4:	103ff51e 	bne	r2,zero,ffcc <__alt_data_end+0xfffdf28c>
    fff8:	d8801e17 	ldw	r2,120(sp)
    fffc:	15e9c83a 	sub	r20,r2,r23
   10000:	003d2b06 	br	f4b0 <__alt_data_end+0xfffde770>
   10004:	d9402017 	ldw	r5,128(sp)
   10008:	d9002117 	ldw	r4,132(sp)
   1000c:	d9801a04 	addi	r6,sp,104
   10010:	000ef900 	call	ef90 <__sprint_r.part.0>
   10014:	103f5b1e 	bne	r2,zero,fd84 <__alt_data_end+0xfffdf044>
   10018:	d8801c17 	ldw	r2,112(sp)
   1001c:	d811883a 	mov	r8,sp
   10020:	003f6706 	br	fdc0 <__alt_data_end+0xfffdf080>
   10024:	d9402017 	ldw	r5,128(sp)
   10028:	d9002117 	ldw	r4,132(sp)
   1002c:	d9801a04 	addi	r6,sp,104
   10030:	000ef900 	call	ef90 <__sprint_r.part.0>
   10034:	103f531e 	bne	r2,zero,fd84 <__alt_data_end+0xfffdf044>
   10038:	d811883a 	mov	r8,sp
   1003c:	003cd906 	br	f3a4 <__alt_data_end+0xfffde664>
   10040:	10803fcc 	andi	r2,r2,255
   10044:	1080201c 	xori	r2,r2,128
   10048:	10bfe004 	addi	r2,r2,-128
   1004c:	00c00c04 	movi	r3,48
   10050:	10ffe926 	beq	r2,r3,fff8 <__alt_data_end+0xfffdf2b8>
   10054:	b8ffffc5 	stb	r3,-1(r23)
   10058:	d8c01e17 	ldw	r3,120(sp)
   1005c:	b8bfffc4 	addi	r2,r23,-1
   10060:	102f883a 	mov	r23,r2
   10064:	18a9c83a 	sub	r20,r3,r2
   10068:	003d1106 	br	f4b0 <__alt_data_end+0xfffde770>
   1006c:	d9402017 	ldw	r5,128(sp)
   10070:	d9002117 	ldw	r4,132(sp)
   10074:	d9801a04 	addi	r6,sp,104
   10078:	d8c02a15 	stw	r3,168(sp)
   1007c:	d9c02b15 	stw	r7,172(sp)
   10080:	000ef900 	call	ef90 <__sprint_r.part.0>
   10084:	d8c02a17 	ldw	r3,168(sp)
   10088:	d9c02b17 	ldw	r7,172(sp)
   1008c:	103f3d1e 	bne	r2,zero,fd84 <__alt_data_end+0xfffdf044>
   10090:	d9001b17 	ldw	r4,108(sp)
   10094:	d8801c17 	ldw	r2,112(sp)
   10098:	d811883a 	mov	r8,sp
   1009c:	21400044 	addi	r5,r4,1
   100a0:	003d4406 	br	f5b4 <__alt_data_end+0xfffde874>
   100a4:	d9402017 	ldw	r5,128(sp)
   100a8:	d9002117 	ldw	r4,132(sp)
   100ac:	d9801a04 	addi	r6,sp,104
   100b0:	d8c02a15 	stw	r3,168(sp)
   100b4:	000ef900 	call	ef90 <__sprint_r.part.0>
   100b8:	d8c02a17 	ldw	r3,168(sp)
   100bc:	103f311e 	bne	r2,zero,fd84 <__alt_data_end+0xfffdf044>
   100c0:	d9001b17 	ldw	r4,108(sp)
   100c4:	d8801c17 	ldw	r2,112(sp)
   100c8:	d811883a 	mov	r8,sp
   100cc:	21400044 	addi	r5,r4,1
   100d0:	003ef406 	br	fca4 <__alt_data_end+0xfffdef64>
   100d4:	1000bd1e 	bne	r2,zero,103cc <___vfiprintf_internal_r+0x1328>
   100d8:	01400044 	movi	r5,1
   100dc:	0009883a 	mov	r4,zero
   100e0:	d811883a 	mov	r8,sp
   100e4:	003ef106 	br	fcac <__alt_data_end+0xfffdef6c>
   100e8:	d9402017 	ldw	r5,128(sp)
   100ec:	d9002117 	ldw	r4,132(sp)
   100f0:	d9801a04 	addi	r6,sp,104
   100f4:	000ef900 	call	ef90 <__sprint_r.part.0>
   100f8:	103f221e 	bne	r2,zero,fd84 <__alt_data_end+0xfffdf044>
   100fc:	d9401b17 	ldw	r5,108(sp)
   10100:	d8801c17 	ldw	r2,112(sp)
   10104:	d811883a 	mov	r8,sp
   10108:	29400044 	addi	r5,r5,1
   1010c:	003d6206 	br	f698 <__alt_data_end+0xfffde958>
   10110:	014000b4 	movhi	r5,2
   10114:	29722e04 	addi	r5,r5,-14152
   10118:	d9402615 	stw	r5,152(sp)
   1011c:	d8c02215 	stw	r3,136(sp)
   10120:	1023883a 	mov	r17,r2
   10124:	9d04b03a 	or	r2,r19,r20
   10128:	103fa51e 	bne	r2,zero,ffc0 <__alt_data_end+0xfffdf280>
   1012c:	002b883a 	mov	r21,zero
   10130:	00800084 	movi	r2,2
   10134:	003e4a06 	br	fa60 <__alt_data_end+0xfffded20>
   10138:	014000b4 	movhi	r5,2
   1013c:	29722e04 	addi	r5,r5,-14152
   10140:	002b883a 	mov	r21,zero
   10144:	d9402615 	stw	r5,152(sp)
   10148:	003f9e06 	br	ffc4 <__alt_data_end+0xfffdf284>
   1014c:	d9402217 	ldw	r5,136(sp)
   10150:	d8001d85 	stb	zero,118(sp)
   10154:	0029883a 	mov	r20,zero
   10158:	28800104 	addi	r2,r5,4
   1015c:	2cc00017 	ldw	r19,0(r5)
   10160:	803e3a16 	blt	r16,zero,fa4c <__alt_data_end+0xfffded0c>
   10164:	00ffdfc4 	movi	r3,-129
   10168:	d8802215 	stw	r2,136(sp)
   1016c:	88e2703a 	and	r17,r17,r3
   10170:	002b883a 	mov	r21,zero
   10174:	983e9b26 	beq	r19,zero,fbe4 <__alt_data_end+0xfffdeea4>
   10178:	00800244 	movi	r2,9
   1017c:	14fdc936 	bltu	r2,r19,f8a4 <__alt_data_end+0xfffdeb64>
   10180:	003e9a06 	br	fbec <__alt_data_end+0xfffdeeac>
   10184:	00800c04 	movi	r2,48
   10188:	d8c01d45 	stb	r3,117(sp)
   1018c:	d8801d05 	stb	r2,116(sp)
   10190:	d8001d85 	stb	zero,118(sp)
   10194:	88c00094 	ori	r3,r17,2
   10198:	80009c16 	blt	r16,zero,1040c <___vfiprintf_internal_r+0x1368>
   1019c:	00bfdfc4 	movi	r2,-129
   101a0:	88a2703a 	and	r17,r17,r2
   101a4:	8c400094 	ori	r17,r17,2
   101a8:	002b883a 	mov	r21,zero
   101ac:	003f8506 	br	ffc4 <__alt_data_end+0xfffdf284>
   101b0:	b029883a 	mov	r20,r22
   101b4:	003c0b06 	br	f1e4 <__alt_data_end+0xfffde4a4>
   101b8:	04e7c83a 	sub	r19,zero,r19
   101bc:	05400b44 	movi	r21,45
   101c0:	9804c03a 	cmpne	r2,r19,zero
   101c4:	0529c83a 	sub	r20,zero,r20
   101c8:	dd401d85 	stb	r21,118(sp)
   101cc:	a0a9c83a 	sub	r20,r20,r2
   101d0:	80009716 	blt	r16,zero,10430 <___vfiprintf_internal_r+0x138c>
   101d4:	00bfdfc4 	movi	r2,-129
   101d8:	88a2703a 	and	r17,r17,r2
   101dc:	003db006 	br	f8a0 <__alt_data_end+0xfffdeb60>
   101e0:	b0c00007 	ldb	r3,0(r22)
   101e4:	003c0c06 	br	f218 <__alt_data_end+0xfffde4d8>
   101e8:	8880100c 	andi	r2,r17,64
   101ec:	d8001d85 	stb	zero,118(sp)
   101f0:	1000461e 	bne	r2,zero,1030c <___vfiprintf_internal_r+0x1268>
   101f4:	d9002217 	ldw	r4,136(sp)
   101f8:	0029883a 	mov	r20,zero
   101fc:	20800104 	addi	r2,r4,4
   10200:	24c00017 	ldw	r19,0(r4)
   10204:	803df80e 	bge	r16,zero,f9e8 <__alt_data_end+0xfffdeca8>
   10208:	9d06b03a 	or	r3,r19,r20
   1020c:	d8802215 	stw	r2,136(sp)
   10210:	183d5e1e 	bne	r3,zero,f78c <__alt_data_end+0xfffdea4c>
   10214:	002b883a 	mov	r21,zero
   10218:	0005883a 	mov	r2,zero
   1021c:	003e1006 	br	fa60 <__alt_data_end+0xfffded20>
   10220:	8880040c 	andi	r2,r17,16
   10224:	1000321e 	bne	r2,zero,102f0 <___vfiprintf_internal_r+0x124c>
   10228:	8c40100c 	andi	r17,r17,64
   1022c:	88008d26 	beq	r17,zero,10464 <___vfiprintf_internal_r+0x13c0>
   10230:	d9402217 	ldw	r5,136(sp)
   10234:	d8c02417 	ldw	r3,144(sp)
   10238:	28800017 	ldw	r2,0(r5)
   1023c:	29400104 	addi	r5,r5,4
   10240:	d9402215 	stw	r5,136(sp)
   10244:	10c0000d 	sth	r3,0(r2)
   10248:	003bca06 	br	f174 <__alt_data_end+0xfffde434>
   1024c:	8880100c 	andi	r2,r17,64
   10250:	10003a26 	beq	r2,zero,1033c <___vfiprintf_internal_r+0x1298>
   10254:	d8802217 	ldw	r2,136(sp)
   10258:	14c0000f 	ldh	r19,0(r2)
   1025c:	10800104 	addi	r2,r2,4
   10260:	d8802215 	stw	r2,136(sp)
   10264:	9829d7fa 	srai	r20,r19,31
   10268:	a005883a 	mov	r2,r20
   1026c:	003d8506 	br	f884 <__alt_data_end+0xfffdeb44>
   10270:	8880100c 	andi	r2,r17,64
   10274:	10002b26 	beq	r2,zero,10324 <___vfiprintf_internal_r+0x1280>
   10278:	d8802217 	ldw	r2,136(sp)
   1027c:	0029883a 	mov	r20,zero
   10280:	14c0000b 	ldhu	r19,0(r2)
   10284:	10800104 	addi	r2,r2,4
   10288:	d8802215 	stw	r2,136(sp)
   1028c:	003d5d06 	br	f804 <__alt_data_end+0xfffdeac4>
   10290:	d9402017 	ldw	r5,128(sp)
   10294:	d9002117 	ldw	r4,132(sp)
   10298:	d9801a04 	addi	r6,sp,104
   1029c:	d8c02a15 	stw	r3,168(sp)
   102a0:	d9c02b15 	stw	r7,172(sp)
   102a4:	000ef900 	call	ef90 <__sprint_r.part.0>
   102a8:	d8c02a17 	ldw	r3,168(sp)
   102ac:	d9c02b17 	ldw	r7,172(sp)
   102b0:	103eb41e 	bne	r2,zero,fd84 <__alt_data_end+0xfffdf044>
   102b4:	d9001b17 	ldw	r4,108(sp)
   102b8:	d8801c17 	ldw	r2,112(sp)
   102bc:	d811883a 	mov	r8,sp
   102c0:	21400044 	addi	r5,r4,1
   102c4:	003e6706 	br	fc64 <__alt_data_end+0xfffdef24>
   102c8:	00bfffc4 	movi	r2,-1
   102cc:	003c4a06 	br	f3f8 <__alt_data_end+0xfffde6b8>
   102d0:	9805883a 	mov	r2,r19
   102d4:	003ee806 	br	fe78 <__alt_data_end+0xfffdf138>
   102d8:	d8c02217 	ldw	r3,136(sp)
   102dc:	0029883a 	mov	r20,zero
   102e0:	18800104 	addi	r2,r3,4
   102e4:	1cc0000b 	ldhu	r19,0(r3)
   102e8:	803f9e0e 	bge	r16,zero,10164 <__alt_data_end+0xfffdf424>
   102ec:	003dd706 	br	fa4c <__alt_data_end+0xfffded0c>
   102f0:	d8c02217 	ldw	r3,136(sp)
   102f4:	d9002417 	ldw	r4,144(sp)
   102f8:	18800017 	ldw	r2,0(r3)
   102fc:	18c00104 	addi	r3,r3,4
   10300:	d8c02215 	stw	r3,136(sp)
   10304:	11000015 	stw	r4,0(r2)
   10308:	003b9a06 	br	f174 <__alt_data_end+0xfffde434>
   1030c:	d8c02217 	ldw	r3,136(sp)
   10310:	0029883a 	mov	r20,zero
   10314:	18800104 	addi	r2,r3,4
   10318:	1cc0000b 	ldhu	r19,0(r3)
   1031c:	803db20e 	bge	r16,zero,f9e8 <__alt_data_end+0xfffdeca8>
   10320:	003fb906 	br	10208 <__alt_data_end+0xfffdf4c8>
   10324:	d9002217 	ldw	r4,136(sp)
   10328:	0029883a 	mov	r20,zero
   1032c:	24c00017 	ldw	r19,0(r4)
   10330:	21000104 	addi	r4,r4,4
   10334:	d9002215 	stw	r4,136(sp)
   10338:	003d3206 	br	f804 <__alt_data_end+0xfffdeac4>
   1033c:	d8c02217 	ldw	r3,136(sp)
   10340:	1cc00017 	ldw	r19,0(r3)
   10344:	18c00104 	addi	r3,r3,4
   10348:	d8c02215 	stw	r3,136(sp)
   1034c:	9829d7fa 	srai	r20,r19,31
   10350:	a005883a 	mov	r2,r20
   10354:	003d4b06 	br	f884 <__alt_data_end+0xfffdeb44>
   10358:	0009883a 	mov	r4,zero
   1035c:	01400044 	movi	r5,1
   10360:	d811883a 	mov	r8,sp
   10364:	003e4f06 	br	fca4 <__alt_data_end+0xfffdef64>
   10368:	d8c02215 	stw	r3,136(sp)
   1036c:	002b883a 	mov	r21,zero
   10370:	003db806 	br	fa54 <__alt_data_end+0xfffded14>
   10374:	d811883a 	mov	r8,sp
   10378:	003e9606 	br	fdd4 <__alt_data_end+0xfffdf094>
   1037c:	010000b4 	movhi	r4,2
   10380:	21328e04 	addi	r4,r4,-13768
   10384:	d9002315 	stw	r4,140(sp)
   10388:	003e6306 	br	fd18 <__alt_data_end+0xfffdefd8>
   1038c:	b0c00043 	ldbu	r3,1(r22)
   10390:	8c400814 	ori	r17,r17,32
   10394:	b5800044 	addi	r22,r22,1
   10398:	18c03fcc 	andi	r3,r3,255
   1039c:	18c0201c 	xori	r3,r3,128
   103a0:	18ffe004 	addi	r3,r3,-128
   103a4:	003b9c06 	br	f218 <__alt_data_end+0xfffde4d8>
   103a8:	b809883a 	mov	r4,r23
   103ac:	da002a15 	stw	r8,168(sp)
   103b0:	00078880 	call	7888 <strlen>
   103b4:	1029883a 	mov	r20,r2
   103b8:	dd401d83 	ldbu	r21,118(sp)
   103bc:	df002215 	stw	fp,136(sp)
   103c0:	0021883a 	mov	r16,zero
   103c4:	da002a17 	ldw	r8,168(sp)
   103c8:	003c3906 	br	f4b0 <__alt_data_end+0xfffde770>
   103cc:	d9402017 	ldw	r5,128(sp)
   103d0:	d9002117 	ldw	r4,132(sp)
   103d4:	d9801a04 	addi	r6,sp,104
   103d8:	000ef900 	call	ef90 <__sprint_r.part.0>
   103dc:	103e691e 	bne	r2,zero,fd84 <__alt_data_end+0xfffdf044>
   103e0:	d9001b17 	ldw	r4,108(sp)
   103e4:	d8801c17 	ldw	r2,112(sp)
   103e8:	d811883a 	mov	r8,sp
   103ec:	21400044 	addi	r5,r4,1
   103f0:	003e2e06 	br	fcac <__alt_data_end+0xfffdef6c>
   103f4:	010000b4 	movhi	r4,2
   103f8:	21329204 	addi	r4,r4,-13752
   103fc:	d9002315 	stw	r4,140(sp)
   10400:	d9001b17 	ldw	r4,108(sp)
   10404:	21000044 	addi	r4,r4,1
   10408:	003c5e06 	br	f584 <__alt_data_end+0xfffde844>
   1040c:	002b883a 	mov	r21,zero
   10410:	00800084 	movi	r2,2
   10414:	10803fcc 	andi	r2,r2,255
   10418:	01000044 	movi	r4,1
   1041c:	11002b26 	beq	r2,r4,104cc <___vfiprintf_internal_r+0x1428>
   10420:	01000084 	movi	r4,2
   10424:	11002b1e 	bne	r2,r4,104d4 <___vfiprintf_internal_r+0x1430>
   10428:	1823883a 	mov	r17,r3
   1042c:	003ee506 	br	ffc4 <__alt_data_end+0xfffdf284>
   10430:	8807883a 	mov	r3,r17
   10434:	00800044 	movi	r2,1
   10438:	003ff606 	br	10414 <__alt_data_end+0xfffdf6d4>
   1043c:	00800184 	movi	r2,6
   10440:	1400012e 	bgeu	r2,r16,10448 <___vfiprintf_internal_r+0x13a4>
   10444:	1021883a 	mov	r16,r2
   10448:	8029883a 	mov	r20,r16
   1044c:	8027883a 	mov	r19,r16
   10450:	80002216 	blt	r16,zero,104dc <___vfiprintf_internal_r+0x1438>
   10454:	05c000b4 	movhi	r23,2
   10458:	df002215 	stw	fp,136(sp)
   1045c:	bdf23304 	addi	r23,r23,-14132
   10460:	003cfb06 	br	f850 <__alt_data_end+0xfffdeb10>
   10464:	d9002217 	ldw	r4,136(sp)
   10468:	d9402417 	ldw	r5,144(sp)
   1046c:	20800017 	ldw	r2,0(r4)
   10470:	21000104 	addi	r4,r4,4
   10474:	d9002215 	stw	r4,136(sp)
   10478:	11400015 	stw	r5,0(r2)
   1047c:	003b3d06 	br	f174 <__alt_data_end+0xfffde434>
   10480:	014000b4 	movhi	r5,2
   10484:	29729204 	addi	r5,r5,-13752
   10488:	d9402315 	stw	r5,140(sp)
   1048c:	d9401b17 	ldw	r5,108(sp)
   10490:	29400044 	addi	r5,r5,1
   10494:	003e6d06 	br	fe4c <__alt_data_end+0xfffdf10c>
   10498:	8029883a 	mov	r20,r16
   1049c:	dd401d83 	ldbu	r21,118(sp)
   104a0:	df002215 	stw	fp,136(sp)
   104a4:	0021883a 	mov	r16,zero
   104a8:	003c0106 	br	f4b0 <__alt_data_end+0xfffde770>
   104ac:	00c000b4 	movhi	r3,2
   104b0:	18f28e04 	addi	r3,r3,-13768
   104b4:	d8c02315 	stw	r3,140(sp)
   104b8:	280d883a 	mov	r6,r5
   104bc:	003c6906 	br	f664 <__alt_data_end+0xfffde924>
   104c0:	802d883a 	mov	r22,r16
   104c4:	0021883a 	mov	r16,zero
   104c8:	003b5406 	br	f21c <__alt_data_end+0xfffde4dc>
   104cc:	1823883a 	mov	r17,r3
   104d0:	003cf306 	br	f8a0 <__alt_data_end+0xfffdeb60>
   104d4:	1823883a 	mov	r17,r3
   104d8:	003cad06 	br	f790 <__alt_data_end+0xfffdea50>
   104dc:	0027883a 	mov	r19,zero
   104e0:	003fdc06 	br	10454 <__alt_data_end+0xfffdf714>
   104e4:	d9402217 	ldw	r5,136(sp)
   104e8:	8005883a 	mov	r2,r16
   104ec:	b0c00043 	ldbu	r3,1(r22)
   104f0:	2c000017 	ldw	r16,0(r5)
   104f4:	29000104 	addi	r4,r5,4
   104f8:	d9002215 	stw	r4,136(sp)
   104fc:	102d883a 	mov	r22,r2
   10500:	803fa50e 	bge	r16,zero,10398 <__alt_data_end+0xfffdf658>
   10504:	18c03fcc 	andi	r3,r3,255
   10508:	18c0201c 	xori	r3,r3,128
   1050c:	043fffc4 	movi	r16,-1
   10510:	18ffe004 	addi	r3,r3,-128
   10514:	003b4006 	br	f218 <__alt_data_end+0xfffde4d8>
   10518:	d9402303 	ldbu	r5,140(sp)
   1051c:	d9401d85 	stb	r5,118(sp)
   10520:	003cae06 	br	f7dc <__alt_data_end+0xfffdea9c>
   10524:	d8c02303 	ldbu	r3,140(sp)
   10528:	d8c01d85 	stb	r3,118(sp)
   1052c:	003d1406 	br	f980 <__alt_data_end+0xfffdec40>
   10530:	d8c02303 	ldbu	r3,140(sp)
   10534:	d8c01d85 	stb	r3,118(sp)
   10538:	003cca06 	br	f864 <__alt_data_end+0xfffdeb24>
   1053c:	8880004c 	andi	r2,r17,1
   10540:	002b883a 	mov	r21,zero
   10544:	10000526 	beq	r2,zero,1055c <___vfiprintf_internal_r+0x14b8>
   10548:	00800c04 	movi	r2,48
   1054c:	d88019c5 	stb	r2,103(sp)
   10550:	dd002817 	ldw	r20,160(sp)
   10554:	ddc019c4 	addi	r23,sp,103
   10558:	003bd506 	br	f4b0 <__alt_data_end+0xfffde770>
   1055c:	0029883a 	mov	r20,zero
   10560:	ddc01a04 	addi	r23,sp,104
   10564:	003bd206 	br	f4b0 <__alt_data_end+0xfffde770>
   10568:	d9002303 	ldbu	r4,140(sp)
   1056c:	d9001d85 	stb	r4,118(sp)
   10570:	003da606 	br	fc0c <__alt_data_end+0xfffdeecc>
   10574:	d8c02303 	ldbu	r3,140(sp)
   10578:	d8c01d85 	stb	r3,118(sp)
   1057c:	003c7606 	br	f758 <__alt_data_end+0xfffdea18>
   10580:	d8c02303 	ldbu	r3,140(sp)
   10584:	d8c01d85 	stb	r3,118(sp)
   10588:	003c6506 	br	f720 <__alt_data_end+0xfffde9e0>
   1058c:	d9002303 	ldbu	r4,140(sp)
   10590:	d9001d85 	stb	r4,118(sp)
   10594:	003d3d06 	br	fa8c <__alt_data_end+0xfffded4c>
   10598:	d8c02303 	ldbu	r3,140(sp)
   1059c:	d8c01d85 	stb	r3,118(sp)
   105a0:	003d1d06 	br	fa18 <__alt_data_end+0xfffdecd8>
   105a4:	d8c02303 	ldbu	r3,140(sp)
   105a8:	d8c01d85 	stb	r3,118(sp)
   105ac:	003d0306 	br	f9bc <__alt_data_end+0xfffdec7c>

000105b0 <__vfiprintf_internal>:
   105b0:	008000b4 	movhi	r2,2
   105b4:	10b99a04 	addi	r2,r2,-6552
   105b8:	300f883a 	mov	r7,r6
   105bc:	280d883a 	mov	r6,r5
   105c0:	200b883a 	mov	r5,r4
   105c4:	11000017 	ldw	r4,0(r2)
   105c8:	000f0a41 	jmpi	f0a4 <___vfiprintf_internal_r>

000105cc <__sbprintf>:
   105cc:	2880030b 	ldhu	r2,12(r5)
   105d0:	2ac01917 	ldw	r11,100(r5)
   105d4:	2a80038b 	ldhu	r10,14(r5)
   105d8:	2a400717 	ldw	r9,28(r5)
   105dc:	2a000917 	ldw	r8,36(r5)
   105e0:	defee204 	addi	sp,sp,-1144
   105e4:	00c10004 	movi	r3,1024
   105e8:	dc011a15 	stw	r16,1128(sp)
   105ec:	10bfff4c 	andi	r2,r2,65533
   105f0:	2821883a 	mov	r16,r5
   105f4:	d8cb883a 	add	r5,sp,r3
   105f8:	dc811c15 	stw	r18,1136(sp)
   105fc:	dc411b15 	stw	r17,1132(sp)
   10600:	dfc11d15 	stw	ra,1140(sp)
   10604:	2025883a 	mov	r18,r4
   10608:	d881030d 	sth	r2,1036(sp)
   1060c:	dac11915 	stw	r11,1124(sp)
   10610:	da81038d 	sth	r10,1038(sp)
   10614:	da410715 	stw	r9,1052(sp)
   10618:	da010915 	stw	r8,1060(sp)
   1061c:	dec10015 	stw	sp,1024(sp)
   10620:	dec10415 	stw	sp,1040(sp)
   10624:	d8c10215 	stw	r3,1032(sp)
   10628:	d8c10515 	stw	r3,1044(sp)
   1062c:	d8010615 	stw	zero,1048(sp)
   10630:	000f0a40 	call	f0a4 <___vfiprintf_internal_r>
   10634:	1023883a 	mov	r17,r2
   10638:	10000416 	blt	r2,zero,1064c <__sbprintf+0x80>
   1063c:	d9410004 	addi	r5,sp,1024
   10640:	9009883a 	mov	r4,r18
   10644:	000b8f40 	call	b8f4 <_fflush_r>
   10648:	10000d1e 	bne	r2,zero,10680 <__sbprintf+0xb4>
   1064c:	d881030b 	ldhu	r2,1036(sp)
   10650:	1080100c 	andi	r2,r2,64
   10654:	10000326 	beq	r2,zero,10664 <__sbprintf+0x98>
   10658:	8080030b 	ldhu	r2,12(r16)
   1065c:	10801014 	ori	r2,r2,64
   10660:	8080030d 	sth	r2,12(r16)
   10664:	8805883a 	mov	r2,r17
   10668:	dfc11d17 	ldw	ra,1140(sp)
   1066c:	dc811c17 	ldw	r18,1136(sp)
   10670:	dc411b17 	ldw	r17,1132(sp)
   10674:	dc011a17 	ldw	r16,1128(sp)
   10678:	dec11e04 	addi	sp,sp,1144
   1067c:	f800283a 	ret
   10680:	047fffc4 	movi	r17,-1
   10684:	003ff106 	br	1064c <__alt_data_end+0xfffdf90c>

00010688 <_write_r>:
   10688:	defffd04 	addi	sp,sp,-12
   1068c:	2805883a 	mov	r2,r5
   10690:	dc000015 	stw	r16,0(sp)
   10694:	040000b4 	movhi	r16,2
   10698:	dc400115 	stw	r17,4(sp)
   1069c:	300b883a 	mov	r5,r6
   106a0:	8400ac04 	addi	r16,r16,688
   106a4:	2023883a 	mov	r17,r4
   106a8:	380d883a 	mov	r6,r7
   106ac:	1009883a 	mov	r4,r2
   106b0:	dfc00215 	stw	ra,8(sp)
   106b4:	80000015 	stw	zero,0(r16)
   106b8:	00124c80 	call	124c8 <write>
   106bc:	00ffffc4 	movi	r3,-1
   106c0:	10c00526 	beq	r2,r3,106d8 <_write_r+0x50>
   106c4:	dfc00217 	ldw	ra,8(sp)
   106c8:	dc400117 	ldw	r17,4(sp)
   106cc:	dc000017 	ldw	r16,0(sp)
   106d0:	dec00304 	addi	sp,sp,12
   106d4:	f800283a 	ret
   106d8:	80c00017 	ldw	r3,0(r16)
   106dc:	183ff926 	beq	r3,zero,106c4 <__alt_data_end+0xfffdf984>
   106e0:	88c00015 	stw	r3,0(r17)
   106e4:	003ff706 	br	106c4 <__alt_data_end+0xfffdf984>

000106e8 <_close_r>:
   106e8:	defffd04 	addi	sp,sp,-12
   106ec:	dc000015 	stw	r16,0(sp)
   106f0:	040000b4 	movhi	r16,2
   106f4:	dc400115 	stw	r17,4(sp)
   106f8:	8400ac04 	addi	r16,r16,688
   106fc:	2023883a 	mov	r17,r4
   10700:	2809883a 	mov	r4,r5
   10704:	dfc00215 	stw	ra,8(sp)
   10708:	80000015 	stw	zero,0(r16)
   1070c:	0011c780 	call	11c78 <close>
   10710:	00ffffc4 	movi	r3,-1
   10714:	10c00526 	beq	r2,r3,1072c <_close_r+0x44>
   10718:	dfc00217 	ldw	ra,8(sp)
   1071c:	dc400117 	ldw	r17,4(sp)
   10720:	dc000017 	ldw	r16,0(sp)
   10724:	dec00304 	addi	sp,sp,12
   10728:	f800283a 	ret
   1072c:	80c00017 	ldw	r3,0(r16)
   10730:	183ff926 	beq	r3,zero,10718 <__alt_data_end+0xfffdf9d8>
   10734:	88c00015 	stw	r3,0(r17)
   10738:	003ff706 	br	10718 <__alt_data_end+0xfffdf9d8>

0001073c <_calloc_r>:
   1073c:	defffe04 	addi	sp,sp,-8
   10740:	2805883a 	mov	r2,r5
   10744:	dc000015 	stw	r16,0(sp)
   10748:	300b883a 	mov	r5,r6
   1074c:	2021883a 	mov	r16,r4
   10750:	1009883a 	mov	r4,r2
   10754:	dfc00115 	stw	ra,4(sp)
   10758:	0004f140 	call	4f14 <__mulsi3>
   1075c:	100b883a 	mov	r5,r2
   10760:	8009883a 	mov	r4,r16
   10764:	000ca4c0 	call	ca4c <_malloc_r>
   10768:	10002926 	beq	r2,zero,10810 <_calloc_r+0xd4>
   1076c:	11bfff17 	ldw	r6,-4(r2)
   10770:	1021883a 	mov	r16,r2
   10774:	00bfff04 	movi	r2,-4
   10778:	308c703a 	and	r6,r6,r2
   1077c:	00c00904 	movi	r3,36
   10780:	308d883a 	add	r6,r6,r2
   10784:	19801636 	bltu	r3,r6,107e0 <_calloc_r+0xa4>
   10788:	008004c4 	movi	r2,19
   1078c:	11800b2e 	bgeu	r2,r6,107bc <_calloc_r+0x80>
   10790:	80000015 	stw	zero,0(r16)
   10794:	80000115 	stw	zero,4(r16)
   10798:	008006c4 	movi	r2,27
   1079c:	11801a2e 	bgeu	r2,r6,10808 <_calloc_r+0xcc>
   107a0:	80000215 	stw	zero,8(r16)
   107a4:	80000315 	stw	zero,12(r16)
   107a8:	30c0151e 	bne	r6,r3,10800 <_calloc_r+0xc4>
   107ac:	80000415 	stw	zero,16(r16)
   107b0:	80800604 	addi	r2,r16,24
   107b4:	80000515 	stw	zero,20(r16)
   107b8:	00000106 	br	107c0 <_calloc_r+0x84>
   107bc:	8005883a 	mov	r2,r16
   107c0:	10000015 	stw	zero,0(r2)
   107c4:	10000115 	stw	zero,4(r2)
   107c8:	10000215 	stw	zero,8(r2)
   107cc:	8005883a 	mov	r2,r16
   107d0:	dfc00117 	ldw	ra,4(sp)
   107d4:	dc000017 	ldw	r16,0(sp)
   107d8:	dec00204 	addi	sp,sp,8
   107dc:	f800283a 	ret
   107e0:	000b883a 	mov	r5,zero
   107e4:	8009883a 	mov	r4,r16
   107e8:	000d5e00 	call	d5e0 <memset>
   107ec:	8005883a 	mov	r2,r16
   107f0:	dfc00117 	ldw	ra,4(sp)
   107f4:	dc000017 	ldw	r16,0(sp)
   107f8:	dec00204 	addi	sp,sp,8
   107fc:	f800283a 	ret
   10800:	80800404 	addi	r2,r16,16
   10804:	003fee06 	br	107c0 <__alt_data_end+0xfffdfa80>
   10808:	80800204 	addi	r2,r16,8
   1080c:	003fec06 	br	107c0 <__alt_data_end+0xfffdfa80>
   10810:	0005883a 	mov	r2,zero
   10814:	003fee06 	br	107d0 <__alt_data_end+0xfffdfa90>

00010818 <_fclose_r>:
   10818:	28003926 	beq	r5,zero,10900 <_fclose_r+0xe8>
   1081c:	defffc04 	addi	sp,sp,-16
   10820:	dc400115 	stw	r17,4(sp)
   10824:	dc000015 	stw	r16,0(sp)
   10828:	dfc00315 	stw	ra,12(sp)
   1082c:	dc800215 	stw	r18,8(sp)
   10830:	2023883a 	mov	r17,r4
   10834:	2821883a 	mov	r16,r5
   10838:	20000226 	beq	r4,zero,10844 <_fclose_r+0x2c>
   1083c:	20800e17 	ldw	r2,56(r4)
   10840:	10002726 	beq	r2,zero,108e0 <_fclose_r+0xc8>
   10844:	8080030f 	ldh	r2,12(r16)
   10848:	1000071e 	bne	r2,zero,10868 <_fclose_r+0x50>
   1084c:	0005883a 	mov	r2,zero
   10850:	dfc00317 	ldw	ra,12(sp)
   10854:	dc800217 	ldw	r18,8(sp)
   10858:	dc400117 	ldw	r17,4(sp)
   1085c:	dc000017 	ldw	r16,0(sp)
   10860:	dec00404 	addi	sp,sp,16
   10864:	f800283a 	ret
   10868:	800b883a 	mov	r5,r16
   1086c:	8809883a 	mov	r4,r17
   10870:	000b6d80 	call	b6d8 <__sflush_r>
   10874:	1025883a 	mov	r18,r2
   10878:	80800b17 	ldw	r2,44(r16)
   1087c:	10000426 	beq	r2,zero,10890 <_fclose_r+0x78>
   10880:	81400717 	ldw	r5,28(r16)
   10884:	8809883a 	mov	r4,r17
   10888:	103ee83a 	callr	r2
   1088c:	10001616 	blt	r2,zero,108e8 <_fclose_r+0xd0>
   10890:	8080030b 	ldhu	r2,12(r16)
   10894:	1080200c 	andi	r2,r2,128
   10898:	1000151e 	bne	r2,zero,108f0 <_fclose_r+0xd8>
   1089c:	81400c17 	ldw	r5,48(r16)
   108a0:	28000526 	beq	r5,zero,108b8 <_fclose_r+0xa0>
   108a4:	80801004 	addi	r2,r16,64
   108a8:	28800226 	beq	r5,r2,108b4 <_fclose_r+0x9c>
   108ac:	8809883a 	mov	r4,r17
   108b0:	000be540 	call	be54 <_free_r>
   108b4:	80000c15 	stw	zero,48(r16)
   108b8:	81401117 	ldw	r5,68(r16)
   108bc:	28000326 	beq	r5,zero,108cc <_fclose_r+0xb4>
   108c0:	8809883a 	mov	r4,r17
   108c4:	000be540 	call	be54 <_free_r>
   108c8:	80001115 	stw	zero,68(r16)
   108cc:	000bcf00 	call	bcf0 <__sfp_lock_acquire>
   108d0:	8000030d 	sth	zero,12(r16)
   108d4:	000bcf40 	call	bcf4 <__sfp_lock_release>
   108d8:	9005883a 	mov	r2,r18
   108dc:	003fdc06 	br	10850 <__alt_data_end+0xfffdfb10>
   108e0:	000bce00 	call	bce0 <__sinit>
   108e4:	003fd706 	br	10844 <__alt_data_end+0xfffdfb04>
   108e8:	04bfffc4 	movi	r18,-1
   108ec:	003fe806 	br	10890 <__alt_data_end+0xfffdfb50>
   108f0:	81400417 	ldw	r5,16(r16)
   108f4:	8809883a 	mov	r4,r17
   108f8:	000be540 	call	be54 <_free_r>
   108fc:	003fe706 	br	1089c <__alt_data_end+0xfffdfb5c>
   10900:	0005883a 	mov	r2,zero
   10904:	f800283a 	ret

00010908 <fclose>:
   10908:	008000b4 	movhi	r2,2
   1090c:	10b99a04 	addi	r2,r2,-6552
   10910:	200b883a 	mov	r5,r4
   10914:	11000017 	ldw	r4,0(r2)
   10918:	00108181 	jmpi	10818 <_fclose_r>

0001091c <__fputwc>:
   1091c:	defff804 	addi	sp,sp,-32
   10920:	dcc00415 	stw	r19,16(sp)
   10924:	dc800315 	stw	r18,12(sp)
   10928:	dc000115 	stw	r16,4(sp)
   1092c:	dfc00715 	stw	ra,28(sp)
   10930:	dd400615 	stw	r21,24(sp)
   10934:	dd000515 	stw	r20,20(sp)
   10938:	dc400215 	stw	r17,8(sp)
   1093c:	2027883a 	mov	r19,r4
   10940:	2825883a 	mov	r18,r5
   10944:	3021883a 	mov	r16,r6
   10948:	000c83c0 	call	c83c <__locale_mb_cur_max>
   1094c:	00c00044 	movi	r3,1
   10950:	10c03e26 	beq	r2,r3,10a4c <__fputwc+0x130>
   10954:	81c01704 	addi	r7,r16,92
   10958:	900d883a 	mov	r6,r18
   1095c:	d80b883a 	mov	r5,sp
   10960:	9809883a 	mov	r4,r19
   10964:	0010dec0 	call	10dec <_wcrtomb_r>
   10968:	1029883a 	mov	r20,r2
   1096c:	00bfffc4 	movi	r2,-1
   10970:	a0802026 	beq	r20,r2,109f4 <__fputwc+0xd8>
   10974:	d9400003 	ldbu	r5,0(sp)
   10978:	a0001c26 	beq	r20,zero,109ec <__fputwc+0xd0>
   1097c:	0023883a 	mov	r17,zero
   10980:	05400284 	movi	r21,10
   10984:	00000906 	br	109ac <__fputwc+0x90>
   10988:	80800017 	ldw	r2,0(r16)
   1098c:	11400005 	stb	r5,0(r2)
   10990:	80c00017 	ldw	r3,0(r16)
   10994:	18c00044 	addi	r3,r3,1
   10998:	80c00015 	stw	r3,0(r16)
   1099c:	8c400044 	addi	r17,r17,1
   109a0:	dc45883a 	add	r2,sp,r17
   109a4:	8d00112e 	bgeu	r17,r20,109ec <__fputwc+0xd0>
   109a8:	11400003 	ldbu	r5,0(r2)
   109ac:	80c00217 	ldw	r3,8(r16)
   109b0:	18ffffc4 	addi	r3,r3,-1
   109b4:	80c00215 	stw	r3,8(r16)
   109b8:	183ff30e 	bge	r3,zero,10988 <__alt_data_end+0xfffdfc48>
   109bc:	80800617 	ldw	r2,24(r16)
   109c0:	18801916 	blt	r3,r2,10a28 <__fputwc+0x10c>
   109c4:	80800017 	ldw	r2,0(r16)
   109c8:	11400005 	stb	r5,0(r2)
   109cc:	80800017 	ldw	r2,0(r16)
   109d0:	10c00003 	ldbu	r3,0(r2)
   109d4:	10800044 	addi	r2,r2,1
   109d8:	1d402326 	beq	r3,r21,10a68 <__fputwc+0x14c>
   109dc:	80800015 	stw	r2,0(r16)
   109e0:	8c400044 	addi	r17,r17,1
   109e4:	dc45883a 	add	r2,sp,r17
   109e8:	8d3fef36 	bltu	r17,r20,109a8 <__alt_data_end+0xfffdfc68>
   109ec:	9005883a 	mov	r2,r18
   109f0:	00000406 	br	10a04 <__fputwc+0xe8>
   109f4:	80c0030b 	ldhu	r3,12(r16)
   109f8:	a005883a 	mov	r2,r20
   109fc:	18c01014 	ori	r3,r3,64
   10a00:	80c0030d 	sth	r3,12(r16)
   10a04:	dfc00717 	ldw	ra,28(sp)
   10a08:	dd400617 	ldw	r21,24(sp)
   10a0c:	dd000517 	ldw	r20,20(sp)
   10a10:	dcc00417 	ldw	r19,16(sp)
   10a14:	dc800317 	ldw	r18,12(sp)
   10a18:	dc400217 	ldw	r17,8(sp)
   10a1c:	dc000117 	ldw	r16,4(sp)
   10a20:	dec00804 	addi	sp,sp,32
   10a24:	f800283a 	ret
   10a28:	800d883a 	mov	r6,r16
   10a2c:	29403fcc 	andi	r5,r5,255
   10a30:	9809883a 	mov	r4,r19
   10a34:	0010c940 	call	10c94 <__swbuf_r>
   10a38:	10bfffe0 	cmpeqi	r2,r2,-1
   10a3c:	10803fcc 	andi	r2,r2,255
   10a40:	103fd626 	beq	r2,zero,1099c <__alt_data_end+0xfffdfc5c>
   10a44:	00bfffc4 	movi	r2,-1
   10a48:	003fee06 	br	10a04 <__alt_data_end+0xfffdfcc4>
   10a4c:	90ffffc4 	addi	r3,r18,-1
   10a50:	01003f84 	movi	r4,254
   10a54:	20ffbf36 	bltu	r4,r3,10954 <__alt_data_end+0xfffdfc14>
   10a58:	900b883a 	mov	r5,r18
   10a5c:	dc800005 	stb	r18,0(sp)
   10a60:	1029883a 	mov	r20,r2
   10a64:	003fc506 	br	1097c <__alt_data_end+0xfffdfc3c>
   10a68:	800d883a 	mov	r6,r16
   10a6c:	a80b883a 	mov	r5,r21
   10a70:	9809883a 	mov	r4,r19
   10a74:	0010c940 	call	10c94 <__swbuf_r>
   10a78:	10bfffe0 	cmpeqi	r2,r2,-1
   10a7c:	003fef06 	br	10a3c <__alt_data_end+0xfffdfcfc>

00010a80 <_fputwc_r>:
   10a80:	3080030b 	ldhu	r2,12(r6)
   10a84:	10c8000c 	andi	r3,r2,8192
   10a88:	1800051e 	bne	r3,zero,10aa0 <_fputwc_r+0x20>
   10a8c:	30c01917 	ldw	r3,100(r6)
   10a90:	10880014 	ori	r2,r2,8192
   10a94:	3080030d 	sth	r2,12(r6)
   10a98:	18880014 	ori	r2,r3,8192
   10a9c:	30801915 	stw	r2,100(r6)
   10aa0:	001091c1 	jmpi	1091c <__fputwc>

00010aa4 <fputwc>:
   10aa4:	008000b4 	movhi	r2,2
   10aa8:	defffc04 	addi	sp,sp,-16
   10aac:	10b99a04 	addi	r2,r2,-6552
   10ab0:	dc000115 	stw	r16,4(sp)
   10ab4:	14000017 	ldw	r16,0(r2)
   10ab8:	dc400215 	stw	r17,8(sp)
   10abc:	dfc00315 	stw	ra,12(sp)
   10ac0:	2023883a 	mov	r17,r4
   10ac4:	80000226 	beq	r16,zero,10ad0 <fputwc+0x2c>
   10ac8:	80800e17 	ldw	r2,56(r16)
   10acc:	10001026 	beq	r2,zero,10b10 <fputwc+0x6c>
   10ad0:	2880030b 	ldhu	r2,12(r5)
   10ad4:	10c8000c 	andi	r3,r2,8192
   10ad8:	1800051e 	bne	r3,zero,10af0 <fputwc+0x4c>
   10adc:	28c01917 	ldw	r3,100(r5)
   10ae0:	10880014 	ori	r2,r2,8192
   10ae4:	2880030d 	sth	r2,12(r5)
   10ae8:	18880014 	ori	r2,r3,8192
   10aec:	28801915 	stw	r2,100(r5)
   10af0:	280d883a 	mov	r6,r5
   10af4:	8009883a 	mov	r4,r16
   10af8:	880b883a 	mov	r5,r17
   10afc:	dfc00317 	ldw	ra,12(sp)
   10b00:	dc400217 	ldw	r17,8(sp)
   10b04:	dc000117 	ldw	r16,4(sp)
   10b08:	dec00404 	addi	sp,sp,16
   10b0c:	001091c1 	jmpi	1091c <__fputwc>
   10b10:	8009883a 	mov	r4,r16
   10b14:	d9400015 	stw	r5,0(sp)
   10b18:	000bce00 	call	bce0 <__sinit>
   10b1c:	d9400017 	ldw	r5,0(sp)
   10b20:	003feb06 	br	10ad0 <__alt_data_end+0xfffdfd90>

00010b24 <_fstat_r>:
   10b24:	defffd04 	addi	sp,sp,-12
   10b28:	2805883a 	mov	r2,r5
   10b2c:	dc000015 	stw	r16,0(sp)
   10b30:	040000b4 	movhi	r16,2
   10b34:	dc400115 	stw	r17,4(sp)
   10b38:	8400ac04 	addi	r16,r16,688
   10b3c:	2023883a 	mov	r17,r4
   10b40:	300b883a 	mov	r5,r6
   10b44:	1009883a 	mov	r4,r2
   10b48:	dfc00215 	stw	ra,8(sp)
   10b4c:	80000015 	stw	zero,0(r16)
   10b50:	0011db80 	call	11db8 <fstat>
   10b54:	00ffffc4 	movi	r3,-1
   10b58:	10c00526 	beq	r2,r3,10b70 <_fstat_r+0x4c>
   10b5c:	dfc00217 	ldw	ra,8(sp)
   10b60:	dc400117 	ldw	r17,4(sp)
   10b64:	dc000017 	ldw	r16,0(sp)
   10b68:	dec00304 	addi	sp,sp,12
   10b6c:	f800283a 	ret
   10b70:	80c00017 	ldw	r3,0(r16)
   10b74:	183ff926 	beq	r3,zero,10b5c <__alt_data_end+0xfffdfe1c>
   10b78:	88c00015 	stw	r3,0(r17)
   10b7c:	003ff706 	br	10b5c <__alt_data_end+0xfffdfe1c>

00010b80 <_isatty_r>:
   10b80:	defffd04 	addi	sp,sp,-12
   10b84:	dc000015 	stw	r16,0(sp)
   10b88:	040000b4 	movhi	r16,2
   10b8c:	dc400115 	stw	r17,4(sp)
   10b90:	8400ac04 	addi	r16,r16,688
   10b94:	2023883a 	mov	r17,r4
   10b98:	2809883a 	mov	r4,r5
   10b9c:	dfc00215 	stw	ra,8(sp)
   10ba0:	80000015 	stw	zero,0(r16)
   10ba4:	0011eac0 	call	11eac <isatty>
   10ba8:	00ffffc4 	movi	r3,-1
   10bac:	10c00526 	beq	r2,r3,10bc4 <_isatty_r+0x44>
   10bb0:	dfc00217 	ldw	ra,8(sp)
   10bb4:	dc400117 	ldw	r17,4(sp)
   10bb8:	dc000017 	ldw	r16,0(sp)
   10bbc:	dec00304 	addi	sp,sp,12
   10bc0:	f800283a 	ret
   10bc4:	80c00017 	ldw	r3,0(r16)
   10bc8:	183ff926 	beq	r3,zero,10bb0 <__alt_data_end+0xfffdfe70>
   10bcc:	88c00015 	stw	r3,0(r17)
   10bd0:	003ff706 	br	10bb0 <__alt_data_end+0xfffdfe70>

00010bd4 <_lseek_r>:
   10bd4:	defffd04 	addi	sp,sp,-12
   10bd8:	2805883a 	mov	r2,r5
   10bdc:	dc000015 	stw	r16,0(sp)
   10be0:	040000b4 	movhi	r16,2
   10be4:	dc400115 	stw	r17,4(sp)
   10be8:	300b883a 	mov	r5,r6
   10bec:	8400ac04 	addi	r16,r16,688
   10bf0:	2023883a 	mov	r17,r4
   10bf4:	380d883a 	mov	r6,r7
   10bf8:	1009883a 	mov	r4,r2
   10bfc:	dfc00215 	stw	ra,8(sp)
   10c00:	80000015 	stw	zero,0(r16)
   10c04:	00120800 	call	12080 <lseek>
   10c08:	00ffffc4 	movi	r3,-1
   10c0c:	10c00526 	beq	r2,r3,10c24 <_lseek_r+0x50>
   10c10:	dfc00217 	ldw	ra,8(sp)
   10c14:	dc400117 	ldw	r17,4(sp)
   10c18:	dc000017 	ldw	r16,0(sp)
   10c1c:	dec00304 	addi	sp,sp,12
   10c20:	f800283a 	ret
   10c24:	80c00017 	ldw	r3,0(r16)
   10c28:	183ff926 	beq	r3,zero,10c10 <__alt_data_end+0xfffdfed0>
   10c2c:	88c00015 	stw	r3,0(r17)
   10c30:	003ff706 	br	10c10 <__alt_data_end+0xfffdfed0>

00010c34 <_read_r>:
   10c34:	defffd04 	addi	sp,sp,-12
   10c38:	2805883a 	mov	r2,r5
   10c3c:	dc000015 	stw	r16,0(sp)
   10c40:	040000b4 	movhi	r16,2
   10c44:	dc400115 	stw	r17,4(sp)
   10c48:	300b883a 	mov	r5,r6
   10c4c:	8400ac04 	addi	r16,r16,688
   10c50:	2023883a 	mov	r17,r4
   10c54:	380d883a 	mov	r6,r7
   10c58:	1009883a 	mov	r4,r2
   10c5c:	dfc00215 	stw	ra,8(sp)
   10c60:	80000015 	stw	zero,0(r16)
   10c64:	00122540 	call	12254 <read>
   10c68:	00ffffc4 	movi	r3,-1
   10c6c:	10c00526 	beq	r2,r3,10c84 <_read_r+0x50>
   10c70:	dfc00217 	ldw	ra,8(sp)
   10c74:	dc400117 	ldw	r17,4(sp)
   10c78:	dc000017 	ldw	r16,0(sp)
   10c7c:	dec00304 	addi	sp,sp,12
   10c80:	f800283a 	ret
   10c84:	80c00017 	ldw	r3,0(r16)
   10c88:	183ff926 	beq	r3,zero,10c70 <__alt_data_end+0xfffdff30>
   10c8c:	88c00015 	stw	r3,0(r17)
   10c90:	003ff706 	br	10c70 <__alt_data_end+0xfffdff30>

00010c94 <__swbuf_r>:
   10c94:	defffb04 	addi	sp,sp,-20
   10c98:	dcc00315 	stw	r19,12(sp)
   10c9c:	dc800215 	stw	r18,8(sp)
   10ca0:	dc000015 	stw	r16,0(sp)
   10ca4:	dfc00415 	stw	ra,16(sp)
   10ca8:	dc400115 	stw	r17,4(sp)
   10cac:	2025883a 	mov	r18,r4
   10cb0:	2827883a 	mov	r19,r5
   10cb4:	3021883a 	mov	r16,r6
   10cb8:	20000226 	beq	r4,zero,10cc4 <__swbuf_r+0x30>
   10cbc:	20800e17 	ldw	r2,56(r4)
   10cc0:	10004226 	beq	r2,zero,10dcc <__swbuf_r+0x138>
   10cc4:	80800617 	ldw	r2,24(r16)
   10cc8:	8100030b 	ldhu	r4,12(r16)
   10ccc:	80800215 	stw	r2,8(r16)
   10cd0:	2080020c 	andi	r2,r4,8
   10cd4:	10003626 	beq	r2,zero,10db0 <__swbuf_r+0x11c>
   10cd8:	80c00417 	ldw	r3,16(r16)
   10cdc:	18003426 	beq	r3,zero,10db0 <__swbuf_r+0x11c>
   10ce0:	2088000c 	andi	r2,r4,8192
   10ce4:	9c403fcc 	andi	r17,r19,255
   10ce8:	10001a26 	beq	r2,zero,10d54 <__swbuf_r+0xc0>
   10cec:	80800017 	ldw	r2,0(r16)
   10cf0:	81000517 	ldw	r4,20(r16)
   10cf4:	10c7c83a 	sub	r3,r2,r3
   10cf8:	1900200e 	bge	r3,r4,10d7c <__swbuf_r+0xe8>
   10cfc:	18c00044 	addi	r3,r3,1
   10d00:	81000217 	ldw	r4,8(r16)
   10d04:	11400044 	addi	r5,r2,1
   10d08:	81400015 	stw	r5,0(r16)
   10d0c:	213fffc4 	addi	r4,r4,-1
   10d10:	81000215 	stw	r4,8(r16)
   10d14:	14c00005 	stb	r19,0(r2)
   10d18:	80800517 	ldw	r2,20(r16)
   10d1c:	10c01e26 	beq	r2,r3,10d98 <__swbuf_r+0x104>
   10d20:	8080030b 	ldhu	r2,12(r16)
   10d24:	1080004c 	andi	r2,r2,1
   10d28:	10000226 	beq	r2,zero,10d34 <__swbuf_r+0xa0>
   10d2c:	00800284 	movi	r2,10
   10d30:	88801926 	beq	r17,r2,10d98 <__swbuf_r+0x104>
   10d34:	8805883a 	mov	r2,r17
   10d38:	dfc00417 	ldw	ra,16(sp)
   10d3c:	dcc00317 	ldw	r19,12(sp)
   10d40:	dc800217 	ldw	r18,8(sp)
   10d44:	dc400117 	ldw	r17,4(sp)
   10d48:	dc000017 	ldw	r16,0(sp)
   10d4c:	dec00504 	addi	sp,sp,20
   10d50:	f800283a 	ret
   10d54:	81401917 	ldw	r5,100(r16)
   10d58:	00b7ffc4 	movi	r2,-8193
   10d5c:	21080014 	ori	r4,r4,8192
   10d60:	2884703a 	and	r2,r5,r2
   10d64:	80801915 	stw	r2,100(r16)
   10d68:	80800017 	ldw	r2,0(r16)
   10d6c:	8100030d 	sth	r4,12(r16)
   10d70:	81000517 	ldw	r4,20(r16)
   10d74:	10c7c83a 	sub	r3,r2,r3
   10d78:	193fe016 	blt	r3,r4,10cfc <__alt_data_end+0xfffdffbc>
   10d7c:	800b883a 	mov	r5,r16
   10d80:	9009883a 	mov	r4,r18
   10d84:	000b8f40 	call	b8f4 <_fflush_r>
   10d88:	1000071e 	bne	r2,zero,10da8 <__swbuf_r+0x114>
   10d8c:	80800017 	ldw	r2,0(r16)
   10d90:	00c00044 	movi	r3,1
   10d94:	003fda06 	br	10d00 <__alt_data_end+0xfffdffc0>
   10d98:	800b883a 	mov	r5,r16
   10d9c:	9009883a 	mov	r4,r18
   10da0:	000b8f40 	call	b8f4 <_fflush_r>
   10da4:	103fe326 	beq	r2,zero,10d34 <__alt_data_end+0xfffdfff4>
   10da8:	00bfffc4 	movi	r2,-1
   10dac:	003fe206 	br	10d38 <__alt_data_end+0xfffdfff8>
   10db0:	800b883a 	mov	r5,r16
   10db4:	9009883a 	mov	r4,r18
   10db8:	0009cd40 	call	9cd4 <__swsetup_r>
   10dbc:	103ffa1e 	bne	r2,zero,10da8 <__alt_data_end+0xfffe0068>
   10dc0:	8100030b 	ldhu	r4,12(r16)
   10dc4:	80c00417 	ldw	r3,16(r16)
   10dc8:	003fc506 	br	10ce0 <__alt_data_end+0xfffdffa0>
   10dcc:	000bce00 	call	bce0 <__sinit>
   10dd0:	003fbc06 	br	10cc4 <__alt_data_end+0xfffdff84>

00010dd4 <__swbuf>:
   10dd4:	008000b4 	movhi	r2,2
   10dd8:	10b99a04 	addi	r2,r2,-6552
   10ddc:	280d883a 	mov	r6,r5
   10de0:	200b883a 	mov	r5,r4
   10de4:	11000017 	ldw	r4,0(r2)
   10de8:	0010c941 	jmpi	10c94 <__swbuf_r>

00010dec <_wcrtomb_r>:
   10dec:	defff604 	addi	sp,sp,-40
   10df0:	008000b4 	movhi	r2,2
   10df4:	dc800815 	stw	r18,32(sp)
   10df8:	dc400715 	stw	r17,28(sp)
   10dfc:	dc000615 	stw	r16,24(sp)
   10e00:	10b99e04 	addi	r2,r2,-6536
   10e04:	dfc00915 	stw	ra,36(sp)
   10e08:	2021883a 	mov	r16,r4
   10e0c:	3823883a 	mov	r17,r7
   10e10:	14800017 	ldw	r18,0(r2)
   10e14:	28001426 	beq	r5,zero,10e68 <_wcrtomb_r+0x7c>
   10e18:	d9400415 	stw	r5,16(sp)
   10e1c:	d9800515 	stw	r6,20(sp)
   10e20:	000c8300 	call	c830 <__locale_charset>
   10e24:	d9800517 	ldw	r6,20(sp)
   10e28:	d9400417 	ldw	r5,16(sp)
   10e2c:	100f883a 	mov	r7,r2
   10e30:	dc400015 	stw	r17,0(sp)
   10e34:	8009883a 	mov	r4,r16
   10e38:	903ee83a 	callr	r18
   10e3c:	00ffffc4 	movi	r3,-1
   10e40:	10c0031e 	bne	r2,r3,10e50 <_wcrtomb_r+0x64>
   10e44:	88000015 	stw	zero,0(r17)
   10e48:	00c02284 	movi	r3,138
   10e4c:	80c00015 	stw	r3,0(r16)
   10e50:	dfc00917 	ldw	ra,36(sp)
   10e54:	dc800817 	ldw	r18,32(sp)
   10e58:	dc400717 	ldw	r17,28(sp)
   10e5c:	dc000617 	ldw	r16,24(sp)
   10e60:	dec00a04 	addi	sp,sp,40
   10e64:	f800283a 	ret
   10e68:	000c8300 	call	c830 <__locale_charset>
   10e6c:	100f883a 	mov	r7,r2
   10e70:	dc400015 	stw	r17,0(sp)
   10e74:	000d883a 	mov	r6,zero
   10e78:	d9400104 	addi	r5,sp,4
   10e7c:	8009883a 	mov	r4,r16
   10e80:	903ee83a 	callr	r18
   10e84:	003fed06 	br	10e3c <__alt_data_end+0xfffe00fc>

00010e88 <wcrtomb>:
   10e88:	defff604 	addi	sp,sp,-40
   10e8c:	008000b4 	movhi	r2,2
   10e90:	dc800615 	stw	r18,24(sp)
   10e94:	dc400515 	stw	r17,20(sp)
   10e98:	10b99a04 	addi	r2,r2,-6552
   10e9c:	dfc00915 	stw	ra,36(sp)
   10ea0:	dd000815 	stw	r20,32(sp)
   10ea4:	dcc00715 	stw	r19,28(sp)
   10ea8:	dc000415 	stw	r16,16(sp)
   10eac:	3025883a 	mov	r18,r6
   10eb0:	14400017 	ldw	r17,0(r2)
   10eb4:	20001926 	beq	r4,zero,10f1c <wcrtomb+0x94>
   10eb8:	008000b4 	movhi	r2,2
   10ebc:	10b99e04 	addi	r2,r2,-6536
   10ec0:	15000017 	ldw	r20,0(r2)
   10ec4:	2021883a 	mov	r16,r4
   10ec8:	2827883a 	mov	r19,r5
   10ecc:	000c8300 	call	c830 <__locale_charset>
   10ed0:	100f883a 	mov	r7,r2
   10ed4:	dc800015 	stw	r18,0(sp)
   10ed8:	980d883a 	mov	r6,r19
   10edc:	800b883a 	mov	r5,r16
   10ee0:	8809883a 	mov	r4,r17
   10ee4:	a03ee83a 	callr	r20
   10ee8:	00ffffc4 	movi	r3,-1
   10eec:	10c0031e 	bne	r2,r3,10efc <wcrtomb+0x74>
   10ef0:	90000015 	stw	zero,0(r18)
   10ef4:	00c02284 	movi	r3,138
   10ef8:	88c00015 	stw	r3,0(r17)
   10efc:	dfc00917 	ldw	ra,36(sp)
   10f00:	dd000817 	ldw	r20,32(sp)
   10f04:	dcc00717 	ldw	r19,28(sp)
   10f08:	dc800617 	ldw	r18,24(sp)
   10f0c:	dc400517 	ldw	r17,20(sp)
   10f10:	dc000417 	ldw	r16,16(sp)
   10f14:	dec00a04 	addi	sp,sp,40
   10f18:	f800283a 	ret
   10f1c:	008000b4 	movhi	r2,2
   10f20:	10b99e04 	addi	r2,r2,-6536
   10f24:	14000017 	ldw	r16,0(r2)
   10f28:	000c8300 	call	c830 <__locale_charset>
   10f2c:	100f883a 	mov	r7,r2
   10f30:	dc800015 	stw	r18,0(sp)
   10f34:	000d883a 	mov	r6,zero
   10f38:	d9400104 	addi	r5,sp,4
   10f3c:	8809883a 	mov	r4,r17
   10f40:	803ee83a 	callr	r16
   10f44:	003fe806 	br	10ee8 <__alt_data_end+0xfffe01a8>

00010f48 <__ascii_wctomb>:
   10f48:	28000526 	beq	r5,zero,10f60 <__ascii_wctomb+0x18>
   10f4c:	00803fc4 	movi	r2,255
   10f50:	11800536 	bltu	r2,r6,10f68 <__ascii_wctomb+0x20>
   10f54:	29800005 	stb	r6,0(r5)
   10f58:	00800044 	movi	r2,1
   10f5c:	f800283a 	ret
   10f60:	0005883a 	mov	r2,zero
   10f64:	f800283a 	ret
   10f68:	00802284 	movi	r2,138
   10f6c:	20800015 	stw	r2,0(r4)
   10f70:	00bfffc4 	movi	r2,-1
   10f74:	f800283a 	ret

00010f78 <_wctomb_r>:
   10f78:	008000b4 	movhi	r2,2
   10f7c:	defff904 	addi	sp,sp,-28
   10f80:	10b99e04 	addi	r2,r2,-6536
   10f84:	dfc00615 	stw	ra,24(sp)
   10f88:	dc400515 	stw	r17,20(sp)
   10f8c:	dc000415 	stw	r16,16(sp)
   10f90:	3823883a 	mov	r17,r7
   10f94:	14000017 	ldw	r16,0(r2)
   10f98:	d9000115 	stw	r4,4(sp)
   10f9c:	d9400215 	stw	r5,8(sp)
   10fa0:	d9800315 	stw	r6,12(sp)
   10fa4:	000c8300 	call	c830 <__locale_charset>
   10fa8:	d9800317 	ldw	r6,12(sp)
   10fac:	d9400217 	ldw	r5,8(sp)
   10fb0:	d9000117 	ldw	r4,4(sp)
   10fb4:	100f883a 	mov	r7,r2
   10fb8:	dc400015 	stw	r17,0(sp)
   10fbc:	803ee83a 	callr	r16
   10fc0:	dfc00617 	ldw	ra,24(sp)
   10fc4:	dc400517 	ldw	r17,20(sp)
   10fc8:	dc000417 	ldw	r16,16(sp)
   10fcc:	dec00704 	addi	sp,sp,28
   10fd0:	f800283a 	ret

00010fd4 <__udivdi3>:
   10fd4:	defff404 	addi	sp,sp,-48
   10fd8:	dcc00515 	stw	r19,20(sp)
   10fdc:	dc000215 	stw	r16,8(sp)
   10fe0:	dfc00b15 	stw	ra,44(sp)
   10fe4:	df000a15 	stw	fp,40(sp)
   10fe8:	ddc00915 	stw	r23,36(sp)
   10fec:	dd800815 	stw	r22,32(sp)
   10ff0:	dd400715 	stw	r21,28(sp)
   10ff4:	dd000615 	stw	r20,24(sp)
   10ff8:	dc800415 	stw	r18,16(sp)
   10ffc:	dc400315 	stw	r17,12(sp)
   11000:	2027883a 	mov	r19,r4
   11004:	2821883a 	mov	r16,r5
   11008:	3800461e 	bne	r7,zero,11124 <__udivdi3+0x150>
   1100c:	3023883a 	mov	r17,r6
   11010:	2025883a 	mov	r18,r4
   11014:	2980572e 	bgeu	r5,r6,11174 <__udivdi3+0x1a0>
   11018:	00bfffd4 	movui	r2,65535
   1101c:	282d883a 	mov	r22,r5
   11020:	1180b236 	bltu	r2,r6,112ec <__udivdi3+0x318>
   11024:	00803fc4 	movi	r2,255
   11028:	1185803a 	cmpltu	r2,r2,r6
   1102c:	100490fa 	slli	r2,r2,3
   11030:	3086d83a 	srl	r3,r6,r2
   11034:	010000b4 	movhi	r4,2
   11038:	2131e304 	addi	r4,r4,-14452
   1103c:	20c7883a 	add	r3,r4,r3
   11040:	18c00003 	ldbu	r3,0(r3)
   11044:	1885883a 	add	r2,r3,r2
   11048:	00c00804 	movi	r3,32
   1104c:	1887c83a 	sub	r3,r3,r2
   11050:	18000526 	beq	r3,zero,11068 <__udivdi3+0x94>
   11054:	80e0983a 	sll	r16,r16,r3
   11058:	9884d83a 	srl	r2,r19,r2
   1105c:	30e2983a 	sll	r17,r6,r3
   11060:	98e4983a 	sll	r18,r19,r3
   11064:	142cb03a 	or	r22,r2,r16
   11068:	882ad43a 	srli	r21,r17,16
   1106c:	b009883a 	mov	r4,r22
   11070:	8d3fffcc 	andi	r20,r17,65535
   11074:	a80b883a 	mov	r5,r21
   11078:	0004ebc0 	call	4ebc <__umodsi3>
   1107c:	b009883a 	mov	r4,r22
   11080:	a80b883a 	mov	r5,r21
   11084:	1027883a 	mov	r19,r2
   11088:	0004e580 	call	4e58 <__udivsi3>
   1108c:	100b883a 	mov	r5,r2
   11090:	a009883a 	mov	r4,r20
   11094:	102d883a 	mov	r22,r2
   11098:	0004f140 	call	4f14 <__mulsi3>
   1109c:	9826943a 	slli	r19,r19,16
   110a0:	9006d43a 	srli	r3,r18,16
   110a4:	1cc6b03a 	or	r3,r3,r19
   110a8:	1880052e 	bgeu	r3,r2,110c0 <__udivdi3+0xec>
   110ac:	1c47883a 	add	r3,r3,r17
   110b0:	b13fffc4 	addi	r4,r22,-1
   110b4:	1c400136 	bltu	r3,r17,110bc <__udivdi3+0xe8>
   110b8:	18814236 	bltu	r3,r2,115c4 <__udivdi3+0x5f0>
   110bc:	202d883a 	mov	r22,r4
   110c0:	18a1c83a 	sub	r16,r3,r2
   110c4:	8009883a 	mov	r4,r16
   110c8:	a80b883a 	mov	r5,r21
   110cc:	0004ebc0 	call	4ebc <__umodsi3>
   110d0:	1027883a 	mov	r19,r2
   110d4:	8009883a 	mov	r4,r16
   110d8:	a80b883a 	mov	r5,r21
   110dc:	9826943a 	slli	r19,r19,16
   110e0:	0004e580 	call	4e58 <__udivsi3>
   110e4:	100b883a 	mov	r5,r2
   110e8:	a009883a 	mov	r4,r20
   110ec:	94bfffcc 	andi	r18,r18,65535
   110f0:	1021883a 	mov	r16,r2
   110f4:	94e4b03a 	or	r18,r18,r19
   110f8:	0004f140 	call	4f14 <__mulsi3>
   110fc:	9080052e 	bgeu	r18,r2,11114 <__udivdi3+0x140>
   11100:	8ca5883a 	add	r18,r17,r18
   11104:	80ffffc4 	addi	r3,r16,-1
   11108:	94410c36 	bltu	r18,r17,1153c <__udivdi3+0x568>
   1110c:	90810b2e 	bgeu	r18,r2,1153c <__udivdi3+0x568>
   11110:	843fff84 	addi	r16,r16,-2
   11114:	b004943a 	slli	r2,r22,16
   11118:	0007883a 	mov	r3,zero
   1111c:	1404b03a 	or	r2,r2,r16
   11120:	00005e06 	br	1129c <__udivdi3+0x2c8>
   11124:	29c05b36 	bltu	r5,r7,11294 <__udivdi3+0x2c0>
   11128:	00bfffd4 	movui	r2,65535
   1112c:	11c0672e 	bgeu	r2,r7,112cc <__udivdi3+0x2f8>
   11130:	00804034 	movhi	r2,256
   11134:	10bfffc4 	addi	r2,r2,-1
   11138:	11c10a36 	bltu	r2,r7,11564 <__udivdi3+0x590>
   1113c:	00800404 	movi	r2,16
   11140:	3886d83a 	srl	r3,r7,r2
   11144:	010000b4 	movhi	r4,2
   11148:	2131e304 	addi	r4,r4,-14452
   1114c:	20c7883a 	add	r3,r4,r3
   11150:	18c00003 	ldbu	r3,0(r3)
   11154:	05c00804 	movi	r23,32
   11158:	1885883a 	add	r2,r3,r2
   1115c:	b8afc83a 	sub	r23,r23,r2
   11160:	b800671e 	bne	r23,zero,11300 <__udivdi3+0x32c>
   11164:	3c010536 	bltu	r7,r16,1157c <__udivdi3+0x5a8>
   11168:	9985403a 	cmpgeu	r2,r19,r6
   1116c:	0007883a 	mov	r3,zero
   11170:	00004a06 	br	1129c <__udivdi3+0x2c8>
   11174:	3000041e 	bne	r6,zero,11188 <__udivdi3+0x1b4>
   11178:	000b883a 	mov	r5,zero
   1117c:	01000044 	movi	r4,1
   11180:	0004e580 	call	4e58 <__udivsi3>
   11184:	1023883a 	mov	r17,r2
   11188:	00bfffd4 	movui	r2,65535
   1118c:	1440532e 	bgeu	r2,r17,112dc <__udivdi3+0x308>
   11190:	00804034 	movhi	r2,256
   11194:	10bfffc4 	addi	r2,r2,-1
   11198:	1440f436 	bltu	r2,r17,1156c <__udivdi3+0x598>
   1119c:	00800404 	movi	r2,16
   111a0:	8886d83a 	srl	r3,r17,r2
   111a4:	010000b4 	movhi	r4,2
   111a8:	2131e304 	addi	r4,r4,-14452
   111ac:	20c7883a 	add	r3,r4,r3
   111b0:	18c00003 	ldbu	r3,0(r3)
   111b4:	1885883a 	add	r2,r3,r2
   111b8:	00c00804 	movi	r3,32
   111bc:	1887c83a 	sub	r3,r3,r2
   111c0:	1800a51e 	bne	r3,zero,11458 <__udivdi3+0x484>
   111c4:	882ad43a 	srli	r21,r17,16
   111c8:	8461c83a 	sub	r16,r16,r17
   111cc:	8d3fffcc 	andi	r20,r17,65535
   111d0:	00c00044 	movi	r3,1
   111d4:	a80b883a 	mov	r5,r21
   111d8:	8009883a 	mov	r4,r16
   111dc:	d8c00115 	stw	r3,4(sp)
   111e0:	0004ebc0 	call	4ebc <__umodsi3>
   111e4:	a80b883a 	mov	r5,r21
   111e8:	8009883a 	mov	r4,r16
   111ec:	1027883a 	mov	r19,r2
   111f0:	0004e580 	call	4e58 <__udivsi3>
   111f4:	a00b883a 	mov	r5,r20
   111f8:	1009883a 	mov	r4,r2
   111fc:	102d883a 	mov	r22,r2
   11200:	0004f140 	call	4f14 <__mulsi3>
   11204:	9826943a 	slli	r19,r19,16
   11208:	900ed43a 	srli	r7,r18,16
   1120c:	d8c00117 	ldw	r3,4(sp)
   11210:	3cceb03a 	or	r7,r7,r19
   11214:	3880052e 	bgeu	r7,r2,1122c <__udivdi3+0x258>
   11218:	3c4f883a 	add	r7,r7,r17
   1121c:	b13fffc4 	addi	r4,r22,-1
   11220:	3c400136 	bltu	r7,r17,11228 <__udivdi3+0x254>
   11224:	3880e436 	bltu	r7,r2,115b8 <__udivdi3+0x5e4>
   11228:	202d883a 	mov	r22,r4
   1122c:	38a1c83a 	sub	r16,r7,r2
   11230:	8009883a 	mov	r4,r16
   11234:	a80b883a 	mov	r5,r21
   11238:	d8c00115 	stw	r3,4(sp)
   1123c:	0004ebc0 	call	4ebc <__umodsi3>
   11240:	1027883a 	mov	r19,r2
   11244:	8009883a 	mov	r4,r16
   11248:	a80b883a 	mov	r5,r21
   1124c:	9826943a 	slli	r19,r19,16
   11250:	0004e580 	call	4e58 <__udivsi3>
   11254:	a00b883a 	mov	r5,r20
   11258:	1009883a 	mov	r4,r2
   1125c:	94bfffcc 	andi	r18,r18,65535
   11260:	1021883a 	mov	r16,r2
   11264:	94e4b03a 	or	r18,r18,r19
   11268:	0004f140 	call	4f14 <__mulsi3>
   1126c:	d8c00117 	ldw	r3,4(sp)
   11270:	9080052e 	bgeu	r18,r2,11288 <__udivdi3+0x2b4>
   11274:	8ca5883a 	add	r18,r17,r18
   11278:	813fffc4 	addi	r4,r16,-1
   1127c:	9440ad36 	bltu	r18,r17,11534 <__udivdi3+0x560>
   11280:	9080ac2e 	bgeu	r18,r2,11534 <__udivdi3+0x560>
   11284:	843fff84 	addi	r16,r16,-2
   11288:	b004943a 	slli	r2,r22,16
   1128c:	1404b03a 	or	r2,r2,r16
   11290:	00000206 	br	1129c <__udivdi3+0x2c8>
   11294:	0007883a 	mov	r3,zero
   11298:	0005883a 	mov	r2,zero
   1129c:	dfc00b17 	ldw	ra,44(sp)
   112a0:	df000a17 	ldw	fp,40(sp)
   112a4:	ddc00917 	ldw	r23,36(sp)
   112a8:	dd800817 	ldw	r22,32(sp)
   112ac:	dd400717 	ldw	r21,28(sp)
   112b0:	dd000617 	ldw	r20,24(sp)
   112b4:	dcc00517 	ldw	r19,20(sp)
   112b8:	dc800417 	ldw	r18,16(sp)
   112bc:	dc400317 	ldw	r17,12(sp)
   112c0:	dc000217 	ldw	r16,8(sp)
   112c4:	dec00c04 	addi	sp,sp,48
   112c8:	f800283a 	ret
   112cc:	00803fc4 	movi	r2,255
   112d0:	11c5803a 	cmpltu	r2,r2,r7
   112d4:	100490fa 	slli	r2,r2,3
   112d8:	003f9906 	br	11140 <__alt_data_end+0xfffe0400>
   112dc:	00803fc4 	movi	r2,255
   112e0:	1445803a 	cmpltu	r2,r2,r17
   112e4:	100490fa 	slli	r2,r2,3
   112e8:	003fad06 	br	111a0 <__alt_data_end+0xfffe0460>
   112ec:	00804034 	movhi	r2,256
   112f0:	10bfffc4 	addi	r2,r2,-1
   112f4:	11809f36 	bltu	r2,r6,11574 <__udivdi3+0x5a0>
   112f8:	00800404 	movi	r2,16
   112fc:	003f4c06 	br	11030 <__alt_data_end+0xfffe02f0>
   11300:	3dce983a 	sll	r7,r7,r23
   11304:	30b8d83a 	srl	fp,r6,r2
   11308:	80a2d83a 	srl	r17,r16,r2
   1130c:	35cc983a 	sll	r6,r6,r23
   11310:	3f38b03a 	or	fp,r7,fp
   11314:	e024d43a 	srli	r18,fp,16
   11318:	9884d83a 	srl	r2,r19,r2
   1131c:	85e0983a 	sll	r16,r16,r23
   11320:	8809883a 	mov	r4,r17
   11324:	900b883a 	mov	r5,r18
   11328:	d9800015 	stw	r6,0(sp)
   1132c:	1420b03a 	or	r16,r2,r16
   11330:	0004ebc0 	call	4ebc <__umodsi3>
   11334:	900b883a 	mov	r5,r18
   11338:	8809883a 	mov	r4,r17
   1133c:	1029883a 	mov	r20,r2
   11340:	e5bfffcc 	andi	r22,fp,65535
   11344:	0004e580 	call	4e58 <__udivsi3>
   11348:	100b883a 	mov	r5,r2
   1134c:	b009883a 	mov	r4,r22
   11350:	102b883a 	mov	r21,r2
   11354:	0004f140 	call	4f14 <__mulsi3>
   11358:	a028943a 	slli	r20,r20,16
   1135c:	8006d43a 	srli	r3,r16,16
   11360:	1d06b03a 	or	r3,r3,r20
   11364:	1880042e 	bgeu	r3,r2,11378 <__udivdi3+0x3a4>
   11368:	1f07883a 	add	r3,r3,fp
   1136c:	a93fffc4 	addi	r4,r21,-1
   11370:	1f00892e 	bgeu	r3,fp,11598 <__udivdi3+0x5c4>
   11374:	202b883a 	mov	r21,r4
   11378:	18a3c83a 	sub	r17,r3,r2
   1137c:	8809883a 	mov	r4,r17
   11380:	900b883a 	mov	r5,r18
   11384:	0004ebc0 	call	4ebc <__umodsi3>
   11388:	1029883a 	mov	r20,r2
   1138c:	8809883a 	mov	r4,r17
   11390:	900b883a 	mov	r5,r18
   11394:	a028943a 	slli	r20,r20,16
   11398:	0004e580 	call	4e58 <__udivsi3>
   1139c:	100b883a 	mov	r5,r2
   113a0:	b009883a 	mov	r4,r22
   113a4:	843fffcc 	andi	r16,r16,65535
   113a8:	1023883a 	mov	r17,r2
   113ac:	8520b03a 	or	r16,r16,r20
   113b0:	0004f140 	call	4f14 <__mulsi3>
   113b4:	8080042e 	bgeu	r16,r2,113c8 <__udivdi3+0x3f4>
   113b8:	8721883a 	add	r16,r16,fp
   113bc:	88ffffc4 	addi	r3,r17,-1
   113c0:	8700712e 	bgeu	r16,fp,11588 <__udivdi3+0x5b4>
   113c4:	1823883a 	mov	r17,r3
   113c8:	a80e943a 	slli	r7,r21,16
   113cc:	d8c00017 	ldw	r3,0(sp)
   113d0:	80a1c83a 	sub	r16,r16,r2
   113d4:	3c64b03a 	or	r18,r7,r17
   113d8:	1d3fffcc 	andi	r20,r3,65535
   113dc:	9022d43a 	srli	r17,r18,16
   113e0:	95bfffcc 	andi	r22,r18,65535
   113e4:	a00b883a 	mov	r5,r20
   113e8:	b009883a 	mov	r4,r22
   113ec:	182ad43a 	srli	r21,r3,16
   113f0:	0004f140 	call	4f14 <__mulsi3>
   113f4:	a00b883a 	mov	r5,r20
   113f8:	8809883a 	mov	r4,r17
   113fc:	1039883a 	mov	fp,r2
   11400:	0004f140 	call	4f14 <__mulsi3>
   11404:	8809883a 	mov	r4,r17
   11408:	a80b883a 	mov	r5,r21
   1140c:	1029883a 	mov	r20,r2
   11410:	0004f140 	call	4f14 <__mulsi3>
   11414:	a80b883a 	mov	r5,r21
   11418:	b009883a 	mov	r4,r22
   1141c:	1023883a 	mov	r17,r2
   11420:	0004f140 	call	4f14 <__mulsi3>
   11424:	e006d43a 	srli	r3,fp,16
   11428:	1505883a 	add	r2,r2,r20
   1142c:	1887883a 	add	r3,r3,r2
   11430:	1d00022e 	bgeu	r3,r20,1143c <__udivdi3+0x468>
   11434:	00800074 	movhi	r2,1
   11438:	88a3883a 	add	r17,r17,r2
   1143c:	1804d43a 	srli	r2,r3,16
   11440:	1463883a 	add	r17,r2,r17
   11444:	84404436 	bltu	r16,r17,11558 <__udivdi3+0x584>
   11448:	84403e26 	beq	r16,r17,11544 <__udivdi3+0x570>
   1144c:	9005883a 	mov	r2,r18
   11450:	0007883a 	mov	r3,zero
   11454:	003f9106 	br	1129c <__alt_data_end+0xfffe055c>
   11458:	88e2983a 	sll	r17,r17,r3
   1145c:	80aed83a 	srl	r23,r16,r2
   11460:	80e0983a 	sll	r16,r16,r3
   11464:	882ad43a 	srli	r21,r17,16
   11468:	9884d83a 	srl	r2,r19,r2
   1146c:	b809883a 	mov	r4,r23
   11470:	a80b883a 	mov	r5,r21
   11474:	98e4983a 	sll	r18,r19,r3
   11478:	142cb03a 	or	r22,r2,r16
   1147c:	0004ebc0 	call	4ebc <__umodsi3>
   11480:	b809883a 	mov	r4,r23
   11484:	a80b883a 	mov	r5,r21
   11488:	1027883a 	mov	r19,r2
   1148c:	8d3fffcc 	andi	r20,r17,65535
   11490:	0004e580 	call	4e58 <__udivsi3>
   11494:	a009883a 	mov	r4,r20
   11498:	100b883a 	mov	r5,r2
   1149c:	102f883a 	mov	r23,r2
   114a0:	0004f140 	call	4f14 <__mulsi3>
   114a4:	9826943a 	slli	r19,r19,16
   114a8:	b008d43a 	srli	r4,r22,16
   114ac:	24c8b03a 	or	r4,r4,r19
   114b0:	2080062e 	bgeu	r4,r2,114cc <__udivdi3+0x4f8>
   114b4:	2449883a 	add	r4,r4,r17
   114b8:	b8ffffc4 	addi	r3,r23,-1
   114bc:	24403c36 	bltu	r4,r17,115b0 <__udivdi3+0x5dc>
   114c0:	20803b2e 	bgeu	r4,r2,115b0 <__udivdi3+0x5dc>
   114c4:	bdffff84 	addi	r23,r23,-2
   114c8:	2449883a 	add	r4,r4,r17
   114cc:	20a1c83a 	sub	r16,r4,r2
   114d0:	a80b883a 	mov	r5,r21
   114d4:	8009883a 	mov	r4,r16
   114d8:	0004ebc0 	call	4ebc <__umodsi3>
   114dc:	a80b883a 	mov	r5,r21
   114e0:	8009883a 	mov	r4,r16
   114e4:	1027883a 	mov	r19,r2
   114e8:	0004e580 	call	4e58 <__udivsi3>
   114ec:	a009883a 	mov	r4,r20
   114f0:	100b883a 	mov	r5,r2
   114f4:	9826943a 	slli	r19,r19,16
   114f8:	1039883a 	mov	fp,r2
   114fc:	0004f140 	call	4f14 <__mulsi3>
   11500:	b13fffcc 	andi	r4,r22,65535
   11504:	24c8b03a 	or	r4,r4,r19
   11508:	2080062e 	bgeu	r4,r2,11524 <__udivdi3+0x550>
   1150c:	2449883a 	add	r4,r4,r17
   11510:	e0ffffc4 	addi	r3,fp,-1
   11514:	24402436 	bltu	r4,r17,115a8 <__udivdi3+0x5d4>
   11518:	2080232e 	bgeu	r4,r2,115a8 <__udivdi3+0x5d4>
   1151c:	e73fff84 	addi	fp,fp,-2
   11520:	2449883a 	add	r4,r4,r17
   11524:	b82e943a 	slli	r23,r23,16
   11528:	20a1c83a 	sub	r16,r4,r2
   1152c:	bf06b03a 	or	r3,r23,fp
   11530:	003f2806 	br	111d4 <__alt_data_end+0xfffe0494>
   11534:	2021883a 	mov	r16,r4
   11538:	003f5306 	br	11288 <__alt_data_end+0xfffe0548>
   1153c:	1821883a 	mov	r16,r3
   11540:	003ef406 	br	11114 <__alt_data_end+0xfffe03d4>
   11544:	1806943a 	slli	r3,r3,16
   11548:	9de6983a 	sll	r19,r19,r23
   1154c:	e73fffcc 	andi	fp,fp,65535
   11550:	1f07883a 	add	r3,r3,fp
   11554:	98ffbd2e 	bgeu	r19,r3,1144c <__alt_data_end+0xfffe070c>
   11558:	90bfffc4 	addi	r2,r18,-1
   1155c:	0007883a 	mov	r3,zero
   11560:	003f4e06 	br	1129c <__alt_data_end+0xfffe055c>
   11564:	00800604 	movi	r2,24
   11568:	003ef506 	br	11140 <__alt_data_end+0xfffe0400>
   1156c:	00800604 	movi	r2,24
   11570:	003f0b06 	br	111a0 <__alt_data_end+0xfffe0460>
   11574:	00800604 	movi	r2,24
   11578:	003ead06 	br	11030 <__alt_data_end+0xfffe02f0>
   1157c:	0007883a 	mov	r3,zero
   11580:	00800044 	movi	r2,1
   11584:	003f4506 	br	1129c <__alt_data_end+0xfffe055c>
   11588:	80bf8e2e 	bgeu	r16,r2,113c4 <__alt_data_end+0xfffe0684>
   1158c:	8c7fff84 	addi	r17,r17,-2
   11590:	8721883a 	add	r16,r16,fp
   11594:	003f8c06 	br	113c8 <__alt_data_end+0xfffe0688>
   11598:	18bf762e 	bgeu	r3,r2,11374 <__alt_data_end+0xfffe0634>
   1159c:	ad7fff84 	addi	r21,r21,-2
   115a0:	1f07883a 	add	r3,r3,fp
   115a4:	003f7406 	br	11378 <__alt_data_end+0xfffe0638>
   115a8:	1839883a 	mov	fp,r3
   115ac:	003fdd06 	br	11524 <__alt_data_end+0xfffe07e4>
   115b0:	182f883a 	mov	r23,r3
   115b4:	003fc506 	br	114cc <__alt_data_end+0xfffe078c>
   115b8:	b5bfff84 	addi	r22,r22,-2
   115bc:	3c4f883a 	add	r7,r7,r17
   115c0:	003f1a06 	br	1122c <__alt_data_end+0xfffe04ec>
   115c4:	b5bfff84 	addi	r22,r22,-2
   115c8:	1c47883a 	add	r3,r3,r17
   115cc:	003ebc06 	br	110c0 <__alt_data_end+0xfffe0380>

000115d0 <__umoddi3>:
   115d0:	defff304 	addi	sp,sp,-52
   115d4:	df000b15 	stw	fp,44(sp)
   115d8:	dc400415 	stw	r17,16(sp)
   115dc:	dc000315 	stw	r16,12(sp)
   115e0:	dfc00c15 	stw	ra,48(sp)
   115e4:	ddc00a15 	stw	r23,40(sp)
   115e8:	dd800915 	stw	r22,36(sp)
   115ec:	dd400815 	stw	r21,32(sp)
   115f0:	dd000715 	stw	r20,28(sp)
   115f4:	dcc00615 	stw	r19,24(sp)
   115f8:	dc800515 	stw	r18,20(sp)
   115fc:	2021883a 	mov	r16,r4
   11600:	2823883a 	mov	r17,r5
   11604:	2839883a 	mov	fp,r5
   11608:	3800401e 	bne	r7,zero,1170c <__umoddi3+0x13c>
   1160c:	3027883a 	mov	r19,r6
   11610:	2029883a 	mov	r20,r4
   11614:	2980552e 	bgeu	r5,r6,1176c <__umoddi3+0x19c>
   11618:	00bfffd4 	movui	r2,65535
   1161c:	1180a236 	bltu	r2,r6,118a8 <__umoddi3+0x2d8>
   11620:	01003fc4 	movi	r4,255
   11624:	2189803a 	cmpltu	r4,r4,r6
   11628:	200890fa 	slli	r4,r4,3
   1162c:	3104d83a 	srl	r2,r6,r4
   11630:	00c000b4 	movhi	r3,2
   11634:	18f1e304 	addi	r3,r3,-14452
   11638:	1885883a 	add	r2,r3,r2
   1163c:	10c00003 	ldbu	r3,0(r2)
   11640:	00800804 	movi	r2,32
   11644:	1909883a 	add	r4,r3,r4
   11648:	1125c83a 	sub	r18,r2,r4
   1164c:	90000526 	beq	r18,zero,11664 <__umoddi3+0x94>
   11650:	8ca2983a 	sll	r17,r17,r18
   11654:	8108d83a 	srl	r4,r16,r4
   11658:	34a6983a 	sll	r19,r6,r18
   1165c:	84a8983a 	sll	r20,r16,r18
   11660:	2478b03a 	or	fp,r4,r17
   11664:	982cd43a 	srli	r22,r19,16
   11668:	e009883a 	mov	r4,fp
   1166c:	9dffffcc 	andi	r23,r19,65535
   11670:	b00b883a 	mov	r5,r22
   11674:	0004ebc0 	call	4ebc <__umodsi3>
   11678:	b00b883a 	mov	r5,r22
   1167c:	e009883a 	mov	r4,fp
   11680:	102b883a 	mov	r21,r2
   11684:	0004e580 	call	4e58 <__udivsi3>
   11688:	100b883a 	mov	r5,r2
   1168c:	b809883a 	mov	r4,r23
   11690:	0004f140 	call	4f14 <__mulsi3>
   11694:	a82a943a 	slli	r21,r21,16
   11698:	a006d43a 	srli	r3,r20,16
   1169c:	1d46b03a 	or	r3,r3,r21
   116a0:	1880032e 	bgeu	r3,r2,116b0 <__umoddi3+0xe0>
   116a4:	1cc7883a 	add	r3,r3,r19
   116a8:	1cc00136 	bltu	r3,r19,116b0 <__umoddi3+0xe0>
   116ac:	18813136 	bltu	r3,r2,11b74 <__umoddi3+0x5a4>
   116b0:	18a1c83a 	sub	r16,r3,r2
   116b4:	b00b883a 	mov	r5,r22
   116b8:	8009883a 	mov	r4,r16
   116bc:	0004ebc0 	call	4ebc <__umodsi3>
   116c0:	b00b883a 	mov	r5,r22
   116c4:	8009883a 	mov	r4,r16
   116c8:	1023883a 	mov	r17,r2
   116cc:	0004e580 	call	4e58 <__udivsi3>
   116d0:	100b883a 	mov	r5,r2
   116d4:	b809883a 	mov	r4,r23
   116d8:	8822943a 	slli	r17,r17,16
   116dc:	0004f140 	call	4f14 <__mulsi3>
   116e0:	a0ffffcc 	andi	r3,r20,65535
   116e4:	1c46b03a 	or	r3,r3,r17
   116e8:	1880042e 	bgeu	r3,r2,116fc <__umoddi3+0x12c>
   116ec:	1cc7883a 	add	r3,r3,r19
   116f0:	1cc00236 	bltu	r3,r19,116fc <__umoddi3+0x12c>
   116f4:	1880012e 	bgeu	r3,r2,116fc <__umoddi3+0x12c>
   116f8:	1cc7883a 	add	r3,r3,r19
   116fc:	1885c83a 	sub	r2,r3,r2
   11700:	1484d83a 	srl	r2,r2,r18
   11704:	0007883a 	mov	r3,zero
   11708:	00005306 	br	11858 <__umoddi3+0x288>
   1170c:	29c05036 	bltu	r5,r7,11850 <__umoddi3+0x280>
   11710:	00bfffd4 	movui	r2,65535
   11714:	11c05c2e 	bgeu	r2,r7,11888 <__umoddi3+0x2b8>
   11718:	00804034 	movhi	r2,256
   1171c:	10bfffc4 	addi	r2,r2,-1
   11720:	11c10636 	bltu	r2,r7,11b3c <__umoddi3+0x56c>
   11724:	01000404 	movi	r4,16
   11728:	3904d83a 	srl	r2,r7,r4
   1172c:	00c000b4 	movhi	r3,2
   11730:	18f1e304 	addi	r3,r3,-14452
   11734:	1885883a 	add	r2,r3,r2
   11738:	14c00003 	ldbu	r19,0(r2)
   1173c:	00c00804 	movi	r3,32
   11740:	9927883a 	add	r19,r19,r4
   11744:	1ce9c83a 	sub	r20,r3,r19
   11748:	a0005c1e 	bne	r20,zero,118bc <__umoddi3+0x2ec>
   1174c:	3c400136 	bltu	r7,r17,11754 <__umoddi3+0x184>
   11750:	81810a36 	bltu	r16,r6,11b7c <__umoddi3+0x5ac>
   11754:	8185c83a 	sub	r2,r16,r6
   11758:	89e3c83a 	sub	r17,r17,r7
   1175c:	8089803a 	cmpltu	r4,r16,r2
   11760:	8939c83a 	sub	fp,r17,r4
   11764:	e007883a 	mov	r3,fp
   11768:	00003b06 	br	11858 <__umoddi3+0x288>
   1176c:	3000041e 	bne	r6,zero,11780 <__umoddi3+0x1b0>
   11770:	000b883a 	mov	r5,zero
   11774:	01000044 	movi	r4,1
   11778:	0004e580 	call	4e58 <__udivsi3>
   1177c:	1027883a 	mov	r19,r2
   11780:	00bfffd4 	movui	r2,65535
   11784:	14c0442e 	bgeu	r2,r19,11898 <__umoddi3+0x2c8>
   11788:	00804034 	movhi	r2,256
   1178c:	10bfffc4 	addi	r2,r2,-1
   11790:	14c0ec36 	bltu	r2,r19,11b44 <__umoddi3+0x574>
   11794:	00800404 	movi	r2,16
   11798:	9886d83a 	srl	r3,r19,r2
   1179c:	010000b4 	movhi	r4,2
   117a0:	2131e304 	addi	r4,r4,-14452
   117a4:	20c7883a 	add	r3,r4,r3
   117a8:	18c00003 	ldbu	r3,0(r3)
   117ac:	1887883a 	add	r3,r3,r2
   117b0:	00800804 	movi	r2,32
   117b4:	10e5c83a 	sub	r18,r2,r3
   117b8:	9000ab1e 	bne	r18,zero,11a68 <__umoddi3+0x498>
   117bc:	982cd43a 	srli	r22,r19,16
   117c0:	8ce3c83a 	sub	r17,r17,r19
   117c4:	9dffffcc 	andi	r23,r19,65535
   117c8:	b00b883a 	mov	r5,r22
   117cc:	8809883a 	mov	r4,r17
   117d0:	0004ebc0 	call	4ebc <__umodsi3>
   117d4:	b00b883a 	mov	r5,r22
   117d8:	8809883a 	mov	r4,r17
   117dc:	102b883a 	mov	r21,r2
   117e0:	0004e580 	call	4e58 <__udivsi3>
   117e4:	b80b883a 	mov	r5,r23
   117e8:	1009883a 	mov	r4,r2
   117ec:	0004f140 	call	4f14 <__mulsi3>
   117f0:	a82a943a 	slli	r21,r21,16
   117f4:	a006d43a 	srli	r3,r20,16
   117f8:	1d46b03a 	or	r3,r3,r21
   117fc:	1880042e 	bgeu	r3,r2,11810 <__umoddi3+0x240>
   11800:	1cc7883a 	add	r3,r3,r19
   11804:	1cc00236 	bltu	r3,r19,11810 <__umoddi3+0x240>
   11808:	1880012e 	bgeu	r3,r2,11810 <__umoddi3+0x240>
   1180c:	1cc7883a 	add	r3,r3,r19
   11810:	18a1c83a 	sub	r16,r3,r2
   11814:	b00b883a 	mov	r5,r22
   11818:	8009883a 	mov	r4,r16
   1181c:	0004ebc0 	call	4ebc <__umodsi3>
   11820:	1023883a 	mov	r17,r2
   11824:	b00b883a 	mov	r5,r22
   11828:	8009883a 	mov	r4,r16
   1182c:	0004e580 	call	4e58 <__udivsi3>
   11830:	8822943a 	slli	r17,r17,16
   11834:	b80b883a 	mov	r5,r23
   11838:	1009883a 	mov	r4,r2
   1183c:	0004f140 	call	4f14 <__mulsi3>
   11840:	a53fffcc 	andi	r20,r20,65535
   11844:	a446b03a 	or	r3,r20,r17
   11848:	18bfac2e 	bgeu	r3,r2,116fc <__alt_data_end+0xfffe09bc>
   1184c:	003fa706 	br	116ec <__alt_data_end+0xfffe09ac>
   11850:	2005883a 	mov	r2,r4
   11854:	2807883a 	mov	r3,r5
   11858:	dfc00c17 	ldw	ra,48(sp)
   1185c:	df000b17 	ldw	fp,44(sp)
   11860:	ddc00a17 	ldw	r23,40(sp)
   11864:	dd800917 	ldw	r22,36(sp)
   11868:	dd400817 	ldw	r21,32(sp)
   1186c:	dd000717 	ldw	r20,28(sp)
   11870:	dcc00617 	ldw	r19,24(sp)
   11874:	dc800517 	ldw	r18,20(sp)
   11878:	dc400417 	ldw	r17,16(sp)
   1187c:	dc000317 	ldw	r16,12(sp)
   11880:	dec00d04 	addi	sp,sp,52
   11884:	f800283a 	ret
   11888:	04c03fc4 	movi	r19,255
   1188c:	99c9803a 	cmpltu	r4,r19,r7
   11890:	200890fa 	slli	r4,r4,3
   11894:	003fa406 	br	11728 <__alt_data_end+0xfffe09e8>
   11898:	00803fc4 	movi	r2,255
   1189c:	14c5803a 	cmpltu	r2,r2,r19
   118a0:	100490fa 	slli	r2,r2,3
   118a4:	003fbc06 	br	11798 <__alt_data_end+0xfffe0a58>
   118a8:	00804034 	movhi	r2,256
   118ac:	10bfffc4 	addi	r2,r2,-1
   118b0:	1180a636 	bltu	r2,r6,11b4c <__umoddi3+0x57c>
   118b4:	01000404 	movi	r4,16
   118b8:	003f5c06 	br	1162c <__alt_data_end+0xfffe08ec>
   118bc:	3d0e983a 	sll	r7,r7,r20
   118c0:	34ead83a 	srl	r21,r6,r19
   118c4:	8cc6d83a 	srl	r3,r17,r19
   118c8:	8d10983a 	sll	r8,r17,r20
   118cc:	3d6ab03a 	or	r21,r7,r21
   118d0:	a82cd43a 	srli	r22,r21,16
   118d4:	84e2d83a 	srl	r17,r16,r19
   118d8:	1809883a 	mov	r4,r3
   118dc:	b00b883a 	mov	r5,r22
   118e0:	8a22b03a 	or	r17,r17,r8
   118e4:	3524983a 	sll	r18,r6,r20
   118e8:	dc400015 	stw	r17,0(sp)
   118ec:	d8c00115 	stw	r3,4(sp)
   118f0:	0004ebc0 	call	4ebc <__umodsi3>
   118f4:	d8c00117 	ldw	r3,4(sp)
   118f8:	b00b883a 	mov	r5,r22
   118fc:	1039883a 	mov	fp,r2
   11900:	1809883a 	mov	r4,r3
   11904:	0004e580 	call	4e58 <__udivsi3>
   11908:	adffffcc 	andi	r23,r21,65535
   1190c:	100b883a 	mov	r5,r2
   11910:	b809883a 	mov	r4,r23
   11914:	1023883a 	mov	r17,r2
   11918:	0004f140 	call	4f14 <__mulsi3>
   1191c:	d9400017 	ldw	r5,0(sp)
   11920:	e008943a 	slli	r4,fp,16
   11924:	8520983a 	sll	r16,r16,r20
   11928:	2806d43a 	srli	r3,r5,16
   1192c:	1906b03a 	or	r3,r3,r4
   11930:	1880042e 	bgeu	r3,r2,11944 <__umoddi3+0x374>
   11934:	1d47883a 	add	r3,r3,r21
   11938:	893fffc4 	addi	r4,r17,-1
   1193c:	1d40892e 	bgeu	r3,r21,11b64 <__umoddi3+0x594>
   11940:	2023883a 	mov	r17,r4
   11944:	18b9c83a 	sub	fp,r3,r2
   11948:	b00b883a 	mov	r5,r22
   1194c:	e009883a 	mov	r4,fp
   11950:	0004ebc0 	call	4ebc <__umodsi3>
   11954:	b00b883a 	mov	r5,r22
   11958:	e009883a 	mov	r4,fp
   1195c:	d8800215 	stw	r2,8(sp)
   11960:	0004e580 	call	4e58 <__udivsi3>
   11964:	100b883a 	mov	r5,r2
   11968:	b809883a 	mov	r4,r23
   1196c:	102d883a 	mov	r22,r2
   11970:	0004f140 	call	4f14 <__mulsi3>
   11974:	d9800217 	ldw	r6,8(sp)
   11978:	d8c00017 	ldw	r3,0(sp)
   1197c:	300c943a 	slli	r6,r6,16
   11980:	1a3fffcc 	andi	r8,r3,65535
   11984:	4190b03a 	or	r8,r8,r6
   11988:	4080042e 	bgeu	r8,r2,1199c <__umoddi3+0x3cc>
   1198c:	4551883a 	add	r8,r8,r21
   11990:	b0ffffc4 	addi	r3,r22,-1
   11994:	45406f2e 	bgeu	r8,r21,11b54 <__umoddi3+0x584>
   11998:	182d883a 	mov	r22,r3
   1199c:	880e943a 	slli	r7,r17,16
   119a0:	9006d43a 	srli	r3,r18,16
   119a4:	91bfffcc 	andi	r6,r18,65535
   119a8:	3dacb03a 	or	r22,r7,r22
   119ac:	b02ed43a 	srli	r23,r22,16
   119b0:	b5bfffcc 	andi	r22,r22,65535
   119b4:	300b883a 	mov	r5,r6
   119b8:	b009883a 	mov	r4,r22
   119bc:	40a3c83a 	sub	r17,r8,r2
   119c0:	d8c00115 	stw	r3,4(sp)
   119c4:	d9800215 	stw	r6,8(sp)
   119c8:	0004f140 	call	4f14 <__mulsi3>
   119cc:	d9800217 	ldw	r6,8(sp)
   119d0:	b809883a 	mov	r4,r23
   119d4:	1039883a 	mov	fp,r2
   119d8:	300b883a 	mov	r5,r6
   119dc:	0004f140 	call	4f14 <__mulsi3>
   119e0:	d8c00117 	ldw	r3,4(sp)
   119e4:	b809883a 	mov	r4,r23
   119e8:	d8800215 	stw	r2,8(sp)
   119ec:	180b883a 	mov	r5,r3
   119f0:	0004f140 	call	4f14 <__mulsi3>
   119f4:	d8c00117 	ldw	r3,4(sp)
   119f8:	b009883a 	mov	r4,r22
   119fc:	102f883a 	mov	r23,r2
   11a00:	180b883a 	mov	r5,r3
   11a04:	0004f140 	call	4f14 <__mulsi3>
   11a08:	d9800217 	ldw	r6,8(sp)
   11a0c:	e006d43a 	srli	r3,fp,16
   11a10:	1185883a 	add	r2,r2,r6
   11a14:	1885883a 	add	r2,r3,r2
   11a18:	1180022e 	bgeu	r2,r6,11a24 <__umoddi3+0x454>
   11a1c:	00c00074 	movhi	r3,1
   11a20:	b8ef883a 	add	r23,r23,r3
   11a24:	1006d43a 	srli	r3,r2,16
   11a28:	1004943a 	slli	r2,r2,16
   11a2c:	e73fffcc 	andi	fp,fp,65535
   11a30:	1dc7883a 	add	r3,r3,r23
   11a34:	1739883a 	add	fp,r2,fp
   11a38:	88c03a36 	bltu	r17,r3,11b24 <__umoddi3+0x554>
   11a3c:	88c05126 	beq	r17,r3,11b84 <__umoddi3+0x5b4>
   11a40:	88c9c83a 	sub	r4,r17,r3
   11a44:	e00f883a 	mov	r7,fp
   11a48:	81cfc83a 	sub	r7,r16,r7
   11a4c:	81c7803a 	cmpltu	r3,r16,r7
   11a50:	20c7c83a 	sub	r3,r4,r3
   11a54:	1cc4983a 	sll	r2,r3,r19
   11a58:	3d0ed83a 	srl	r7,r7,r20
   11a5c:	1d06d83a 	srl	r3,r3,r20
   11a60:	11c4b03a 	or	r2,r2,r7
   11a64:	003f7c06 	br	11858 <__alt_data_end+0xfffe0b18>
   11a68:	9ca6983a 	sll	r19,r19,r18
   11a6c:	88f8d83a 	srl	fp,r17,r3
   11a70:	80c4d83a 	srl	r2,r16,r3
   11a74:	982cd43a 	srli	r22,r19,16
   11a78:	8ca2983a 	sll	r17,r17,r18
   11a7c:	e009883a 	mov	r4,fp
   11a80:	b00b883a 	mov	r5,r22
   11a84:	146ab03a 	or	r21,r2,r17
   11a88:	0004ebc0 	call	4ebc <__umodsi3>
   11a8c:	b00b883a 	mov	r5,r22
   11a90:	e009883a 	mov	r4,fp
   11a94:	1029883a 	mov	r20,r2
   11a98:	9dffffcc 	andi	r23,r19,65535
   11a9c:	0004e580 	call	4e58 <__udivsi3>
   11aa0:	b809883a 	mov	r4,r23
   11aa4:	100b883a 	mov	r5,r2
   11aa8:	0004f140 	call	4f14 <__mulsi3>
   11aac:	a008943a 	slli	r4,r20,16
   11ab0:	a806d43a 	srli	r3,r21,16
   11ab4:	84a8983a 	sll	r20,r16,r18
   11ab8:	1906b03a 	or	r3,r3,r4
   11abc:	1880042e 	bgeu	r3,r2,11ad0 <__umoddi3+0x500>
   11ac0:	1cc7883a 	add	r3,r3,r19
   11ac4:	1cc00236 	bltu	r3,r19,11ad0 <__umoddi3+0x500>
   11ac8:	1880012e 	bgeu	r3,r2,11ad0 <__umoddi3+0x500>
   11acc:	1cc7883a 	add	r3,r3,r19
   11ad0:	18a3c83a 	sub	r17,r3,r2
   11ad4:	b00b883a 	mov	r5,r22
   11ad8:	8809883a 	mov	r4,r17
   11adc:	0004ebc0 	call	4ebc <__umodsi3>
   11ae0:	b00b883a 	mov	r5,r22
   11ae4:	8809883a 	mov	r4,r17
   11ae8:	1021883a 	mov	r16,r2
   11aec:	0004e580 	call	4e58 <__udivsi3>
   11af0:	100b883a 	mov	r5,r2
   11af4:	b809883a 	mov	r4,r23
   11af8:	8020943a 	slli	r16,r16,16
   11afc:	0004f140 	call	4f14 <__mulsi3>
   11b00:	a8ffffcc 	andi	r3,r21,65535
   11b04:	1c06b03a 	or	r3,r3,r16
   11b08:	1880042e 	bgeu	r3,r2,11b1c <__umoddi3+0x54c>
   11b0c:	1cc7883a 	add	r3,r3,r19
   11b10:	1cc00236 	bltu	r3,r19,11b1c <__umoddi3+0x54c>
   11b14:	1880012e 	bgeu	r3,r2,11b1c <__umoddi3+0x54c>
   11b18:	1cc7883a 	add	r3,r3,r19
   11b1c:	18a3c83a 	sub	r17,r3,r2
   11b20:	003f2906 	br	117c8 <__alt_data_end+0xfffe0a88>
   11b24:	e48fc83a 	sub	r7,fp,r18
   11b28:	1d49c83a 	sub	r4,r3,r21
   11b2c:	e1f9803a 	cmpltu	fp,fp,r7
   11b30:	2739c83a 	sub	fp,r4,fp
   11b34:	8f09c83a 	sub	r4,r17,fp
   11b38:	003fc306 	br	11a48 <__alt_data_end+0xfffe0d08>
   11b3c:	01000604 	movi	r4,24
   11b40:	003ef906 	br	11728 <__alt_data_end+0xfffe09e8>
   11b44:	00800604 	movi	r2,24
   11b48:	003f1306 	br	11798 <__alt_data_end+0xfffe0a58>
   11b4c:	01000604 	movi	r4,24
   11b50:	003eb606 	br	1162c <__alt_data_end+0xfffe08ec>
   11b54:	40bf902e 	bgeu	r8,r2,11998 <__alt_data_end+0xfffe0c58>
   11b58:	b5bfff84 	addi	r22,r22,-2
   11b5c:	4551883a 	add	r8,r8,r21
   11b60:	003f8e06 	br	1199c <__alt_data_end+0xfffe0c5c>
   11b64:	18bf762e 	bgeu	r3,r2,11940 <__alt_data_end+0xfffe0c00>
   11b68:	8c7fff84 	addi	r17,r17,-2
   11b6c:	1d47883a 	add	r3,r3,r21
   11b70:	003f7406 	br	11944 <__alt_data_end+0xfffe0c04>
   11b74:	1cc7883a 	add	r3,r3,r19
   11b78:	003ecd06 	br	116b0 <__alt_data_end+0xfffe0970>
   11b7c:	8005883a 	mov	r2,r16
   11b80:	003ef806 	br	11764 <__alt_data_end+0xfffe0a24>
   11b84:	873fe736 	bltu	r16,fp,11b24 <__alt_data_end+0xfffe0de4>
   11b88:	e00f883a 	mov	r7,fp
   11b8c:	0009883a 	mov	r4,zero
   11b90:	003fad06 	br	11a48 <__alt_data_end+0xfffe0d08>

00011b94 <__floatunsidf>:
   11b94:	defffe04 	addi	sp,sp,-8
   11b98:	dc000015 	stw	r16,0(sp)
   11b9c:	dfc00115 	stw	ra,4(sp)
   11ba0:	2021883a 	mov	r16,r4
   11ba4:	20002226 	beq	r4,zero,11c30 <__floatunsidf+0x9c>
   11ba8:	00076d40 	call	76d4 <__clzsi2>
   11bac:	01010784 	movi	r4,1054
   11bb0:	2089c83a 	sub	r4,r4,r2
   11bb4:	01810cc4 	movi	r6,1075
   11bb8:	310dc83a 	sub	r6,r6,r4
   11bbc:	00c007c4 	movi	r3,31
   11bc0:	1980120e 	bge	r3,r6,11c0c <__floatunsidf+0x78>
   11bc4:	00c104c4 	movi	r3,1043
   11bc8:	1907c83a 	sub	r3,r3,r4
   11bcc:	80ca983a 	sll	r5,r16,r3
   11bd0:	00800434 	movhi	r2,16
   11bd4:	10bfffc4 	addi	r2,r2,-1
   11bd8:	2101ffcc 	andi	r4,r4,2047
   11bdc:	0021883a 	mov	r16,zero
   11be0:	288a703a 	and	r5,r5,r2
   11be4:	2008953a 	slli	r4,r4,20
   11be8:	00c00434 	movhi	r3,16
   11bec:	18ffffc4 	addi	r3,r3,-1
   11bf0:	28c6703a 	and	r3,r5,r3
   11bf4:	8005883a 	mov	r2,r16
   11bf8:	1906b03a 	or	r3,r3,r4
   11bfc:	dfc00117 	ldw	ra,4(sp)
   11c00:	dc000017 	ldw	r16,0(sp)
   11c04:	dec00204 	addi	sp,sp,8
   11c08:	f800283a 	ret
   11c0c:	00c002c4 	movi	r3,11
   11c10:	188bc83a 	sub	r5,r3,r2
   11c14:	814ad83a 	srl	r5,r16,r5
   11c18:	00c00434 	movhi	r3,16
   11c1c:	18ffffc4 	addi	r3,r3,-1
   11c20:	81a0983a 	sll	r16,r16,r6
   11c24:	2101ffcc 	andi	r4,r4,2047
   11c28:	28ca703a 	and	r5,r5,r3
   11c2c:	003fed06 	br	11be4 <__alt_data_end+0xfffe0ea4>
   11c30:	0009883a 	mov	r4,zero
   11c34:	000b883a 	mov	r5,zero
   11c38:	003fea06 	br	11be4 <__alt_data_end+0xfffe0ea4>

00011c3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11c3c:	defffe04 	addi	sp,sp,-8
   11c40:	dfc00115 	stw	ra,4(sp)
   11c44:	df000015 	stw	fp,0(sp)
   11c48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11c4c:	d0a00c17 	ldw	r2,-32720(gp)
   11c50:	10000326 	beq	r2,zero,11c60 <alt_get_errno+0x24>
   11c54:	d0a00c17 	ldw	r2,-32720(gp)
   11c58:	103ee83a 	callr	r2
   11c5c:	00000106 	br	11c64 <alt_get_errno+0x28>
   11c60:	d0a71404 	addi	r2,gp,-25520
}
   11c64:	e037883a 	mov	sp,fp
   11c68:	dfc00117 	ldw	ra,4(sp)
   11c6c:	df000017 	ldw	fp,0(sp)
   11c70:	dec00204 	addi	sp,sp,8
   11c74:	f800283a 	ret

00011c78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11c78:	defffb04 	addi	sp,sp,-20
   11c7c:	dfc00415 	stw	ra,16(sp)
   11c80:	df000315 	stw	fp,12(sp)
   11c84:	df000304 	addi	fp,sp,12
   11c88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11c8c:	e0bfff17 	ldw	r2,-4(fp)
   11c90:	10000816 	blt	r2,zero,11cb4 <close+0x3c>
   11c94:	01400304 	movi	r5,12
   11c98:	e13fff17 	ldw	r4,-4(fp)
   11c9c:	0004f140 	call	4f14 <__mulsi3>
   11ca0:	1007883a 	mov	r3,r2
   11ca4:	008000b4 	movhi	r2,2
   11ca8:	10b51d04 	addi	r2,r2,-11148
   11cac:	1885883a 	add	r2,r3,r2
   11cb0:	00000106 	br	11cb8 <close+0x40>
   11cb4:	0005883a 	mov	r2,zero
   11cb8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11cbc:	e0bffd17 	ldw	r2,-12(fp)
   11cc0:	10001926 	beq	r2,zero,11d28 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11cc4:	e0bffd17 	ldw	r2,-12(fp)
   11cc8:	10800017 	ldw	r2,0(r2)
   11ccc:	10800417 	ldw	r2,16(r2)
   11cd0:	10000626 	beq	r2,zero,11cec <close+0x74>
   11cd4:	e0bffd17 	ldw	r2,-12(fp)
   11cd8:	10800017 	ldw	r2,0(r2)
   11cdc:	10800417 	ldw	r2,16(r2)
   11ce0:	e13ffd17 	ldw	r4,-12(fp)
   11ce4:	103ee83a 	callr	r2
   11ce8:	00000106 	br	11cf0 <close+0x78>
   11cec:	0005883a 	mov	r2,zero
   11cf0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11cf4:	e13fff17 	ldw	r4,-4(fp)
   11cf8:	00123580 	call	12358 <alt_release_fd>
    if (rval < 0)
   11cfc:	e0bffe17 	ldw	r2,-8(fp)
   11d00:	1000070e 	bge	r2,zero,11d20 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11d04:	0011c3c0 	call	11c3c <alt_get_errno>
   11d08:	1007883a 	mov	r3,r2
   11d0c:	e0bffe17 	ldw	r2,-8(fp)
   11d10:	0085c83a 	sub	r2,zero,r2
   11d14:	18800015 	stw	r2,0(r3)
      return -1;
   11d18:	00bfffc4 	movi	r2,-1
   11d1c:	00000706 	br	11d3c <close+0xc4>
    }
    return 0;
   11d20:	0005883a 	mov	r2,zero
   11d24:	00000506 	br	11d3c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11d28:	0011c3c0 	call	11c3c <alt_get_errno>
   11d2c:	1007883a 	mov	r3,r2
   11d30:	00801444 	movi	r2,81
   11d34:	18800015 	stw	r2,0(r3)
    return -1;
   11d38:	00bfffc4 	movi	r2,-1
  }
}
   11d3c:	e037883a 	mov	sp,fp
   11d40:	dfc00117 	ldw	ra,4(sp)
   11d44:	df000017 	ldw	fp,0(sp)
   11d48:	dec00204 	addi	sp,sp,8
   11d4c:	f800283a 	ret

00011d50 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11d50:	defffc04 	addi	sp,sp,-16
   11d54:	df000315 	stw	fp,12(sp)
   11d58:	df000304 	addi	fp,sp,12
   11d5c:	e13ffd15 	stw	r4,-12(fp)
   11d60:	e17ffe15 	stw	r5,-8(fp)
   11d64:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11d68:	e0bfff17 	ldw	r2,-4(fp)
}
   11d6c:	e037883a 	mov	sp,fp
   11d70:	df000017 	ldw	fp,0(sp)
   11d74:	dec00104 	addi	sp,sp,4
   11d78:	f800283a 	ret

00011d7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11d7c:	defffe04 	addi	sp,sp,-8
   11d80:	dfc00115 	stw	ra,4(sp)
   11d84:	df000015 	stw	fp,0(sp)
   11d88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11d8c:	d0a00c17 	ldw	r2,-32720(gp)
   11d90:	10000326 	beq	r2,zero,11da0 <alt_get_errno+0x24>
   11d94:	d0a00c17 	ldw	r2,-32720(gp)
   11d98:	103ee83a 	callr	r2
   11d9c:	00000106 	br	11da4 <alt_get_errno+0x28>
   11da0:	d0a71404 	addi	r2,gp,-25520
}
   11da4:	e037883a 	mov	sp,fp
   11da8:	dfc00117 	ldw	ra,4(sp)
   11dac:	df000017 	ldw	fp,0(sp)
   11db0:	dec00204 	addi	sp,sp,8
   11db4:	f800283a 	ret

00011db8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   11db8:	defffb04 	addi	sp,sp,-20
   11dbc:	dfc00415 	stw	ra,16(sp)
   11dc0:	df000315 	stw	fp,12(sp)
   11dc4:	df000304 	addi	fp,sp,12
   11dc8:	e13ffe15 	stw	r4,-8(fp)
   11dcc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11dd0:	e0bffe17 	ldw	r2,-8(fp)
   11dd4:	10000816 	blt	r2,zero,11df8 <fstat+0x40>
   11dd8:	01400304 	movi	r5,12
   11ddc:	e13ffe17 	ldw	r4,-8(fp)
   11de0:	0004f140 	call	4f14 <__mulsi3>
   11de4:	1007883a 	mov	r3,r2
   11de8:	008000b4 	movhi	r2,2
   11dec:	10b51d04 	addi	r2,r2,-11148
   11df0:	1885883a 	add	r2,r3,r2
   11df4:	00000106 	br	11dfc <fstat+0x44>
   11df8:	0005883a 	mov	r2,zero
   11dfc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   11e00:	e0bffd17 	ldw	r2,-12(fp)
   11e04:	10001026 	beq	r2,zero,11e48 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   11e08:	e0bffd17 	ldw	r2,-12(fp)
   11e0c:	10800017 	ldw	r2,0(r2)
   11e10:	10800817 	ldw	r2,32(r2)
   11e14:	10000726 	beq	r2,zero,11e34 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   11e18:	e0bffd17 	ldw	r2,-12(fp)
   11e1c:	10800017 	ldw	r2,0(r2)
   11e20:	10800817 	ldw	r2,32(r2)
   11e24:	e17fff17 	ldw	r5,-4(fp)
   11e28:	e13ffd17 	ldw	r4,-12(fp)
   11e2c:	103ee83a 	callr	r2
   11e30:	00000a06 	br	11e5c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   11e34:	e0bfff17 	ldw	r2,-4(fp)
   11e38:	00c80004 	movi	r3,8192
   11e3c:	10c00115 	stw	r3,4(r2)
      return 0;
   11e40:	0005883a 	mov	r2,zero
   11e44:	00000506 	br	11e5c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11e48:	0011d7c0 	call	11d7c <alt_get_errno>
   11e4c:	1007883a 	mov	r3,r2
   11e50:	00801444 	movi	r2,81
   11e54:	18800015 	stw	r2,0(r3)
    return -1;
   11e58:	00bfffc4 	movi	r2,-1
  }
}
   11e5c:	e037883a 	mov	sp,fp
   11e60:	dfc00117 	ldw	ra,4(sp)
   11e64:	df000017 	ldw	fp,0(sp)
   11e68:	dec00204 	addi	sp,sp,8
   11e6c:	f800283a 	ret

00011e70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11e70:	defffe04 	addi	sp,sp,-8
   11e74:	dfc00115 	stw	ra,4(sp)
   11e78:	df000015 	stw	fp,0(sp)
   11e7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11e80:	d0a00c17 	ldw	r2,-32720(gp)
   11e84:	10000326 	beq	r2,zero,11e94 <alt_get_errno+0x24>
   11e88:	d0a00c17 	ldw	r2,-32720(gp)
   11e8c:	103ee83a 	callr	r2
   11e90:	00000106 	br	11e98 <alt_get_errno+0x28>
   11e94:	d0a71404 	addi	r2,gp,-25520
}
   11e98:	e037883a 	mov	sp,fp
   11e9c:	dfc00117 	ldw	ra,4(sp)
   11ea0:	df000017 	ldw	fp,0(sp)
   11ea4:	dec00204 	addi	sp,sp,8
   11ea8:	f800283a 	ret

00011eac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   11eac:	deffed04 	addi	sp,sp,-76
   11eb0:	dfc01215 	stw	ra,72(sp)
   11eb4:	df001115 	stw	fp,68(sp)
   11eb8:	df001104 	addi	fp,sp,68
   11ebc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11ec0:	e0bfff17 	ldw	r2,-4(fp)
   11ec4:	10000816 	blt	r2,zero,11ee8 <isatty+0x3c>
   11ec8:	01400304 	movi	r5,12
   11ecc:	e13fff17 	ldw	r4,-4(fp)
   11ed0:	0004f140 	call	4f14 <__mulsi3>
   11ed4:	1007883a 	mov	r3,r2
   11ed8:	008000b4 	movhi	r2,2
   11edc:	10b51d04 	addi	r2,r2,-11148
   11ee0:	1885883a 	add	r2,r3,r2
   11ee4:	00000106 	br	11eec <isatty+0x40>
   11ee8:	0005883a 	mov	r2,zero
   11eec:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   11ef0:	e0bfef17 	ldw	r2,-68(fp)
   11ef4:	10000e26 	beq	r2,zero,11f30 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   11ef8:	e0bfef17 	ldw	r2,-68(fp)
   11efc:	10800017 	ldw	r2,0(r2)
   11f00:	10800817 	ldw	r2,32(r2)
   11f04:	1000021e 	bne	r2,zero,11f10 <isatty+0x64>
    {
      return 1;
   11f08:	00800044 	movi	r2,1
   11f0c:	00000d06 	br	11f44 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   11f10:	e0bff004 	addi	r2,fp,-64
   11f14:	100b883a 	mov	r5,r2
   11f18:	e13fff17 	ldw	r4,-4(fp)
   11f1c:	0011db80 	call	11db8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   11f20:	e0bff117 	ldw	r2,-60(fp)
   11f24:	10880020 	cmpeqi	r2,r2,8192
   11f28:	10803fcc 	andi	r2,r2,255
   11f2c:	00000506 	br	11f44 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11f30:	0011e700 	call	11e70 <alt_get_errno>
   11f34:	1007883a 	mov	r3,r2
   11f38:	00801444 	movi	r2,81
   11f3c:	18800015 	stw	r2,0(r3)
    return 0;
   11f40:	0005883a 	mov	r2,zero
  }
}
   11f44:	e037883a 	mov	sp,fp
   11f48:	dfc00117 	ldw	ra,4(sp)
   11f4c:	df000017 	ldw	fp,0(sp)
   11f50:	dec00204 	addi	sp,sp,8
   11f54:	f800283a 	ret

00011f58 <alt_load_section>:
   11f58:	defffc04 	addi	sp,sp,-16
   11f5c:	df000315 	stw	fp,12(sp)
   11f60:	df000304 	addi	fp,sp,12
   11f64:	e13ffd15 	stw	r4,-12(fp)
   11f68:	e17ffe15 	stw	r5,-8(fp)
   11f6c:	e1bfff15 	stw	r6,-4(fp)
   11f70:	e0fffe17 	ldw	r3,-8(fp)
   11f74:	e0bffd17 	ldw	r2,-12(fp)
   11f78:	18800c26 	beq	r3,r2,11fac <alt_load_section+0x54>
   11f7c:	00000806 	br	11fa0 <alt_load_section+0x48>
   11f80:	e0bffe17 	ldw	r2,-8(fp)
   11f84:	10c00104 	addi	r3,r2,4
   11f88:	e0fffe15 	stw	r3,-8(fp)
   11f8c:	e0fffd17 	ldw	r3,-12(fp)
   11f90:	19000104 	addi	r4,r3,4
   11f94:	e13ffd15 	stw	r4,-12(fp)
   11f98:	18c00017 	ldw	r3,0(r3)
   11f9c:	10c00015 	stw	r3,0(r2)
   11fa0:	e0fffe17 	ldw	r3,-8(fp)
   11fa4:	e0bfff17 	ldw	r2,-4(fp)
   11fa8:	18bff51e 	bne	r3,r2,11f80 <__alt_data_end+0xfffe1240>
   11fac:	0001883a 	nop
   11fb0:	e037883a 	mov	sp,fp
   11fb4:	df000017 	ldw	fp,0(sp)
   11fb8:	dec00104 	addi	sp,sp,4
   11fbc:	f800283a 	ret

00011fc0 <alt_load>:
   11fc0:	defffe04 	addi	sp,sp,-8
   11fc4:	dfc00115 	stw	ra,4(sp)
   11fc8:	df000015 	stw	fp,0(sp)
   11fcc:	d839883a 	mov	fp,sp
   11fd0:	018000b4 	movhi	r6,2
   11fd4:	31b9c804 	addi	r6,r6,-6368
   11fd8:	014000b4 	movhi	r5,2
   11fdc:	2972ea04 	addi	r5,r5,-13400
   11fe0:	010000b4 	movhi	r4,2
   11fe4:	2139c804 	addi	r4,r4,-6368
   11fe8:	0011f580 	call	11f58 <alt_load_section>
   11fec:	01800034 	movhi	r6,0
   11ff0:	31808c04 	addi	r6,r6,560
   11ff4:	01400034 	movhi	r5,0
   11ff8:	29400804 	addi	r5,r5,32
   11ffc:	01000034 	movhi	r4,0
   12000:	21000804 	addi	r4,r4,32
   12004:	0011f580 	call	11f58 <alt_load_section>
   12008:	018000b4 	movhi	r6,2
   1200c:	31b2ea04 	addi	r6,r6,-13400
   12010:	014000b4 	movhi	r5,2
   12014:	29714c04 	addi	r5,r5,-15056
   12018:	010000b4 	movhi	r4,2
   1201c:	21314c04 	addi	r4,r4,-15056
   12020:	0011f580 	call	11f58 <alt_load_section>
   12024:	001b0f00 	call	1b0f0 <alt_dcache_flush_all>
   12028:	001b2b00 	call	1b2b0 <alt_icache_flush_all>
   1202c:	0001883a 	nop
   12030:	e037883a 	mov	sp,fp
   12034:	dfc00117 	ldw	ra,4(sp)
   12038:	df000017 	ldw	fp,0(sp)
   1203c:	dec00204 	addi	sp,sp,8
   12040:	f800283a 	ret

00012044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12044:	defffe04 	addi	sp,sp,-8
   12048:	dfc00115 	stw	ra,4(sp)
   1204c:	df000015 	stw	fp,0(sp)
   12050:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12054:	d0a00c17 	ldw	r2,-32720(gp)
   12058:	10000326 	beq	r2,zero,12068 <alt_get_errno+0x24>
   1205c:	d0a00c17 	ldw	r2,-32720(gp)
   12060:	103ee83a 	callr	r2
   12064:	00000106 	br	1206c <alt_get_errno+0x28>
   12068:	d0a71404 	addi	r2,gp,-25520
}
   1206c:	e037883a 	mov	sp,fp
   12070:	dfc00117 	ldw	ra,4(sp)
   12074:	df000017 	ldw	fp,0(sp)
   12078:	dec00204 	addi	sp,sp,8
   1207c:	f800283a 	ret

00012080 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12080:	defff904 	addi	sp,sp,-28
   12084:	dfc00615 	stw	ra,24(sp)
   12088:	df000515 	stw	fp,20(sp)
   1208c:	df000504 	addi	fp,sp,20
   12090:	e13ffd15 	stw	r4,-12(fp)
   12094:	e17ffe15 	stw	r5,-8(fp)
   12098:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1209c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   120a0:	e0bffd17 	ldw	r2,-12(fp)
   120a4:	10000816 	blt	r2,zero,120c8 <lseek+0x48>
   120a8:	01400304 	movi	r5,12
   120ac:	e13ffd17 	ldw	r4,-12(fp)
   120b0:	0004f140 	call	4f14 <__mulsi3>
   120b4:	1007883a 	mov	r3,r2
   120b8:	008000b4 	movhi	r2,2
   120bc:	10b51d04 	addi	r2,r2,-11148
   120c0:	1885883a 	add	r2,r3,r2
   120c4:	00000106 	br	120cc <lseek+0x4c>
   120c8:	0005883a 	mov	r2,zero
   120cc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   120d0:	e0bffc17 	ldw	r2,-16(fp)
   120d4:	10001026 	beq	r2,zero,12118 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   120d8:	e0bffc17 	ldw	r2,-16(fp)
   120dc:	10800017 	ldw	r2,0(r2)
   120e0:	10800717 	ldw	r2,28(r2)
   120e4:	10000926 	beq	r2,zero,1210c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   120e8:	e0bffc17 	ldw	r2,-16(fp)
   120ec:	10800017 	ldw	r2,0(r2)
   120f0:	10800717 	ldw	r2,28(r2)
   120f4:	e1bfff17 	ldw	r6,-4(fp)
   120f8:	e17ffe17 	ldw	r5,-8(fp)
   120fc:	e13ffc17 	ldw	r4,-16(fp)
   12100:	103ee83a 	callr	r2
   12104:	e0bffb15 	stw	r2,-20(fp)
   12108:	00000506 	br	12120 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1210c:	00bfde84 	movi	r2,-134
   12110:	e0bffb15 	stw	r2,-20(fp)
   12114:	00000206 	br	12120 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   12118:	00bfebc4 	movi	r2,-81
   1211c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12120:	e0bffb17 	ldw	r2,-20(fp)
   12124:	1000070e 	bge	r2,zero,12144 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   12128:	00120440 	call	12044 <alt_get_errno>
   1212c:	1007883a 	mov	r3,r2
   12130:	e0bffb17 	ldw	r2,-20(fp)
   12134:	0085c83a 	sub	r2,zero,r2
   12138:	18800015 	stw	r2,0(r3)
    rc = -1;
   1213c:	00bfffc4 	movi	r2,-1
   12140:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12144:	e0bffb17 	ldw	r2,-20(fp)
}
   12148:	e037883a 	mov	sp,fp
   1214c:	dfc00117 	ldw	ra,4(sp)
   12150:	df000017 	ldw	fp,0(sp)
   12154:	dec00204 	addi	sp,sp,8
   12158:	f800283a 	ret

0001215c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1215c:	defff904 	addi	sp,sp,-28
   12160:	dfc00615 	stw	ra,24(sp)
   12164:	df000515 	stw	fp,20(sp)
   12168:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1216c:	0009883a 	mov	r4,zero
   12170:	001a1080 	call	1a108 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12174:	00131480 	call	13148 <OSInit>
   12178:	01000044 	movi	r4,1
   1217c:	0017aa40 	call	17aa4 <OSSemCreate>
   12180:	d0a71a15 	stw	r2,-25496(gp)
   12184:	01000044 	movi	r4,1
   12188:	0017aa40 	call	17aa4 <OSSemCreate>
   1218c:	d0a71c15 	stw	r2,-25488(gp)
   12190:	d0a71504 	addi	r2,gp,-25516
   12194:	e0bffc15 	stw	r2,-16(fp)
   12198:	00800044 	movi	r2,1
   1219c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   121a0:	e0bffd0b 	ldhu	r2,-12(fp)
   121a4:	1009883a 	mov	r4,r2
   121a8:	0017aa40 	call	17aa4 <OSSemCreate>
   121ac:	1007883a 	mov	r3,r2
   121b0:	e0bffc17 	ldw	r2,-16(fp)
   121b4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   121b8:	001a1400 	call	1a140 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   121bc:	018000b4 	movhi	r6,2
   121c0:	31b29904 	addi	r6,r6,-13724
   121c4:	014000b4 	movhi	r5,2
   121c8:	29729904 	addi	r5,r5,-13724
   121cc:	010000b4 	movhi	r4,2
   121d0:	21329904 	addi	r4,r4,-13724
   121d4:	001b6540 	call	1b654 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   121d8:	001b1f00 	call	1b1f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   121dc:	010000b4 	movhi	r4,2
   121e0:	212c9404 	addi	r4,r4,-19888
   121e4:	001c19c0 	call	1c19c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   121e8:	d0a71617 	ldw	r2,-25512(gp)
   121ec:	d0e71717 	ldw	r3,-25508(gp)
   121f0:	d1271817 	ldw	r4,-25504(gp)
   121f4:	200d883a 	mov	r6,r4
   121f8:	180b883a 	mov	r5,r3
   121fc:	1009883a 	mov	r4,r2
   12200:	000102c0 	call	102c <main>
   12204:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   12208:	01000044 	movi	r4,1
   1220c:	0011c780 	call	11c78 <close>
  exit (result);
   12210:	e13ffb17 	ldw	r4,-20(fp)
   12214:	001c1b00 	call	1c1b0 <exit>

00012218 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12218:	defffe04 	addi	sp,sp,-8
   1221c:	dfc00115 	stw	ra,4(sp)
   12220:	df000015 	stw	fp,0(sp)
   12224:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12228:	d0a00c17 	ldw	r2,-32720(gp)
   1222c:	10000326 	beq	r2,zero,1223c <alt_get_errno+0x24>
   12230:	d0a00c17 	ldw	r2,-32720(gp)
   12234:	103ee83a 	callr	r2
   12238:	00000106 	br	12240 <alt_get_errno+0x28>
   1223c:	d0a71404 	addi	r2,gp,-25520
}
   12240:	e037883a 	mov	sp,fp
   12244:	dfc00117 	ldw	ra,4(sp)
   12248:	df000017 	ldw	fp,0(sp)
   1224c:	dec00204 	addi	sp,sp,8
   12250:	f800283a 	ret

00012254 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   12254:	defff904 	addi	sp,sp,-28
   12258:	dfc00615 	stw	ra,24(sp)
   1225c:	df000515 	stw	fp,20(sp)
   12260:	df000504 	addi	fp,sp,20
   12264:	e13ffd15 	stw	r4,-12(fp)
   12268:	e17ffe15 	stw	r5,-8(fp)
   1226c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12270:	e0bffd17 	ldw	r2,-12(fp)
   12274:	10000816 	blt	r2,zero,12298 <read+0x44>
   12278:	01400304 	movi	r5,12
   1227c:	e13ffd17 	ldw	r4,-12(fp)
   12280:	0004f140 	call	4f14 <__mulsi3>
   12284:	1007883a 	mov	r3,r2
   12288:	008000b4 	movhi	r2,2
   1228c:	10b51d04 	addi	r2,r2,-11148
   12290:	1885883a 	add	r2,r3,r2
   12294:	00000106 	br	1229c <read+0x48>
   12298:	0005883a 	mov	r2,zero
   1229c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   122a0:	e0bffb17 	ldw	r2,-20(fp)
   122a4:	10002226 	beq	r2,zero,12330 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   122a8:	e0bffb17 	ldw	r2,-20(fp)
   122ac:	10800217 	ldw	r2,8(r2)
   122b0:	108000cc 	andi	r2,r2,3
   122b4:	10800060 	cmpeqi	r2,r2,1
   122b8:	1000181e 	bne	r2,zero,1231c <read+0xc8>
        (fd->dev->read))
   122bc:	e0bffb17 	ldw	r2,-20(fp)
   122c0:	10800017 	ldw	r2,0(r2)
   122c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   122c8:	10001426 	beq	r2,zero,1231c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   122cc:	e0bffb17 	ldw	r2,-20(fp)
   122d0:	10800017 	ldw	r2,0(r2)
   122d4:	10800517 	ldw	r2,20(r2)
   122d8:	e0ffff17 	ldw	r3,-4(fp)
   122dc:	180d883a 	mov	r6,r3
   122e0:	e17ffe17 	ldw	r5,-8(fp)
   122e4:	e13ffb17 	ldw	r4,-20(fp)
   122e8:	103ee83a 	callr	r2
   122ec:	e0bffc15 	stw	r2,-16(fp)
   122f0:	e0bffc17 	ldw	r2,-16(fp)
   122f4:	1000070e 	bge	r2,zero,12314 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   122f8:	00122180 	call	12218 <alt_get_errno>
   122fc:	1007883a 	mov	r3,r2
   12300:	e0bffc17 	ldw	r2,-16(fp)
   12304:	0085c83a 	sub	r2,zero,r2
   12308:	18800015 	stw	r2,0(r3)
          return -1;
   1230c:	00bfffc4 	movi	r2,-1
   12310:	00000c06 	br	12344 <read+0xf0>
        }
        return rval;
   12314:	e0bffc17 	ldw	r2,-16(fp)
   12318:	00000a06 	br	12344 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1231c:	00122180 	call	12218 <alt_get_errno>
   12320:	1007883a 	mov	r3,r2
   12324:	00800344 	movi	r2,13
   12328:	18800015 	stw	r2,0(r3)
   1232c:	00000406 	br	12340 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   12330:	00122180 	call	12218 <alt_get_errno>
   12334:	1007883a 	mov	r3,r2
   12338:	00801444 	movi	r2,81
   1233c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12340:	00bfffc4 	movi	r2,-1
}
   12344:	e037883a 	mov	sp,fp
   12348:	dfc00117 	ldw	ra,4(sp)
   1234c:	df000017 	ldw	fp,0(sp)
   12350:	dec00204 	addi	sp,sp,8
   12354:	f800283a 	ret

00012358 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12358:	defffc04 	addi	sp,sp,-16
   1235c:	dfc00315 	stw	ra,12(sp)
   12360:	df000215 	stw	fp,8(sp)
   12364:	dc000115 	stw	r16,4(sp)
   12368:	df000204 	addi	fp,sp,8
   1236c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   12370:	e0bffe17 	ldw	r2,-8(fp)
   12374:	108000d0 	cmplti	r2,r2,3
   12378:	1000111e 	bne	r2,zero,123c0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1237c:	040000b4 	movhi	r16,2
   12380:	84351d04 	addi	r16,r16,-11148
   12384:	e0bffe17 	ldw	r2,-8(fp)
   12388:	01400304 	movi	r5,12
   1238c:	1009883a 	mov	r4,r2
   12390:	0004f140 	call	4f14 <__mulsi3>
   12394:	8085883a 	add	r2,r16,r2
   12398:	10800204 	addi	r2,r2,8
   1239c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   123a0:	040000b4 	movhi	r16,2
   123a4:	84351d04 	addi	r16,r16,-11148
   123a8:	e0bffe17 	ldw	r2,-8(fp)
   123ac:	01400304 	movi	r5,12
   123b0:	1009883a 	mov	r4,r2
   123b4:	0004f140 	call	4f14 <__mulsi3>
   123b8:	8085883a 	add	r2,r16,r2
   123bc:	10000015 	stw	zero,0(r2)
  }
}
   123c0:	0001883a 	nop
   123c4:	e6ffff04 	addi	sp,fp,-4
   123c8:	dfc00217 	ldw	ra,8(sp)
   123cc:	df000117 	ldw	fp,4(sp)
   123d0:	dc000017 	ldw	r16,0(sp)
   123d4:	dec00304 	addi	sp,sp,12
   123d8:	f800283a 	ret

000123dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   123dc:	defff904 	addi	sp,sp,-28
   123e0:	df000615 	stw	fp,24(sp)
   123e4:	df000604 	addi	fp,sp,24
   123e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   123ec:	0005303a 	rdctl	r2,status
   123f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   123f4:	e0fffe17 	ldw	r3,-8(fp)
   123f8:	00bfff84 	movi	r2,-2
   123fc:	1884703a 	and	r2,r3,r2
   12400:	1001703a 	wrctl	status,r2
  
  return context;
   12404:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12408:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1240c:	d0a00d17 	ldw	r2,-32716(gp)
   12410:	10c000c4 	addi	r3,r2,3
   12414:	00bfff04 	movi	r2,-4
   12418:	1884703a 	and	r2,r3,r2
   1241c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12420:	d0e00d17 	ldw	r3,-32716(gp)
   12424:	e0bfff17 	ldw	r2,-4(fp)
   12428:	1887883a 	add	r3,r3,r2
   1242c:	008000f4 	movhi	r2,3
   12430:	10835004 	addi	r2,r2,3392
   12434:	10c0062e 	bgeu	r2,r3,12450 <sbrk+0x74>
   12438:	e0bffb17 	ldw	r2,-20(fp)
   1243c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12440:	e0bffa17 	ldw	r2,-24(fp)
   12444:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12448:	00bfffc4 	movi	r2,-1
   1244c:	00000b06 	br	1247c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   12450:	d0a00d17 	ldw	r2,-32716(gp)
   12454:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   12458:	d0e00d17 	ldw	r3,-32716(gp)
   1245c:	e0bfff17 	ldw	r2,-4(fp)
   12460:	1885883a 	add	r2,r3,r2
   12464:	d0a00d15 	stw	r2,-32716(gp)
   12468:	e0bffb17 	ldw	r2,-20(fp)
   1246c:	e0bffc15 	stw	r2,-16(fp)
   12470:	e0bffc17 	ldw	r2,-16(fp)
   12474:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   12478:	e0bffd17 	ldw	r2,-12(fp)
} 
   1247c:	e037883a 	mov	sp,fp
   12480:	df000017 	ldw	fp,0(sp)
   12484:	dec00104 	addi	sp,sp,4
   12488:	f800283a 	ret

0001248c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1248c:	defffe04 	addi	sp,sp,-8
   12490:	dfc00115 	stw	ra,4(sp)
   12494:	df000015 	stw	fp,0(sp)
   12498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1249c:	d0a00c17 	ldw	r2,-32720(gp)
   124a0:	10000326 	beq	r2,zero,124b0 <alt_get_errno+0x24>
   124a4:	d0a00c17 	ldw	r2,-32720(gp)
   124a8:	103ee83a 	callr	r2
   124ac:	00000106 	br	124b4 <alt_get_errno+0x28>
   124b0:	d0a71404 	addi	r2,gp,-25520
}
   124b4:	e037883a 	mov	sp,fp
   124b8:	dfc00117 	ldw	ra,4(sp)
   124bc:	df000017 	ldw	fp,0(sp)
   124c0:	dec00204 	addi	sp,sp,8
   124c4:	f800283a 	ret

000124c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   124c8:	defff904 	addi	sp,sp,-28
   124cc:	dfc00615 	stw	ra,24(sp)
   124d0:	df000515 	stw	fp,20(sp)
   124d4:	df000504 	addi	fp,sp,20
   124d8:	e13ffd15 	stw	r4,-12(fp)
   124dc:	e17ffe15 	stw	r5,-8(fp)
   124e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   124e4:	e0bffd17 	ldw	r2,-12(fp)
   124e8:	10000816 	blt	r2,zero,1250c <write+0x44>
   124ec:	01400304 	movi	r5,12
   124f0:	e13ffd17 	ldw	r4,-12(fp)
   124f4:	0004f140 	call	4f14 <__mulsi3>
   124f8:	1007883a 	mov	r3,r2
   124fc:	008000b4 	movhi	r2,2
   12500:	10b51d04 	addi	r2,r2,-11148
   12504:	1885883a 	add	r2,r3,r2
   12508:	00000106 	br	12510 <write+0x48>
   1250c:	0005883a 	mov	r2,zero
   12510:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12514:	e0bffb17 	ldw	r2,-20(fp)
   12518:	10002126 	beq	r2,zero,125a0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1251c:	e0bffb17 	ldw	r2,-20(fp)
   12520:	10800217 	ldw	r2,8(r2)
   12524:	108000cc 	andi	r2,r2,3
   12528:	10001826 	beq	r2,zero,1258c <write+0xc4>
   1252c:	e0bffb17 	ldw	r2,-20(fp)
   12530:	10800017 	ldw	r2,0(r2)
   12534:	10800617 	ldw	r2,24(r2)
   12538:	10001426 	beq	r2,zero,1258c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1253c:	e0bffb17 	ldw	r2,-20(fp)
   12540:	10800017 	ldw	r2,0(r2)
   12544:	10800617 	ldw	r2,24(r2)
   12548:	e0ffff17 	ldw	r3,-4(fp)
   1254c:	180d883a 	mov	r6,r3
   12550:	e17ffe17 	ldw	r5,-8(fp)
   12554:	e13ffb17 	ldw	r4,-20(fp)
   12558:	103ee83a 	callr	r2
   1255c:	e0bffc15 	stw	r2,-16(fp)
   12560:	e0bffc17 	ldw	r2,-16(fp)
   12564:	1000070e 	bge	r2,zero,12584 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   12568:	001248c0 	call	1248c <alt_get_errno>
   1256c:	1007883a 	mov	r3,r2
   12570:	e0bffc17 	ldw	r2,-16(fp)
   12574:	0085c83a 	sub	r2,zero,r2
   12578:	18800015 	stw	r2,0(r3)
        return -1;
   1257c:	00bfffc4 	movi	r2,-1
   12580:	00000c06 	br	125b4 <write+0xec>
      }
      return rval;
   12584:	e0bffc17 	ldw	r2,-16(fp)
   12588:	00000a06 	br	125b4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1258c:	001248c0 	call	1248c <alt_get_errno>
   12590:	1007883a 	mov	r3,r2
   12594:	00800344 	movi	r2,13
   12598:	18800015 	stw	r2,0(r3)
   1259c:	00000406 	br	125b0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   125a0:	001248c0 	call	1248c <alt_get_errno>
   125a4:	1007883a 	mov	r3,r2
   125a8:	00801444 	movi	r2,81
   125ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   125b0:	00bfffc4 	movi	r2,-1
}
   125b4:	e037883a 	mov	sp,fp
   125b8:	dfc00117 	ldw	ra,4(sp)
   125bc:	df000017 	ldw	fp,0(sp)
   125c0:	dec00204 	addi	sp,sp,8
   125c4:	f800283a 	ret

000125c8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   125c8:	deffdf04 	addi	sp,sp,-132
   125cc:	dfc02015 	stw	ra,128(sp)
   125d0:	df001f15 	stw	fp,124(sp)
   125d4:	df001f04 	addi	fp,sp,124
   125d8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   125dc:	e0bfe204 	addi	r2,fp,-120
   125e0:	100b883a 	mov	r5,r2
   125e4:	01003fc4 	movi	r4,255
   125e8:	0019a2c0 	call	19a2c <OSTaskQuery>
   125ec:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   125f0:	e0bffe83 	ldbu	r2,-6(fp)
   125f4:	10803fcc 	andi	r2,r2,255
   125f8:	10001e1e 	bne	r2,zero,12674 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   125fc:	e0bfee83 	ldbu	r2,-70(fp)
   12600:	10803fcc 	andi	r2,r2,255
   12604:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   12608:	d0a71a17 	ldw	r2,-25496(gp)
   1260c:	e0fffd04 	addi	r3,fp,-12
   12610:	180b883a 	mov	r5,r3
   12614:	1009883a 	mov	r4,r2
   12618:	00182440 	call	18244 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   1261c:	e0bffe43 	ldbu	r2,-7(fp)
   12620:	10803fcc 	andi	r2,r2,255
   12624:	10000726 	beq	r2,zero,12644 <__env_lock+0x7c>
   12628:	d0a00e17 	ldw	r2,-32712(gp)
   1262c:	e0ffe117 	ldw	r3,-124(fp)
   12630:	1880041e 	bne	r3,r2,12644 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   12634:	d0a71917 	ldw	r2,-25500(gp)
   12638:	10800044 	addi	r2,r2,1
   1263c:	d0a71915 	stw	r2,-25500(gp)
   12640:	00000a06 	br	1266c <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   12644:	d0a71a17 	ldw	r2,-25496(gp)
   12648:	e0fffe84 	addi	r3,fp,-6
   1264c:	180d883a 	mov	r6,r3
   12650:	000b883a 	mov	r5,zero
   12654:	1009883a 	mov	r4,r2
   12658:	0017dbc0 	call	17dbc <OSSemPend>
    locks  = 1;
   1265c:	00800044 	movi	r2,1
   12660:	d0a71915 	stw	r2,-25500(gp)
    lockid = id;
   12664:	e0bfe117 	ldw	r2,-124(fp)
   12668:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   1266c:	0001883a 	nop
   12670:	00000106 	br	12678 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   12674:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   12678:	e037883a 	mov	sp,fp
   1267c:	dfc00117 	ldw	ra,4(sp)
   12680:	df000017 	ldw	fp,0(sp)
   12684:	dec00204 	addi	sp,sp,8
   12688:	f800283a 	ret

0001268c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   1268c:	defffd04 	addi	sp,sp,-12
   12690:	dfc00215 	stw	ra,8(sp)
   12694:	df000115 	stw	fp,4(sp)
   12698:	df000104 	addi	fp,sp,4
   1269c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   126a0:	d0a71917 	ldw	r2,-25500(gp)
   126a4:	10000b26 	beq	r2,zero,126d4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   126a8:	d0a71917 	ldw	r2,-25500(gp)
   126ac:	10bfffc4 	addi	r2,r2,-1
   126b0:	d0a71915 	stw	r2,-25500(gp)
   126b4:	d0a71917 	ldw	r2,-25500(gp)
   126b8:	1000071e 	bne	r2,zero,126d8 <__env_unlock+0x4c>
  {
    lockid = -1;
   126bc:	00bfffc4 	movi	r2,-1
   126c0:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
   126c4:	d0a71a17 	ldw	r2,-25496(gp)
   126c8:	1009883a 	mov	r4,r2
   126cc:	00181340 	call	18134 <OSSemPost>
   126d0:	00000106 	br	126d8 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   126d4:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   126d8:	e037883a 	mov	sp,fp
   126dc:	dfc00117 	ldw	ra,4(sp)
   126e0:	df000017 	ldw	fp,0(sp)
   126e4:	dec00204 	addi	sp,sp,8
   126e8:	f800283a 	ret

000126ec <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   126ec:	deffdb04 	addi	sp,sp,-148
   126f0:	dfc02415 	stw	ra,144(sp)
   126f4:	df002315 	stw	fp,140(sp)
   126f8:	df002304 	addi	fp,sp,140
   126fc:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12700:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   12704:	d0a71d43 	ldbu	r2,-25483(gp)
   12708:	10803fcc 	andi	r2,r2,255
   1270c:	10800060 	cmpeqi	r2,r2,1
   12710:	10003626 	beq	r2,zero,127ec <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12714:	e0bfe204 	addi	r2,fp,-120
   12718:	100b883a 	mov	r5,r2
   1271c:	01003fc4 	movi	r4,255
   12720:	0019a2c0 	call	19a2c <OSTaskQuery>
   12724:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   12728:	e0bffe83 	ldbu	r2,-6(fp)
   1272c:	10803fcc 	andi	r2,r2,255
   12730:	1000301e 	bne	r2,zero,127f4 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   12734:	e0bfee83 	ldbu	r2,-70(fp)
   12738:	10803fcc 	andi	r2,r2,255
   1273c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   12740:	d0a71c17 	ldw	r2,-25488(gp)
   12744:	e0fffd04 	addi	r3,fp,-12
   12748:	180b883a 	mov	r5,r3
   1274c:	1009883a 	mov	r4,r2
   12750:	00182440 	call	18244 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12754:	0005303a 	rdctl	r2,status
   12758:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1275c:	e0ffe117 	ldw	r3,-124(fp)
   12760:	00bfff84 	movi	r2,-2
   12764:	1884703a 	and	r2,r3,r2
   12768:	1001703a 	wrctl	status,r2
  
  return context;
   1276c:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   12770:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   12774:	e0bffd0b 	ldhu	r2,-12(fp)
   12778:	10bfffcc 	andi	r2,r2,65535
   1277c:	10000b1e 	bne	r2,zero,127ac <__malloc_lock+0xc0>
   12780:	d0a00f17 	ldw	r2,-32708(gp)
   12784:	e0ffde17 	ldw	r3,-136(fp)
   12788:	1880081e 	bne	r3,r2,127ac <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   1278c:	d0a71b17 	ldw	r2,-25492(gp)
   12790:	10800044 	addi	r2,r2,1
   12794:	d0a71b15 	stw	r2,-25492(gp)
   12798:	e0bfdd17 	ldw	r2,-140(fp)
   1279c:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127a0:	e0bfdf17 	ldw	r2,-132(fp)
   127a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   127a8:	00000e06 	br	127e4 <__malloc_lock+0xf8>
   127ac:	e0bfdd17 	ldw	r2,-140(fp)
   127b0:	e0bfe015 	stw	r2,-128(fp)
   127b4:	e0bfe017 	ldw	r2,-128(fp)
   127b8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   127bc:	d0a71c17 	ldw	r2,-25488(gp)
   127c0:	e0fffe84 	addi	r3,fp,-6
   127c4:	180d883a 	mov	r6,r3
   127c8:	000b883a 	mov	r5,zero
   127cc:	1009883a 	mov	r4,r2
   127d0:	0017dbc0 	call	17dbc <OSSemPend>
    locks  = 1;
   127d4:	00800044 	movi	r2,1
   127d8:	d0a71b15 	stw	r2,-25492(gp)
    lockid = id;
   127dc:	e0bfde17 	ldw	r2,-136(fp)
   127e0:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   127e4:	0001883a 	nop
   127e8:	00000306 	br	127f8 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   127ec:	0001883a 	nop
   127f0:	00000106 	br	127f8 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   127f4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   127f8:	e037883a 	mov	sp,fp
   127fc:	dfc00117 	ldw	ra,4(sp)
   12800:	df000017 	ldw	fp,0(sp)
   12804:	dec00204 	addi	sp,sp,8
   12808:	f800283a 	ret

0001280c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1280c:	defff804 	addi	sp,sp,-32
   12810:	dfc00715 	stw	ra,28(sp)
   12814:	df000615 	stw	fp,24(sp)
   12818:	df000604 	addi	fp,sp,24
   1281c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12820:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   12824:	d0a71d43 	ldbu	r2,-25483(gp)
   12828:	10803fcc 	andi	r2,r2,255
   1282c:	10800060 	cmpeqi	r2,r2,1
   12830:	10002326 	beq	r2,zero,128c0 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12834:	0005303a 	rdctl	r2,status
   12838:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1283c:	e0fffe17 	ldw	r3,-8(fp)
   12840:	00bfff84 	movi	r2,-2
   12844:	1884703a 	and	r2,r3,r2
   12848:	1001703a 	wrctl	status,r2
  
  return context;
   1284c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   12850:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   12854:	d0a71b17 	ldw	r2,-25492(gp)
   12858:	1000051e 	bne	r2,zero,12870 <__malloc_unlock+0x64>
   1285c:	e0bffa17 	ldw	r2,-24(fp)
   12860:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12864:	e0bffb17 	ldw	r2,-20(fp)
   12868:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   1286c:	00001506 	br	128c4 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   12870:	d0a71b17 	ldw	r2,-25492(gp)
   12874:	10bfffc4 	addi	r2,r2,-1
   12878:	d0a71b15 	stw	r2,-25492(gp)
   1287c:	d0a71b17 	ldw	r2,-25492(gp)
   12880:	10000a1e 	bne	r2,zero,128ac <__malloc_unlock+0xa0>
  {
    lockid = -1;
   12884:	00bfffc4 	movi	r2,-1
   12888:	d0a00f15 	stw	r2,-32708(gp)
   1288c:	e0bffa17 	ldw	r2,-24(fp)
   12890:	e0bffc15 	stw	r2,-16(fp)
   12894:	e0bffc17 	ldw	r2,-16(fp)
   12898:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   1289c:	d0a71c17 	ldw	r2,-25488(gp)
   128a0:	1009883a 	mov	r4,r2
   128a4:	00181340 	call	18134 <OSSemPost>
   128a8:	00000606 	br	128c4 <__malloc_unlock+0xb8>
   128ac:	e0bffa17 	ldw	r2,-24(fp)
   128b0:	e0bffd15 	stw	r2,-12(fp)
   128b4:	e0bffd17 	ldw	r2,-12(fp)
   128b8:	1001703a 	wrctl	status,r2
   128bc:	00000106 	br	128c4 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   128c0:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   128c4:	e037883a 	mov	sp,fp
   128c8:	dfc00117 	ldw	ra,4(sp)
   128cc:	df000017 	ldw	fp,0(sp)
   128d0:	dec00204 	addi	sp,sp,8
   128d4:	f800283a 	ret

000128d8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   128d8:	defff704 	addi	sp,sp,-36
   128dc:	dfc00815 	stw	ra,32(sp)
   128e0:	df000715 	stw	fp,28(sp)
   128e4:	df000704 	addi	fp,sp,28
   128e8:	e13ffd15 	stw	r4,-12(fp)
   128ec:	e17ffe15 	stw	r5,-8(fp)
   128f0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   128f4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   128f8:	e0bfff17 	ldw	r2,-4(fp)
   128fc:	1000021e 	bne	r2,zero,12908 <OSEventNameGet+0x30>
        return (0);
   12900:	0005883a 	mov	r2,zero
   12904:	00003706 	br	129e4 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   12908:	e0bffd17 	ldw	r2,-12(fp)
   1290c:	1000051e 	bne	r2,zero,12924 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   12910:	e0bfff17 	ldw	r2,-4(fp)
   12914:	00c00104 	movi	r3,4
   12918:	10c00005 	stb	r3,0(r2)
        return (0);
   1291c:	0005883a 	mov	r2,zero
   12920:	00003006 	br	129e4 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12924:	e0bffe17 	ldw	r2,-8(fp)
   12928:	1000051e 	bne	r2,zero,12940 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1292c:	e0bfff17 	ldw	r2,-4(fp)
   12930:	00c00304 	movi	r3,12
   12934:	10c00005 	stb	r3,0(r2)
        return (0);
   12938:	0005883a 	mov	r2,zero
   1293c:	00002906 	br	129e4 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12940:	d0a72b03 	ldbu	r2,-25428(gp)
   12944:	10803fcc 	andi	r2,r2,255
   12948:	10000526 	beq	r2,zero,12960 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   1294c:	e0bfff17 	ldw	r2,-4(fp)
   12950:	00c00444 	movi	r3,17
   12954:	10c00005 	stb	r3,0(r2)
        return (0);
   12958:	0005883a 	mov	r2,zero
   1295c:	00002106 	br	129e4 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   12960:	e0bffd17 	ldw	r2,-12(fp)
   12964:	10800003 	ldbu	r2,0(r2)
   12968:	10803fcc 	andi	r2,r2,255
   1296c:	10bfffc4 	addi	r2,r2,-1
   12970:	10800128 	cmpgeui	r2,r2,4
   12974:	10000526 	beq	r2,zero,1298c <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   12978:	e0bfff17 	ldw	r2,-4(fp)
   1297c:	00c00044 	movi	r3,1
   12980:	10c00005 	stb	r3,0(r2)
             return (0);
   12984:	0005883a 	mov	r2,zero
   12988:	00001606 	br	129e4 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1298c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12990:	0005303a 	rdctl	r2,status
   12994:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12998:	e0fffb17 	ldw	r3,-20(fp)
   1299c:	00bfff84 	movi	r2,-2
   129a0:	1884703a 	and	r2,r3,r2
   129a4:	1001703a 	wrctl	status,r2
  
  return context;
   129a8:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   129ac:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   129b0:	e0bffd17 	ldw	r2,-12(fp)
   129b4:	10800384 	addi	r2,r2,14
   129b8:	100b883a 	mov	r5,r2
   129bc:	e13ffe17 	ldw	r4,-8(fp)
   129c0:	001435c0 	call	1435c <OS_StrCopy>
   129c4:	e0bffa05 	stb	r2,-24(fp)
   129c8:	e0bff917 	ldw	r2,-28(fp)
   129cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129d0:	e0bffc17 	ldw	r2,-16(fp)
   129d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   129d8:	e0bfff17 	ldw	r2,-4(fp)
   129dc:	10000005 	stb	zero,0(r2)
    return (len);
   129e0:	e0bffa03 	ldbu	r2,-24(fp)
}
   129e4:	e037883a 	mov	sp,fp
   129e8:	dfc00117 	ldw	ra,4(sp)
   129ec:	df000017 	ldw	fp,0(sp)
   129f0:	dec00204 	addi	sp,sp,8
   129f4:	f800283a 	ret

000129f8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   129f8:	defff604 	addi	sp,sp,-40
   129fc:	dfc00915 	stw	ra,36(sp)
   12a00:	df000815 	stw	fp,32(sp)
   12a04:	df000804 	addi	fp,sp,32
   12a08:	e13ffd15 	stw	r4,-12(fp)
   12a0c:	e17ffe15 	stw	r5,-8(fp)
   12a10:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12a14:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12a18:	e0bfff17 	ldw	r2,-4(fp)
   12a1c:	10004026 	beq	r2,zero,12b20 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   12a20:	e0bffd17 	ldw	r2,-12(fp)
   12a24:	1000041e 	bne	r2,zero,12a38 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   12a28:	e0bfff17 	ldw	r2,-4(fp)
   12a2c:	00c00104 	movi	r3,4
   12a30:	10c00005 	stb	r3,0(r2)
        return;
   12a34:	00003b06 	br	12b24 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12a38:	e0bffe17 	ldw	r2,-8(fp)
   12a3c:	1000041e 	bne	r2,zero,12a50 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   12a40:	e0bfff17 	ldw	r2,-4(fp)
   12a44:	00c00304 	movi	r3,12
   12a48:	10c00005 	stb	r3,0(r2)
        return;
   12a4c:	00003506 	br	12b24 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12a50:	d0a72b03 	ldbu	r2,-25428(gp)
   12a54:	10803fcc 	andi	r2,r2,255
   12a58:	10000426 	beq	r2,zero,12a6c <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   12a5c:	e0bfff17 	ldw	r2,-4(fp)
   12a60:	00c00484 	movi	r3,18
   12a64:	10c00005 	stb	r3,0(r2)
        return;
   12a68:	00002e06 	br	12b24 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   12a6c:	e0bffd17 	ldw	r2,-12(fp)
   12a70:	10800003 	ldbu	r2,0(r2)
   12a74:	10803fcc 	andi	r2,r2,255
   12a78:	10bfffc4 	addi	r2,r2,-1
   12a7c:	10800128 	cmpgeui	r2,r2,4
   12a80:	10000426 	beq	r2,zero,12a94 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   12a84:	e0bfff17 	ldw	r2,-4(fp)
   12a88:	00c00044 	movi	r3,1
   12a8c:	10c00005 	stb	r3,0(r2)
             return;
   12a90:	00002406 	br	12b24 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   12a94:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a98:	0005303a 	rdctl	r2,status
   12a9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12aa0:	e0fffc17 	ldw	r3,-16(fp)
   12aa4:	00bfff84 	movi	r2,-2
   12aa8:	1884703a 	and	r2,r3,r2
   12aac:	1001703a 	wrctl	status,r2
  
  return context;
   12ab0:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   12ab4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   12ab8:	e13ffe17 	ldw	r4,-8(fp)
   12abc:	00143d00 	call	143d0 <OS_StrLen>
   12ac0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   12ac4:	e0bffa03 	ldbu	r2,-24(fp)
   12ac8:	10800830 	cmpltui	r2,r2,32
   12acc:	1000081e 	bne	r2,zero,12af0 <OSEventNameSet+0xf8>
   12ad0:	e0bff817 	ldw	r2,-32(fp)
   12ad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ad8:	e0bff917 	ldw	r2,-28(fp)
   12adc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   12ae0:	e0bfff17 	ldw	r2,-4(fp)
   12ae4:	00c002c4 	movi	r3,11
   12ae8:	10c00005 	stb	r3,0(r2)
        return;
   12aec:	00000d06 	br	12b24 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   12af0:	e0bffd17 	ldw	r2,-12(fp)
   12af4:	10800384 	addi	r2,r2,14
   12af8:	e17ffe17 	ldw	r5,-8(fp)
   12afc:	1009883a 	mov	r4,r2
   12b00:	001435c0 	call	1435c <OS_StrCopy>
   12b04:	e0bff817 	ldw	r2,-32(fp)
   12b08:	e0bffb15 	stw	r2,-20(fp)
   12b0c:	e0bffb17 	ldw	r2,-20(fp)
   12b10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12b14:	e0bfff17 	ldw	r2,-4(fp)
   12b18:	10000005 	stb	zero,0(r2)
   12b1c:	00000106 	br	12b24 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   12b20:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   12b24:	e037883a 	mov	sp,fp
   12b28:	dfc00117 	ldw	ra,4(sp)
   12b2c:	df000017 	ldw	fp,0(sp)
   12b30:	dec00204 	addi	sp,sp,8
   12b34:	f800283a 	ret

00012b38 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   12b38:	deffed04 	addi	sp,sp,-76
   12b3c:	dfc01215 	stw	ra,72(sp)
   12b40:	df001115 	stw	fp,68(sp)
   12b44:	df001104 	addi	fp,sp,68
   12b48:	e13ffc15 	stw	r4,-16(fp)
   12b4c:	e17ffd15 	stw	r5,-12(fp)
   12b50:	e1bffe15 	stw	r6,-8(fp)
   12b54:	3805883a 	mov	r2,r7
   12b58:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   12b5c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   12b60:	e0800217 	ldw	r2,8(fp)
   12b64:	1000021e 	bne	r2,zero,12b70 <OSEventPendMulti+0x38>
        return (0);
   12b68:	0005883a 	mov	r2,zero
   12b6c:	00017106 	br	13134 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   12b70:	e0bffc17 	ldw	r2,-16(fp)
   12b74:	1000051e 	bne	r2,zero,12b8c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   12b78:	e0800217 	ldw	r2,8(fp)
   12b7c:	00c00104 	movi	r3,4
   12b80:	10c00005 	stb	r3,0(r2)
        return (0);
   12b84:	0005883a 	mov	r2,zero
   12b88:	00016a06 	br	13134 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   12b8c:	e0bffd17 	ldw	r2,-12(fp)
   12b90:	1000051e 	bne	r2,zero,12ba8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   12b94:	e0800217 	ldw	r2,8(fp)
   12b98:	00c00104 	movi	r3,4
   12b9c:	10c00005 	stb	r3,0(r2)
        return (0);
   12ba0:	0005883a 	mov	r2,zero
   12ba4:	00016306 	br	13134 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   12ba8:	e0bffe17 	ldw	r2,-8(fp)
   12bac:	1000051e 	bne	r2,zero,12bc4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   12bb0:	e0800217 	ldw	r2,8(fp)
   12bb4:	00c00104 	movi	r3,4
   12bb8:	10c00005 	stb	r3,0(r2)
        return (0);
   12bbc:	0005883a 	mov	r2,zero
   12bc0:	00015c06 	br	13134 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   12bc4:	e0bffd17 	ldw	r2,-12(fp)
   12bc8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   12bcc:	e0bffc17 	ldw	r2,-16(fp)
   12bd0:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   12bd4:	e0bfef17 	ldw	r2,-68(fp)
   12bd8:	10800017 	ldw	r2,0(r2)
   12bdc:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   12be0:	00001906 	br	12c48 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   12be4:	e0bff017 	ldw	r2,-64(fp)
   12be8:	10800003 	ldbu	r2,0(r2)
   12bec:	10803fcc 	andi	r2,r2,255
   12bf0:	10c000a0 	cmpeqi	r3,r2,2
   12bf4:	1800091e 	bne	r3,zero,12c1c <OSEventPendMulti+0xe4>
   12bf8:	10c000e0 	cmpeqi	r3,r2,3
   12bfc:	1800091e 	bne	r3,zero,12c24 <OSEventPendMulti+0xec>
   12c00:	10800060 	cmpeqi	r2,r2,1
   12c04:	1000091e 	bne	r2,zero,12c2c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   12c08:	e0800217 	ldw	r2,8(fp)
   12c0c:	00c00044 	movi	r3,1
   12c10:	10c00005 	stb	r3,0(r2)
                 return (0);
   12c14:	0005883a 	mov	r2,zero
   12c18:	00014606 	br	13134 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   12c1c:	0001883a 	nop
   12c20:	00000306 	br	12c30 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   12c24:	0001883a 	nop
   12c28:	00000106 	br	12c30 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   12c2c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   12c30:	e0bfef17 	ldw	r2,-68(fp)
   12c34:	10800104 	addi	r2,r2,4
   12c38:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   12c3c:	e0bfef17 	ldw	r2,-68(fp)
   12c40:	10800017 	ldw	r2,0(r2)
   12c44:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   12c48:	e0bff017 	ldw	r2,-64(fp)
   12c4c:	103fe51e 	bne	r2,zero,12be4 <__alt_data_end+0xfffe1ea4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   12c50:	d0a72b03 	ldbu	r2,-25428(gp)
   12c54:	10803fcc 	andi	r2,r2,255
   12c58:	10000526 	beq	r2,zero,12c70 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   12c5c:	e0800217 	ldw	r2,8(fp)
   12c60:	00c00084 	movi	r3,2
   12c64:	10c00005 	stb	r3,0(r2)
        return (0);
   12c68:	0005883a 	mov	r2,zero
   12c6c:	00013106 	br	13134 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   12c70:	d0a71d03 	ldbu	r2,-25484(gp)
   12c74:	10803fcc 	andi	r2,r2,255
   12c78:	10000526 	beq	r2,zero,12c90 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   12c7c:	e0800217 	ldw	r2,8(fp)
   12c80:	00c00344 	movi	r3,13
   12c84:	10c00005 	stb	r3,0(r2)
        return (0);
   12c88:	0005883a 	mov	r2,zero
   12c8c:	00012906 	br	13134 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c90:	0005303a 	rdctl	r2,status
   12c94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c98:	e0fffb17 	ldw	r3,-20(fp)
   12c9c:	00bfff84 	movi	r2,-2
   12ca0:	1884703a 	and	r2,r3,r2
   12ca4:	1001703a 	wrctl	status,r2
  
  return context;
   12ca8:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   12cac:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   12cb0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   12cb4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   12cb8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   12cbc:	e0bffc17 	ldw	r2,-16(fp)
   12cc0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   12cc4:	e0bfef17 	ldw	r2,-68(fp)
   12cc8:	10800017 	ldw	r2,0(r2)
   12ccc:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   12cd0:	00008106 	br	12ed8 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   12cd4:	e0bff017 	ldw	r2,-64(fp)
   12cd8:	10800003 	ldbu	r2,0(r2)
   12cdc:	10803fcc 	andi	r2,r2,255
   12ce0:	10c000a0 	cmpeqi	r3,r2,2
   12ce4:	18003c1e 	bne	r3,zero,12dd8 <OSEventPendMulti+0x2a0>
   12ce8:	10c000e0 	cmpeqi	r3,r2,3
   12cec:	1800031e 	bne	r3,zero,12cfc <OSEventPendMulti+0x1c4>
   12cf0:	10800060 	cmpeqi	r2,r2,1
   12cf4:	10001e1e 	bne	r2,zero,12d70 <OSEventPendMulti+0x238>
   12cf8:	00006606 	br	12e94 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   12cfc:	e0bff017 	ldw	r2,-64(fp)
   12d00:	1080020b 	ldhu	r2,8(r2)
   12d04:	10bfffcc 	andi	r2,r2,65535
   12d08:	10001526 	beq	r2,zero,12d60 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   12d0c:	e0bff017 	ldw	r2,-64(fp)
   12d10:	1080020b 	ldhu	r2,8(r2)
   12d14:	10bfffc4 	addi	r2,r2,-1
   12d18:	1007883a 	mov	r3,r2
   12d1c:	e0bff017 	ldw	r2,-64(fp)
   12d20:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   12d24:	e0bffd17 	ldw	r2,-12(fp)
   12d28:	10c00104 	addi	r3,r2,4
   12d2c:	e0fffd15 	stw	r3,-12(fp)
   12d30:	e0fff017 	ldw	r3,-64(fp)
   12d34:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   12d38:	00800044 	movi	r2,1
   12d3c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   12d40:	e0bffe17 	ldw	r2,-8(fp)
   12d44:	10c00104 	addi	r3,r2,4
   12d48:	e0fffe15 	stw	r3,-8(fp)
   12d4c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   12d50:	e0bff18b 	ldhu	r2,-58(fp)
   12d54:	10800044 	addi	r2,r2,1
   12d58:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   12d5c:	00005806 	br	12ec0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   12d60:	e0bff203 	ldbu	r2,-56(fp)
   12d64:	10800054 	ori	r2,r2,1
   12d68:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   12d6c:	00005406 	br	12ec0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   12d70:	e0bff017 	ldw	r2,-64(fp)
   12d74:	10800117 	ldw	r2,4(r2)
   12d78:	10001326 	beq	r2,zero,12dc8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   12d7c:	e0bffe17 	ldw	r2,-8(fp)
   12d80:	10c00104 	addi	r3,r2,4
   12d84:	e0fffe15 	stw	r3,-8(fp)
   12d88:	e0fff017 	ldw	r3,-64(fp)
   12d8c:	18c00117 	ldw	r3,4(r3)
   12d90:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   12d94:	e0bff017 	ldw	r2,-64(fp)
   12d98:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   12d9c:	e0bffd17 	ldw	r2,-12(fp)
   12da0:	10c00104 	addi	r3,r2,4
   12da4:	e0fffd15 	stw	r3,-12(fp)
   12da8:	e0fff017 	ldw	r3,-64(fp)
   12dac:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   12db0:	00800044 	movi	r2,1
   12db4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   12db8:	e0bff18b 	ldhu	r2,-58(fp)
   12dbc:	10800044 	addi	r2,r2,1
   12dc0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   12dc4:	00003e06 	br	12ec0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   12dc8:	e0bff203 	ldbu	r2,-56(fp)
   12dcc:	10800094 	ori	r2,r2,2
   12dd0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   12dd4:	00003a06 	br	12ec0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   12dd8:	e0bff017 	ldw	r2,-64(fp)
   12ddc:	10800117 	ldw	r2,4(r2)
   12de0:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   12de4:	e0bff517 	ldw	r2,-44(fp)
   12de8:	1080058b 	ldhu	r2,22(r2)
   12dec:	10bfffcc 	andi	r2,r2,65535
   12df0:	10002426 	beq	r2,zero,12e84 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   12df4:	e0bffe17 	ldw	r2,-8(fp)
   12df8:	10c00104 	addi	r3,r2,4
   12dfc:	e0fffe15 	stw	r3,-8(fp)
   12e00:	e0fff517 	ldw	r3,-44(fp)
   12e04:	18c00417 	ldw	r3,16(r3)
   12e08:	19400104 	addi	r5,r3,4
   12e0c:	e13ff517 	ldw	r4,-44(fp)
   12e10:	21400415 	stw	r5,16(r4)
   12e14:	18c00017 	ldw	r3,0(r3)
   12e18:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   12e1c:	e0bff517 	ldw	r2,-44(fp)
   12e20:	10c00417 	ldw	r3,16(r2)
   12e24:	e0bff517 	ldw	r2,-44(fp)
   12e28:	10800217 	ldw	r2,8(r2)
   12e2c:	1880041e 	bne	r3,r2,12e40 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   12e30:	e0bff517 	ldw	r2,-44(fp)
   12e34:	10c00117 	ldw	r3,4(r2)
   12e38:	e0bff517 	ldw	r2,-44(fp)
   12e3c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   12e40:	e0bff517 	ldw	r2,-44(fp)
   12e44:	1080058b 	ldhu	r2,22(r2)
   12e48:	10bfffc4 	addi	r2,r2,-1
   12e4c:	1007883a 	mov	r3,r2
   12e50:	e0bff517 	ldw	r2,-44(fp)
   12e54:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   12e58:	e0bffd17 	ldw	r2,-12(fp)
   12e5c:	10c00104 	addi	r3,r2,4
   12e60:	e0fffd15 	stw	r3,-12(fp)
   12e64:	e0fff017 	ldw	r3,-64(fp)
   12e68:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   12e6c:	00800044 	movi	r2,1
   12e70:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   12e74:	e0bff18b 	ldhu	r2,-58(fp)
   12e78:	10800044 	addi	r2,r2,1
   12e7c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   12e80:	00000f06 	br	12ec0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   12e84:	e0bff203 	ldbu	r2,-56(fp)
   12e88:	10800114 	ori	r2,r2,4
   12e8c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   12e90:	00000b06 	br	12ec0 <OSEventPendMulti+0x388>
   12e94:	e0bff317 	ldw	r2,-52(fp)
   12e98:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e9c:	e0bff417 	ldw	r2,-48(fp)
   12ea0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   12ea4:	e0bffd17 	ldw	r2,-12(fp)
   12ea8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   12eac:	e0800217 	ldw	r2,8(fp)
   12eb0:	00c00044 	movi	r3,1
   12eb4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   12eb8:	e0bff18b 	ldhu	r2,-58(fp)
   12ebc:	00009d06 	br	13134 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   12ec0:	e0bfef17 	ldw	r2,-68(fp)
   12ec4:	10800104 	addi	r2,r2,4
   12ec8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   12ecc:	e0bfef17 	ldw	r2,-68(fp)
   12ed0:	10800017 	ldw	r2,0(r2)
   12ed4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   12ed8:	e0bff017 	ldw	r2,-64(fp)
   12edc:	103f7d1e 	bne	r2,zero,12cd4 <__alt_data_end+0xfffe1f94>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   12ee0:	e0bff103 	ldbu	r2,-60(fp)
   12ee4:	10800058 	cmpnei	r2,r2,1
   12ee8:	10000a1e 	bne	r2,zero,12f14 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   12eec:	e0bffd17 	ldw	r2,-12(fp)
   12ef0:	10000015 	stw	zero,0(r2)
   12ef4:	e0bff317 	ldw	r2,-52(fp)
   12ef8:	e0bff615 	stw	r2,-40(fp)
   12efc:	e0bff617 	ldw	r2,-40(fp)
   12f00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   12f04:	e0800217 	ldw	r2,8(fp)
   12f08:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   12f0c:	e0bff18b 	ldhu	r2,-58(fp)
   12f10:	00008806 	br	13134 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   12f14:	d0a72c17 	ldw	r2,-25424(gp)
   12f18:	d0e72c17 	ldw	r3,-25424(gp)
   12f1c:	19000c03 	ldbu	r4,48(r3)
   12f20:	e0fff203 	ldbu	r3,-56(fp)
   12f24:	20c6b03a 	or	r3,r4,r3
   12f28:	1809883a 	mov	r4,r3
   12f2c:	00ffe004 	movi	r3,-128
   12f30:	20c6b03a 	or	r3,r4,r3
   12f34:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12f38:	d0a72c17 	ldw	r2,-25424(gp)
   12f3c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   12f40:	d0a72c17 	ldw	r2,-25424(gp)
   12f44:	e0ffff0b 	ldhu	r3,-4(fp)
   12f48:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   12f4c:	e13ffc17 	ldw	r4,-16(fp)
   12f50:	0013a740 	call	13a74 <OS_EventTaskWaitMulti>
   12f54:	e0bff317 	ldw	r2,-52(fp)
   12f58:	e0bff915 	stw	r2,-28(fp)
   12f5c:	e0bff917 	ldw	r2,-28(fp)
   12f60:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   12f64:	00142180 	call	14218 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f68:	0005303a 	rdctl	r2,status
   12f6c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f70:	e0fff717 	ldw	r3,-36(fp)
   12f74:	00bfff84 	movi	r2,-2
   12f78:	1884703a 	and	r2,r3,r2
   12f7c:	1001703a 	wrctl	status,r2
  
  return context;
   12f80:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   12f84:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   12f88:	d0a72c17 	ldw	r2,-25424(gp)
   12f8c:	10800c43 	ldbu	r2,49(r2)
   12f90:	10803fcc 	andi	r2,r2,255
   12f94:	10000226 	beq	r2,zero,12fa0 <OSEventPendMulti+0x468>
   12f98:	108000a0 	cmpeqi	r2,r2,2
   12f9c:	10001826 	beq	r2,zero,13000 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   12fa0:	d0a72c17 	ldw	r2,-25424(gp)
   12fa4:	10800717 	ldw	r2,28(r2)
   12fa8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   12fac:	e0bff017 	ldw	r2,-64(fp)
   12fb0:	10000b26 	beq	r2,zero,12fe0 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   12fb4:	e0bffd17 	ldw	r2,-12(fp)
   12fb8:	10c00104 	addi	r3,r2,4
   12fbc:	e0fffd15 	stw	r3,-12(fp)
   12fc0:	e0fff017 	ldw	r3,-64(fp)
   12fc4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   12fc8:	e0bffd17 	ldw	r2,-12(fp)
   12fcc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   12fd0:	e0bff18b 	ldhu	r2,-58(fp)
   12fd4:	10800044 	addi	r2,r2,1
   12fd8:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   12fdc:	00000d06 	br	13014 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   12fe0:	d0a72c17 	ldw	r2,-25424(gp)
   12fe4:	00c00044 	movi	r3,1
   12fe8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   12fec:	d0a72c17 	ldw	r2,-25424(gp)
   12ff0:	e17ffc17 	ldw	r5,-16(fp)
   12ff4:	1009883a 	mov	r4,r2
   12ff8:	0013c7c0 	call	13c7c <OS_EventTaskRemoveMulti>
             }
			 break;
   12ffc:	00000506 	br	13014 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13000:	d0a72c17 	ldw	r2,-25424(gp)
   13004:	e17ffc17 	ldw	r5,-16(fp)
   13008:	1009883a 	mov	r4,r2
   1300c:	0013c7c0 	call	13c7c <OS_EventTaskRemoveMulti>
             break;
   13010:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   13014:	d0a72c17 	ldw	r2,-25424(gp)
   13018:	10800c43 	ldbu	r2,49(r2)
   1301c:	10803fcc 	andi	r2,r2,255
   13020:	10000326 	beq	r2,zero,13030 <OSEventPendMulti+0x4f8>
   13024:	108000a0 	cmpeqi	r2,r2,2
   13028:	1000231e 	bne	r2,zero,130b8 <OSEventPendMulti+0x580>
   1302c:	00002a06 	br	130d8 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   13030:	e0bff017 	ldw	r2,-64(fp)
   13034:	10800003 	ldbu	r2,0(r2)
   13038:	10803fcc 	andi	r2,r2,255
   1303c:	0080100e 	bge	zero,r2,13080 <OSEventPendMulti+0x548>
   13040:	10c000d0 	cmplti	r3,r2,3
   13044:	1800071e 	bne	r3,zero,13064 <OSEventPendMulti+0x52c>
   13048:	108000e0 	cmpeqi	r2,r2,3
   1304c:	10000c26 	beq	r2,zero,13080 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   13050:	e0bffe17 	ldw	r2,-8(fp)
   13054:	10c00104 	addi	r3,r2,4
   13058:	e0fffe15 	stw	r3,-8(fp)
   1305c:	10000015 	stw	zero,0(r2)
                      break;
   13060:	00001206 	br	130ac <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   13064:	e0bffe17 	ldw	r2,-8(fp)
   13068:	10c00104 	addi	r3,r2,4
   1306c:	e0fffe15 	stw	r3,-8(fp)
   13070:	d0e72c17 	ldw	r3,-25424(gp)
   13074:	18c00917 	ldw	r3,36(r3)
   13078:	10c00015 	stw	r3,0(r2)
                      break;
   1307c:	00000b06 	br	130ac <OSEventPendMulti+0x574>
   13080:	e0bff317 	ldw	r2,-52(fp)
   13084:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13088:	e0bff817 	ldw	r2,-32(fp)
   1308c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   13090:	e0bffd17 	ldw	r2,-12(fp)
   13094:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   13098:	e0800217 	ldw	r2,8(fp)
   1309c:	00c00044 	movi	r3,1
   130a0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   130a4:	e0bff18b 	ldhu	r2,-58(fp)
   130a8:	00002206 	br	13134 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   130ac:	e0800217 	ldw	r2,8(fp)
   130b0:	10000005 	stb	zero,0(r2)
             break;
   130b4:	00001006 	br	130f8 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   130b8:	e0bffe17 	ldw	r2,-8(fp)
   130bc:	10c00104 	addi	r3,r2,4
   130c0:	e0fffe15 	stw	r3,-8(fp)
   130c4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   130c8:	e0800217 	ldw	r2,8(fp)
   130cc:	00c00384 	movi	r3,14
   130d0:	10c00005 	stb	r3,0(r2)
             break;
   130d4:	00000806 	br	130f8 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   130d8:	e0bffe17 	ldw	r2,-8(fp)
   130dc:	10c00104 	addi	r3,r2,4
   130e0:	e0fffe15 	stw	r3,-8(fp)
   130e4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   130e8:	e0800217 	ldw	r2,8(fp)
   130ec:	00c00284 	movi	r3,10
   130f0:	10c00005 	stb	r3,0(r2)
             break;
   130f4:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   130f8:	d0a72c17 	ldw	r2,-25424(gp)
   130fc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   13100:	d0a72c17 	ldw	r2,-25424(gp)
   13104:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   13108:	d0a72c17 	ldw	r2,-25424(gp)
   1310c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13110:	d0a72c17 	ldw	r2,-25424(gp)
   13114:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   13118:	d0a72c17 	ldw	r2,-25424(gp)
   1311c:	10000915 	stw	zero,36(r2)
   13120:	e0bff317 	ldw	r2,-52(fp)
   13124:	e0bffa15 	stw	r2,-24(fp)
   13128:	e0bffa17 	ldw	r2,-24(fp)
   1312c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   13130:	e0bff18b 	ldhu	r2,-58(fp)
}
   13134:	e037883a 	mov	sp,fp
   13138:	dfc00117 	ldw	ra,4(sp)
   1313c:	df000017 	ldw	fp,0(sp)
   13140:	dec00204 	addi	sp,sp,8
   13144:	f800283a 	ret

00013148 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   13148:	defffe04 	addi	sp,sp,-8
   1314c:	dfc00115 	stw	ra,4(sp)
   13150:	df000015 	stw	fp,0(sp)
   13154:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   13158:	001bdf00 	call	1bdf0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   1315c:	0013ec40 	call	13ec4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   13160:	0013f0c0 	call	13f0c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   13164:	00140780 	call	14078 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   13168:	0013de40 	call	13de4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   1316c:	0015f180 	call	15f18 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   13170:	00168180 	call	16818 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   13174:	001794c0 	call	1794c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   13178:	0013f780 	call	13f78 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   1317c:	0013ff80 	call	13ff8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   13180:	001be100 	call	1be10 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   13184:	00148ec0 	call	148ec <OSDebugInit>
#endif
}
   13188:	0001883a 	nop
   1318c:	e037883a 	mov	sp,fp
   13190:	dfc00117 	ldw	ra,4(sp)
   13194:	df000017 	ldw	fp,0(sp)
   13198:	dec00204 	addi	sp,sp,8
   1319c:	f800283a 	ret

000131a0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   131a0:	deffff04 	addi	sp,sp,-4
   131a4:	df000015 	stw	fp,0(sp)
   131a8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   131ac:	d0a71d43 	ldbu	r2,-25483(gp)
   131b0:	10803fcc 	andi	r2,r2,255
   131b4:	10800058 	cmpnei	r2,r2,1
   131b8:	1000071e 	bne	r2,zero,131d8 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   131bc:	d0a72b03 	ldbu	r2,-25428(gp)
   131c0:	10803fcc 	andi	r2,r2,255
   131c4:	10803fe0 	cmpeqi	r2,r2,255
   131c8:	1000031e 	bne	r2,zero,131d8 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   131cc:	d0a72b03 	ldbu	r2,-25428(gp)
   131d0:	10800044 	addi	r2,r2,1
   131d4:	d0a72b05 	stb	r2,-25428(gp)
        }
    }
}
   131d8:	0001883a 	nop
   131dc:	e037883a 	mov	sp,fp
   131e0:	df000017 	ldw	fp,0(sp)
   131e4:	dec00104 	addi	sp,sp,4
   131e8:	f800283a 	ret

000131ec <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   131ec:	defffb04 	addi	sp,sp,-20
   131f0:	dfc00415 	stw	ra,16(sp)
   131f4:	df000315 	stw	fp,12(sp)
   131f8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   131fc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   13200:	d0a71d43 	ldbu	r2,-25483(gp)
   13204:	10803fcc 	andi	r2,r2,255
   13208:	10800058 	cmpnei	r2,r2,1
   1320c:	10002f1e 	bne	r2,zero,132cc <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13210:	0005303a 	rdctl	r2,status
   13214:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13218:	e0ffff17 	ldw	r3,-4(fp)
   1321c:	00bfff84 	movi	r2,-2
   13220:	1884703a 	and	r2,r3,r2
   13224:	1001703a 	wrctl	status,r2
  
  return context;
   13228:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1322c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   13230:	d0a72b03 	ldbu	r2,-25428(gp)
   13234:	10803fcc 	andi	r2,r2,255
   13238:	10000326 	beq	r2,zero,13248 <OSIntExit+0x5c>
            OSIntNesting--;
   1323c:	d0a72b03 	ldbu	r2,-25428(gp)
   13240:	10bfffc4 	addi	r2,r2,-1
   13244:	d0a72b05 	stb	r2,-25428(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   13248:	d0a72b03 	ldbu	r2,-25428(gp)
   1324c:	10803fcc 	andi	r2,r2,255
   13250:	10001a1e 	bne	r2,zero,132bc <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   13254:	d0a71d03 	ldbu	r2,-25484(gp)
   13258:	10803fcc 	andi	r2,r2,255
   1325c:	1000171e 	bne	r2,zero,132bc <OSIntExit+0xd0>
                OS_SchedNew();
   13260:	00142e80 	call	142e8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   13264:	d0e71f03 	ldbu	r3,-25476(gp)
   13268:	d0a71f43 	ldbu	r2,-25475(gp)
   1326c:	18c03fcc 	andi	r3,r3,255
   13270:	10803fcc 	andi	r2,r2,255
   13274:	18801126 	beq	r3,r2,132bc <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   13278:	d0a71f03 	ldbu	r2,-25476(gp)
   1327c:	10c03fcc 	andi	r3,r2,255
   13280:	008000b4 	movhi	r2,2
   13284:	10955a04 	addi	r2,r2,21864
   13288:	18c7883a 	add	r3,r3,r3
   1328c:	18c7883a 	add	r3,r3,r3
   13290:	10c5883a 	add	r2,r2,r3
   13294:	10800017 	ldw	r2,0(r2)
   13298:	d0a72715 	stw	r2,-25444(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   1329c:	d0a72717 	ldw	r2,-25444(gp)
   132a0:	10c00e17 	ldw	r3,56(r2)
   132a4:	18c00044 	addi	r3,r3,1
   132a8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   132ac:	d0a72217 	ldw	r2,-25464(gp)
   132b0:	10800044 	addi	r2,r2,1
   132b4:	d0a72215 	stw	r2,-25464(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   132b8:	001bb1c0 	call	1bb1c <OSCtxSw>
   132bc:	e0bffd17 	ldw	r2,-12(fp)
   132c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132c4:	e0bffe17 	ldw	r2,-8(fp)
   132c8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   132cc:	0001883a 	nop
   132d0:	e037883a 	mov	sp,fp
   132d4:	dfc00117 	ldw	ra,4(sp)
   132d8:	df000017 	ldw	fp,0(sp)
   132dc:	dec00204 	addi	sp,sp,8
   132e0:	f800283a 	ret

000132e4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   132e4:	defffc04 	addi	sp,sp,-16
   132e8:	df000315 	stw	fp,12(sp)
   132ec:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   132f0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   132f4:	d0a71d43 	ldbu	r2,-25483(gp)
   132f8:	10803fcc 	andi	r2,r2,255
   132fc:	10800058 	cmpnei	r2,r2,1
   13300:	1000161e 	bne	r2,zero,1335c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13304:	0005303a 	rdctl	r2,status
   13308:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1330c:	e0ffff17 	ldw	r3,-4(fp)
   13310:	00bfff84 	movi	r2,-2
   13314:	1884703a 	and	r2,r3,r2
   13318:	1001703a 	wrctl	status,r2
  
  return context;
   1331c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13320:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   13324:	d0a72b03 	ldbu	r2,-25428(gp)
   13328:	10803fcc 	andi	r2,r2,255
   1332c:	1000071e 	bne	r2,zero,1334c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   13330:	d0a71d03 	ldbu	r2,-25484(gp)
   13334:	10803fcc 	andi	r2,r2,255
   13338:	10803fe0 	cmpeqi	r2,r2,255
   1333c:	1000031e 	bne	r2,zero,1334c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   13340:	d0a71d03 	ldbu	r2,-25484(gp)
   13344:	10800044 	addi	r2,r2,1
   13348:	d0a71d05 	stb	r2,-25484(gp)
   1334c:	e0bffd17 	ldw	r2,-12(fp)
   13350:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13354:	e0bffe17 	ldw	r2,-8(fp)
   13358:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1335c:	0001883a 	nop
   13360:	e037883a 	mov	sp,fp
   13364:	df000017 	ldw	fp,0(sp)
   13368:	dec00104 	addi	sp,sp,4
   1336c:	f800283a 	ret

00013370 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   13370:	defff804 	addi	sp,sp,-32
   13374:	dfc00715 	stw	ra,28(sp)
   13378:	df000615 	stw	fp,24(sp)
   1337c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13380:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   13384:	d0a71d43 	ldbu	r2,-25483(gp)
   13388:	10803fcc 	andi	r2,r2,255
   1338c:	10800058 	cmpnei	r2,r2,1
   13390:	1000281e 	bne	r2,zero,13434 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13394:	0005303a 	rdctl	r2,status
   13398:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1339c:	e0ffff17 	ldw	r3,-4(fp)
   133a0:	00bfff84 	movi	r2,-2
   133a4:	1884703a 	and	r2,r3,r2
   133a8:	1001703a 	wrctl	status,r2
  
  return context;
   133ac:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   133b0:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   133b4:	d0a71d03 	ldbu	r2,-25484(gp)
   133b8:	10803fcc 	andi	r2,r2,255
   133bc:	10001926 	beq	r2,zero,13424 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   133c0:	d0a71d03 	ldbu	r2,-25484(gp)
   133c4:	10bfffc4 	addi	r2,r2,-1
   133c8:	d0a71d05 	stb	r2,-25484(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   133cc:	d0a71d03 	ldbu	r2,-25484(gp)
   133d0:	10803fcc 	andi	r2,r2,255
   133d4:	10000e1e 	bne	r2,zero,13410 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   133d8:	d0a72b03 	ldbu	r2,-25428(gp)
   133dc:	10803fcc 	andi	r2,r2,255
   133e0:	1000061e 	bne	r2,zero,133fc <OSSchedUnlock+0x8c>
   133e4:	e0bffa17 	ldw	r2,-24(fp)
   133e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133ec:	e0bffb17 	ldw	r2,-20(fp)
   133f0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   133f4:	00142180 	call	14218 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   133f8:	00000e06 	br	13434 <OSSchedUnlock+0xc4>
   133fc:	e0bffa17 	ldw	r2,-24(fp)
   13400:	e0bffc15 	stw	r2,-16(fp)
   13404:	e0bffc17 	ldw	r2,-16(fp)
   13408:	1001703a 	wrctl	status,r2
   1340c:	00000906 	br	13434 <OSSchedUnlock+0xc4>
   13410:	e0bffa17 	ldw	r2,-24(fp)
   13414:	e0bffd15 	stw	r2,-12(fp)
   13418:	e0bffd17 	ldw	r2,-12(fp)
   1341c:	1001703a 	wrctl	status,r2
   13420:	00000406 	br	13434 <OSSchedUnlock+0xc4>
   13424:	e0bffa17 	ldw	r2,-24(fp)
   13428:	e0bffe15 	stw	r2,-8(fp)
   1342c:	e0bffe17 	ldw	r2,-8(fp)
   13430:	1001703a 	wrctl	status,r2
   13434:	0001883a 	nop
   13438:	e037883a 	mov	sp,fp
   1343c:	dfc00117 	ldw	ra,4(sp)
   13440:	df000017 	ldw	fp,0(sp)
   13444:	dec00204 	addi	sp,sp,8
   13448:	f800283a 	ret

0001344c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   1344c:	defffe04 	addi	sp,sp,-8
   13450:	dfc00115 	stw	ra,4(sp)
   13454:	df000015 	stw	fp,0(sp)
   13458:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   1345c:	d0a71d43 	ldbu	r2,-25483(gp)
   13460:	10803fcc 	andi	r2,r2,255
   13464:	10000f1e 	bne	r2,zero,134a4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   13468:	00142e80 	call	142e8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   1346c:	d0a71f03 	ldbu	r2,-25476(gp)
   13470:	d0a71f45 	stb	r2,-25475(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   13474:	d0a71f03 	ldbu	r2,-25476(gp)
   13478:	10c03fcc 	andi	r3,r2,255
   1347c:	008000b4 	movhi	r2,2
   13480:	10955a04 	addi	r2,r2,21864
   13484:	18c7883a 	add	r3,r3,r3
   13488:	18c7883a 	add	r3,r3,r3
   1348c:	10c5883a 	add	r2,r2,r3
   13490:	10800017 	ldw	r2,0(r2)
   13494:	d0a72715 	stw	r2,-25444(gp)
        OSTCBCur      = OSTCBHighRdy;
   13498:	d0a72717 	ldw	r2,-25444(gp)
   1349c:	d0a72c15 	stw	r2,-25424(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   134a0:	001bba80 	call	1bba8 <OSStartHighRdy>
    }
}
   134a4:	0001883a 	nop
   134a8:	e037883a 	mov	sp,fp
   134ac:	dfc00117 	ldw	ra,4(sp)
   134b0:	df000017 	ldw	fp,0(sp)
   134b4:	dec00204 	addi	sp,sp,8
   134b8:	f800283a 	ret

000134bc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   134bc:	defff904 	addi	sp,sp,-28
   134c0:	dfc00615 	stw	ra,24(sp)
   134c4:	df000515 	stw	fp,20(sp)
   134c8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   134cc:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   134d0:	01000084 	movi	r4,2
   134d4:	0019bc00 	call	19bc0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134d8:	0005303a 	rdctl	r2,status
   134dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134e0:	e0fffc17 	ldw	r3,-16(fp)
   134e4:	00bfff84 	movi	r2,-2
   134e8:	1884703a 	and	r2,r3,r2
   134ec:	1001703a 	wrctl	status,r2
  
  return context;
   134f0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   134f4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   134f8:	d0271e15 	stw	zero,-25480(gp)
   134fc:	e0bffb17 	ldw	r2,-20(fp)
   13500:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13504:	e0bffd17 	ldw	r2,-12(fp)
   13508:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   1350c:	01000284 	movi	r4,10
   13510:	0019bc00 	call	19bc0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13514:	0005303a 	rdctl	r2,status
   13518:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1351c:	e0fffe17 	ldw	r3,-8(fp)
   13520:	00bfff84 	movi	r2,-2
   13524:	1884703a 	and	r2,r3,r2
   13528:	1001703a 	wrctl	status,r2
  
  return context;
   1352c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   13530:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   13534:	d0a71e17 	ldw	r2,-25480(gp)
   13538:	d0a72315 	stw	r2,-25460(gp)
    OSStatRdy    = OS_TRUE;
   1353c:	00800044 	movi	r2,1
   13540:	d0a72f05 	stb	r2,-25412(gp)
   13544:	e0bffb17 	ldw	r2,-20(fp)
   13548:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1354c:	e0bfff17 	ldw	r2,-4(fp)
   13550:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   13554:	0001883a 	nop
   13558:	e037883a 	mov	sp,fp
   1355c:	dfc00117 	ldw	ra,4(sp)
   13560:	df000017 	ldw	fp,0(sp)
   13564:	dec00204 	addi	sp,sp,8
   13568:	f800283a 	ret

0001356c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   1356c:	defff704 	addi	sp,sp,-36
   13570:	dfc00815 	stw	ra,32(sp)
   13574:	df000715 	stw	fp,28(sp)
   13578:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1357c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   13580:	001bdd00 	call	1bdd0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13584:	0005303a 	rdctl	r2,status
   13588:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1358c:	e0fffd17 	ldw	r3,-12(fp)
   13590:	00bfff84 	movi	r2,-2
   13594:	1884703a 	and	r2,r3,r2
   13598:	1001703a 	wrctl	status,r2
  
  return context;
   1359c:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   135a0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   135a4:	d0a72d17 	ldw	r2,-25420(gp)
   135a8:	10800044 	addi	r2,r2,1
   135ac:	d0a72d15 	stw	r2,-25420(gp)
   135b0:	e0bffb17 	ldw	r2,-20(fp)
   135b4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135b8:	e0bfff17 	ldw	r2,-4(fp)
   135bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   135c0:	d0a71d43 	ldbu	r2,-25483(gp)
   135c4:	10803fcc 	andi	r2,r2,255
   135c8:	10800058 	cmpnei	r2,r2,1
   135cc:	10006a1e 	bne	r2,zero,13778 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   135d0:	d0a72103 	ldbu	r2,-25468(gp)
   135d4:	10803fcc 	andi	r2,r2,255
   135d8:	10c00060 	cmpeqi	r3,r2,1
   135dc:	1800061e 	bne	r3,zero,135f8 <OSTimeTick+0x8c>
   135e0:	10c000a0 	cmpeqi	r3,r2,2
   135e4:	1800061e 	bne	r3,zero,13600 <OSTimeTick+0x94>
   135e8:	10000a1e 	bne	r2,zero,13614 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   135ec:	00800044 	movi	r2,1
   135f0:	e0bffa05 	stb	r2,-24(fp)
                 break;
   135f4:	00000b06 	br	13624 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   135f8:	e03ffa05 	stb	zero,-24(fp)
                 break;
   135fc:	00000906 	br	13624 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   13600:	00800044 	movi	r2,1
   13604:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   13608:	00800044 	movi	r2,1
   1360c:	d0a72105 	stb	r2,-25468(gp)
                 break;
   13610:	00000406 	br	13624 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   13614:	00800044 	movi	r2,1
   13618:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   1361c:	d0272105 	stb	zero,-25468(gp)
                 break;
   13620:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   13624:	e0bffa03 	ldbu	r2,-24(fp)
   13628:	10005226 	beq	r2,zero,13774 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   1362c:	d0a72017 	ldw	r2,-25472(gp)
   13630:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   13634:	00004906 	br	1375c <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13638:	0005303a 	rdctl	r2,status
   1363c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13640:	e0fffc17 	ldw	r3,-16(fp)
   13644:	00bfff84 	movi	r2,-2
   13648:	1884703a 	and	r2,r3,r2
   1364c:	1001703a 	wrctl	status,r2
  
  return context;
   13650:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   13654:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   13658:	e0bff917 	ldw	r2,-28(fp)
   1365c:	10800b8b 	ldhu	r2,46(r2)
   13660:	10bfffcc 	andi	r2,r2,65535
   13664:	10003626 	beq	r2,zero,13740 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   13668:	e0bff917 	ldw	r2,-28(fp)
   1366c:	10800b8b 	ldhu	r2,46(r2)
   13670:	10bfffc4 	addi	r2,r2,-1
   13674:	1007883a 	mov	r3,r2
   13678:	e0bff917 	ldw	r2,-28(fp)
   1367c:	10c00b8d 	sth	r3,46(r2)
   13680:	e0bff917 	ldw	r2,-28(fp)
   13684:	10800b8b 	ldhu	r2,46(r2)
   13688:	10bfffcc 	andi	r2,r2,65535
   1368c:	10002c1e 	bne	r2,zero,13740 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   13690:	e0bff917 	ldw	r2,-28(fp)
   13694:	10800c03 	ldbu	r2,48(r2)
   13698:	10803fcc 	andi	r2,r2,255
   1369c:	10800dcc 	andi	r2,r2,55
   136a0:	10000b26 	beq	r2,zero,136d0 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   136a4:	e0bff917 	ldw	r2,-28(fp)
   136a8:	10c00c03 	ldbu	r3,48(r2)
   136ac:	00bff204 	movi	r2,-56
   136b0:	1884703a 	and	r2,r3,r2
   136b4:	1007883a 	mov	r3,r2
   136b8:	e0bff917 	ldw	r2,-28(fp)
   136bc:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   136c0:	e0bff917 	ldw	r2,-28(fp)
   136c4:	00c00044 	movi	r3,1
   136c8:	10c00c45 	stb	r3,49(r2)
   136cc:	00000206 	br	136d8 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   136d0:	e0bff917 	ldw	r2,-28(fp)
   136d4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   136d8:	e0bff917 	ldw	r2,-28(fp)
   136dc:	10800c03 	ldbu	r2,48(r2)
   136e0:	10803fcc 	andi	r2,r2,255
   136e4:	1080020c 	andi	r2,r2,8
   136e8:	1000151e 	bne	r2,zero,13740 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   136ec:	e0bff917 	ldw	r2,-28(fp)
   136f0:	10c00d83 	ldbu	r3,54(r2)
   136f4:	d0a72903 	ldbu	r2,-25436(gp)
   136f8:	1884b03a 	or	r2,r3,r2
   136fc:	d0a72905 	stb	r2,-25436(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13700:	e0bff917 	ldw	r2,-28(fp)
   13704:	10800d03 	ldbu	r2,52(r2)
   13708:	10c03fcc 	andi	r3,r2,255
   1370c:	e0bff917 	ldw	r2,-28(fp)
   13710:	10800d03 	ldbu	r2,52(r2)
   13714:	11003fcc 	andi	r4,r2,255
   13718:	d0a72944 	addi	r2,gp,-25435
   1371c:	2085883a 	add	r2,r4,r2
   13720:	11000003 	ldbu	r4,0(r2)
   13724:	e0bff917 	ldw	r2,-28(fp)
   13728:	10800d43 	ldbu	r2,53(r2)
   1372c:	2084b03a 	or	r2,r4,r2
   13730:	1009883a 	mov	r4,r2
   13734:	d0a72944 	addi	r2,gp,-25435
   13738:	1885883a 	add	r2,r3,r2
   1373c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   13740:	e0bff917 	ldw	r2,-28(fp)
   13744:	10800517 	ldw	r2,20(r2)
   13748:	e0bff915 	stw	r2,-28(fp)
   1374c:	e0bffb17 	ldw	r2,-20(fp)
   13750:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13754:	e0bffe17 	ldw	r2,-8(fp)
   13758:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1375c:	e0bff917 	ldw	r2,-28(fp)
   13760:	10800c83 	ldbu	r2,50(r2)
   13764:	10803fcc 	andi	r2,r2,255
   13768:	10800518 	cmpnei	r2,r2,20
   1376c:	103fb21e 	bne	r2,zero,13638 <__alt_data_end+0xfffe28f8>
   13770:	00000106 	br	13778 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   13774:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   13778:	e037883a 	mov	sp,fp
   1377c:	dfc00117 	ldw	ra,4(sp)
   13780:	df000017 	ldw	fp,0(sp)
   13784:	dec00204 	addi	sp,sp,8
   13788:	f800283a 	ret

0001378c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   1378c:	deffff04 	addi	sp,sp,-4
   13790:	df000015 	stw	fp,0(sp)
   13794:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   13798:	00804784 	movi	r2,286
}
   1379c:	e037883a 	mov	sp,fp
   137a0:	df000017 	ldw	fp,0(sp)
   137a4:	dec00104 	addi	sp,sp,4
   137a8:	f800283a 	ret

000137ac <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   137ac:	deffff04 	addi	sp,sp,-4
   137b0:	df000015 	stw	fp,0(sp)
   137b4:	d839883a 	mov	fp,sp
}
   137b8:	0001883a 	nop
   137bc:	e037883a 	mov	sp,fp
   137c0:	df000017 	ldw	fp,0(sp)
   137c4:	dec00104 	addi	sp,sp,4
   137c8:	f800283a 	ret

000137cc <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   137cc:	defff804 	addi	sp,sp,-32
   137d0:	dfc00715 	stw	ra,28(sp)
   137d4:	df000615 	stw	fp,24(sp)
   137d8:	df000604 	addi	fp,sp,24
   137dc:	e13ffc15 	stw	r4,-16(fp)
   137e0:	e17ffd15 	stw	r5,-12(fp)
   137e4:	3007883a 	mov	r3,r6
   137e8:	3805883a 	mov	r2,r7
   137ec:	e0fffe05 	stb	r3,-8(fp)
   137f0:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   137f4:	e0bffc17 	ldw	r2,-16(fp)
   137f8:	10800283 	ldbu	r2,10(r2)
   137fc:	10c03fcc 	andi	r3,r2,255
   13800:	008000b4 	movhi	r2,2
   13804:	10b29d04 	addi	r2,r2,-13708
   13808:	10c5883a 	add	r2,r2,r3
   1380c:	10800003 	ldbu	r2,0(r2)
   13810:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   13814:	e0bffa03 	ldbu	r2,-24(fp)
   13818:	e0fffc17 	ldw	r3,-16(fp)
   1381c:	1885883a 	add	r2,r3,r2
   13820:	108002c4 	addi	r2,r2,11
   13824:	10800003 	ldbu	r2,0(r2)
   13828:	10c03fcc 	andi	r3,r2,255
   1382c:	008000b4 	movhi	r2,2
   13830:	10b29d04 	addi	r2,r2,-13708
   13834:	10c5883a 	add	r2,r2,r3
   13838:	10800003 	ldbu	r2,0(r2)
   1383c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   13840:	e0bffa03 	ldbu	r2,-24(fp)
   13844:	100490fa 	slli	r2,r2,3
   13848:	1007883a 	mov	r3,r2
   1384c:	e0bffa43 	ldbu	r2,-23(fp)
   13850:	1885883a 	add	r2,r3,r2
   13854:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   13858:	e0fffa83 	ldbu	r3,-22(fp)
   1385c:	008000b4 	movhi	r2,2
   13860:	10955a04 	addi	r2,r2,21864
   13864:	18c7883a 	add	r3,r3,r3
   13868:	18c7883a 	add	r3,r3,r3
   1386c:	10c5883a 	add	r2,r2,r3
   13870:	10800017 	ldw	r2,0(r2)
   13874:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   13878:	e0bffb17 	ldw	r2,-20(fp)
   1387c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   13880:	e0bffb17 	ldw	r2,-20(fp)
   13884:	e0fffd17 	ldw	r3,-12(fp)
   13888:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   1388c:	e0bffb17 	ldw	r2,-20(fp)
   13890:	10800c03 	ldbu	r2,48(r2)
   13894:	1007883a 	mov	r3,r2
   13898:	e0bffe03 	ldbu	r2,-8(fp)
   1389c:	0084303a 	nor	r2,zero,r2
   138a0:	1884703a 	and	r2,r3,r2
   138a4:	1007883a 	mov	r3,r2
   138a8:	e0bffb17 	ldw	r2,-20(fp)
   138ac:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   138b0:	e0bffb17 	ldw	r2,-20(fp)
   138b4:	e0ffff03 	ldbu	r3,-4(fp)
   138b8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   138bc:	e0bffb17 	ldw	r2,-20(fp)
   138c0:	10800c03 	ldbu	r2,48(r2)
   138c4:	10803fcc 	andi	r2,r2,255
   138c8:	1080020c 	andi	r2,r2,8
   138cc:	1000111e 	bne	r2,zero,13914 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   138d0:	e0bffb17 	ldw	r2,-20(fp)
   138d4:	10c00d83 	ldbu	r3,54(r2)
   138d8:	d0a72903 	ldbu	r2,-25436(gp)
   138dc:	1884b03a 	or	r2,r3,r2
   138e0:	d0a72905 	stb	r2,-25436(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   138e4:	e0fffa03 	ldbu	r3,-24(fp)
   138e8:	e13ffa03 	ldbu	r4,-24(fp)
   138ec:	d0a72944 	addi	r2,gp,-25435
   138f0:	2085883a 	add	r2,r4,r2
   138f4:	11000003 	ldbu	r4,0(r2)
   138f8:	e0bffb17 	ldw	r2,-20(fp)
   138fc:	10800d43 	ldbu	r2,53(r2)
   13900:	2084b03a 	or	r2,r4,r2
   13904:	1009883a 	mov	r4,r2
   13908:	d0a72944 	addi	r2,gp,-25435
   1390c:	1885883a 	add	r2,r3,r2
   13910:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   13914:	e17ffc17 	ldw	r5,-16(fp)
   13918:	e13ffb17 	ldw	r4,-20(fp)
   1391c:	0013bc40 	call	13bc4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   13920:	e0bffb17 	ldw	r2,-20(fp)
   13924:	10800817 	ldw	r2,32(r2)
   13928:	10000826 	beq	r2,zero,1394c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1392c:	e0bffb17 	ldw	r2,-20(fp)
   13930:	10800817 	ldw	r2,32(r2)
   13934:	100b883a 	mov	r5,r2
   13938:	e13ffb17 	ldw	r4,-20(fp)
   1393c:	0013c7c0 	call	13c7c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   13940:	e0bffb17 	ldw	r2,-20(fp)
   13944:	e0fffc17 	ldw	r3,-16(fp)
   13948:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   1394c:	e0bffa83 	ldbu	r2,-22(fp)
}
   13950:	e037883a 	mov	sp,fp
   13954:	dfc00117 	ldw	ra,4(sp)
   13958:	df000017 	ldw	fp,0(sp)
   1395c:	dec00204 	addi	sp,sp,8
   13960:	f800283a 	ret

00013964 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   13964:	defffd04 	addi	sp,sp,-12
   13968:	df000215 	stw	fp,8(sp)
   1396c:	df000204 	addi	fp,sp,8
   13970:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   13974:	d0a72c17 	ldw	r2,-25424(gp)
   13978:	e0ffff17 	ldw	r3,-4(fp)
   1397c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   13980:	d0a72c17 	ldw	r2,-25424(gp)
   13984:	10800d03 	ldbu	r2,52(r2)
   13988:	10803fcc 	andi	r2,r2,255
   1398c:	d0e72c17 	ldw	r3,-25424(gp)
   13990:	18c00d03 	ldbu	r3,52(r3)
   13994:	18c03fcc 	andi	r3,r3,255
   13998:	e13fff17 	ldw	r4,-4(fp)
   1399c:	20c7883a 	add	r3,r4,r3
   139a0:	18c002c4 	addi	r3,r3,11
   139a4:	19000003 	ldbu	r4,0(r3)
   139a8:	d0e72c17 	ldw	r3,-25424(gp)
   139ac:	18c00d43 	ldbu	r3,53(r3)
   139b0:	20c6b03a 	or	r3,r4,r3
   139b4:	1809883a 	mov	r4,r3
   139b8:	e0ffff17 	ldw	r3,-4(fp)
   139bc:	1885883a 	add	r2,r3,r2
   139c0:	108002c4 	addi	r2,r2,11
   139c4:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   139c8:	e0bfff17 	ldw	r2,-4(fp)
   139cc:	10c00283 	ldbu	r3,10(r2)
   139d0:	d0a72c17 	ldw	r2,-25424(gp)
   139d4:	10800d83 	ldbu	r2,54(r2)
   139d8:	1884b03a 	or	r2,r3,r2
   139dc:	1007883a 	mov	r3,r2
   139e0:	e0bfff17 	ldw	r2,-4(fp)
   139e4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   139e8:	d0a72c17 	ldw	r2,-25424(gp)
   139ec:	10800d03 	ldbu	r2,52(r2)
   139f0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   139f4:	e0fffe03 	ldbu	r3,-8(fp)
   139f8:	e13ffe03 	ldbu	r4,-8(fp)
   139fc:	d0a72944 	addi	r2,gp,-25435
   13a00:	2085883a 	add	r2,r4,r2
   13a04:	10800003 	ldbu	r2,0(r2)
   13a08:	1009883a 	mov	r4,r2
   13a0c:	d0a72c17 	ldw	r2,-25424(gp)
   13a10:	10800d43 	ldbu	r2,53(r2)
   13a14:	0084303a 	nor	r2,zero,r2
   13a18:	2084703a 	and	r2,r4,r2
   13a1c:	1009883a 	mov	r4,r2
   13a20:	d0a72944 	addi	r2,gp,-25435
   13a24:	1885883a 	add	r2,r3,r2
   13a28:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   13a2c:	e0fffe03 	ldbu	r3,-8(fp)
   13a30:	d0a72944 	addi	r2,gp,-25435
   13a34:	1885883a 	add	r2,r3,r2
   13a38:	10800003 	ldbu	r2,0(r2)
   13a3c:	10803fcc 	andi	r2,r2,255
   13a40:	1000071e 	bne	r2,zero,13a60 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   13a44:	d0a72c17 	ldw	r2,-25424(gp)
   13a48:	10800d83 	ldbu	r2,54(r2)
   13a4c:	0084303a 	nor	r2,zero,r2
   13a50:	1007883a 	mov	r3,r2
   13a54:	d0a72903 	ldbu	r2,-25436(gp)
   13a58:	1884703a 	and	r2,r3,r2
   13a5c:	d0a72905 	stb	r2,-25436(gp)
    }
}
   13a60:	0001883a 	nop
   13a64:	e037883a 	mov	sp,fp
   13a68:	df000017 	ldw	fp,0(sp)
   13a6c:	dec00104 	addi	sp,sp,4
   13a70:	f800283a 	ret

00013a74 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   13a74:	defffb04 	addi	sp,sp,-20
   13a78:	df000415 	stw	fp,16(sp)
   13a7c:	df000404 	addi	fp,sp,16
   13a80:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   13a84:	d0a72c17 	ldw	r2,-25424(gp)
   13a88:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   13a8c:	d0a72c17 	ldw	r2,-25424(gp)
   13a90:	e0ffff17 	ldw	r3,-4(fp)
   13a94:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   13a98:	e0bfff17 	ldw	r2,-4(fp)
   13a9c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   13aa0:	e0bffc17 	ldw	r2,-16(fp)
   13aa4:	10800017 	ldw	r2,0(r2)
   13aa8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   13aac:	00002006 	br	13b30 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   13ab0:	d0a72c17 	ldw	r2,-25424(gp)
   13ab4:	10800d03 	ldbu	r2,52(r2)
   13ab8:	10803fcc 	andi	r2,r2,255
   13abc:	d0e72c17 	ldw	r3,-25424(gp)
   13ac0:	18c00d03 	ldbu	r3,52(r3)
   13ac4:	18c03fcc 	andi	r3,r3,255
   13ac8:	e13ffd17 	ldw	r4,-12(fp)
   13acc:	20c7883a 	add	r3,r4,r3
   13ad0:	18c002c4 	addi	r3,r3,11
   13ad4:	19000003 	ldbu	r4,0(r3)
   13ad8:	d0e72c17 	ldw	r3,-25424(gp)
   13adc:	18c00d43 	ldbu	r3,53(r3)
   13ae0:	20c6b03a 	or	r3,r4,r3
   13ae4:	1809883a 	mov	r4,r3
   13ae8:	e0fffd17 	ldw	r3,-12(fp)
   13aec:	1885883a 	add	r2,r3,r2
   13af0:	108002c4 	addi	r2,r2,11
   13af4:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   13af8:	e0bffd17 	ldw	r2,-12(fp)
   13afc:	10c00283 	ldbu	r3,10(r2)
   13b00:	d0a72c17 	ldw	r2,-25424(gp)
   13b04:	10800d83 	ldbu	r2,54(r2)
   13b08:	1884b03a 	or	r2,r3,r2
   13b0c:	1007883a 	mov	r3,r2
   13b10:	e0bffd17 	ldw	r2,-12(fp)
   13b14:	10c00285 	stb	r3,10(r2)
        pevents++;
   13b18:	e0bffc17 	ldw	r2,-16(fp)
   13b1c:	10800104 	addi	r2,r2,4
   13b20:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   13b24:	e0bffc17 	ldw	r2,-16(fp)
   13b28:	10800017 	ldw	r2,0(r2)
   13b2c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   13b30:	e0bffd17 	ldw	r2,-12(fp)
   13b34:	103fde1e 	bne	r2,zero,13ab0 <__alt_data_end+0xfffe2d70>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   13b38:	d0a72c17 	ldw	r2,-25424(gp)
   13b3c:	10800d03 	ldbu	r2,52(r2)
   13b40:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   13b44:	e0fffe03 	ldbu	r3,-8(fp)
   13b48:	e13ffe03 	ldbu	r4,-8(fp)
   13b4c:	d0a72944 	addi	r2,gp,-25435
   13b50:	2085883a 	add	r2,r4,r2
   13b54:	10800003 	ldbu	r2,0(r2)
   13b58:	1009883a 	mov	r4,r2
   13b5c:	d0a72c17 	ldw	r2,-25424(gp)
   13b60:	10800d43 	ldbu	r2,53(r2)
   13b64:	0084303a 	nor	r2,zero,r2
   13b68:	2084703a 	and	r2,r4,r2
   13b6c:	1009883a 	mov	r4,r2
   13b70:	d0a72944 	addi	r2,gp,-25435
   13b74:	1885883a 	add	r2,r3,r2
   13b78:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   13b7c:	e0fffe03 	ldbu	r3,-8(fp)
   13b80:	d0a72944 	addi	r2,gp,-25435
   13b84:	1885883a 	add	r2,r3,r2
   13b88:	10800003 	ldbu	r2,0(r2)
   13b8c:	10803fcc 	andi	r2,r2,255
   13b90:	1000071e 	bne	r2,zero,13bb0 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   13b94:	d0a72c17 	ldw	r2,-25424(gp)
   13b98:	10800d83 	ldbu	r2,54(r2)
   13b9c:	0084303a 	nor	r2,zero,r2
   13ba0:	1007883a 	mov	r3,r2
   13ba4:	d0a72903 	ldbu	r2,-25436(gp)
   13ba8:	1884703a 	and	r2,r3,r2
   13bac:	d0a72905 	stb	r2,-25436(gp)
    }
}
   13bb0:	0001883a 	nop
   13bb4:	e037883a 	mov	sp,fp
   13bb8:	df000017 	ldw	fp,0(sp)
   13bbc:	dec00104 	addi	sp,sp,4
   13bc0:	f800283a 	ret

00013bc4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   13bc4:	defffc04 	addi	sp,sp,-16
   13bc8:	df000315 	stw	fp,12(sp)
   13bcc:	df000304 	addi	fp,sp,12
   13bd0:	e13ffe15 	stw	r4,-8(fp)
   13bd4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   13bd8:	e0bffe17 	ldw	r2,-8(fp)
   13bdc:	10800d03 	ldbu	r2,52(r2)
   13be0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   13be4:	e0bffd03 	ldbu	r2,-12(fp)
   13be8:	e0fffd03 	ldbu	r3,-12(fp)
   13bec:	e13fff17 	ldw	r4,-4(fp)
   13bf0:	20c7883a 	add	r3,r4,r3
   13bf4:	18c002c4 	addi	r3,r3,11
   13bf8:	18c00003 	ldbu	r3,0(r3)
   13bfc:	1809883a 	mov	r4,r3
   13c00:	e0fffe17 	ldw	r3,-8(fp)
   13c04:	18c00d43 	ldbu	r3,53(r3)
   13c08:	00c6303a 	nor	r3,zero,r3
   13c0c:	20c6703a 	and	r3,r4,r3
   13c10:	1809883a 	mov	r4,r3
   13c14:	e0ffff17 	ldw	r3,-4(fp)
   13c18:	1885883a 	add	r2,r3,r2
   13c1c:	108002c4 	addi	r2,r2,11
   13c20:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   13c24:	e0bffd03 	ldbu	r2,-12(fp)
   13c28:	e0ffff17 	ldw	r3,-4(fp)
   13c2c:	1885883a 	add	r2,r3,r2
   13c30:	108002c4 	addi	r2,r2,11
   13c34:	10800003 	ldbu	r2,0(r2)
   13c38:	10803fcc 	andi	r2,r2,255
   13c3c:	10000a1e 	bne	r2,zero,13c68 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   13c40:	e0bfff17 	ldw	r2,-4(fp)
   13c44:	10800283 	ldbu	r2,10(r2)
   13c48:	1007883a 	mov	r3,r2
   13c4c:	e0bffe17 	ldw	r2,-8(fp)
   13c50:	10800d83 	ldbu	r2,54(r2)
   13c54:	0084303a 	nor	r2,zero,r2
   13c58:	1884703a 	and	r2,r3,r2
   13c5c:	1007883a 	mov	r3,r2
   13c60:	e0bfff17 	ldw	r2,-4(fp)
   13c64:	10c00285 	stb	r3,10(r2)
    }
}
   13c68:	0001883a 	nop
   13c6c:	e037883a 	mov	sp,fp
   13c70:	df000017 	ldw	fp,0(sp)
   13c74:	dec00104 	addi	sp,sp,4
   13c78:	f800283a 	ret

00013c7c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   13c7c:	defffa04 	addi	sp,sp,-24
   13c80:	df000515 	stw	fp,20(sp)
   13c84:	df000504 	addi	fp,sp,20
   13c88:	e13ffe15 	stw	r4,-8(fp)
   13c8c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   13c90:	e0bffe17 	ldw	r2,-8(fp)
   13c94:	10800d03 	ldbu	r2,52(r2)
   13c98:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   13c9c:	e0bffe17 	ldw	r2,-8(fp)
   13ca0:	10800d83 	ldbu	r2,54(r2)
   13ca4:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   13ca8:	e0bffe17 	ldw	r2,-8(fp)
   13cac:	10800d43 	ldbu	r2,53(r2)
   13cb0:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   13cb4:	e0bfff17 	ldw	r2,-4(fp)
   13cb8:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   13cbc:	e0bffb17 	ldw	r2,-20(fp)
   13cc0:	10800017 	ldw	r2,0(r2)
   13cc4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   13cc8:	00002506 	br	13d60 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   13ccc:	e0bffd03 	ldbu	r2,-12(fp)
   13cd0:	e0fffd03 	ldbu	r3,-12(fp)
   13cd4:	e13ffc17 	ldw	r4,-16(fp)
   13cd8:	20c7883a 	add	r3,r4,r3
   13cdc:	18c002c4 	addi	r3,r3,11
   13ce0:	18c00003 	ldbu	r3,0(r3)
   13ce4:	1809883a 	mov	r4,r3
   13ce8:	e0fffd83 	ldbu	r3,-10(fp)
   13cec:	00c6303a 	nor	r3,zero,r3
   13cf0:	20c6703a 	and	r3,r4,r3
   13cf4:	1809883a 	mov	r4,r3
   13cf8:	e0fffc17 	ldw	r3,-16(fp)
   13cfc:	1885883a 	add	r2,r3,r2
   13d00:	108002c4 	addi	r2,r2,11
   13d04:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   13d08:	e0bffd03 	ldbu	r2,-12(fp)
   13d0c:	e0fffc17 	ldw	r3,-16(fp)
   13d10:	1885883a 	add	r2,r3,r2
   13d14:	108002c4 	addi	r2,r2,11
   13d18:	10800003 	ldbu	r2,0(r2)
   13d1c:	10803fcc 	andi	r2,r2,255
   13d20:	1000091e 	bne	r2,zero,13d48 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   13d24:	e0bffc17 	ldw	r2,-16(fp)
   13d28:	10800283 	ldbu	r2,10(r2)
   13d2c:	1007883a 	mov	r3,r2
   13d30:	e0bffd43 	ldbu	r2,-11(fp)
   13d34:	0084303a 	nor	r2,zero,r2
   13d38:	1884703a 	and	r2,r3,r2
   13d3c:	1007883a 	mov	r3,r2
   13d40:	e0bffc17 	ldw	r2,-16(fp)
   13d44:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   13d48:	e0bffb17 	ldw	r2,-20(fp)
   13d4c:	10800104 	addi	r2,r2,4
   13d50:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   13d54:	e0bffb17 	ldw	r2,-20(fp)
   13d58:	10800017 	ldw	r2,0(r2)
   13d5c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   13d60:	e0bffc17 	ldw	r2,-16(fp)
   13d64:	103fd91e 	bne	r2,zero,13ccc <__alt_data_end+0xfffe2f8c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   13d68:	0001883a 	nop
   13d6c:	e037883a 	mov	sp,fp
   13d70:	df000017 	ldw	fp,0(sp)
   13d74:	dec00104 	addi	sp,sp,4
   13d78:	f800283a 	ret

00013d7c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   13d7c:	defffc04 	addi	sp,sp,-16
   13d80:	df000315 	stw	fp,12(sp)
   13d84:	df000304 	addi	fp,sp,12
   13d88:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   13d8c:	e0bfff17 	ldw	r2,-4(fp)
   13d90:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   13d94:	e0bfff17 	ldw	r2,-4(fp)
   13d98:	108002c4 	addi	r2,r2,11
   13d9c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13da0:	e03ffe05 	stb	zero,-8(fp)
   13da4:	00000706 	br	13dc4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   13da8:	e0bffd17 	ldw	r2,-12(fp)
   13dac:	10c00044 	addi	r3,r2,1
   13db0:	e0fffd15 	stw	r3,-12(fp)
   13db4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13db8:	e0bffe03 	ldbu	r2,-8(fp)
   13dbc:	10800044 	addi	r2,r2,1
   13dc0:	e0bffe05 	stb	r2,-8(fp)
   13dc4:	e0bffe03 	ldbu	r2,-8(fp)
   13dc8:	108000f0 	cmpltui	r2,r2,3
   13dcc:	103ff61e 	bne	r2,zero,13da8 <__alt_data_end+0xfffe3068>
        *ptbl++ = 0;
    }
}
   13dd0:	0001883a 	nop
   13dd4:	e037883a 	mov	sp,fp
   13dd8:	df000017 	ldw	fp,0(sp)
   13ddc:	dec00104 	addi	sp,sp,4
   13de0:	f800283a 	ret

00013de4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   13de4:	defffb04 	addi	sp,sp,-20
   13de8:	dfc00415 	stw	ra,16(sp)
   13dec:	df000315 	stw	fp,12(sp)
   13df0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   13df4:	0142d004 	movi	r5,2880
   13df8:	010000b4 	movhi	r4,2
   13dfc:	21114604 	addi	r4,r4,17688
   13e00:	001415c0 	call	1415c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   13e04:	008000b4 	movhi	r2,2
   13e08:	10914604 	addi	r2,r2,17688
   13e0c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   13e10:	008000b4 	movhi	r2,2
   13e14:	10915204 	addi	r2,r2,17736
   13e18:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   13e1c:	e03ffd0d 	sth	zero,-12(fp)
   13e20:	00001306 	br	13e70 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13e24:	e0bffe17 	ldw	r2,-8(fp)
   13e28:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   13e2c:	e0bffe17 	ldw	r2,-8(fp)
   13e30:	e0ffff17 	ldw	r3,-4(fp)
   13e34:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   13e38:	e0bffe17 	ldw	r2,-8(fp)
   13e3c:	00c00fc4 	movi	r3,63
   13e40:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   13e44:	e0bffe17 	ldw	r2,-8(fp)
   13e48:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   13e4c:	e0bffe17 	ldw	r2,-8(fp)
   13e50:	10800c04 	addi	r2,r2,48
   13e54:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   13e58:	e0bfff17 	ldw	r2,-4(fp)
   13e5c:	10800c04 	addi	r2,r2,48
   13e60:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   13e64:	e0bffd0b 	ldhu	r2,-12(fp)
   13e68:	10800044 	addi	r2,r2,1
   13e6c:	e0bffd0d 	sth	r2,-12(fp)
   13e70:	e0bffd0b 	ldhu	r2,-12(fp)
   13e74:	10800ef0 	cmpltui	r2,r2,59
   13e78:	103fea1e 	bne	r2,zero,13e24 <__alt_data_end+0xfffe30e4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   13e7c:	e0bffe17 	ldw	r2,-8(fp)
   13e80:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   13e84:	e0bffe17 	ldw	r2,-8(fp)
   13e88:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   13e8c:	e0bffe17 	ldw	r2,-8(fp)
   13e90:	00c00fc4 	movi	r3,63
   13e94:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   13e98:	e0bffe17 	ldw	r2,-8(fp)
   13e9c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   13ea0:	008000b4 	movhi	r2,2
   13ea4:	10914604 	addi	r2,r2,17688
   13ea8:	d0a72a15 	stw	r2,-25432(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   13eac:	0001883a 	nop
   13eb0:	e037883a 	mov	sp,fp
   13eb4:	dfc00117 	ldw	ra,4(sp)
   13eb8:	df000017 	ldw	fp,0(sp)
   13ebc:	dec00204 	addi	sp,sp,8
   13ec0:	f800283a 	ret

00013ec4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   13ec4:	deffff04 	addi	sp,sp,-4
   13ec8:	df000015 	stw	fp,0(sp)
   13ecc:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   13ed0:	d0272d15 	stw	zero,-25420(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   13ed4:	d0272b05 	stb	zero,-25428(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   13ed8:	d0271d05 	stb	zero,-25484(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   13edc:	d0272545 	stb	zero,-25451(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   13ee0:	d0271d45 	stb	zero,-25483(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   13ee4:	d0272215 	stw	zero,-25464(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   13ee8:	d0271e15 	stw	zero,-25480(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   13eec:	d0273015 	stw	zero,-25408(gp)
    OSIdleCtrMax  = 0L;
   13ef0:	d0272315 	stw	zero,-25460(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   13ef4:	d0272f05 	stb	zero,-25412(gp)
#endif
}
   13ef8:	0001883a 	nop
   13efc:	e037883a 	mov	sp,fp
   13f00:	df000017 	ldw	fp,0(sp)
   13f04:	dec00104 	addi	sp,sp,4
   13f08:	f800283a 	ret

00013f0c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   13f0c:	defffd04 	addi	sp,sp,-12
   13f10:	df000215 	stw	fp,8(sp)
   13f14:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   13f18:	d0272905 	stb	zero,-25436(gp)
    prdytbl       = &OSRdyTbl[0];
   13f1c:	d0a72944 	addi	r2,gp,-25435
   13f20:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   13f24:	e03ffe05 	stb	zero,-8(fp)
   13f28:	00000706 	br	13f48 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   13f2c:	e0bfff17 	ldw	r2,-4(fp)
   13f30:	10c00044 	addi	r3,r2,1
   13f34:	e0ffff15 	stw	r3,-4(fp)
   13f38:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   13f3c:	e0bffe03 	ldbu	r2,-8(fp)
   13f40:	10800044 	addi	r2,r2,1
   13f44:	e0bffe05 	stb	r2,-8(fp)
   13f48:	e0bffe03 	ldbu	r2,-8(fp)
   13f4c:	108000f0 	cmpltui	r2,r2,3
   13f50:	103ff61e 	bne	r2,zero,13f2c <__alt_data_end+0xfffe31ec>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   13f54:	d0271f45 	stb	zero,-25475(gp)
    OSPrioHighRdy = 0;
   13f58:	d0271f05 	stb	zero,-25476(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   13f5c:	d0272715 	stw	zero,-25444(gp)
    OSTCBCur      = (OS_TCB *)0;
   13f60:	d0272c15 	stw	zero,-25424(gp)
}
   13f64:	0001883a 	nop
   13f68:	e037883a 	mov	sp,fp
   13f6c:	df000017 	ldw	fp,0(sp)
   13f70:	dec00104 	addi	sp,sp,4
   13f74:	f800283a 	ret

00013f78 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   13f78:	defff804 	addi	sp,sp,-32
   13f7c:	dfc00715 	stw	ra,28(sp)
   13f80:	df000615 	stw	fp,24(sp)
   13f84:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   13f88:	008000c4 	movi	r2,3
   13f8c:	d8800415 	stw	r2,16(sp)
   13f90:	d8000315 	stw	zero,12(sp)
   13f94:	00808004 	movi	r2,512
   13f98:	d8800215 	stw	r2,8(sp)
   13f9c:	008000b4 	movhi	r2,2
   13fa0:	108f4604 	addi	r2,r2,15640
   13fa4:	d8800115 	stw	r2,4(sp)
   13fa8:	00bfffd4 	movui	r2,65535
   13fac:	d8800015 	stw	r2,0(sp)
   13fb0:	01c00504 	movi	r7,20
   13fb4:	018000b4 	movhi	r6,2
   13fb8:	31914504 	addi	r6,r6,17684
   13fbc:	000b883a 	mov	r5,zero
   13fc0:	01000074 	movhi	r4,1
   13fc4:	21110904 	addi	r4,r4,17444
   13fc8:	0018af00 	call	18af0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   13fcc:	e1bfff04 	addi	r6,fp,-4
   13fd0:	014000b4 	movhi	r5,2
   13fd4:	2972dd04 	addi	r5,r5,-13452
   13fd8:	01000504 	movi	r4,20
   13fdc:	00193000 	call	19300 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   13fe0:	0001883a 	nop
   13fe4:	e037883a 	mov	sp,fp
   13fe8:	dfc00117 	ldw	ra,4(sp)
   13fec:	df000017 	ldw	fp,0(sp)
   13ff0:	dec00204 	addi	sp,sp,8
   13ff4:	f800283a 	ret

00013ff8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   13ff8:	defff804 	addi	sp,sp,-32
   13ffc:	dfc00715 	stw	ra,28(sp)
   14000:	df000615 	stw	fp,24(sp)
   14004:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   14008:	008000c4 	movi	r2,3
   1400c:	d8800415 	stw	r2,16(sp)
   14010:	d8000315 	stw	zero,12(sp)
   14014:	00808004 	movi	r2,512
   14018:	d8800215 	stw	r2,8(sp)
   1401c:	008000b4 	movhi	r2,2
   14020:	108cce04 	addi	r2,r2,13112
   14024:	d8800115 	stw	r2,4(sp)
   14028:	00bfff94 	movui	r2,65534
   1402c:	d8800015 	stw	r2,0(sp)
   14030:	01c004c4 	movi	r7,19
   14034:	018000b4 	movhi	r6,2
   14038:	318ecd04 	addi	r6,r6,15156
   1403c:	000b883a 	mov	r5,zero
   14040:	01000074 	movhi	r4,1
   14044:	21112004 	addi	r4,r4,17536
   14048:	0018af00 	call	18af0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   1404c:	e1bfff04 	addi	r6,fp,-4
   14050:	014000b4 	movhi	r5,2
   14054:	2972e104 	addi	r5,r5,-13436
   14058:	010004c4 	movi	r4,19
   1405c:	00193000 	call	19300 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   14060:	0001883a 	nop
   14064:	e037883a 	mov	sp,fp
   14068:	dfc00117 	ldw	ra,4(sp)
   1406c:	df000017 	ldw	fp,0(sp)
   14070:	dec00204 	addi	sp,sp,8
   14074:	f800283a 	ret

00014078 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   14078:	defffb04 	addi	sp,sp,-20
   1407c:	dfc00415 	stw	ra,16(sp)
   14080:	df000315 	stw	fp,12(sp)
   14084:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   14088:	01414404 	movi	r5,1296
   1408c:	010000b4 	movhi	r4,2
   14090:	21141604 	addi	r4,r4,20568
   14094:	001415c0 	call	1415c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   14098:	01401504 	movi	r5,84
   1409c:	010000b4 	movhi	r4,2
   140a0:	21155a04 	addi	r4,r4,21864
   140a4:	001415c0 	call	1415c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   140a8:	008000b4 	movhi	r2,2
   140ac:	10941604 	addi	r2,r2,20568
   140b0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   140b4:	008000b4 	movhi	r2,2
   140b8:	10943104 	addi	r2,r2,20676
   140bc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   140c0:	e03ffd05 	stb	zero,-12(fp)
   140c4:	00001106 	br	1410c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   140c8:	e0bffe17 	ldw	r2,-8(fp)
   140cc:	e0ffff17 	ldw	r3,-4(fp)
   140d0:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   140d4:	e0bffe17 	ldw	r2,-8(fp)
   140d8:	00c00fc4 	movi	r3,63
   140dc:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   140e0:	e0bffe17 	ldw	r2,-8(fp)
   140e4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   140e8:	e0bffe17 	ldw	r2,-8(fp)
   140ec:	10801b04 	addi	r2,r2,108
   140f0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   140f4:	e0bfff17 	ldw	r2,-4(fp)
   140f8:	10801b04 	addi	r2,r2,108
   140fc:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14100:	e0bffd03 	ldbu	r2,-12(fp)
   14104:	10800044 	addi	r2,r2,1
   14108:	e0bffd05 	stb	r2,-12(fp)
   1410c:	e0bffd03 	ldbu	r2,-12(fp)
   14110:	108002f0 	cmpltui	r2,r2,11
   14114:	103fec1e 	bne	r2,zero,140c8 <__alt_data_end+0xfffe3388>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   14118:	e0bffe17 	ldw	r2,-8(fp)
   1411c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   14120:	e0bffe17 	ldw	r2,-8(fp)
   14124:	00c00fc4 	movi	r3,63
   14128:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1412c:	e0bffe17 	ldw	r2,-8(fp)
   14130:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   14134:	d0272015 	stw	zero,-25472(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   14138:	008000b4 	movhi	r2,2
   1413c:	10941604 	addi	r2,r2,20568
   14140:	d0a72415 	stw	r2,-25456(gp)
}
   14144:	0001883a 	nop
   14148:	e037883a 	mov	sp,fp
   1414c:	dfc00117 	ldw	ra,4(sp)
   14150:	df000017 	ldw	fp,0(sp)
   14154:	dec00204 	addi	sp,sp,8
   14158:	f800283a 	ret

0001415c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   1415c:	defffd04 	addi	sp,sp,-12
   14160:	df000215 	stw	fp,8(sp)
   14164:	df000204 	addi	fp,sp,8
   14168:	e13ffe15 	stw	r4,-8(fp)
   1416c:	2805883a 	mov	r2,r5
   14170:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14174:	00000706 	br	14194 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   14178:	e0bffe17 	ldw	r2,-8(fp)
   1417c:	10c00044 	addi	r3,r2,1
   14180:	e0fffe15 	stw	r3,-8(fp)
   14184:	10000005 	stb	zero,0(r2)
        size--;
   14188:	e0bfff0b 	ldhu	r2,-4(fp)
   1418c:	10bfffc4 	addi	r2,r2,-1
   14190:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   14194:	e0bfff0b 	ldhu	r2,-4(fp)
   14198:	103ff71e 	bne	r2,zero,14178 <__alt_data_end+0xfffe3438>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   1419c:	0001883a 	nop
   141a0:	e037883a 	mov	sp,fp
   141a4:	df000017 	ldw	fp,0(sp)
   141a8:	dec00104 	addi	sp,sp,4
   141ac:	f800283a 	ret

000141b0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   141b0:	defffc04 	addi	sp,sp,-16
   141b4:	df000315 	stw	fp,12(sp)
   141b8:	df000304 	addi	fp,sp,12
   141bc:	e13ffd15 	stw	r4,-12(fp)
   141c0:	e17ffe15 	stw	r5,-8(fp)
   141c4:	3005883a 	mov	r2,r6
   141c8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   141cc:	00000b06 	br	141fc <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   141d0:	e0bffd17 	ldw	r2,-12(fp)
   141d4:	10c00044 	addi	r3,r2,1
   141d8:	e0fffd15 	stw	r3,-12(fp)
   141dc:	e0fffe17 	ldw	r3,-8(fp)
   141e0:	19000044 	addi	r4,r3,1
   141e4:	e13ffe15 	stw	r4,-8(fp)
   141e8:	18c00003 	ldbu	r3,0(r3)
   141ec:	10c00005 	stb	r3,0(r2)
        size--;
   141f0:	e0bfff0b 	ldhu	r2,-4(fp)
   141f4:	10bfffc4 	addi	r2,r2,-1
   141f8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   141fc:	e0bfff0b 	ldhu	r2,-4(fp)
   14200:	103ff31e 	bne	r2,zero,141d0 <__alt_data_end+0xfffe3490>
        *pdest++ = *psrc++;
        size--;
    }
}
   14204:	0001883a 	nop
   14208:	e037883a 	mov	sp,fp
   1420c:	df000017 	ldw	fp,0(sp)
   14210:	dec00104 	addi	sp,sp,4
   14214:	f800283a 	ret

00014218 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   14218:	defffb04 	addi	sp,sp,-20
   1421c:	dfc00415 	stw	ra,16(sp)
   14220:	df000315 	stw	fp,12(sp)
   14224:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14228:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1422c:	0005303a 	rdctl	r2,status
   14230:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14234:	e0ffff17 	ldw	r3,-4(fp)
   14238:	00bfff84 	movi	r2,-2
   1423c:	1884703a 	and	r2,r3,r2
   14240:	1001703a 	wrctl	status,r2
  
  return context;
   14244:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   14248:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   1424c:	d0a72b03 	ldbu	r2,-25428(gp)
   14250:	10803fcc 	andi	r2,r2,255
   14254:	10001a1e 	bne	r2,zero,142c0 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   14258:	d0a71d03 	ldbu	r2,-25484(gp)
   1425c:	10803fcc 	andi	r2,r2,255
   14260:	1000171e 	bne	r2,zero,142c0 <OS_Sched+0xa8>
            OS_SchedNew();
   14264:	00142e80 	call	142e8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   14268:	d0e71f03 	ldbu	r3,-25476(gp)
   1426c:	d0a71f43 	ldbu	r2,-25475(gp)
   14270:	18c03fcc 	andi	r3,r3,255
   14274:	10803fcc 	andi	r2,r2,255
   14278:	18801126 	beq	r3,r2,142c0 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   1427c:	d0a71f03 	ldbu	r2,-25476(gp)
   14280:	10c03fcc 	andi	r3,r2,255
   14284:	008000b4 	movhi	r2,2
   14288:	10955a04 	addi	r2,r2,21864
   1428c:	18c7883a 	add	r3,r3,r3
   14290:	18c7883a 	add	r3,r3,r3
   14294:	10c5883a 	add	r2,r2,r3
   14298:	10800017 	ldw	r2,0(r2)
   1429c:	d0a72715 	stw	r2,-25444(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   142a0:	d0a72717 	ldw	r2,-25444(gp)
   142a4:	10c00e17 	ldw	r3,56(r2)
   142a8:	18c00044 	addi	r3,r3,1
   142ac:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   142b0:	d0a72217 	ldw	r2,-25464(gp)
   142b4:	10800044 	addi	r2,r2,1
   142b8:	d0a72215 	stw	r2,-25464(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   142bc:	001bb1c0 	call	1bb1c <OSCtxSw>
   142c0:	e0bffd17 	ldw	r2,-12(fp)
   142c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   142c8:	e0bffe17 	ldw	r2,-8(fp)
   142cc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   142d0:	0001883a 	nop
   142d4:	e037883a 	mov	sp,fp
   142d8:	dfc00117 	ldw	ra,4(sp)
   142dc:	df000017 	ldw	fp,0(sp)
   142e0:	dec00204 	addi	sp,sp,8
   142e4:	f800283a 	ret

000142e8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   142e8:	defffe04 	addi	sp,sp,-8
   142ec:	df000115 	stw	fp,4(sp)
   142f0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   142f4:	d0a72903 	ldbu	r2,-25436(gp)
   142f8:	10c03fcc 	andi	r3,r2,255
   142fc:	008000b4 	movhi	r2,2
   14300:	10b29d04 	addi	r2,r2,-13708
   14304:	10c5883a 	add	r2,r2,r3
   14308:	10800003 	ldbu	r2,0(r2)
   1430c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   14310:	e0bfff03 	ldbu	r2,-4(fp)
   14314:	100490fa 	slli	r2,r2,3
   14318:	1009883a 	mov	r4,r2
   1431c:	e0ffff03 	ldbu	r3,-4(fp)
   14320:	d0a72944 	addi	r2,gp,-25435
   14324:	1885883a 	add	r2,r3,r2
   14328:	10800003 	ldbu	r2,0(r2)
   1432c:	10c03fcc 	andi	r3,r2,255
   14330:	008000b4 	movhi	r2,2
   14334:	10b29d04 	addi	r2,r2,-13708
   14338:	10c5883a 	add	r2,r2,r3
   1433c:	10800003 	ldbu	r2,0(r2)
   14340:	2085883a 	add	r2,r4,r2
   14344:	d0a71f05 	stb	r2,-25476(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   14348:	0001883a 	nop
   1434c:	e037883a 	mov	sp,fp
   14350:	df000017 	ldw	fp,0(sp)
   14354:	dec00104 	addi	sp,sp,4
   14358:	f800283a 	ret

0001435c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   1435c:	defffc04 	addi	sp,sp,-16
   14360:	df000315 	stw	fp,12(sp)
   14364:	df000304 	addi	fp,sp,12
   14368:	e13ffe15 	stw	r4,-8(fp)
   1436c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   14370:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   14374:	00000b06 	br	143a4 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   14378:	e0bffe17 	ldw	r2,-8(fp)
   1437c:	10c00044 	addi	r3,r2,1
   14380:	e0fffe15 	stw	r3,-8(fp)
   14384:	e0ffff17 	ldw	r3,-4(fp)
   14388:	19000044 	addi	r4,r3,1
   1438c:	e13fff15 	stw	r4,-4(fp)
   14390:	18c00003 	ldbu	r3,0(r3)
   14394:	10c00005 	stb	r3,0(r2)
        len++;
   14398:	e0bffd03 	ldbu	r2,-12(fp)
   1439c:	10800044 	addi	r2,r2,1
   143a0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   143a4:	e0bfff17 	ldw	r2,-4(fp)
   143a8:	10800003 	ldbu	r2,0(r2)
   143ac:	10803fcc 	andi	r2,r2,255
   143b0:	103ff11e 	bne	r2,zero,14378 <__alt_data_end+0xfffe3638>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   143b4:	e0bffe17 	ldw	r2,-8(fp)
   143b8:	10000005 	stb	zero,0(r2)
    return (len);
   143bc:	e0bffd03 	ldbu	r2,-12(fp)
}
   143c0:	e037883a 	mov	sp,fp
   143c4:	df000017 	ldw	fp,0(sp)
   143c8:	dec00104 	addi	sp,sp,4
   143cc:	f800283a 	ret

000143d0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   143d0:	defffd04 	addi	sp,sp,-12
   143d4:	df000215 	stw	fp,8(sp)
   143d8:	df000204 	addi	fp,sp,8
   143dc:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   143e0:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   143e4:	00000606 	br	14400 <OS_StrLen+0x30>
        psrc++;
   143e8:	e0bfff17 	ldw	r2,-4(fp)
   143ec:	10800044 	addi	r2,r2,1
   143f0:	e0bfff15 	stw	r2,-4(fp)
        len++;
   143f4:	e0bffe03 	ldbu	r2,-8(fp)
   143f8:	10800044 	addi	r2,r2,1
   143fc:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14400:	e0bfff17 	ldw	r2,-4(fp)
   14404:	10800003 	ldbu	r2,0(r2)
   14408:	10803fcc 	andi	r2,r2,255
   1440c:	103ff61e 	bne	r2,zero,143e8 <__alt_data_end+0xfffe36a8>
        psrc++;
        len++;
    }
    return (len);
   14410:	e0bffe03 	ldbu	r2,-8(fp)
}
   14414:	e037883a 	mov	sp,fp
   14418:	df000017 	ldw	fp,0(sp)
   1441c:	dec00104 	addi	sp,sp,4
   14420:	f800283a 	ret

00014424 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   14424:	defffa04 	addi	sp,sp,-24
   14428:	dfc00515 	stw	ra,20(sp)
   1442c:	df000415 	stw	fp,16(sp)
   14430:	df000404 	addi	fp,sp,16
   14434:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14438:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1443c:	0005303a 	rdctl	r2,status
   14440:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14444:	e0fffd17 	ldw	r3,-12(fp)
   14448:	00bfff84 	movi	r2,-2
   1444c:	1884703a 	and	r2,r3,r2
   14450:	1001703a 	wrctl	status,r2
  
  return context;
   14454:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   14458:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   1445c:	d0a71e17 	ldw	r2,-25480(gp)
   14460:	10800044 	addi	r2,r2,1
   14464:	d0a71e15 	stw	r2,-25480(gp)
   14468:	e0bffc17 	ldw	r2,-16(fp)
   1446c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14470:	e0bffe17 	ldw	r2,-8(fp)
   14474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   14478:	001be300 	call	1be30 <OSTaskIdleHook>
    }
   1447c:	003fef06 	br	1443c <__alt_data_end+0xfffe36fc>

00014480 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   14480:	defffa04 	addi	sp,sp,-24
   14484:	dfc00515 	stw	ra,20(sp)
   14488:	df000415 	stw	fp,16(sp)
   1448c:	df000404 	addi	fp,sp,16
   14490:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14494:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14498:	00000206 	br	144a4 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   1449c:	01000504 	movi	r4,20
   144a0:	0019bc00 	call	19bc0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   144a4:	d0a72f03 	ldbu	r2,-25412(gp)
   144a8:	10803fcc 	andi	r2,r2,255
   144ac:	103ffb26 	beq	r2,zero,1449c <__alt_data_end+0xfffe375c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   144b0:	d0a72317 	ldw	r2,-25460(gp)
   144b4:	01401904 	movi	r5,100
   144b8:	1009883a 	mov	r4,r2
   144bc:	0004e580 	call	4e58 <__udivsi3>
   144c0:	d0a72315 	stw	r2,-25460(gp)
    if (OSIdleCtrMax == 0L) {
   144c4:	d0a72317 	ldw	r2,-25460(gp)
   144c8:	1000031e 	bne	r2,zero,144d8 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   144cc:	d0272505 	stb	zero,-25452(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   144d0:	01003fc4 	movi	r4,255
   144d4:	00198480 	call	19848 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   144d8:	0005303a 	rdctl	r2,status
   144dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144e0:	e0fffd17 	ldw	r3,-12(fp)
   144e4:	00bfff84 	movi	r2,-2
   144e8:	1884703a 	and	r2,r3,r2
   144ec:	1001703a 	wrctl	status,r2
  
  return context;
   144f0:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   144f4:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   144f8:	d0a71e17 	ldw	r2,-25480(gp)
   144fc:	d0a73015 	stw	r2,-25408(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   14500:	d0271e15 	stw	zero,-25480(gp)
   14504:	e0bffc17 	ldw	r2,-16(fp)
   14508:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1450c:	e0bffe17 	ldw	r2,-8(fp)
   14510:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   14514:	d0a73017 	ldw	r2,-25408(gp)
   14518:	d0e72317 	ldw	r3,-25460(gp)
   1451c:	180b883a 	mov	r5,r3
   14520:	1009883a 	mov	r4,r2
   14524:	0004e580 	call	4e58 <__udivsi3>
   14528:	1007883a 	mov	r3,r2
   1452c:	00801904 	movi	r2,100
   14530:	10c5c83a 	sub	r2,r2,r3
   14534:	d0a72505 	stb	r2,-25452(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   14538:	001bdb00 	call	1bdb0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   1453c:	001454c0 	call	1454c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   14540:	01000284 	movi	r4,10
   14544:	0019bc00 	call	19bc0 <OSTimeDly>
    }
   14548:	003fe306 	br	144d8 <__alt_data_end+0xfffe3798>

0001454c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   1454c:	defffa04 	addi	sp,sp,-24
   14550:	dfc00515 	stw	ra,20(sp)
   14554:	df000415 	stw	fp,16(sp)
   14558:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1455c:	e03ffc05 	stb	zero,-16(fp)
   14560:	00002406 	br	145f4 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   14564:	e0bffc03 	ldbu	r2,-16(fp)
   14568:	e0fffe04 	addi	r3,fp,-8
   1456c:	180b883a 	mov	r5,r3
   14570:	1009883a 	mov	r4,r2
   14574:	00196880 	call	19688 <OSTaskStkChk>
   14578:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   1457c:	e0bffc43 	ldbu	r2,-15(fp)
   14580:	1000191e 	bne	r2,zero,145e8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   14584:	e0fffc03 	ldbu	r3,-16(fp)
   14588:	008000b4 	movhi	r2,2
   1458c:	10955a04 	addi	r2,r2,21864
   14590:	18c7883a 	add	r3,r3,r3
   14594:	18c7883a 	add	r3,r3,r3
   14598:	10c5883a 	add	r2,r2,r3
   1459c:	10800017 	ldw	r2,0(r2)
   145a0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   145a4:	e0bffd17 	ldw	r2,-12(fp)
   145a8:	10000f26 	beq	r2,zero,145e8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   145ac:	e0bffd17 	ldw	r2,-12(fp)
   145b0:	10800060 	cmpeqi	r2,r2,1
   145b4:	10000c1e 	bne	r2,zero,145e8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   145b8:	e0bffd17 	ldw	r2,-12(fp)
   145bc:	10c00217 	ldw	r3,8(r2)
   145c0:	e0bffd17 	ldw	r2,-12(fp)
   145c4:	10800317 	ldw	r2,12(r2)
   145c8:	1085883a 	add	r2,r2,r2
   145cc:	1085883a 	add	r2,r2,r2
   145d0:	1887883a 	add	r3,r3,r2
   145d4:	e0bffd17 	ldw	r2,-12(fp)
   145d8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   145dc:	e0ffff17 	ldw	r3,-4(fp)
   145e0:	e0bffd17 	ldw	r2,-12(fp)
   145e4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   145e8:	e0bffc03 	ldbu	r2,-16(fp)
   145ec:	10800044 	addi	r2,r2,1
   145f0:	e0bffc05 	stb	r2,-16(fp)
   145f4:	e0bffc03 	ldbu	r2,-16(fp)
   145f8:	10800570 	cmpltui	r2,r2,21
   145fc:	103fd91e 	bne	r2,zero,14564 <__alt_data_end+0xfffe3824>
#endif
                }
            }
        }
    }
}
   14600:	0001883a 	nop
   14604:	e037883a 	mov	sp,fp
   14608:	dfc00117 	ldw	ra,4(sp)
   1460c:	df000017 	ldw	fp,0(sp)
   14610:	dec00204 	addi	sp,sp,8
   14614:	f800283a 	ret

00014618 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   14618:	defff204 	addi	sp,sp,-56
   1461c:	dfc00d15 	stw	ra,52(sp)
   14620:	df000c15 	stw	fp,48(sp)
   14624:	df000c04 	addi	fp,sp,48
   14628:	e17ffc15 	stw	r5,-16(fp)
   1462c:	e1bffd15 	stw	r6,-12(fp)
   14630:	3807883a 	mov	r3,r7
   14634:	e0800417 	ldw	r2,16(fp)
   14638:	e13ffb05 	stb	r4,-20(fp)
   1463c:	e0fffe0d 	sth	r3,-8(fp)
   14640:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14644:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14648:	0005303a 	rdctl	r2,status
   1464c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14650:	e0fffa17 	ldw	r3,-24(fp)
   14654:	00bfff84 	movi	r2,-2
   14658:	1884703a 	and	r2,r3,r2
   1465c:	1001703a 	wrctl	status,r2
  
  return context;
   14660:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   14664:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   14668:	d0a72417 	ldw	r2,-25456(gp)
   1466c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   14670:	e0bff617 	ldw	r2,-40(fp)
   14674:	10009326 	beq	r2,zero,148c4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   14678:	e0bff617 	ldw	r2,-40(fp)
   1467c:	10800517 	ldw	r2,20(r2)
   14680:	d0a72415 	stw	r2,-25456(gp)
   14684:	e0bff417 	ldw	r2,-48(fp)
   14688:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1468c:	e0bff817 	ldw	r2,-32(fp)
   14690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   14694:	e0bff617 	ldw	r2,-40(fp)
   14698:	e0fffc17 	ldw	r3,-16(fp)
   1469c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   146a0:	e0bff617 	ldw	r2,-40(fp)
   146a4:	e0fffb03 	ldbu	r3,-20(fp)
   146a8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   146ac:	e0bff617 	ldw	r2,-40(fp)
   146b0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   146b4:	e0bff617 	ldw	r2,-40(fp)
   146b8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   146bc:	e0bff617 	ldw	r2,-40(fp)
   146c0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   146c4:	e0bff617 	ldw	r2,-40(fp)
   146c8:	e0c00317 	ldw	r3,12(fp)
   146cc:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   146d0:	e0bff617 	ldw	r2,-40(fp)
   146d4:	e0c00217 	ldw	r3,8(fp)
   146d8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   146dc:	e0bff617 	ldw	r2,-40(fp)
   146e0:	e0fffd17 	ldw	r3,-12(fp)
   146e4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   146e8:	e0bff617 	ldw	r2,-40(fp)
   146ec:	e0ffff0b 	ldhu	r3,-4(fp)
   146f0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   146f4:	e0bff617 	ldw	r2,-40(fp)
   146f8:	e0fffe0b 	ldhu	r3,-8(fp)
   146fc:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   14700:	e0bff617 	ldw	r2,-40(fp)
   14704:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   14708:	e0bffb03 	ldbu	r2,-20(fp)
   1470c:	1004d0fa 	srli	r2,r2,3
   14710:	1007883a 	mov	r3,r2
   14714:	e0bff617 	ldw	r2,-40(fp)
   14718:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   1471c:	e0bffb03 	ldbu	r2,-20(fp)
   14720:	108001cc 	andi	r2,r2,7
   14724:	1007883a 	mov	r3,r2
   14728:	e0bff617 	ldw	r2,-40(fp)
   1472c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   14730:	e0bff617 	ldw	r2,-40(fp)
   14734:	10800d03 	ldbu	r2,52(r2)
   14738:	10803fcc 	andi	r2,r2,255
   1473c:	00c00044 	movi	r3,1
   14740:	1884983a 	sll	r2,r3,r2
   14744:	1007883a 	mov	r3,r2
   14748:	e0bff617 	ldw	r2,-40(fp)
   1474c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   14750:	e0bff617 	ldw	r2,-40(fp)
   14754:	10800cc3 	ldbu	r2,51(r2)
   14758:	10803fcc 	andi	r2,r2,255
   1475c:	00c00044 	movi	r3,1
   14760:	1884983a 	sll	r2,r3,r2
   14764:	1007883a 	mov	r3,r2
   14768:	e0bff617 	ldw	r2,-40(fp)
   1476c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   14770:	e0bff617 	ldw	r2,-40(fp)
   14774:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   14778:	e0bff617 	ldw	r2,-40(fp)
   1477c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   14780:	e0bff617 	ldw	r2,-40(fp)
   14784:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   14788:	e0bff617 	ldw	r2,-40(fp)
   1478c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   14790:	e0bff617 	ldw	r2,-40(fp)
   14794:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   14798:	e0bff617 	ldw	r2,-40(fp)
   1479c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   147a0:	e0bff617 	ldw	r2,-40(fp)
   147a4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   147a8:	e0bff617 	ldw	r2,-40(fp)
   147ac:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   147b0:	e0bff617 	ldw	r2,-40(fp)
   147b4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   147b8:	e0bff617 	ldw	r2,-40(fp)
   147bc:	00c00fc4 	movi	r3,63
   147c0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   147c4:	e0bff617 	ldw	r2,-40(fp)
   147c8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   147cc:	e13ff617 	ldw	r4,-40(fp)
   147d0:	001be500 	call	1be50 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   147d4:	e13ff617 	ldw	r4,-40(fp)
   147d8:	001bd480 	call	1bd48 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147dc:	0005303a 	rdctl	r2,status
   147e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147e4:	e0fff517 	ldw	r3,-44(fp)
   147e8:	00bfff84 	movi	r2,-2
   147ec:	1884703a 	and	r2,r3,r2
   147f0:	1001703a 	wrctl	status,r2
  
  return context;
   147f4:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   147f8:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   147fc:	e0fffb03 	ldbu	r3,-20(fp)
   14800:	008000b4 	movhi	r2,2
   14804:	10955a04 	addi	r2,r2,21864
   14808:	18c7883a 	add	r3,r3,r3
   1480c:	18c7883a 	add	r3,r3,r3
   14810:	10c5883a 	add	r2,r2,r3
   14814:	e0fff617 	ldw	r3,-40(fp)
   14818:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   1481c:	d0e72017 	ldw	r3,-25472(gp)
   14820:	e0bff617 	ldw	r2,-40(fp)
   14824:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   14828:	e0bff617 	ldw	r2,-40(fp)
   1482c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   14830:	d0a72017 	ldw	r2,-25472(gp)
   14834:	10000326 	beq	r2,zero,14844 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   14838:	d0a72017 	ldw	r2,-25472(gp)
   1483c:	e0fff617 	ldw	r3,-40(fp)
   14840:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   14844:	e0bff617 	ldw	r2,-40(fp)
   14848:	d0a72015 	stw	r2,-25472(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   1484c:	e0bff617 	ldw	r2,-40(fp)
   14850:	10c00d83 	ldbu	r3,54(r2)
   14854:	d0a72903 	ldbu	r2,-25436(gp)
   14858:	1884b03a 	or	r2,r3,r2
   1485c:	d0a72905 	stb	r2,-25436(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14860:	e0bff617 	ldw	r2,-40(fp)
   14864:	10800d03 	ldbu	r2,52(r2)
   14868:	10c03fcc 	andi	r3,r2,255
   1486c:	e0bff617 	ldw	r2,-40(fp)
   14870:	10800d03 	ldbu	r2,52(r2)
   14874:	11003fcc 	andi	r4,r2,255
   14878:	d0a72944 	addi	r2,gp,-25435
   1487c:	2085883a 	add	r2,r4,r2
   14880:	11000003 	ldbu	r4,0(r2)
   14884:	e0bff617 	ldw	r2,-40(fp)
   14888:	10800d43 	ldbu	r2,53(r2)
   1488c:	2084b03a 	or	r2,r4,r2
   14890:	1009883a 	mov	r4,r2
   14894:	d0a72944 	addi	r2,gp,-25435
   14898:	1885883a 	add	r2,r3,r2
   1489c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   148a0:	d0a72543 	ldbu	r2,-25451(gp)
   148a4:	10800044 	addi	r2,r2,1
   148a8:	d0a72545 	stb	r2,-25451(gp)
   148ac:	e0bff417 	ldw	r2,-48(fp)
   148b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148b4:	e0bff717 	ldw	r2,-36(fp)
   148b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   148bc:	0005883a 	mov	r2,zero
   148c0:	00000506 	br	148d8 <OS_TCBInit+0x2c0>
   148c4:	e0bff417 	ldw	r2,-48(fp)
   148c8:	e0bff915 	stw	r2,-28(fp)
   148cc:	e0bff917 	ldw	r2,-28(fp)
   148d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   148d4:	00801084 	movi	r2,66
}
   148d8:	e037883a 	mov	sp,fp
   148dc:	dfc00117 	ldw	ra,4(sp)
   148e0:	df000017 	ldw	fp,0(sp)
   148e4:	dec00204 	addi	sp,sp,8
   148e8:	f800283a 	ret

000148ec <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   148ec:	defffe04 	addi	sp,sp,-8
   148f0:	df000115 	stw	fp,4(sp)
   148f4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   148f8:	d0a01004 	addi	r2,gp,-32704
   148fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   14900:	d0a01104 	addi	r2,gp,-32700
   14904:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   14908:	d0a01284 	addi	r2,gp,-32694
   1490c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   14910:	d0a01304 	addi	r2,gp,-32692
   14914:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   14918:	d0a01204 	addi	r2,gp,-32696
   1491c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   14920:	d0a01384 	addi	r2,gp,-32690
   14924:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   14928:	d0a01404 	addi	r2,gp,-32688
   1492c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   14930:	d0a01484 	addi	r2,gp,-32686
   14934:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   14938:	d0a01504 	addi	r2,gp,-32684
   1493c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   14940:	d0a01584 	addi	r2,gp,-32682
   14944:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   14948:	d0a01604 	addi	r2,gp,-32680
   1494c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   14950:	d0a01684 	addi	r2,gp,-32678
   14954:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   14958:	d0a01704 	addi	r2,gp,-32676
   1495c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   14960:	d0a01784 	addi	r2,gp,-32674
   14964:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   14968:	d0a01804 	addi	r2,gp,-32672
   1496c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   14970:	d0a01884 	addi	r2,gp,-32670
   14974:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   14978:	d0a01904 	addi	r2,gp,-32668
   1497c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   14980:	d0a01984 	addi	r2,gp,-32666
   14984:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   14988:	d0a01a04 	addi	r2,gp,-32664
   1498c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   14990:	d0a01a84 	addi	r2,gp,-32662
   14994:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   14998:	d0a01b04 	addi	r2,gp,-32660
   1499c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   149a0:	d0a01b84 	addi	r2,gp,-32658
   149a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   149a8:	d0a01c04 	addi	r2,gp,-32656
   149ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   149b0:	d0a01c84 	addi	r2,gp,-32654
   149b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   149b8:	d0a01d04 	addi	r2,gp,-32652
   149bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   149c0:	d0a01d84 	addi	r2,gp,-32650
   149c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   149c8:	d0a01e04 	addi	r2,gp,-32648
   149cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   149d0:	d0a01e84 	addi	r2,gp,-32646
   149d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   149d8:	d0a01f04 	addi	r2,gp,-32644
   149dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   149e0:	d0a01f84 	addi	r2,gp,-32642
   149e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   149e8:	d0a02004 	addi	r2,gp,-32640
   149ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   149f0:	d0a02084 	addi	r2,gp,-32638
   149f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   149f8:	d0a02104 	addi	r2,gp,-32636
   149fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   14a00:	d0a02184 	addi	r2,gp,-32634
   14a04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   14a08:	d0a02204 	addi	r2,gp,-32632
   14a0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   14a10:	d0a02284 	addi	r2,gp,-32630
   14a14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   14a18:	d0a02304 	addi	r2,gp,-32628
   14a1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   14a20:	d0a02384 	addi	r2,gp,-32626
   14a24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   14a28:	d0a02404 	addi	r2,gp,-32624
   14a2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   14a30:	d0a02484 	addi	r2,gp,-32622
   14a34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   14a38:	d0a02504 	addi	r2,gp,-32620
   14a3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   14a40:	d0a02584 	addi	r2,gp,-32618
   14a44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   14a48:	d0a02604 	addi	r2,gp,-32616
   14a4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   14a50:	d0a02684 	addi	r2,gp,-32614
   14a54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   14a58:	d0a02704 	addi	r2,gp,-32612
   14a5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   14a60:	d0a02c04 	addi	r2,gp,-32592
   14a64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   14a68:	0001883a 	nop
   14a6c:	e037883a 	mov	sp,fp
   14a70:	df000017 	ldw	fp,0(sp)
   14a74:	dec00104 	addi	sp,sp,4
   14a78:	f800283a 	ret

00014a7c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   14a7c:	defff204 	addi	sp,sp,-56
   14a80:	df000d15 	stw	fp,52(sp)
   14a84:	df000d04 	addi	fp,sp,52
   14a88:	e13ffc15 	stw	r4,-16(fp)
   14a8c:	2807883a 	mov	r3,r5
   14a90:	3005883a 	mov	r2,r6
   14a94:	e1ffff15 	stw	r7,-4(fp)
   14a98:	e0fffd0d 	sth	r3,-12(fp)
   14a9c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   14aa0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14aa4:	e0bfff17 	ldw	r2,-4(fp)
   14aa8:	1000021e 	bne	r2,zero,14ab4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   14aac:	0005883a 	mov	r2,zero
   14ab0:	0000b006 	br	14d74 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   14ab4:	e0bffc17 	ldw	r2,-16(fp)
   14ab8:	1000051e 	bne	r2,zero,14ad0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14abc:	e0bfff17 	ldw	r2,-4(fp)
   14ac0:	00c01b84 	movi	r3,110
   14ac4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14ac8:	0005883a 	mov	r2,zero
   14acc:	0000a906 	br	14d74 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   14ad0:	e0bffc17 	ldw	r2,-16(fp)
   14ad4:	10800003 	ldbu	r2,0(r2)
   14ad8:	10803fcc 	andi	r2,r2,255
   14adc:	10800160 	cmpeqi	r2,r2,5
   14ae0:	1000051e 	bne	r2,zero,14af8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   14ae4:	e0bfff17 	ldw	r2,-4(fp)
   14ae8:	00c00044 	movi	r3,1
   14aec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14af0:	0005883a 	mov	r2,zero
   14af4:	00009f06 	br	14d74 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   14af8:	e0fffe03 	ldbu	r3,-8(fp)
   14afc:	00bfe004 	movi	r2,-128
   14b00:	1884703a 	and	r2,r3,r2
   14b04:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   14b08:	e0bff503 	ldbu	r2,-44(fp)
   14b0c:	10000626 	beq	r2,zero,14b28 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   14b10:	e0bffe03 	ldbu	r2,-8(fp)
   14b14:	10801fcc 	andi	r2,r2,127
   14b18:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   14b1c:	00800044 	movi	r2,1
   14b20:	e0bff385 	stb	r2,-50(fp)
   14b24:	00000106 	br	14b2c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   14b28:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   14b2c:	e0bfff17 	ldw	r2,-4(fp)
   14b30:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b34:	0005303a 	rdctl	r2,status
   14b38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b3c:	e0fffb17 	ldw	r3,-20(fp)
   14b40:	00bfff84 	movi	r2,-2
   14b44:	1884703a 	and	r2,r3,r2
   14b48:	1001703a 	wrctl	status,r2
  
  return context;
   14b4c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   14b50:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   14b54:	e0bffe03 	ldbu	r2,-8(fp)
   14b58:	10c00060 	cmpeqi	r3,r2,1
   14b5c:	18005f1e 	bne	r3,zero,14cdc <OSFlagAccept+0x260>
   14b60:	10c00088 	cmpgei	r3,r2,2
   14b64:	1800021e 	bne	r3,zero,14b70 <OSFlagAccept+0xf4>
   14b68:	10003f26 	beq	r2,zero,14c68 <OSFlagAccept+0x1ec>
   14b6c:	00007706 	br	14d4c <OSFlagAccept+0x2d0>
   14b70:	10c000a0 	cmpeqi	r3,r2,2
   14b74:	1800031e 	bne	r3,zero,14b84 <OSFlagAccept+0x108>
   14b78:	108000e0 	cmpeqi	r2,r2,3
   14b7c:	10001e1e 	bne	r2,zero,14bf8 <OSFlagAccept+0x17c>
   14b80:	00007206 	br	14d4c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   14b84:	e0bffc17 	ldw	r2,-16(fp)
   14b88:	10c0020b 	ldhu	r3,8(r2)
   14b8c:	e0bffd0b 	ldhu	r2,-12(fp)
   14b90:	1884703a 	and	r2,r3,r2
   14b94:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   14b98:	e0fff30b 	ldhu	r3,-52(fp)
   14b9c:	e0bffd0b 	ldhu	r2,-12(fp)
   14ba0:	18800d1e 	bne	r3,r2,14bd8 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14ba4:	e0bff383 	ldbu	r2,-50(fp)
   14ba8:	10800058 	cmpnei	r2,r2,1
   14bac:	10000d1e 	bne	r2,zero,14be4 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   14bb0:	e0bffc17 	ldw	r2,-16(fp)
   14bb4:	1080020b 	ldhu	r2,8(r2)
   14bb8:	1007883a 	mov	r3,r2
   14bbc:	e0bff30b 	ldhu	r2,-52(fp)
   14bc0:	0084303a 	nor	r2,zero,r2
   14bc4:	1884703a 	and	r2,r3,r2
   14bc8:	1007883a 	mov	r3,r2
   14bcc:	e0bffc17 	ldw	r2,-16(fp)
   14bd0:	10c0020d 	sth	r3,8(r2)
   14bd4:	00000306 	br	14be4 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   14bd8:	e0bfff17 	ldw	r2,-4(fp)
   14bdc:	00c01c04 	movi	r3,112
   14be0:	10c00005 	stb	r3,0(r2)
   14be4:	e0bff417 	ldw	r2,-48(fp)
   14be8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14bec:	e0bff617 	ldw	r2,-40(fp)
   14bf0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   14bf4:	00005e06 	br	14d70 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   14bf8:	e0bffc17 	ldw	r2,-16(fp)
   14bfc:	10c0020b 	ldhu	r3,8(r2)
   14c00:	e0bffd0b 	ldhu	r2,-12(fp)
   14c04:	1884703a 	and	r2,r3,r2
   14c08:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   14c0c:	e0bff30b 	ldhu	r2,-52(fp)
   14c10:	10000d26 	beq	r2,zero,14c48 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14c14:	e0bff383 	ldbu	r2,-50(fp)
   14c18:	10800058 	cmpnei	r2,r2,1
   14c1c:	10000d1e 	bne	r2,zero,14c54 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   14c20:	e0bffc17 	ldw	r2,-16(fp)
   14c24:	1080020b 	ldhu	r2,8(r2)
   14c28:	1007883a 	mov	r3,r2
   14c2c:	e0bff30b 	ldhu	r2,-52(fp)
   14c30:	0084303a 	nor	r2,zero,r2
   14c34:	1884703a 	and	r2,r3,r2
   14c38:	1007883a 	mov	r3,r2
   14c3c:	e0bffc17 	ldw	r2,-16(fp)
   14c40:	10c0020d 	sth	r3,8(r2)
   14c44:	00000306 	br	14c54 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   14c48:	e0bfff17 	ldw	r2,-4(fp)
   14c4c:	00c01c04 	movi	r3,112
   14c50:	10c00005 	stb	r3,0(r2)
   14c54:	e0bff417 	ldw	r2,-48(fp)
   14c58:	e0bff715 	stw	r2,-36(fp)
   14c5c:	e0bff717 	ldw	r2,-36(fp)
   14c60:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   14c64:	00004206 	br	14d70 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   14c68:	e0bffc17 	ldw	r2,-16(fp)
   14c6c:	1080020b 	ldhu	r2,8(r2)
   14c70:	0084303a 	nor	r2,zero,r2
   14c74:	1007883a 	mov	r3,r2
   14c78:	e0bffd0b 	ldhu	r2,-12(fp)
   14c7c:	1884703a 	and	r2,r3,r2
   14c80:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   14c84:	e0fff30b 	ldhu	r3,-52(fp)
   14c88:	e0bffd0b 	ldhu	r2,-12(fp)
   14c8c:	18800b1e 	bne	r3,r2,14cbc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14c90:	e0bff383 	ldbu	r2,-50(fp)
   14c94:	10800058 	cmpnei	r2,r2,1
   14c98:	10000b1e 	bne	r2,zero,14cc8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   14c9c:	e0bffc17 	ldw	r2,-16(fp)
   14ca0:	10c0020b 	ldhu	r3,8(r2)
   14ca4:	e0bff30b 	ldhu	r2,-52(fp)
   14ca8:	1884b03a 	or	r2,r3,r2
   14cac:	1007883a 	mov	r3,r2
   14cb0:	e0bffc17 	ldw	r2,-16(fp)
   14cb4:	10c0020d 	sth	r3,8(r2)
   14cb8:	00000306 	br	14cc8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   14cbc:	e0bfff17 	ldw	r2,-4(fp)
   14cc0:	00c01c04 	movi	r3,112
   14cc4:	10c00005 	stb	r3,0(r2)
   14cc8:	e0bff417 	ldw	r2,-48(fp)
   14ccc:	e0bff815 	stw	r2,-32(fp)
   14cd0:	e0bff817 	ldw	r2,-32(fp)
   14cd4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   14cd8:	00002506 	br	14d70 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   14cdc:	e0bffc17 	ldw	r2,-16(fp)
   14ce0:	1080020b 	ldhu	r2,8(r2)
   14ce4:	0084303a 	nor	r2,zero,r2
   14ce8:	1007883a 	mov	r3,r2
   14cec:	e0bffd0b 	ldhu	r2,-12(fp)
   14cf0:	1884703a 	and	r2,r3,r2
   14cf4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   14cf8:	e0bff30b 	ldhu	r2,-52(fp)
   14cfc:	10000b26 	beq	r2,zero,14d2c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14d00:	e0bff383 	ldbu	r2,-50(fp)
   14d04:	10800058 	cmpnei	r2,r2,1
   14d08:	10000b1e 	bne	r2,zero,14d38 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   14d0c:	e0bffc17 	ldw	r2,-16(fp)
   14d10:	10c0020b 	ldhu	r3,8(r2)
   14d14:	e0bff30b 	ldhu	r2,-52(fp)
   14d18:	1884b03a 	or	r2,r3,r2
   14d1c:	1007883a 	mov	r3,r2
   14d20:	e0bffc17 	ldw	r2,-16(fp)
   14d24:	10c0020d 	sth	r3,8(r2)
   14d28:	00000306 	br	14d38 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   14d2c:	e0bfff17 	ldw	r2,-4(fp)
   14d30:	00c01c04 	movi	r3,112
   14d34:	10c00005 	stb	r3,0(r2)
   14d38:	e0bff417 	ldw	r2,-48(fp)
   14d3c:	e0bff915 	stw	r2,-28(fp)
   14d40:	e0bff917 	ldw	r2,-28(fp)
   14d44:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   14d48:	00000906 	br	14d70 <OSFlagAccept+0x2f4>
   14d4c:	e0bff417 	ldw	r2,-48(fp)
   14d50:	e0bffa15 	stw	r2,-24(fp)
   14d54:	e0bffa17 	ldw	r2,-24(fp)
   14d58:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   14d5c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   14d60:	e0bfff17 	ldw	r2,-4(fp)
   14d64:	00c01bc4 	movi	r3,111
   14d68:	10c00005 	stb	r3,0(r2)
             break;
   14d6c:	0001883a 	nop
    }
    return (flags_rdy);
   14d70:	e0bff30b 	ldhu	r2,-52(fp)
}
   14d74:	e037883a 	mov	sp,fp
   14d78:	df000017 	ldw	fp,0(sp)
   14d7c:	dec00104 	addi	sp,sp,4
   14d80:	f800283a 	ret

00014d84 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   14d84:	defff804 	addi	sp,sp,-32
   14d88:	df000715 	stw	fp,28(sp)
   14d8c:	df000704 	addi	fp,sp,28
   14d90:	2005883a 	mov	r2,r4
   14d94:	e17fff15 	stw	r5,-4(fp)
   14d98:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   14d9c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   14da0:	e0bfff17 	ldw	r2,-4(fp)
   14da4:	1000021e 	bne	r2,zero,14db0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   14da8:	0005883a 	mov	r2,zero
   14dac:	00003306 	br	14e7c <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   14db0:	d0a72b03 	ldbu	r2,-25428(gp)
   14db4:	10803fcc 	andi	r2,r2,255
   14db8:	10000526 	beq	r2,zero,14dd0 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   14dbc:	e0bfff17 	ldw	r2,-4(fp)
   14dc0:	00c00404 	movi	r3,16
   14dc4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   14dc8:	0005883a 	mov	r2,zero
   14dcc:	00002b06 	br	14e7c <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14dd0:	0005303a 	rdctl	r2,status
   14dd4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14dd8:	e0fffd17 	ldw	r3,-12(fp)
   14ddc:	00bfff84 	movi	r2,-2
   14de0:	1884703a 	and	r2,r3,r2
   14de4:	1001703a 	wrctl	status,r2
  
  return context;
   14de8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14dec:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   14df0:	d0a72e17 	ldw	r2,-25416(gp)
   14df4:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   14df8:	e0bffb17 	ldw	r2,-20(fp)
   14dfc:	10001726 	beq	r2,zero,14e5c <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   14e00:	d0a72e17 	ldw	r2,-25416(gp)
   14e04:	10800117 	ldw	r2,4(r2)
   14e08:	d0a72e15 	stw	r2,-25416(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   14e0c:	e0bffb17 	ldw	r2,-20(fp)
   14e10:	00c00144 	movi	r3,5
   14e14:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   14e18:	e0bffb17 	ldw	r2,-20(fp)
   14e1c:	e0fffe0b 	ldhu	r3,-8(fp)
   14e20:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   14e24:	e0bffb17 	ldw	r2,-20(fp)
   14e28:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   14e2c:	e0bffb17 	ldw	r2,-20(fp)
   14e30:	00c00fc4 	movi	r3,63
   14e34:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   14e38:	e0bffb17 	ldw	r2,-20(fp)
   14e3c:	100002c5 	stb	zero,11(r2)
   14e40:	e0bff917 	ldw	r2,-28(fp)
   14e44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e48:	e0bffa17 	ldw	r2,-24(fp)
   14e4c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   14e50:	e0bfff17 	ldw	r2,-4(fp)
   14e54:	10000005 	stb	zero,0(r2)
   14e58:	00000706 	br	14e78 <OSFlagCreate+0xf4>
   14e5c:	e0bff917 	ldw	r2,-28(fp)
   14e60:	e0bffc15 	stw	r2,-16(fp)
   14e64:	e0bffc17 	ldw	r2,-16(fp)
   14e68:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   14e6c:	e0bfff17 	ldw	r2,-4(fp)
   14e70:	00c01c84 	movi	r3,114
   14e74:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   14e78:	e0bffb17 	ldw	r2,-20(fp)
}
   14e7c:	e037883a 	mov	sp,fp
   14e80:	df000017 	ldw	fp,0(sp)
   14e84:	dec00104 	addi	sp,sp,4
   14e88:	f800283a 	ret

00014e8c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   14e8c:	defff204 	addi	sp,sp,-56
   14e90:	dfc00d15 	stw	ra,52(sp)
   14e94:	df000c15 	stw	fp,48(sp)
   14e98:	df000c04 	addi	fp,sp,48
   14e9c:	e13ffd15 	stw	r4,-12(fp)
   14ea0:	2805883a 	mov	r2,r5
   14ea4:	e1bfff15 	stw	r6,-4(fp)
   14ea8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   14eac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14eb0:	e0bfff17 	ldw	r2,-4(fp)
   14eb4:	1000021e 	bne	r2,zero,14ec0 <OSFlagDel+0x34>
        return (pgrp);
   14eb8:	e0bffd17 	ldw	r2,-12(fp)
   14ebc:	00008006 	br	150c0 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   14ec0:	e0bffd17 	ldw	r2,-12(fp)
   14ec4:	1000051e 	bne	r2,zero,14edc <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14ec8:	e0bfff17 	ldw	r2,-4(fp)
   14ecc:	00c01b84 	movi	r3,110
   14ed0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   14ed4:	e0bffd17 	ldw	r2,-12(fp)
   14ed8:	00007906 	br	150c0 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14edc:	d0a72b03 	ldbu	r2,-25428(gp)
   14ee0:	10803fcc 	andi	r2,r2,255
   14ee4:	10000526 	beq	r2,zero,14efc <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   14ee8:	e0bfff17 	ldw	r2,-4(fp)
   14eec:	00c003c4 	movi	r3,15
   14ef0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   14ef4:	e0bffd17 	ldw	r2,-12(fp)
   14ef8:	00007106 	br	150c0 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   14efc:	e0bffd17 	ldw	r2,-12(fp)
   14f00:	10800003 	ldbu	r2,0(r2)
   14f04:	10803fcc 	andi	r2,r2,255
   14f08:	10800160 	cmpeqi	r2,r2,5
   14f0c:	1000051e 	bne	r2,zero,14f24 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   14f10:	e0bfff17 	ldw	r2,-4(fp)
   14f14:	00c00044 	movi	r3,1
   14f18:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   14f1c:	e0bffd17 	ldw	r2,-12(fp)
   14f20:	00006706 	br	150c0 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f24:	0005303a 	rdctl	r2,status
   14f28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f2c:	e0fffc17 	ldw	r3,-16(fp)
   14f30:	00bfff84 	movi	r2,-2
   14f34:	1884703a 	and	r2,r3,r2
   14f38:	1001703a 	wrctl	status,r2
  
  return context;
   14f3c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14f40:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   14f44:	e0bffd17 	ldw	r2,-12(fp)
   14f48:	10800117 	ldw	r2,4(r2)
   14f4c:	10000326 	beq	r2,zero,14f5c <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   14f50:	00800044 	movi	r2,1
   14f54:	e0bff405 	stb	r2,-48(fp)
   14f58:	00000106 	br	14f60 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   14f5c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   14f60:	e0bffe03 	ldbu	r2,-8(fp)
   14f64:	10000326 	beq	r2,zero,14f74 <OSFlagDel+0xe8>
   14f68:	10800060 	cmpeqi	r2,r2,1
   14f6c:	1000231e 	bne	r2,zero,14ffc <OSFlagDel+0x170>
   14f70:	00004806 	br	15094 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   14f74:	e0bff403 	ldbu	r2,-48(fp)
   14f78:	1000161e 	bne	r2,zero,14fd4 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   14f7c:	e0bffd17 	ldw	r2,-12(fp)
   14f80:	00c00fc4 	movi	r3,63
   14f84:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   14f88:	e0bffd17 	ldw	r2,-12(fp)
   14f8c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14f90:	e0bffd17 	ldw	r2,-12(fp)
   14f94:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   14f98:	d0e72e17 	ldw	r3,-25416(gp)
   14f9c:	e0bffd17 	ldw	r2,-12(fp)
   14fa0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   14fa4:	e0bffd17 	ldw	r2,-12(fp)
   14fa8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   14fac:	e0bffd17 	ldw	r2,-12(fp)
   14fb0:	d0a72e15 	stw	r2,-25416(gp)
   14fb4:	e0bff717 	ldw	r2,-36(fp)
   14fb8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fbc:	e0bff817 	ldw	r2,-32(fp)
   14fc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   14fc4:	e0bfff17 	ldw	r2,-4(fp)
   14fc8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   14fcc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   14fd0:	00003a06 	br	150bc <OSFlagDel+0x230>
   14fd4:	e0bff717 	ldw	r2,-36(fp)
   14fd8:	e0bff915 	stw	r2,-28(fp)
   14fdc:	e0bff917 	ldw	r2,-28(fp)
   14fe0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   14fe4:	e0bfff17 	ldw	r2,-4(fp)
   14fe8:	00c01244 	movi	r3,73
   14fec:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   14ff0:	e0bffd17 	ldw	r2,-12(fp)
   14ff4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   14ff8:	00003006 	br	150bc <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   14ffc:	e0bffd17 	ldw	r2,-12(fp)
   15000:	10800117 	ldw	r2,4(r2)
   15004:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15008:	00000606 	br	15024 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   1500c:	000b883a 	mov	r5,zero
   15010:	e13ff517 	ldw	r4,-44(fp)
   15014:	0015ff80 	call	15ff8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   15018:	e0bff517 	ldw	r2,-44(fp)
   1501c:	10800017 	ldw	r2,0(r2)
   15020:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15024:	e0bff517 	ldw	r2,-44(fp)
   15028:	103ff81e 	bne	r2,zero,1500c <__alt_data_end+0xfffe42cc>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   1502c:	e0bffd17 	ldw	r2,-12(fp)
   15030:	00c00fc4 	movi	r3,63
   15034:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15038:	e0bffd17 	ldw	r2,-12(fp)
   1503c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15040:	e0bffd17 	ldw	r2,-12(fp)
   15044:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   15048:	d0e72e17 	ldw	r3,-25416(gp)
   1504c:	e0bffd17 	ldw	r2,-12(fp)
   15050:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   15054:	e0bffd17 	ldw	r2,-12(fp)
   15058:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1505c:	e0bffd17 	ldw	r2,-12(fp)
   15060:	d0a72e15 	stw	r2,-25416(gp)
   15064:	e0bff717 	ldw	r2,-36(fp)
   15068:	e0bffa15 	stw	r2,-24(fp)
   1506c:	e0bffa17 	ldw	r2,-24(fp)
   15070:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15074:	e0bff403 	ldbu	r2,-48(fp)
   15078:	10800058 	cmpnei	r2,r2,1
   1507c:	1000011e 	bne	r2,zero,15084 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15080:	00142180 	call	14218 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   15084:	e0bfff17 	ldw	r2,-4(fp)
   15088:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   1508c:	e03ff615 	stw	zero,-40(fp)
             break;
   15090:	00000a06 	br	150bc <OSFlagDel+0x230>
   15094:	e0bff717 	ldw	r2,-36(fp)
   15098:	e0bffb15 	stw	r2,-20(fp)
   1509c:	e0bffb17 	ldw	r2,-20(fp)
   150a0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   150a4:	e0bfff17 	ldw	r2,-4(fp)
   150a8:	00c001c4 	movi	r3,7
   150ac:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   150b0:	e0bffd17 	ldw	r2,-12(fp)
   150b4:	e0bff615 	stw	r2,-40(fp)
             break;
   150b8:	0001883a 	nop
    }
    return (pgrp_return);
   150bc:	e0bff617 	ldw	r2,-40(fp)
}
   150c0:	e037883a 	mov	sp,fp
   150c4:	dfc00117 	ldw	ra,4(sp)
   150c8:	df000017 	ldw	fp,0(sp)
   150cc:	dec00204 	addi	sp,sp,8
   150d0:	f800283a 	ret

000150d4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   150d4:	defff604 	addi	sp,sp,-40
   150d8:	dfc00915 	stw	ra,36(sp)
   150dc:	df000815 	stw	fp,32(sp)
   150e0:	df000804 	addi	fp,sp,32
   150e4:	e13ffd15 	stw	r4,-12(fp)
   150e8:	e17ffe15 	stw	r5,-8(fp)
   150ec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   150f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   150f4:	e0bfff17 	ldw	r2,-4(fp)
   150f8:	1000021e 	bne	r2,zero,15104 <OSFlagNameGet+0x30>
        return (0);
   150fc:	0005883a 	mov	r2,zero
   15100:	00003906 	br	151e8 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15104:	e0bffd17 	ldw	r2,-12(fp)
   15108:	1000051e 	bne	r2,zero,15120 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1510c:	e0bfff17 	ldw	r2,-4(fp)
   15110:	00c01b84 	movi	r3,110
   15114:	10c00005 	stb	r3,0(r2)
        return (0);
   15118:	0005883a 	mov	r2,zero
   1511c:	00003206 	br	151e8 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15120:	e0bffe17 	ldw	r2,-8(fp)
   15124:	1000051e 	bne	r2,zero,1513c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   15128:	e0bfff17 	ldw	r2,-4(fp)
   1512c:	00c00304 	movi	r3,12
   15130:	10c00005 	stb	r3,0(r2)
        return (0);
   15134:	0005883a 	mov	r2,zero
   15138:	00002b06 	br	151e8 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1513c:	d0a72b03 	ldbu	r2,-25428(gp)
   15140:	10803fcc 	andi	r2,r2,255
   15144:	10000526 	beq	r2,zero,1515c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   15148:	e0bfff17 	ldw	r2,-4(fp)
   1514c:	00c00444 	movi	r3,17
   15150:	10c00005 	stb	r3,0(r2)
        return (0);
   15154:	0005883a 	mov	r2,zero
   15158:	00002306 	br	151e8 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1515c:	0005303a 	rdctl	r2,status
   15160:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15164:	e0fffc17 	ldw	r3,-16(fp)
   15168:	00bfff84 	movi	r2,-2
   1516c:	1884703a 	and	r2,r3,r2
   15170:	1001703a 	wrctl	status,r2
  
  return context;
   15174:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15178:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1517c:	e0bffd17 	ldw	r2,-12(fp)
   15180:	10800003 	ldbu	r2,0(r2)
   15184:	10803fcc 	andi	r2,r2,255
   15188:	10800160 	cmpeqi	r2,r2,5
   1518c:	1000091e 	bne	r2,zero,151b4 <OSFlagNameGet+0xe0>
   15190:	e0bff817 	ldw	r2,-32(fp)
   15194:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15198:	e0bff917 	ldw	r2,-28(fp)
   1519c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   151a0:	e0bfff17 	ldw	r2,-4(fp)
   151a4:	00c00044 	movi	r3,1
   151a8:	10c00005 	stb	r3,0(r2)
        return (0);
   151ac:	0005883a 	mov	r2,zero
   151b0:	00000d06 	br	151e8 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   151b4:	e0bffd17 	ldw	r2,-12(fp)
   151b8:	10800284 	addi	r2,r2,10
   151bc:	100b883a 	mov	r5,r2
   151c0:	e13ffe17 	ldw	r4,-8(fp)
   151c4:	001435c0 	call	1435c <OS_StrCopy>
   151c8:	e0bffb05 	stb	r2,-20(fp)
   151cc:	e0bff817 	ldw	r2,-32(fp)
   151d0:	e0bffa15 	stw	r2,-24(fp)
   151d4:	e0bffa17 	ldw	r2,-24(fp)
   151d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   151dc:	e0bfff17 	ldw	r2,-4(fp)
   151e0:	10000005 	stb	zero,0(r2)
    return (len);
   151e4:	e0bffb03 	ldbu	r2,-20(fp)
}
   151e8:	e037883a 	mov	sp,fp
   151ec:	dfc00117 	ldw	ra,4(sp)
   151f0:	df000017 	ldw	fp,0(sp)
   151f4:	dec00204 	addi	sp,sp,8
   151f8:	f800283a 	ret

000151fc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   151fc:	defff504 	addi	sp,sp,-44
   15200:	dfc00a15 	stw	ra,40(sp)
   15204:	df000915 	stw	fp,36(sp)
   15208:	df000904 	addi	fp,sp,36
   1520c:	e13ffd15 	stw	r4,-12(fp)
   15210:	e17ffe15 	stw	r5,-8(fp)
   15214:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15218:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1521c:	e0bfff17 	ldw	r2,-4(fp)
   15220:	10004326 	beq	r2,zero,15330 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15224:	e0bffd17 	ldw	r2,-12(fp)
   15228:	1000041e 	bne	r2,zero,1523c <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1522c:	e0bfff17 	ldw	r2,-4(fp)
   15230:	00c01b84 	movi	r3,110
   15234:	10c00005 	stb	r3,0(r2)
        return;
   15238:	00003e06 	br	15334 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1523c:	e0bffe17 	ldw	r2,-8(fp)
   15240:	1000041e 	bne	r2,zero,15254 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   15244:	e0bfff17 	ldw	r2,-4(fp)
   15248:	00c00304 	movi	r3,12
   1524c:	10c00005 	stb	r3,0(r2)
        return;
   15250:	00003806 	br	15334 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15254:	d0a72b03 	ldbu	r2,-25428(gp)
   15258:	10803fcc 	andi	r2,r2,255
   1525c:	10000426 	beq	r2,zero,15270 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   15260:	e0bfff17 	ldw	r2,-4(fp)
   15264:	00c00484 	movi	r3,18
   15268:	10c00005 	stb	r3,0(r2)
        return;
   1526c:	00003106 	br	15334 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15270:	0005303a 	rdctl	r2,status
   15274:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15278:	e0fffc17 	ldw	r3,-16(fp)
   1527c:	00bfff84 	movi	r2,-2
   15280:	1884703a 	and	r2,r3,r2
   15284:	1001703a 	wrctl	status,r2
  
  return context;
   15288:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1528c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15290:	e0bffd17 	ldw	r2,-12(fp)
   15294:	10800003 	ldbu	r2,0(r2)
   15298:	10803fcc 	andi	r2,r2,255
   1529c:	10800160 	cmpeqi	r2,r2,5
   152a0:	1000081e 	bne	r2,zero,152c4 <OSFlagNameSet+0xc8>
   152a4:	e0bff717 	ldw	r2,-36(fp)
   152a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152ac:	e0bff817 	ldw	r2,-32(fp)
   152b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   152b4:	e0bfff17 	ldw	r2,-4(fp)
   152b8:	00c00044 	movi	r3,1
   152bc:	10c00005 	stb	r3,0(r2)
        return;
   152c0:	00001c06 	br	15334 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   152c4:	e13ffe17 	ldw	r4,-8(fp)
   152c8:	00143d00 	call	143d0 <OS_StrLen>
   152cc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   152d0:	e0bffa03 	ldbu	r2,-24(fp)
   152d4:	10800830 	cmpltui	r2,r2,32
   152d8:	1000081e 	bne	r2,zero,152fc <OSFlagNameSet+0x100>
   152dc:	e0bff717 	ldw	r2,-36(fp)
   152e0:	e0bff915 	stw	r2,-28(fp)
   152e4:	e0bff917 	ldw	r2,-28(fp)
   152e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   152ec:	e0bfff17 	ldw	r2,-4(fp)
   152f0:	00c01cc4 	movi	r3,115
   152f4:	10c00005 	stb	r3,0(r2)
        return;
   152f8:	00000e06 	br	15334 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   152fc:	e0bffd17 	ldw	r2,-12(fp)
   15300:	10800284 	addi	r2,r2,10
   15304:	e17ffe17 	ldw	r5,-8(fp)
   15308:	1009883a 	mov	r4,r2
   1530c:	001435c0 	call	1435c <OS_StrCopy>
   15310:	e0bff717 	ldw	r2,-36(fp)
   15314:	e0bffb15 	stw	r2,-20(fp)
   15318:	e0bffb17 	ldw	r2,-20(fp)
   1531c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15320:	e0bfff17 	ldw	r2,-4(fp)
   15324:	10000005 	stb	zero,0(r2)
    return;
   15328:	0001883a 	nop
   1532c:	00000106 	br	15334 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   15330:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   15334:	e037883a 	mov	sp,fp
   15338:	dfc00117 	ldw	ra,4(sp)
   1533c:	df000017 	ldw	fp,0(sp)
   15340:	dec00204 	addi	sp,sp,8
   15344:	f800283a 	ret

00015348 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   15348:	deffe104 	addi	sp,sp,-124
   1534c:	dfc01e15 	stw	ra,120(sp)
   15350:	df001d15 	stw	fp,116(sp)
   15354:	df001d04 	addi	fp,sp,116
   15358:	e13ffc15 	stw	r4,-16(fp)
   1535c:	2809883a 	mov	r4,r5
   15360:	3007883a 	mov	r3,r6
   15364:	3805883a 	mov	r2,r7
   15368:	e13ffd0d 	sth	r4,-12(fp)
   1536c:	e0fffe05 	stb	r3,-8(fp)
   15370:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15374:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15378:	e0800217 	ldw	r2,8(fp)
   1537c:	1000021e 	bne	r2,zero,15388 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   15380:	0005883a 	mov	r2,zero
   15384:	00015906 	br	158ec <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15388:	e0bffc17 	ldw	r2,-16(fp)
   1538c:	1000051e 	bne	r2,zero,153a4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15390:	e0800217 	ldw	r2,8(fp)
   15394:	00c01b84 	movi	r3,110
   15398:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1539c:	0005883a 	mov	r2,zero
   153a0:	00015206 	br	158ec <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   153a4:	d0a72b03 	ldbu	r2,-25428(gp)
   153a8:	10803fcc 	andi	r2,r2,255
   153ac:	10000526 	beq	r2,zero,153c4 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   153b0:	e0800217 	ldw	r2,8(fp)
   153b4:	00c00084 	movi	r3,2
   153b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   153bc:	0005883a 	mov	r2,zero
   153c0:	00014a06 	br	158ec <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   153c4:	d0a71d03 	ldbu	r2,-25484(gp)
   153c8:	10803fcc 	andi	r2,r2,255
   153cc:	10000526 	beq	r2,zero,153e4 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   153d0:	e0800217 	ldw	r2,8(fp)
   153d4:	00c00344 	movi	r3,13
   153d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   153dc:	0005883a 	mov	r2,zero
   153e0:	00014206 	br	158ec <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   153e4:	e0bffc17 	ldw	r2,-16(fp)
   153e8:	10800003 	ldbu	r2,0(r2)
   153ec:	10803fcc 	andi	r2,r2,255
   153f0:	10800160 	cmpeqi	r2,r2,5
   153f4:	1000051e 	bne	r2,zero,1540c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   153f8:	e0800217 	ldw	r2,8(fp)
   153fc:	00c00044 	movi	r3,1
   15400:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15404:	0005883a 	mov	r2,zero
   15408:	00013806 	br	158ec <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1540c:	e0fffe03 	ldbu	r3,-8(fp)
   15410:	00bfe004 	movi	r2,-128
   15414:	1884703a 	and	r2,r3,r2
   15418:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   1541c:	e0bfe603 	ldbu	r2,-104(fp)
   15420:	10000626 	beq	r2,zero,1543c <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   15424:	e0bffe03 	ldbu	r2,-8(fp)
   15428:	10801fcc 	andi	r2,r2,127
   1542c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15430:	00800044 	movi	r2,1
   15434:	e0bfe405 	stb	r2,-112(fp)
   15438:	00000106 	br	15440 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   1543c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15440:	0005303a 	rdctl	r2,status
   15444:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15448:	e0fff617 	ldw	r3,-40(fp)
   1544c:	00bfff84 	movi	r2,-2
   15450:	1884703a 	and	r2,r3,r2
   15454:	1001703a 	wrctl	status,r2
  
  return context;
   15458:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1545c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   15460:	e0bffe03 	ldbu	r2,-8(fp)
   15464:	10c00060 	cmpeqi	r3,r2,1
   15468:	1800921e 	bne	r3,zero,156b4 <OSFlagPend+0x36c>
   1546c:	10c00088 	cmpgei	r3,r2,2
   15470:	1800021e 	bne	r3,zero,1547c <OSFlagPend+0x134>
   15474:	10006126 	beq	r2,zero,155fc <OSFlagPend+0x2b4>
   15478:	0000bb06 	br	15768 <OSFlagPend+0x420>
   1547c:	10c000a0 	cmpeqi	r3,r2,2
   15480:	1800031e 	bne	r3,zero,15490 <OSFlagPend+0x148>
   15484:	108000e0 	cmpeqi	r2,r2,3
   15488:	10002f1e 	bne	r2,zero,15548 <OSFlagPend+0x200>
   1548c:	0000b606 	br	15768 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   15490:	e0bffc17 	ldw	r2,-16(fp)
   15494:	10c0020b 	ldhu	r3,8(r2)
   15498:	e0bffd0b 	ldhu	r2,-12(fp)
   1549c:	1884703a 	and	r2,r3,r2
   154a0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   154a4:	e0ffe80b 	ldhu	r3,-96(fp)
   154a8:	e0bffd0b 	ldhu	r2,-12(fp)
   154ac:	1880171e 	bne	r3,r2,1550c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   154b0:	e0bfe403 	ldbu	r2,-112(fp)
   154b4:	10800058 	cmpnei	r2,r2,1
   154b8:	1000091e 	bne	r2,zero,154e0 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   154bc:	e0bffc17 	ldw	r2,-16(fp)
   154c0:	1080020b 	ldhu	r2,8(r2)
   154c4:	1007883a 	mov	r3,r2
   154c8:	e0bfe80b 	ldhu	r2,-96(fp)
   154cc:	0084303a 	nor	r2,zero,r2
   154d0:	1884703a 	and	r2,r3,r2
   154d4:	1007883a 	mov	r3,r2
   154d8:	e0bffc17 	ldw	r2,-16(fp)
   154dc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   154e0:	d0a72c17 	ldw	r2,-25424(gp)
   154e4:	e0ffe80b 	ldhu	r3,-96(fp)
   154e8:	10c00b0d 	sth	r3,44(r2)
   154ec:	e0bfe517 	ldw	r2,-108(fp)
   154f0:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154f4:	e0bfe717 	ldw	r2,-100(fp)
   154f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   154fc:	e0800217 	ldw	r2,8(fp)
   15500:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15504:	e0bfe80b 	ldhu	r2,-96(fp)
   15508:	0000f806 	br	158ec <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1550c:	e13ffd0b 	ldhu	r4,-12(fp)
   15510:	e17ffe03 	ldbu	r5,-8(fp)
   15514:	e0bfff0b 	ldhu	r2,-4(fp)
   15518:	e0fff704 	addi	r3,fp,-36
   1551c:	d8800015 	stw	r2,0(sp)
   15520:	280f883a 	mov	r7,r5
   15524:	200d883a 	mov	r6,r4
   15528:	180b883a 	mov	r5,r3
   1552c:	e13ffc17 	ldw	r4,-16(fp)
   15530:	0015db80 	call	15db8 <OS_FlagBlock>
   15534:	e0bfe517 	ldw	r2,-108(fp)
   15538:	e0bfe915 	stw	r2,-92(fp)
   1553c:	e0bfe917 	ldw	r2,-92(fp)
   15540:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15544:	00009206 	br	15790 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   15548:	e0bffc17 	ldw	r2,-16(fp)
   1554c:	10c0020b 	ldhu	r3,8(r2)
   15550:	e0bffd0b 	ldhu	r2,-12(fp)
   15554:	1884703a 	and	r2,r3,r2
   15558:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1555c:	e0bfe80b 	ldhu	r2,-96(fp)
   15560:	10001726 	beq	r2,zero,155c0 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15564:	e0bfe403 	ldbu	r2,-112(fp)
   15568:	10800058 	cmpnei	r2,r2,1
   1556c:	1000091e 	bne	r2,zero,15594 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15570:	e0bffc17 	ldw	r2,-16(fp)
   15574:	1080020b 	ldhu	r2,8(r2)
   15578:	1007883a 	mov	r3,r2
   1557c:	e0bfe80b 	ldhu	r2,-96(fp)
   15580:	0084303a 	nor	r2,zero,r2
   15584:	1884703a 	and	r2,r3,r2
   15588:	1007883a 	mov	r3,r2
   1558c:	e0bffc17 	ldw	r2,-16(fp)
   15590:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15594:	d0a72c17 	ldw	r2,-25424(gp)
   15598:	e0ffe80b 	ldhu	r3,-96(fp)
   1559c:	10c00b0d 	sth	r3,44(r2)
   155a0:	e0bfe517 	ldw	r2,-108(fp)
   155a4:	e0bfea15 	stw	r2,-88(fp)
   155a8:	e0bfea17 	ldw	r2,-88(fp)
   155ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   155b0:	e0800217 	ldw	r2,8(fp)
   155b4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   155b8:	e0bfe80b 	ldhu	r2,-96(fp)
   155bc:	0000cb06 	br	158ec <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   155c0:	e13ffd0b 	ldhu	r4,-12(fp)
   155c4:	e17ffe03 	ldbu	r5,-8(fp)
   155c8:	e0bfff0b 	ldhu	r2,-4(fp)
   155cc:	e0fff704 	addi	r3,fp,-36
   155d0:	d8800015 	stw	r2,0(sp)
   155d4:	280f883a 	mov	r7,r5
   155d8:	200d883a 	mov	r6,r4
   155dc:	180b883a 	mov	r5,r3
   155e0:	e13ffc17 	ldw	r4,-16(fp)
   155e4:	0015db80 	call	15db8 <OS_FlagBlock>
   155e8:	e0bfe517 	ldw	r2,-108(fp)
   155ec:	e0bfeb15 	stw	r2,-84(fp)
   155f0:	e0bfeb17 	ldw	r2,-84(fp)
   155f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   155f8:	00006506 	br	15790 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   155fc:	e0bffc17 	ldw	r2,-16(fp)
   15600:	1080020b 	ldhu	r2,8(r2)
   15604:	0084303a 	nor	r2,zero,r2
   15608:	1007883a 	mov	r3,r2
   1560c:	e0bffd0b 	ldhu	r2,-12(fp)
   15610:	1884703a 	and	r2,r3,r2
   15614:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15618:	e0ffe80b 	ldhu	r3,-96(fp)
   1561c:	e0bffd0b 	ldhu	r2,-12(fp)
   15620:	1880151e 	bne	r3,r2,15678 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15624:	e0bfe403 	ldbu	r2,-112(fp)
   15628:	10800058 	cmpnei	r2,r2,1
   1562c:	1000071e 	bne	r2,zero,1564c <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   15630:	e0bffc17 	ldw	r2,-16(fp)
   15634:	10c0020b 	ldhu	r3,8(r2)
   15638:	e0bfe80b 	ldhu	r2,-96(fp)
   1563c:	1884b03a 	or	r2,r3,r2
   15640:	1007883a 	mov	r3,r2
   15644:	e0bffc17 	ldw	r2,-16(fp)
   15648:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1564c:	d0a72c17 	ldw	r2,-25424(gp)
   15650:	e0ffe80b 	ldhu	r3,-96(fp)
   15654:	10c00b0d 	sth	r3,44(r2)
   15658:	e0bfe517 	ldw	r2,-108(fp)
   1565c:	e0bfec15 	stw	r2,-80(fp)
   15660:	e0bfec17 	ldw	r2,-80(fp)
   15664:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15668:	e0800217 	ldw	r2,8(fp)
   1566c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15670:	e0bfe80b 	ldhu	r2,-96(fp)
   15674:	00009d06 	br	158ec <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15678:	e13ffd0b 	ldhu	r4,-12(fp)
   1567c:	e17ffe03 	ldbu	r5,-8(fp)
   15680:	e0bfff0b 	ldhu	r2,-4(fp)
   15684:	e0fff704 	addi	r3,fp,-36
   15688:	d8800015 	stw	r2,0(sp)
   1568c:	280f883a 	mov	r7,r5
   15690:	200d883a 	mov	r6,r4
   15694:	180b883a 	mov	r5,r3
   15698:	e13ffc17 	ldw	r4,-16(fp)
   1569c:	0015db80 	call	15db8 <OS_FlagBlock>
   156a0:	e0bfe517 	ldw	r2,-108(fp)
   156a4:	e0bfed15 	stw	r2,-76(fp)
   156a8:	e0bfed17 	ldw	r2,-76(fp)
   156ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   156b0:	00003706 	br	15790 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   156b4:	e0bffc17 	ldw	r2,-16(fp)
   156b8:	1080020b 	ldhu	r2,8(r2)
   156bc:	0084303a 	nor	r2,zero,r2
   156c0:	1007883a 	mov	r3,r2
   156c4:	e0bffd0b 	ldhu	r2,-12(fp)
   156c8:	1884703a 	and	r2,r3,r2
   156cc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   156d0:	e0bfe80b 	ldhu	r2,-96(fp)
   156d4:	10001526 	beq	r2,zero,1572c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   156d8:	e0bfe403 	ldbu	r2,-112(fp)
   156dc:	10800058 	cmpnei	r2,r2,1
   156e0:	1000071e 	bne	r2,zero,15700 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   156e4:	e0bffc17 	ldw	r2,-16(fp)
   156e8:	10c0020b 	ldhu	r3,8(r2)
   156ec:	e0bfe80b 	ldhu	r2,-96(fp)
   156f0:	1884b03a 	or	r2,r3,r2
   156f4:	1007883a 	mov	r3,r2
   156f8:	e0bffc17 	ldw	r2,-16(fp)
   156fc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15700:	d0a72c17 	ldw	r2,-25424(gp)
   15704:	e0ffe80b 	ldhu	r3,-96(fp)
   15708:	10c00b0d 	sth	r3,44(r2)
   1570c:	e0bfe517 	ldw	r2,-108(fp)
   15710:	e0bfee15 	stw	r2,-72(fp)
   15714:	e0bfee17 	ldw	r2,-72(fp)
   15718:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1571c:	e0800217 	ldw	r2,8(fp)
   15720:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15724:	e0bfe80b 	ldhu	r2,-96(fp)
   15728:	00007006 	br	158ec <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1572c:	e13ffd0b 	ldhu	r4,-12(fp)
   15730:	e17ffe03 	ldbu	r5,-8(fp)
   15734:	e0bfff0b 	ldhu	r2,-4(fp)
   15738:	e0fff704 	addi	r3,fp,-36
   1573c:	d8800015 	stw	r2,0(sp)
   15740:	280f883a 	mov	r7,r5
   15744:	200d883a 	mov	r6,r4
   15748:	180b883a 	mov	r5,r3
   1574c:	e13ffc17 	ldw	r4,-16(fp)
   15750:	0015db80 	call	15db8 <OS_FlagBlock>
   15754:	e0bfe517 	ldw	r2,-108(fp)
   15758:	e0bfef15 	stw	r2,-68(fp)
   1575c:	e0bfef17 	ldw	r2,-68(fp)
   15760:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15764:	00000a06 	br	15790 <OSFlagPend+0x448>
   15768:	e0bfe517 	ldw	r2,-108(fp)
   1576c:	e0bff015 	stw	r2,-64(fp)
   15770:	e0bff017 	ldw	r2,-64(fp)
   15774:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   15778:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   1577c:	e0800217 	ldw	r2,8(fp)
   15780:	00c01bc4 	movi	r3,111
   15784:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   15788:	e0bfe80b 	ldhu	r2,-96(fp)
   1578c:	00005706 	br	158ec <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   15790:	00142180 	call	14218 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15794:	0005303a 	rdctl	r2,status
   15798:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1579c:	e0fff117 	ldw	r3,-60(fp)
   157a0:	00bfff84 	movi	r2,-2
   157a4:	1884703a 	and	r2,r3,r2
   157a8:	1001703a 	wrctl	status,r2
  
  return context;
   157ac:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   157b0:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   157b4:	d0a72c17 	ldw	r2,-25424(gp)
   157b8:	10800c43 	ldbu	r2,49(r2)
   157bc:	10803fcc 	andi	r2,r2,255
   157c0:	10001c26 	beq	r2,zero,15834 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   157c4:	d0a72c17 	ldw	r2,-25424(gp)
   157c8:	10800c43 	ldbu	r2,49(r2)
   157cc:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   157d0:	d0a72c17 	ldw	r2,-25424(gp)
   157d4:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   157d8:	e0bff704 	addi	r2,fp,-36
   157dc:	1009883a 	mov	r4,r2
   157e0:	00160ec0 	call	160ec <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   157e4:	d0a72c17 	ldw	r2,-25424(gp)
   157e8:	10000c05 	stb	zero,48(r2)
   157ec:	e0bfe517 	ldw	r2,-108(fp)
   157f0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157f4:	e0bff217 	ldw	r2,-56(fp)
   157f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   157fc:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   15800:	e0bff303 	ldbu	r2,-52(fp)
   15804:	108000a0 	cmpeqi	r2,r2,2
   15808:	10000426 	beq	r2,zero,1581c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   1580c:	e0800217 	ldw	r2,8(fp)
   15810:	00c00384 	movi	r3,14
   15814:	10c00005 	stb	r3,0(r2)
                 break;
   15818:	00000406 	br	1582c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   1581c:	e0800217 	ldw	r2,8(fp)
   15820:	00c00284 	movi	r3,10
   15824:	10c00005 	stb	r3,0(r2)
                 break;
   15828:	0001883a 	nop
        }
        return (flags_rdy);
   1582c:	e0bfe80b 	ldhu	r2,-96(fp)
   15830:	00002e06 	br	158ec <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   15834:	d0a72c17 	ldw	r2,-25424(gp)
   15838:	10800b0b 	ldhu	r2,44(r2)
   1583c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   15840:	e0bfe403 	ldbu	r2,-112(fp)
   15844:	10800058 	cmpnei	r2,r2,1
   15848:	1000211e 	bne	r2,zero,158d0 <OSFlagPend+0x588>
        switch (wait_type) {
   1584c:	e0bffe03 	ldbu	r2,-8(fp)
   15850:	10001616 	blt	r2,zero,158ac <OSFlagPend+0x564>
   15854:	10c00090 	cmplti	r3,r2,2
   15858:	18000c1e 	bne	r3,zero,1588c <OSFlagPend+0x544>
   1585c:	10800108 	cmpgei	r2,r2,4
   15860:	1000121e 	bne	r2,zero,158ac <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   15864:	e0bffc17 	ldw	r2,-16(fp)
   15868:	1080020b 	ldhu	r2,8(r2)
   1586c:	1007883a 	mov	r3,r2
   15870:	e0bfe80b 	ldhu	r2,-96(fp)
   15874:	0084303a 	nor	r2,zero,r2
   15878:	1884703a 	and	r2,r3,r2
   1587c:	1007883a 	mov	r3,r2
   15880:	e0bffc17 	ldw	r2,-16(fp)
   15884:	10c0020d 	sth	r3,8(r2)
                 break;
   15888:	00001106 	br	158d0 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   1588c:	e0bffc17 	ldw	r2,-16(fp)
   15890:	10c0020b 	ldhu	r3,8(r2)
   15894:	e0bfe80b 	ldhu	r2,-96(fp)
   15898:	1884b03a 	or	r2,r3,r2
   1589c:	1007883a 	mov	r3,r2
   158a0:	e0bffc17 	ldw	r2,-16(fp)
   158a4:	10c0020d 	sth	r3,8(r2)
                 break;
   158a8:	00000906 	br	158d0 <OSFlagPend+0x588>
   158ac:	e0bfe517 	ldw	r2,-108(fp)
   158b0:	e0bff415 	stw	r2,-48(fp)
   158b4:	e0bff417 	ldw	r2,-48(fp)
   158b8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   158bc:	e0800217 	ldw	r2,8(fp)
   158c0:	00c01bc4 	movi	r3,111
   158c4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   158c8:	0005883a 	mov	r2,zero
   158cc:	00000706 	br	158ec <OSFlagPend+0x5a4>
   158d0:	e0bfe517 	ldw	r2,-108(fp)
   158d4:	e0bff515 	stw	r2,-44(fp)
   158d8:	e0bff517 	ldw	r2,-44(fp)
   158dc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   158e0:	e0800217 	ldw	r2,8(fp)
   158e4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   158e8:	e0bfe80b 	ldhu	r2,-96(fp)
}
   158ec:	e037883a 	mov	sp,fp
   158f0:	dfc00117 	ldw	ra,4(sp)
   158f4:	df000017 	ldw	fp,0(sp)
   158f8:	dec00204 	addi	sp,sp,8
   158fc:	f800283a 	ret

00015900 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   15900:	defffb04 	addi	sp,sp,-20
   15904:	df000415 	stw	fp,16(sp)
   15908:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1590c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15910:	0005303a 	rdctl	r2,status
   15914:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15918:	e0fffe17 	ldw	r3,-8(fp)
   1591c:	00bfff84 	movi	r2,-2
   15920:	1884703a 	and	r2,r3,r2
   15924:	1001703a 	wrctl	status,r2
  
  return context;
   15928:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1592c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   15930:	d0a72c17 	ldw	r2,-25424(gp)
   15934:	10800b0b 	ldhu	r2,44(r2)
   15938:	e0bffd0d 	sth	r2,-12(fp)
   1593c:	e0bffc17 	ldw	r2,-16(fp)
   15940:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15944:	e0bfff17 	ldw	r2,-4(fp)
   15948:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   1594c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   15950:	e037883a 	mov	sp,fp
   15954:	df000017 	ldw	fp,0(sp)
   15958:	dec00104 	addi	sp,sp,4
   1595c:	f800283a 	ret

00015960 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   15960:	deffef04 	addi	sp,sp,-68
   15964:	dfc01015 	stw	ra,64(sp)
   15968:	df000f15 	stw	fp,60(sp)
   1596c:	df000f04 	addi	fp,sp,60
   15970:	e13ffc15 	stw	r4,-16(fp)
   15974:	2807883a 	mov	r3,r5
   15978:	3005883a 	mov	r2,r6
   1597c:	e1ffff15 	stw	r7,-4(fp)
   15980:	e0fffd0d 	sth	r3,-12(fp)
   15984:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   15988:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1598c:	e0bfff17 	ldw	r2,-4(fp)
   15990:	1000021e 	bne	r2,zero,1599c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   15994:	0005883a 	mov	r2,zero
   15998:	0000d106 	br	15ce0 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1599c:	e0bffc17 	ldw	r2,-16(fp)
   159a0:	1000051e 	bne	r2,zero,159b8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   159a4:	e0bfff17 	ldw	r2,-4(fp)
   159a8:	00c01b84 	movi	r3,110
   159ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   159b0:	0005883a 	mov	r2,zero
   159b4:	0000ca06 	br	15ce0 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   159b8:	e0bffc17 	ldw	r2,-16(fp)
   159bc:	10800003 	ldbu	r2,0(r2)
   159c0:	10803fcc 	andi	r2,r2,255
   159c4:	10800160 	cmpeqi	r2,r2,5
   159c8:	1000051e 	bne	r2,zero,159e0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   159cc:	e0bfff17 	ldw	r2,-4(fp)
   159d0:	00c00044 	movi	r3,1
   159d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   159d8:	0005883a 	mov	r2,zero
   159dc:	0000c006 	br	15ce0 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   159e0:	0005303a 	rdctl	r2,status
   159e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   159e8:	e0fffb17 	ldw	r3,-20(fp)
   159ec:	00bfff84 	movi	r2,-2
   159f0:	1884703a 	and	r2,r3,r2
   159f4:	1001703a 	wrctl	status,r2
  
  return context;
   159f8:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   159fc:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   15a00:	e0bffe03 	ldbu	r2,-8(fp)
   15a04:	10000326 	beq	r2,zero,15a14 <OSFlagPost+0xb4>
   15a08:	10800060 	cmpeqi	r2,r2,1
   15a0c:	10000b1e 	bne	r2,zero,15a3c <OSFlagPost+0xdc>
   15a10:	00001206 	br	15a5c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   15a14:	e0bffc17 	ldw	r2,-16(fp)
   15a18:	1080020b 	ldhu	r2,8(r2)
   15a1c:	1007883a 	mov	r3,r2
   15a20:	e0bffd0b 	ldhu	r2,-12(fp)
   15a24:	0084303a 	nor	r2,zero,r2
   15a28:	1884703a 	and	r2,r3,r2
   15a2c:	1007883a 	mov	r3,r2
   15a30:	e0bffc17 	ldw	r2,-16(fp)
   15a34:	10c0020d 	sth	r3,8(r2)
             break;
   15a38:	00001106 	br	15a80 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   15a3c:	e0bffc17 	ldw	r2,-16(fp)
   15a40:	10c0020b 	ldhu	r3,8(r2)
   15a44:	e0bffd0b 	ldhu	r2,-12(fp)
   15a48:	1884b03a 	or	r2,r3,r2
   15a4c:	1007883a 	mov	r3,r2
   15a50:	e0bffc17 	ldw	r2,-16(fp)
   15a54:	10c0020d 	sth	r3,8(r2)
             break;
   15a58:	00000906 	br	15a80 <OSFlagPost+0x120>
   15a5c:	e0bff317 	ldw	r2,-52(fp)
   15a60:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15a64:	e0bff417 	ldw	r2,-48(fp)
   15a68:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   15a6c:	e0bfff17 	ldw	r2,-4(fp)
   15a70:	00c01c44 	movi	r3,113
   15a74:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   15a78:	0005883a 	mov	r2,zero
   15a7c:	00009806 	br	15ce0 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   15a80:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   15a84:	e0bffc17 	ldw	r2,-16(fp)
   15a88:	10800117 	ldw	r2,4(r2)
   15a8c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   15a90:	00007706 	br	15c70 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   15a94:	e0bff117 	ldw	r2,-60(fp)
   15a98:	10800483 	ldbu	r2,18(r2)
   15a9c:	10803fcc 	andi	r2,r2,255
   15aa0:	10c00060 	cmpeqi	r3,r2,1
   15aa4:	18004a1e 	bne	r3,zero,15bd0 <OSFlagPost+0x270>
   15aa8:	10c00088 	cmpgei	r3,r2,2
   15aac:	1800021e 	bne	r3,zero,15ab8 <OSFlagPost+0x158>
   15ab0:	10002f26 	beq	r2,zero,15b70 <OSFlagPost+0x210>
   15ab4:	00005b06 	br	15c24 <OSFlagPost+0x2c4>
   15ab8:	10c000a0 	cmpeqi	r3,r2,2
   15abc:	1800031e 	bne	r3,zero,15acc <OSFlagPost+0x16c>
   15ac0:	108000e0 	cmpeqi	r2,r2,3
   15ac4:	1000171e 	bne	r2,zero,15b24 <OSFlagPost+0x1c4>
   15ac8:	00005606 	br	15c24 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   15acc:	e0bffc17 	ldw	r2,-16(fp)
   15ad0:	10c0020b 	ldhu	r3,8(r2)
   15ad4:	e0bff117 	ldw	r2,-60(fp)
   15ad8:	1080040b 	ldhu	r2,16(r2)
   15adc:	1884703a 	and	r2,r3,r2
   15ae0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   15ae4:	e0bff117 	ldw	r2,-60(fp)
   15ae8:	1080040b 	ldhu	r2,16(r2)
   15aec:	10ffffcc 	andi	r3,r2,65535
   15af0:	e0bff60b 	ldhu	r2,-40(fp)
   15af4:	1880541e 	bne	r3,r2,15c48 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   15af8:	e0bff60b 	ldhu	r2,-40(fp)
   15afc:	100b883a 	mov	r5,r2
   15b00:	e13ff117 	ldw	r4,-60(fp)
   15b04:	0015ff80 	call	15ff8 <OS_FlagTaskRdy>
   15b08:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   15b0c:	e0bff683 	ldbu	r2,-38(fp)
   15b10:	10800058 	cmpnei	r2,r2,1
   15b14:	10004c1e 	bne	r2,zero,15c48 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   15b18:	00800044 	movi	r2,1
   15b1c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   15b20:	00004906 	br	15c48 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   15b24:	e0bffc17 	ldw	r2,-16(fp)
   15b28:	10c0020b 	ldhu	r3,8(r2)
   15b2c:	e0bff117 	ldw	r2,-60(fp)
   15b30:	1080040b 	ldhu	r2,16(r2)
   15b34:	1884703a 	and	r2,r3,r2
   15b38:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   15b3c:	e0bff60b 	ldhu	r2,-40(fp)
   15b40:	10004326 	beq	r2,zero,15c50 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   15b44:	e0bff60b 	ldhu	r2,-40(fp)
   15b48:	100b883a 	mov	r5,r2
   15b4c:	e13ff117 	ldw	r4,-60(fp)
   15b50:	0015ff80 	call	15ff8 <OS_FlagTaskRdy>
   15b54:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   15b58:	e0bff683 	ldbu	r2,-38(fp)
   15b5c:	10800058 	cmpnei	r2,r2,1
   15b60:	10003b1e 	bne	r2,zero,15c50 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   15b64:	00800044 	movi	r2,1
   15b68:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   15b6c:	00003806 	br	15c50 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   15b70:	e0bffc17 	ldw	r2,-16(fp)
   15b74:	1080020b 	ldhu	r2,8(r2)
   15b78:	0084303a 	nor	r2,zero,r2
   15b7c:	1007883a 	mov	r3,r2
   15b80:	e0bff117 	ldw	r2,-60(fp)
   15b84:	1080040b 	ldhu	r2,16(r2)
   15b88:	1884703a 	and	r2,r3,r2
   15b8c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   15b90:	e0bff117 	ldw	r2,-60(fp)
   15b94:	1080040b 	ldhu	r2,16(r2)
   15b98:	10ffffcc 	andi	r3,r2,65535
   15b9c:	e0bff60b 	ldhu	r2,-40(fp)
   15ba0:	18802d1e 	bne	r3,r2,15c58 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   15ba4:	e0bff60b 	ldhu	r2,-40(fp)
   15ba8:	100b883a 	mov	r5,r2
   15bac:	e13ff117 	ldw	r4,-60(fp)
   15bb0:	0015ff80 	call	15ff8 <OS_FlagTaskRdy>
   15bb4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   15bb8:	e0bff683 	ldbu	r2,-38(fp)
   15bbc:	10800058 	cmpnei	r2,r2,1
   15bc0:	1000251e 	bne	r2,zero,15c58 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   15bc4:	00800044 	movi	r2,1
   15bc8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   15bcc:	00002206 	br	15c58 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   15bd0:	e0bffc17 	ldw	r2,-16(fp)
   15bd4:	1080020b 	ldhu	r2,8(r2)
   15bd8:	0084303a 	nor	r2,zero,r2
   15bdc:	1007883a 	mov	r3,r2
   15be0:	e0bff117 	ldw	r2,-60(fp)
   15be4:	1080040b 	ldhu	r2,16(r2)
   15be8:	1884703a 	and	r2,r3,r2
   15bec:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   15bf0:	e0bff60b 	ldhu	r2,-40(fp)
   15bf4:	10001a26 	beq	r2,zero,15c60 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   15bf8:	e0bff60b 	ldhu	r2,-40(fp)
   15bfc:	100b883a 	mov	r5,r2
   15c00:	e13ff117 	ldw	r4,-60(fp)
   15c04:	0015ff80 	call	15ff8 <OS_FlagTaskRdy>
   15c08:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   15c0c:	e0bff683 	ldbu	r2,-38(fp)
   15c10:	10800058 	cmpnei	r2,r2,1
   15c14:	1000121e 	bne	r2,zero,15c60 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   15c18:	00800044 	movi	r2,1
   15c1c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   15c20:	00000f06 	br	15c60 <OSFlagPost+0x300>
   15c24:	e0bff317 	ldw	r2,-52(fp)
   15c28:	e0bff515 	stw	r2,-44(fp)
   15c2c:	e0bff517 	ldw	r2,-44(fp)
   15c30:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   15c34:	e0bfff17 	ldw	r2,-4(fp)
   15c38:	00c01bc4 	movi	r3,111
   15c3c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   15c40:	0005883a 	mov	r2,zero
   15c44:	00002606 	br	15ce0 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   15c48:	0001883a 	nop
   15c4c:	00000506 	br	15c64 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   15c50:	0001883a 	nop
   15c54:	00000306 	br	15c64 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   15c58:	0001883a 	nop
   15c5c:	00000106 	br	15c64 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   15c60:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   15c64:	e0bff117 	ldw	r2,-60(fp)
   15c68:	10800017 	ldw	r2,0(r2)
   15c6c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   15c70:	e0bff117 	ldw	r2,-60(fp)
   15c74:	103f871e 	bne	r2,zero,15a94 <__alt_data_end+0xfffe4d54>
   15c78:	e0bff317 	ldw	r2,-52(fp)
   15c7c:	e0bff715 	stw	r2,-36(fp)
   15c80:	e0bff717 	ldw	r2,-36(fp)
   15c84:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   15c88:	e0bff203 	ldbu	r2,-56(fp)
   15c8c:	10800058 	cmpnei	r2,r2,1
   15c90:	1000011e 	bne	r2,zero,15c98 <OSFlagPost+0x338>
        OS_Sched();
   15c94:	00142180 	call	14218 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c98:	0005303a 	rdctl	r2,status
   15c9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ca0:	e0fffa17 	ldw	r3,-24(fp)
   15ca4:	00bfff84 	movi	r2,-2
   15ca8:	1884703a 	and	r2,r3,r2
   15cac:	1001703a 	wrctl	status,r2
  
  return context;
   15cb0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15cb4:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   15cb8:	e0bffc17 	ldw	r2,-16(fp)
   15cbc:	1080020b 	ldhu	r2,8(r2)
   15cc0:	e0bff90d 	sth	r2,-28(fp)
   15cc4:	e0bff317 	ldw	r2,-52(fp)
   15cc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15ccc:	e0bff817 	ldw	r2,-32(fp)
   15cd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   15cd4:	e0bfff17 	ldw	r2,-4(fp)
   15cd8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   15cdc:	e0bff90b 	ldhu	r2,-28(fp)
}
   15ce0:	e037883a 	mov	sp,fp
   15ce4:	dfc00117 	ldw	ra,4(sp)
   15ce8:	df000017 	ldw	fp,0(sp)
   15cec:	dec00204 	addi	sp,sp,8
   15cf0:	f800283a 	ret

00015cf4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   15cf4:	defff904 	addi	sp,sp,-28
   15cf8:	df000615 	stw	fp,24(sp)
   15cfc:	df000604 	addi	fp,sp,24
   15d00:	e13ffe15 	stw	r4,-8(fp)
   15d04:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   15d08:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   15d0c:	e0bfff17 	ldw	r2,-4(fp)
   15d10:	1000021e 	bne	r2,zero,15d1c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   15d14:	0005883a 	mov	r2,zero
   15d18:	00002306 	br	15da8 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   15d1c:	e0bffe17 	ldw	r2,-8(fp)
   15d20:	1000051e 	bne	r2,zero,15d38 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15d24:	e0bfff17 	ldw	r2,-4(fp)
   15d28:	00c01b84 	movi	r3,110
   15d2c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15d30:	0005883a 	mov	r2,zero
   15d34:	00001c06 	br	15da8 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   15d38:	e0bffe17 	ldw	r2,-8(fp)
   15d3c:	10800003 	ldbu	r2,0(r2)
   15d40:	10803fcc 	andi	r2,r2,255
   15d44:	10800160 	cmpeqi	r2,r2,5
   15d48:	1000051e 	bne	r2,zero,15d60 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   15d4c:	e0bfff17 	ldw	r2,-4(fp)
   15d50:	00c00044 	movi	r3,1
   15d54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15d58:	0005883a 	mov	r2,zero
   15d5c:	00001206 	br	15da8 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d60:	0005303a 	rdctl	r2,status
   15d64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d68:	e0fffc17 	ldw	r3,-16(fp)
   15d6c:	00bfff84 	movi	r2,-2
   15d70:	1884703a 	and	r2,r3,r2
   15d74:	1001703a 	wrctl	status,r2
  
  return context;
   15d78:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15d7c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   15d80:	e0bffe17 	ldw	r2,-8(fp)
   15d84:	1080020b 	ldhu	r2,8(r2)
   15d88:	e0bffb0d 	sth	r2,-20(fp)
   15d8c:	e0bffa17 	ldw	r2,-24(fp)
   15d90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d94:	e0bffd17 	ldw	r2,-12(fp)
   15d98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15d9c:	e0bfff17 	ldw	r2,-4(fp)
   15da0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   15da4:	e0bffb0b 	ldhu	r2,-20(fp)
}
   15da8:	e037883a 	mov	sp,fp
   15dac:	df000017 	ldw	fp,0(sp)
   15db0:	dec00104 	addi	sp,sp,4
   15db4:	f800283a 	ret

00015db8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   15db8:	defff804 	addi	sp,sp,-32
   15dbc:	df000715 	stw	fp,28(sp)
   15dc0:	df000704 	addi	fp,sp,28
   15dc4:	e13ffb15 	stw	r4,-20(fp)
   15dc8:	e17ffc15 	stw	r5,-16(fp)
   15dcc:	3009883a 	mov	r4,r6
   15dd0:	3807883a 	mov	r3,r7
   15dd4:	e0800117 	ldw	r2,4(fp)
   15dd8:	e13ffd0d 	sth	r4,-12(fp)
   15ddc:	e0fffe05 	stb	r3,-8(fp)
   15de0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   15de4:	d0a72c17 	ldw	r2,-25424(gp)
   15de8:	d0e72c17 	ldw	r3,-25424(gp)
   15dec:	18c00c03 	ldbu	r3,48(r3)
   15df0:	18c00814 	ori	r3,r3,32
   15df4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   15df8:	d0a72c17 	ldw	r2,-25424(gp)
   15dfc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   15e00:	d0a72c17 	ldw	r2,-25424(gp)
   15e04:	e0ffff0b 	ldhu	r3,-4(fp)
   15e08:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   15e0c:	d0a72c17 	ldw	r2,-25424(gp)
   15e10:	e0fffc17 	ldw	r3,-16(fp)
   15e14:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   15e18:	e0bffc17 	ldw	r2,-16(fp)
   15e1c:	e0fffd0b 	ldhu	r3,-12(fp)
   15e20:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   15e24:	e0bffc17 	ldw	r2,-16(fp)
   15e28:	e0fffe03 	ldbu	r3,-8(fp)
   15e2c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   15e30:	d0e72c17 	ldw	r3,-25424(gp)
   15e34:	e0bffc17 	ldw	r2,-16(fp)
   15e38:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   15e3c:	e0bffb17 	ldw	r2,-20(fp)
   15e40:	10c00117 	ldw	r3,4(r2)
   15e44:	e0bffc17 	ldw	r2,-16(fp)
   15e48:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   15e4c:	e0bffc17 	ldw	r2,-16(fp)
   15e50:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   15e54:	e0bffc17 	ldw	r2,-16(fp)
   15e58:	e0fffb17 	ldw	r3,-20(fp)
   15e5c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   15e60:	e0bffb17 	ldw	r2,-20(fp)
   15e64:	10800117 	ldw	r2,4(r2)
   15e68:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   15e6c:	e0bff917 	ldw	r2,-28(fp)
   15e70:	10000326 	beq	r2,zero,15e80 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   15e74:	e0bff917 	ldw	r2,-28(fp)
   15e78:	e0fffc17 	ldw	r3,-16(fp)
   15e7c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   15e80:	e0bffb17 	ldw	r2,-20(fp)
   15e84:	e0fffc17 	ldw	r3,-16(fp)
   15e88:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   15e8c:	d0a72c17 	ldw	r2,-25424(gp)
   15e90:	10800d03 	ldbu	r2,52(r2)
   15e94:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   15e98:	e0fffa03 	ldbu	r3,-24(fp)
   15e9c:	e13ffa03 	ldbu	r4,-24(fp)
   15ea0:	d0a72944 	addi	r2,gp,-25435
   15ea4:	2085883a 	add	r2,r4,r2
   15ea8:	10800003 	ldbu	r2,0(r2)
   15eac:	1009883a 	mov	r4,r2
   15eb0:	d0a72c17 	ldw	r2,-25424(gp)
   15eb4:	10800d43 	ldbu	r2,53(r2)
   15eb8:	0084303a 	nor	r2,zero,r2
   15ebc:	2084703a 	and	r2,r4,r2
   15ec0:	1009883a 	mov	r4,r2
   15ec4:	d0a72944 	addi	r2,gp,-25435
   15ec8:	1885883a 	add	r2,r3,r2
   15ecc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   15ed0:	e0fffa03 	ldbu	r3,-24(fp)
   15ed4:	d0a72944 	addi	r2,gp,-25435
   15ed8:	1885883a 	add	r2,r3,r2
   15edc:	10800003 	ldbu	r2,0(r2)
   15ee0:	10803fcc 	andi	r2,r2,255
   15ee4:	1000071e 	bne	r2,zero,15f04 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   15ee8:	d0a72c17 	ldw	r2,-25424(gp)
   15eec:	10800d83 	ldbu	r2,54(r2)
   15ef0:	0084303a 	nor	r2,zero,r2
   15ef4:	1007883a 	mov	r3,r2
   15ef8:	d0a72903 	ldbu	r2,-25436(gp)
   15efc:	1884703a 	and	r2,r3,r2
   15f00:	d0a72905 	stb	r2,-25436(gp)
    }
}
   15f04:	0001883a 	nop
   15f08:	e037883a 	mov	sp,fp
   15f0c:	df000017 	ldw	fp,0(sp)
   15f10:	dec00104 	addi	sp,sp,4
   15f14:	f800283a 	ret

00015f18 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   15f18:	defffb04 	addi	sp,sp,-20
   15f1c:	dfc00415 	stw	ra,16(sp)
   15f20:	df000315 	stw	fp,12(sp)
   15f24:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   15f28:	0140dc04 	movi	r5,880
   15f2c:	010000b4 	movhi	r4,2
   15f30:	2108e604 	addi	r4,r4,9112
   15f34:	001415c0 	call	1415c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   15f38:	008000b4 	movhi	r2,2
   15f3c:	1088e604 	addi	r2,r2,9112
   15f40:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   15f44:	008000b4 	movhi	r2,2
   15f48:	1088f104 	addi	r2,r2,9156
   15f4c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   15f50:	e03ffd0d 	sth	zero,-12(fp)
   15f54:	00001306 	br	15fa4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15f58:	e0bffe17 	ldw	r2,-8(fp)
   15f5c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   15f60:	e0bffe17 	ldw	r2,-8(fp)
   15f64:	e0ffff17 	ldw	r3,-4(fp)
   15f68:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   15f6c:	e0bffe17 	ldw	r2,-8(fp)
   15f70:	00c00fc4 	movi	r3,63
   15f74:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   15f78:	e0bffe17 	ldw	r2,-8(fp)
   15f7c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   15f80:	e0bffe17 	ldw	r2,-8(fp)
   15f84:	10800b04 	addi	r2,r2,44
   15f88:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   15f8c:	e0bfff17 	ldw	r2,-4(fp)
   15f90:	10800b04 	addi	r2,r2,44
   15f94:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   15f98:	e0bffd0b 	ldhu	r2,-12(fp)
   15f9c:	10800044 	addi	r2,r2,1
   15fa0:	e0bffd0d 	sth	r2,-12(fp)
   15fa4:	e0bffd0b 	ldhu	r2,-12(fp)
   15fa8:	108004f0 	cmpltui	r2,r2,19
   15fac:	103fea1e 	bne	r2,zero,15f58 <__alt_data_end+0xfffe5218>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15fb0:	e0bffe17 	ldw	r2,-8(fp)
   15fb4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   15fb8:	e0bffe17 	ldw	r2,-8(fp)
   15fbc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   15fc0:	e0bffe17 	ldw	r2,-8(fp)
   15fc4:	00c00fc4 	movi	r3,63
   15fc8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   15fcc:	e0bffe17 	ldw	r2,-8(fp)
   15fd0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   15fd4:	008000b4 	movhi	r2,2
   15fd8:	1088e604 	addi	r2,r2,9112
   15fdc:	d0a72e15 	stw	r2,-25416(gp)
#endif
}
   15fe0:	0001883a 	nop
   15fe4:	e037883a 	mov	sp,fp
   15fe8:	dfc00117 	ldw	ra,4(sp)
   15fec:	df000017 	ldw	fp,0(sp)
   15ff0:	dec00204 	addi	sp,sp,8
   15ff4:	f800283a 	ret

00015ff8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   15ff8:	defffa04 	addi	sp,sp,-24
   15ffc:	dfc00515 	stw	ra,20(sp)
   16000:	df000415 	stw	fp,16(sp)
   16004:	df000404 	addi	fp,sp,16
   16008:	e13ffe15 	stw	r4,-8(fp)
   1600c:	2805883a 	mov	r2,r5
   16010:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   16014:	e0bffe17 	ldw	r2,-8(fp)
   16018:	10800217 	ldw	r2,8(r2)
   1601c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   16020:	e0bffd17 	ldw	r2,-12(fp)
   16024:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   16028:	e0bffd17 	ldw	r2,-12(fp)
   1602c:	e0ffff0b 	ldhu	r3,-4(fp)
   16030:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   16034:	e0bffd17 	ldw	r2,-12(fp)
   16038:	10c00c03 	ldbu	r3,48(r2)
   1603c:	00bff7c4 	movi	r2,-33
   16040:	1884703a 	and	r2,r3,r2
   16044:	1007883a 	mov	r3,r2
   16048:	e0bffd17 	ldw	r2,-12(fp)
   1604c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   16050:	e0bffd17 	ldw	r2,-12(fp)
   16054:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   16058:	e0bffd17 	ldw	r2,-12(fp)
   1605c:	10800c03 	ldbu	r2,48(r2)
   16060:	10803fcc 	andi	r2,r2,255
   16064:	1000181e 	bne	r2,zero,160c8 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   16068:	e0bffd17 	ldw	r2,-12(fp)
   1606c:	10c00d83 	ldbu	r3,54(r2)
   16070:	d0a72903 	ldbu	r2,-25436(gp)
   16074:	1884b03a 	or	r2,r3,r2
   16078:	d0a72905 	stb	r2,-25436(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1607c:	e0bffd17 	ldw	r2,-12(fp)
   16080:	10800d03 	ldbu	r2,52(r2)
   16084:	10c03fcc 	andi	r3,r2,255
   16088:	e0bffd17 	ldw	r2,-12(fp)
   1608c:	10800d03 	ldbu	r2,52(r2)
   16090:	11003fcc 	andi	r4,r2,255
   16094:	d0a72944 	addi	r2,gp,-25435
   16098:	2085883a 	add	r2,r4,r2
   1609c:	11000003 	ldbu	r4,0(r2)
   160a0:	e0bffd17 	ldw	r2,-12(fp)
   160a4:	10800d43 	ldbu	r2,53(r2)
   160a8:	2084b03a 	or	r2,r4,r2
   160ac:	1009883a 	mov	r4,r2
   160b0:	d0a72944 	addi	r2,gp,-25435
   160b4:	1885883a 	add	r2,r3,r2
   160b8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   160bc:	00800044 	movi	r2,1
   160c0:	e0bffc05 	stb	r2,-16(fp)
   160c4:	00000106 	br	160cc <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   160c8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   160cc:	e13ffe17 	ldw	r4,-8(fp)
   160d0:	00160ec0 	call	160ec <OS_FlagUnlink>
    return (sched);
   160d4:	e0bffc03 	ldbu	r2,-16(fp)
}
   160d8:	e037883a 	mov	sp,fp
   160dc:	dfc00117 	ldw	ra,4(sp)
   160e0:	df000017 	ldw	fp,0(sp)
   160e4:	dec00204 	addi	sp,sp,8
   160e8:	f800283a 	ret

000160ec <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   160ec:	defffa04 	addi	sp,sp,-24
   160f0:	df000515 	stw	fp,20(sp)
   160f4:	df000504 	addi	fp,sp,20
   160f8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   160fc:	e0bfff17 	ldw	r2,-4(fp)
   16100:	10800117 	ldw	r2,4(r2)
   16104:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   16108:	e0bfff17 	ldw	r2,-4(fp)
   1610c:	10800017 	ldw	r2,0(r2)
   16110:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   16114:	e0bffb17 	ldw	r2,-20(fp)
   16118:	10000b1e 	bne	r2,zero,16148 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   1611c:	e0bfff17 	ldw	r2,-4(fp)
   16120:	10800317 	ldw	r2,12(r2)
   16124:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   16128:	e0bffd17 	ldw	r2,-12(fp)
   1612c:	e0fffc17 	ldw	r3,-16(fp)
   16130:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   16134:	e0bffc17 	ldw	r2,-16(fp)
   16138:	10000b26 	beq	r2,zero,16168 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1613c:	e0bffc17 	ldw	r2,-16(fp)
   16140:	10000115 	stw	zero,4(r2)
   16144:	00000806 	br	16168 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   16148:	e0bffb17 	ldw	r2,-20(fp)
   1614c:	e0fffc17 	ldw	r3,-16(fp)
   16150:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   16154:	e0bffc17 	ldw	r2,-16(fp)
   16158:	10000326 	beq	r2,zero,16168 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1615c:	e0bffc17 	ldw	r2,-16(fp)
   16160:	e0fffb17 	ldw	r3,-20(fp)
   16164:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   16168:	e0bfff17 	ldw	r2,-4(fp)
   1616c:	10800217 	ldw	r2,8(r2)
   16170:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   16174:	e0bffe17 	ldw	r2,-8(fp)
   16178:	10000a15 	stw	zero,40(r2)
#endif
}
   1617c:	0001883a 	nop
   16180:	e037883a 	mov	sp,fp
   16184:	df000017 	ldw	fp,0(sp)
   16188:	dec00104 	addi	sp,sp,4
   1618c:	f800283a 	ret

00016190 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   16190:	defff404 	addi	sp,sp,-48
   16194:	df000b15 	stw	fp,44(sp)
   16198:	df000b04 	addi	fp,sp,44
   1619c:	e13ffc15 	stw	r4,-16(fp)
   161a0:	e17ffd15 	stw	r5,-12(fp)
   161a4:	e1bffe15 	stw	r6,-8(fp)
   161a8:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   161ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   161b0:	e0bfff17 	ldw	r2,-4(fp)
   161b4:	1000021e 	bne	r2,zero,161c0 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   161b8:	0005883a 	mov	r2,zero
   161bc:	00006506 	br	16354 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   161c0:	e0bffc17 	ldw	r2,-16(fp)
   161c4:	1000051e 	bne	r2,zero,161dc <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   161c8:	e0bfff17 	ldw	r2,-4(fp)
   161cc:	00c01884 	movi	r3,98
   161d0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   161d4:	0005883a 	mov	r2,zero
   161d8:	00005e06 	br	16354 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   161dc:	e0bffc17 	ldw	r2,-16(fp)
   161e0:	108000cc 	andi	r2,r2,3
   161e4:	10000526 	beq	r2,zero,161fc <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   161e8:	e0bfff17 	ldw	r2,-4(fp)
   161ec:	00c01884 	movi	r3,98
   161f0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   161f4:	0005883a 	mov	r2,zero
   161f8:	00005606 	br	16354 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   161fc:	e0bffd17 	ldw	r2,-12(fp)
   16200:	108000a8 	cmpgeui	r2,r2,2
   16204:	1000051e 	bne	r2,zero,1621c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   16208:	e0bfff17 	ldw	r2,-4(fp)
   1620c:	00c016c4 	movi	r3,91
   16210:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16214:	0005883a 	mov	r2,zero
   16218:	00004e06 	br	16354 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   1621c:	e0bffe17 	ldw	r2,-8(fp)
   16220:	10800128 	cmpgeui	r2,r2,4
   16224:	1000051e 	bne	r2,zero,1623c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   16228:	e0bfff17 	ldw	r2,-4(fp)
   1622c:	00c01704 	movi	r3,92
   16230:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   16234:	0005883a 	mov	r2,zero
   16238:	00004606 	br	16354 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1623c:	0005303a 	rdctl	r2,status
   16240:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16244:	e0fffb17 	ldw	r3,-20(fp)
   16248:	00bfff84 	movi	r2,-2
   1624c:	1884703a 	and	r2,r3,r2
   16250:	1001703a 	wrctl	status,r2
  
  return context;
   16254:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16258:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   1625c:	d0a72617 	ldw	r2,-25448(gp)
   16260:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   16264:	d0a72617 	ldw	r2,-25448(gp)
   16268:	10000326 	beq	r2,zero,16278 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   1626c:	d0a72617 	ldw	r2,-25448(gp)
   16270:	10800117 	ldw	r2,4(r2)
   16274:	d0a72615 	stw	r2,-25448(gp)
   16278:	e0bff817 	ldw	r2,-32(fp)
   1627c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16280:	e0bff917 	ldw	r2,-28(fp)
   16284:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   16288:	e0bffa17 	ldw	r2,-24(fp)
   1628c:	1000051e 	bne	r2,zero,162a4 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   16290:	e0bfff17 	ldw	r2,-4(fp)
   16294:	00c01684 	movi	r3,90
   16298:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1629c:	0005883a 	mov	r2,zero
   162a0:	00002c06 	br	16354 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   162a4:	e0bffc17 	ldw	r2,-16(fp)
   162a8:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   162ac:	e0fffc17 	ldw	r3,-16(fp)
   162b0:	e0bffe17 	ldw	r2,-8(fp)
   162b4:	1885883a 	add	r2,r3,r2
   162b8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   162bc:	e03ff715 	stw	zero,-36(fp)
   162c0:	00000c06 	br	162f4 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   162c4:	e0bff617 	ldw	r2,-40(fp)
   162c8:	e0fff517 	ldw	r3,-44(fp)
   162cc:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   162d0:	e0bff517 	ldw	r2,-44(fp)
   162d4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   162d8:	e0fff517 	ldw	r3,-44(fp)
   162dc:	e0bffe17 	ldw	r2,-8(fp)
   162e0:	1885883a 	add	r2,r3,r2
   162e4:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   162e8:	e0bff717 	ldw	r2,-36(fp)
   162ec:	10800044 	addi	r2,r2,1
   162f0:	e0bff715 	stw	r2,-36(fp)
   162f4:	e0bffd17 	ldw	r2,-12(fp)
   162f8:	10bfffc4 	addi	r2,r2,-1
   162fc:	e0fff717 	ldw	r3,-36(fp)
   16300:	18bff036 	bltu	r3,r2,162c4 <__alt_data_end+0xfffe5584>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   16304:	e0bff617 	ldw	r2,-40(fp)
   16308:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   1630c:	e0bffa17 	ldw	r2,-24(fp)
   16310:	e0fffc17 	ldw	r3,-16(fp)
   16314:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   16318:	e0bffa17 	ldw	r2,-24(fp)
   1631c:	e0fffc17 	ldw	r3,-16(fp)
   16320:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   16324:	e0bffa17 	ldw	r2,-24(fp)
   16328:	e0fffd17 	ldw	r3,-12(fp)
   1632c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   16330:	e0bffa17 	ldw	r2,-24(fp)
   16334:	e0fffd17 	ldw	r3,-12(fp)
   16338:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   1633c:	e0bffa17 	ldw	r2,-24(fp)
   16340:	e0fffe17 	ldw	r3,-8(fp)
   16344:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   16348:	e0bfff17 	ldw	r2,-4(fp)
   1634c:	10000005 	stb	zero,0(r2)
    return (pmem);
   16350:	e0bffa17 	ldw	r2,-24(fp)
}
   16354:	e037883a 	mov	sp,fp
   16358:	df000017 	ldw	fp,0(sp)
   1635c:	dec00104 	addi	sp,sp,4
   16360:	f800283a 	ret

00016364 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   16364:	defff804 	addi	sp,sp,-32
   16368:	df000715 	stw	fp,28(sp)
   1636c:	df000704 	addi	fp,sp,28
   16370:	e13ffe15 	stw	r4,-8(fp)
   16374:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16378:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1637c:	e0bfff17 	ldw	r2,-4(fp)
   16380:	1000021e 	bne	r2,zero,1638c <OSMemGet+0x28>
        return ((void *)0);
   16384:	0005883a 	mov	r2,zero
   16388:	00002e06 	br	16444 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   1638c:	e0bffe17 	ldw	r2,-8(fp)
   16390:	1000051e 	bne	r2,zero,163a8 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16394:	e0bfff17 	ldw	r2,-4(fp)
   16398:	00c01804 	movi	r3,96
   1639c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   163a0:	0005883a 	mov	r2,zero
   163a4:	00002706 	br	16444 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163a8:	0005303a 	rdctl	r2,status
   163ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   163b0:	e0fffd17 	ldw	r3,-12(fp)
   163b4:	00bfff84 	movi	r2,-2
   163b8:	1884703a 	and	r2,r3,r2
   163bc:	1001703a 	wrctl	status,r2
  
  return context;
   163c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   163c4:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   163c8:	e0bffe17 	ldw	r2,-8(fp)
   163cc:	10800417 	ldw	r2,16(r2)
   163d0:	10001426 	beq	r2,zero,16424 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   163d4:	e0bffe17 	ldw	r2,-8(fp)
   163d8:	10800117 	ldw	r2,4(r2)
   163dc:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   163e0:	e0bffb17 	ldw	r2,-20(fp)
   163e4:	10c00017 	ldw	r3,0(r2)
   163e8:	e0bffe17 	ldw	r2,-8(fp)
   163ec:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   163f0:	e0bffe17 	ldw	r2,-8(fp)
   163f4:	10800417 	ldw	r2,16(r2)
   163f8:	10ffffc4 	addi	r3,r2,-1
   163fc:	e0bffe17 	ldw	r2,-8(fp)
   16400:	10c00415 	stw	r3,16(r2)
   16404:	e0bff917 	ldw	r2,-28(fp)
   16408:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1640c:	e0bffa17 	ldw	r2,-24(fp)
   16410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   16414:	e0bfff17 	ldw	r2,-4(fp)
   16418:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   1641c:	e0bffb17 	ldw	r2,-20(fp)
   16420:	00000806 	br	16444 <OSMemGet+0xe0>
   16424:	e0bff917 	ldw	r2,-28(fp)
   16428:	e0bffc15 	stw	r2,-16(fp)
   1642c:	e0bffc17 	ldw	r2,-16(fp)
   16430:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   16434:	e0bfff17 	ldw	r2,-4(fp)
   16438:	00c01744 	movi	r3,93
   1643c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   16440:	0005883a 	mov	r2,zero
}
   16444:	e037883a 	mov	sp,fp
   16448:	df000017 	ldw	fp,0(sp)
   1644c:	dec00104 	addi	sp,sp,4
   16450:	f800283a 	ret

00016454 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   16454:	defff704 	addi	sp,sp,-36
   16458:	dfc00815 	stw	ra,32(sp)
   1645c:	df000715 	stw	fp,28(sp)
   16460:	df000704 	addi	fp,sp,28
   16464:	e13ffd15 	stw	r4,-12(fp)
   16468:	e17ffe15 	stw	r5,-8(fp)
   1646c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16470:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16474:	e0bfff17 	ldw	r2,-4(fp)
   16478:	1000021e 	bne	r2,zero,16484 <OSMemNameGet+0x30>
        return (0);
   1647c:	0005883a 	mov	r2,zero
   16480:	00002b06 	br	16530 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   16484:	e0bffd17 	ldw	r2,-12(fp)
   16488:	1000051e 	bne	r2,zero,164a0 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1648c:	e0bfff17 	ldw	r2,-4(fp)
   16490:	00c01804 	movi	r3,96
   16494:	10c00005 	stb	r3,0(r2)
        return (0);
   16498:	0005883a 	mov	r2,zero
   1649c:	00002406 	br	16530 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   164a0:	e0bffe17 	ldw	r2,-8(fp)
   164a4:	1000051e 	bne	r2,zero,164bc <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   164a8:	e0bfff17 	ldw	r2,-4(fp)
   164ac:	00c00304 	movi	r3,12
   164b0:	10c00005 	stb	r3,0(r2)
        return (0);
   164b4:	0005883a 	mov	r2,zero
   164b8:	00001d06 	br	16530 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   164bc:	d0a72b03 	ldbu	r2,-25428(gp)
   164c0:	10803fcc 	andi	r2,r2,255
   164c4:	10000526 	beq	r2,zero,164dc <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   164c8:	e0bfff17 	ldw	r2,-4(fp)
   164cc:	00c00444 	movi	r3,17
   164d0:	10c00005 	stb	r3,0(r2)
        return (0);
   164d4:	0005883a 	mov	r2,zero
   164d8:	00001506 	br	16530 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   164dc:	0005303a 	rdctl	r2,status
   164e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   164e4:	e0fffb17 	ldw	r3,-20(fp)
   164e8:	00bfff84 	movi	r2,-2
   164ec:	1884703a 	and	r2,r3,r2
   164f0:	1001703a 	wrctl	status,r2
  
  return context;
   164f4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   164f8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   164fc:	e0bffd17 	ldw	r2,-12(fp)
   16500:	10800504 	addi	r2,r2,20
   16504:	100b883a 	mov	r5,r2
   16508:	e13ffe17 	ldw	r4,-8(fp)
   1650c:	001435c0 	call	1435c <OS_StrCopy>
   16510:	e0bffa05 	stb	r2,-24(fp)
   16514:	e0bff917 	ldw	r2,-28(fp)
   16518:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1651c:	e0bffc17 	ldw	r2,-16(fp)
   16520:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16524:	e0bfff17 	ldw	r2,-4(fp)
   16528:	10000005 	stb	zero,0(r2)
    return (len);
   1652c:	e0bffa03 	ldbu	r2,-24(fp)
}
   16530:	e037883a 	mov	sp,fp
   16534:	dfc00117 	ldw	ra,4(sp)
   16538:	df000017 	ldw	fp,0(sp)
   1653c:	dec00204 	addi	sp,sp,8
   16540:	f800283a 	ret

00016544 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   16544:	defff604 	addi	sp,sp,-40
   16548:	dfc00915 	stw	ra,36(sp)
   1654c:	df000815 	stw	fp,32(sp)
   16550:	df000804 	addi	fp,sp,32
   16554:	e13ffd15 	stw	r4,-12(fp)
   16558:	e17ffe15 	stw	r5,-8(fp)
   1655c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16560:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16564:	e0bfff17 	ldw	r2,-4(fp)
   16568:	10003526 	beq	r2,zero,16640 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1656c:	e0bffd17 	ldw	r2,-12(fp)
   16570:	1000041e 	bne	r2,zero,16584 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   16574:	e0bfff17 	ldw	r2,-4(fp)
   16578:	00c01804 	movi	r3,96
   1657c:	10c00005 	stb	r3,0(r2)
        return;
   16580:	00003006 	br	16644 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16584:	e0bffe17 	ldw	r2,-8(fp)
   16588:	1000041e 	bne	r2,zero,1659c <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1658c:	e0bfff17 	ldw	r2,-4(fp)
   16590:	00c00304 	movi	r3,12
   16594:	10c00005 	stb	r3,0(r2)
        return;
   16598:	00002a06 	br	16644 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1659c:	d0a72b03 	ldbu	r2,-25428(gp)
   165a0:	10803fcc 	andi	r2,r2,255
   165a4:	10000426 	beq	r2,zero,165b8 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   165a8:	e0bfff17 	ldw	r2,-4(fp)
   165ac:	00c00484 	movi	r3,18
   165b0:	10c00005 	stb	r3,0(r2)
        return;
   165b4:	00002306 	br	16644 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   165b8:	0005303a 	rdctl	r2,status
   165bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   165c0:	e0fffc17 	ldw	r3,-16(fp)
   165c4:	00bfff84 	movi	r2,-2
   165c8:	1884703a 	and	r2,r3,r2
   165cc:	1001703a 	wrctl	status,r2
  
  return context;
   165d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   165d4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   165d8:	e13ffe17 	ldw	r4,-8(fp)
   165dc:	00143d00 	call	143d0 <OS_StrLen>
   165e0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   165e4:	e0bffa03 	ldbu	r2,-24(fp)
   165e8:	10800830 	cmpltui	r2,r2,32
   165ec:	1000081e 	bne	r2,zero,16610 <OSMemNameSet+0xcc>
   165f0:	e0bff817 	ldw	r2,-32(fp)
   165f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   165f8:	e0bff917 	ldw	r2,-28(fp)
   165fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   16600:	e0bfff17 	ldw	r2,-4(fp)
   16604:	00c018c4 	movi	r3,99
   16608:	10c00005 	stb	r3,0(r2)
        return;
   1660c:	00000d06 	br	16644 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   16610:	e0bffd17 	ldw	r2,-12(fp)
   16614:	10800504 	addi	r2,r2,20
   16618:	e17ffe17 	ldw	r5,-8(fp)
   1661c:	1009883a 	mov	r4,r2
   16620:	001435c0 	call	1435c <OS_StrCopy>
   16624:	e0bff817 	ldw	r2,-32(fp)
   16628:	e0bffb15 	stw	r2,-20(fp)
   1662c:	e0bffb17 	ldw	r2,-20(fp)
   16630:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16634:	e0bfff17 	ldw	r2,-4(fp)
   16638:	10000005 	stb	zero,0(r2)
   1663c:	00000106 	br	16644 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   16640:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   16644:	e037883a 	mov	sp,fp
   16648:	dfc00117 	ldw	ra,4(sp)
   1664c:	df000017 	ldw	fp,0(sp)
   16650:	dec00204 	addi	sp,sp,8
   16654:	f800283a 	ret

00016658 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   16658:	defff904 	addi	sp,sp,-28
   1665c:	df000615 	stw	fp,24(sp)
   16660:	df000604 	addi	fp,sp,24
   16664:	e13ffe15 	stw	r4,-8(fp)
   16668:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1666c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   16670:	e0bffe17 	ldw	r2,-8(fp)
   16674:	1000021e 	bne	r2,zero,16680 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   16678:	00801804 	movi	r2,96
   1667c:	00002806 	br	16720 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   16680:	e0bfff17 	ldw	r2,-4(fp)
   16684:	1000021e 	bne	r2,zero,16690 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   16688:	008017c4 	movi	r2,95
   1668c:	00002406 	br	16720 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16690:	0005303a 	rdctl	r2,status
   16694:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16698:	e0fffd17 	ldw	r3,-12(fp)
   1669c:	00bfff84 	movi	r2,-2
   166a0:	1884703a 	and	r2,r3,r2
   166a4:	1001703a 	wrctl	status,r2
  
  return context;
   166a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   166ac:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   166b0:	e0bffe17 	ldw	r2,-8(fp)
   166b4:	10c00417 	ldw	r3,16(r2)
   166b8:	e0bffe17 	ldw	r2,-8(fp)
   166bc:	10800317 	ldw	r2,12(r2)
   166c0:	18800636 	bltu	r3,r2,166dc <OSMemPut+0x84>
   166c4:	e0bffa17 	ldw	r2,-24(fp)
   166c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166cc:	e0bffb17 	ldw	r2,-20(fp)
   166d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   166d4:	00801784 	movi	r2,94
   166d8:	00001106 	br	16720 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   166dc:	e0bffe17 	ldw	r2,-8(fp)
   166e0:	10c00117 	ldw	r3,4(r2)
   166e4:	e0bfff17 	ldw	r2,-4(fp)
   166e8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   166ec:	e0bffe17 	ldw	r2,-8(fp)
   166f0:	e0ffff17 	ldw	r3,-4(fp)
   166f4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   166f8:	e0bffe17 	ldw	r2,-8(fp)
   166fc:	10800417 	ldw	r2,16(r2)
   16700:	10c00044 	addi	r3,r2,1
   16704:	e0bffe17 	ldw	r2,-8(fp)
   16708:	10c00415 	stw	r3,16(r2)
   1670c:	e0bffa17 	ldw	r2,-24(fp)
   16710:	e0bffc15 	stw	r2,-16(fp)
   16714:	e0bffc17 	ldw	r2,-16(fp)
   16718:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   1671c:	0005883a 	mov	r2,zero
}
   16720:	e037883a 	mov	sp,fp
   16724:	df000017 	ldw	fp,0(sp)
   16728:	dec00104 	addi	sp,sp,4
   1672c:	f800283a 	ret

00016730 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   16730:	defffa04 	addi	sp,sp,-24
   16734:	df000515 	stw	fp,20(sp)
   16738:	df000504 	addi	fp,sp,20
   1673c:	e13ffe15 	stw	r4,-8(fp)
   16740:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16744:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   16748:	e0bffe17 	ldw	r2,-8(fp)
   1674c:	1000021e 	bne	r2,zero,16758 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   16750:	00801804 	movi	r2,96
   16754:	00002c06 	br	16808 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   16758:	e0bfff17 	ldw	r2,-4(fp)
   1675c:	1000021e 	bne	r2,zero,16768 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   16760:	00801844 	movi	r2,97
   16764:	00002806 	br	16808 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16768:	0005303a 	rdctl	r2,status
   1676c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16770:	e0fffc17 	ldw	r3,-16(fp)
   16774:	00bfff84 	movi	r2,-2
   16778:	1884703a 	and	r2,r3,r2
   1677c:	1001703a 	wrctl	status,r2
  
  return context;
   16780:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16784:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   16788:	e0bffe17 	ldw	r2,-8(fp)
   1678c:	10c00017 	ldw	r3,0(r2)
   16790:	e0bfff17 	ldw	r2,-4(fp)
   16794:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   16798:	e0bffe17 	ldw	r2,-8(fp)
   1679c:	10c00117 	ldw	r3,4(r2)
   167a0:	e0bfff17 	ldw	r2,-4(fp)
   167a4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   167a8:	e0bffe17 	ldw	r2,-8(fp)
   167ac:	10c00217 	ldw	r3,8(r2)
   167b0:	e0bfff17 	ldw	r2,-4(fp)
   167b4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   167b8:	e0bffe17 	ldw	r2,-8(fp)
   167bc:	10c00317 	ldw	r3,12(r2)
   167c0:	e0bfff17 	ldw	r2,-4(fp)
   167c4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   167c8:	e0bffe17 	ldw	r2,-8(fp)
   167cc:	10c00417 	ldw	r3,16(r2)
   167d0:	e0bfff17 	ldw	r2,-4(fp)
   167d4:	10c00415 	stw	r3,16(r2)
   167d8:	e0bffb17 	ldw	r2,-20(fp)
   167dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   167e0:	e0bffd17 	ldw	r2,-12(fp)
   167e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   167e8:	e0bfff17 	ldw	r2,-4(fp)
   167ec:	10c00317 	ldw	r3,12(r2)
   167f0:	e0bfff17 	ldw	r2,-4(fp)
   167f4:	10800417 	ldw	r2,16(r2)
   167f8:	1887c83a 	sub	r3,r3,r2
   167fc:	e0bfff17 	ldw	r2,-4(fp)
   16800:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   16804:	0005883a 	mov	r2,zero
}
   16808:	e037883a 	mov	sp,fp
   1680c:	df000017 	ldw	fp,0(sp)
   16810:	dec00104 	addi	sp,sp,4
   16814:	f800283a 	ret

00016818 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   16818:	defffc04 	addi	sp,sp,-16
   1681c:	dfc00315 	stw	ra,12(sp)
   16820:	df000215 	stw	fp,8(sp)
   16824:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   16828:	01430c04 	movi	r5,3120
   1682c:	010000b4 	movhi	r4,2
   16830:	2109c204 	addi	r4,r4,9992
   16834:	001415c0 	call	1415c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   16838:	008000b4 	movhi	r2,2
   1683c:	1089c204 	addi	r2,r2,9992
   16840:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   16844:	e03fff0d 	sth	zero,-4(fp)
   16848:	00001606 	br	168a4 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   1684c:	e0bfff0b 	ldhu	r2,-4(fp)
   16850:	10800044 	addi	r2,r2,1
   16854:	01400d04 	movi	r5,52
   16858:	1009883a 	mov	r4,r2
   1685c:	0004f140 	call	4f14 <__mulsi3>
   16860:	1007883a 	mov	r3,r2
   16864:	008000b4 	movhi	r2,2
   16868:	1089c204 	addi	r2,r2,9992
   1686c:	1887883a 	add	r3,r3,r2
   16870:	e0bffe17 	ldw	r2,-8(fp)
   16874:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   16878:	e0bffe17 	ldw	r2,-8(fp)
   1687c:	00c00fc4 	movi	r3,63
   16880:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   16884:	e0bffe17 	ldw	r2,-8(fp)
   16888:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   1688c:	e0bffe17 	ldw	r2,-8(fp)
   16890:	10800d04 	addi	r2,r2,52
   16894:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   16898:	e0bfff0b 	ldhu	r2,-4(fp)
   1689c:	10800044 	addi	r2,r2,1
   168a0:	e0bfff0d 	sth	r2,-4(fp)
   168a4:	e0bfff0b 	ldhu	r2,-4(fp)
   168a8:	10800ef0 	cmpltui	r2,r2,59
   168ac:	103fe71e 	bne	r2,zero,1684c <__alt_data_end+0xfffe5b0c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   168b0:	e0bffe17 	ldw	r2,-8(fp)
   168b4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   168b8:	e0bffe17 	ldw	r2,-8(fp)
   168bc:	00c00fc4 	movi	r3,63
   168c0:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   168c4:	e0bffe17 	ldw	r2,-8(fp)
   168c8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   168cc:	008000b4 	movhi	r2,2
   168d0:	1089c204 	addi	r2,r2,9992
   168d4:	d0a72615 	stw	r2,-25448(gp)
#endif
}
   168d8:	0001883a 	nop
   168dc:	e037883a 	mov	sp,fp
   168e0:	dfc00117 	ldw	ra,4(sp)
   168e4:	df000017 	ldw	fp,0(sp)
   168e8:	dec00204 	addi	sp,sp,8
   168ec:	f800283a 	ret

000168f0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   168f0:	defff804 	addi	sp,sp,-32
   168f4:	df000715 	stw	fp,28(sp)
   168f8:	df000704 	addi	fp,sp,28
   168fc:	e13ffe15 	stw	r4,-8(fp)
   16900:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16904:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16908:	e0bfff17 	ldw	r2,-4(fp)
   1690c:	1000021e 	bne	r2,zero,16918 <OSQAccept+0x28>
        return ((void *)0);
   16910:	0005883a 	mov	r2,zero
   16914:	00004206 	br	16a20 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   16918:	e0bffe17 	ldw	r2,-8(fp)
   1691c:	1000051e 	bne	r2,zero,16934 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   16920:	e0bfff17 	ldw	r2,-4(fp)
   16924:	00c00104 	movi	r3,4
   16928:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1692c:	0005883a 	mov	r2,zero
   16930:	00003b06 	br	16a20 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   16934:	e0bffe17 	ldw	r2,-8(fp)
   16938:	10800003 	ldbu	r2,0(r2)
   1693c:	10803fcc 	andi	r2,r2,255
   16940:	108000a0 	cmpeqi	r2,r2,2
   16944:	1000051e 	bne	r2,zero,1695c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16948:	e0bfff17 	ldw	r2,-4(fp)
   1694c:	00c00044 	movi	r3,1
   16950:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16954:	0005883a 	mov	r2,zero
   16958:	00003106 	br	16a20 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1695c:	0005303a 	rdctl	r2,status
   16960:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16964:	e0fffd17 	ldw	r3,-12(fp)
   16968:	00bfff84 	movi	r2,-2
   1696c:	1884703a 	and	r2,r3,r2
   16970:	1001703a 	wrctl	status,r2
  
  return context;
   16974:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16978:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1697c:	e0bffe17 	ldw	r2,-8(fp)
   16980:	10800117 	ldw	r2,4(r2)
   16984:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   16988:	e0bffc17 	ldw	r2,-16(fp)
   1698c:	1080058b 	ldhu	r2,22(r2)
   16990:	10bfffcc 	andi	r2,r2,65535
   16994:	10001926 	beq	r2,zero,169fc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   16998:	e0bffc17 	ldw	r2,-16(fp)
   1699c:	10800417 	ldw	r2,16(r2)
   169a0:	11000104 	addi	r4,r2,4
   169a4:	e0fffc17 	ldw	r3,-16(fp)
   169a8:	19000415 	stw	r4,16(r3)
   169ac:	10800017 	ldw	r2,0(r2)
   169b0:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   169b4:	e0bffc17 	ldw	r2,-16(fp)
   169b8:	1080058b 	ldhu	r2,22(r2)
   169bc:	10bfffc4 	addi	r2,r2,-1
   169c0:	1007883a 	mov	r3,r2
   169c4:	e0bffc17 	ldw	r2,-16(fp)
   169c8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   169cc:	e0bffc17 	ldw	r2,-16(fp)
   169d0:	10c00417 	ldw	r3,16(r2)
   169d4:	e0bffc17 	ldw	r2,-16(fp)
   169d8:	10800217 	ldw	r2,8(r2)
   169dc:	1880041e 	bne	r3,r2,169f0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   169e0:	e0bffc17 	ldw	r2,-16(fp)
   169e4:	10c00117 	ldw	r3,4(r2)
   169e8:	e0bffc17 	ldw	r2,-16(fp)
   169ec:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   169f0:	e0bfff17 	ldw	r2,-4(fp)
   169f4:	10000005 	stb	zero,0(r2)
   169f8:	00000406 	br	16a0c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   169fc:	e0bfff17 	ldw	r2,-4(fp)
   16a00:	00c007c4 	movi	r3,31
   16a04:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   16a08:	e03ff915 	stw	zero,-28(fp)
   16a0c:	e0bffa17 	ldw	r2,-24(fp)
   16a10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a14:	e0bffb17 	ldw	r2,-20(fp)
   16a18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   16a1c:	e0bff917 	ldw	r2,-28(fp)
}
   16a20:	e037883a 	mov	sp,fp
   16a24:	df000017 	ldw	fp,0(sp)
   16a28:	dec00104 	addi	sp,sp,4
   16a2c:	f800283a 	ret

00016a30 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   16a30:	defff404 	addi	sp,sp,-48
   16a34:	dfc00b15 	stw	ra,44(sp)
   16a38:	df000a15 	stw	fp,40(sp)
   16a3c:	df000a04 	addi	fp,sp,40
   16a40:	e13ffe15 	stw	r4,-8(fp)
   16a44:	2805883a 	mov	r2,r5
   16a48:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16a4c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   16a50:	d0a72b03 	ldbu	r2,-25428(gp)
   16a54:	10803fcc 	andi	r2,r2,255
   16a58:	10000226 	beq	r2,zero,16a64 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   16a5c:	0005883a 	mov	r2,zero
   16a60:	00005906 	br	16bc8 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a64:	0005303a 	rdctl	r2,status
   16a68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a6c:	e0fffd17 	ldw	r3,-12(fp)
   16a70:	00bfff84 	movi	r2,-2
   16a74:	1884703a 	and	r2,r3,r2
   16a78:	1001703a 	wrctl	status,r2
  
  return context;
   16a7c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16a80:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   16a84:	d0a72a17 	ldw	r2,-25432(gp)
   16a88:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   16a8c:	d0a72a17 	ldw	r2,-25432(gp)
   16a90:	10000326 	beq	r2,zero,16aa0 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   16a94:	d0a72a17 	ldw	r2,-25432(gp)
   16a98:	10800117 	ldw	r2,4(r2)
   16a9c:	d0a72a15 	stw	r2,-25432(gp)
   16aa0:	e0bff717 	ldw	r2,-36(fp)
   16aa4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16aa8:	e0bff817 	ldw	r2,-32(fp)
   16aac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   16ab0:	e0bff617 	ldw	r2,-40(fp)
   16ab4:	10004326 	beq	r2,zero,16bc4 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ab8:	0005303a 	rdctl	r2,status
   16abc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ac0:	e0fff917 	ldw	r3,-28(fp)
   16ac4:	00bfff84 	movi	r2,-2
   16ac8:	1884703a 	and	r2,r3,r2
   16acc:	1001703a 	wrctl	status,r2
  
  return context;
   16ad0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   16ad4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   16ad8:	d0a72817 	ldw	r2,-25440(gp)
   16adc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   16ae0:	e0bffb17 	ldw	r2,-20(fp)
   16ae4:	10002d26 	beq	r2,zero,16b9c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   16ae8:	d0a72817 	ldw	r2,-25440(gp)
   16aec:	10800017 	ldw	r2,0(r2)
   16af0:	d0a72815 	stw	r2,-25440(gp)
   16af4:	e0bff717 	ldw	r2,-36(fp)
   16af8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16afc:	e0bffa17 	ldw	r2,-24(fp)
   16b00:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   16b04:	e0bffb17 	ldw	r2,-20(fp)
   16b08:	e0fffe17 	ldw	r3,-8(fp)
   16b0c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   16b10:	e0bfff0b 	ldhu	r2,-4(fp)
   16b14:	1085883a 	add	r2,r2,r2
   16b18:	1085883a 	add	r2,r2,r2
   16b1c:	1007883a 	mov	r3,r2
   16b20:	e0bffe17 	ldw	r2,-8(fp)
   16b24:	10c7883a 	add	r3,r2,r3
   16b28:	e0bffb17 	ldw	r2,-20(fp)
   16b2c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   16b30:	e0bffb17 	ldw	r2,-20(fp)
   16b34:	e0fffe17 	ldw	r3,-8(fp)
   16b38:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   16b3c:	e0bffb17 	ldw	r2,-20(fp)
   16b40:	e0fffe17 	ldw	r3,-8(fp)
   16b44:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   16b48:	e0bffb17 	ldw	r2,-20(fp)
   16b4c:	e0ffff0b 	ldhu	r3,-4(fp)
   16b50:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   16b54:	e0bffb17 	ldw	r2,-20(fp)
   16b58:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   16b5c:	e0bff617 	ldw	r2,-40(fp)
   16b60:	00c00084 	movi	r3,2
   16b64:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   16b68:	e0bff617 	ldw	r2,-40(fp)
   16b6c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   16b70:	e0bff617 	ldw	r2,-40(fp)
   16b74:	e0fffb17 	ldw	r3,-20(fp)
   16b78:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   16b7c:	e0bff617 	ldw	r2,-40(fp)
   16b80:	00c00fc4 	movi	r3,63
   16b84:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   16b88:	e0bff617 	ldw	r2,-40(fp)
   16b8c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   16b90:	e13ff617 	ldw	r4,-40(fp)
   16b94:	0013d7c0 	call	13d7c <OS_EventWaitListInit>
   16b98:	00000a06 	br	16bc4 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   16b9c:	d0e72a17 	ldw	r3,-25432(gp)
   16ba0:	e0bff617 	ldw	r2,-40(fp)
   16ba4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   16ba8:	e0bff617 	ldw	r2,-40(fp)
   16bac:	d0a72a15 	stw	r2,-25432(gp)
   16bb0:	e0bff717 	ldw	r2,-36(fp)
   16bb4:	e0bffc15 	stw	r2,-16(fp)
   16bb8:	e0bffc17 	ldw	r2,-16(fp)
   16bbc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   16bc0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   16bc4:	e0bff617 	ldw	r2,-40(fp)
}
   16bc8:	e037883a 	mov	sp,fp
   16bcc:	dfc00117 	ldw	ra,4(sp)
   16bd0:	df000017 	ldw	fp,0(sp)
   16bd4:	dec00204 	addi	sp,sp,8
   16bd8:	f800283a 	ret

00016bdc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16bdc:	defff204 	addi	sp,sp,-56
   16be0:	dfc00d15 	stw	ra,52(sp)
   16be4:	df000c15 	stw	fp,48(sp)
   16be8:	df000c04 	addi	fp,sp,48
   16bec:	e13ffd15 	stw	r4,-12(fp)
   16bf0:	2805883a 	mov	r2,r5
   16bf4:	e1bfff15 	stw	r6,-4(fp)
   16bf8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16bfc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16c00:	e0bfff17 	ldw	r2,-4(fp)
   16c04:	1000021e 	bne	r2,zero,16c10 <OSQDel+0x34>
        return (pevent);
   16c08:	e0bffd17 	ldw	r2,-12(fp)
   16c0c:	00008e06 	br	16e48 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16c10:	e0bffd17 	ldw	r2,-12(fp)
   16c14:	1000051e 	bne	r2,zero,16c2c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16c18:	e0bfff17 	ldw	r2,-4(fp)
   16c1c:	00c00104 	movi	r3,4
   16c20:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16c24:	e0bffd17 	ldw	r2,-12(fp)
   16c28:	00008706 	br	16e48 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   16c2c:	e0bffd17 	ldw	r2,-12(fp)
   16c30:	10800003 	ldbu	r2,0(r2)
   16c34:	10803fcc 	andi	r2,r2,255
   16c38:	108000a0 	cmpeqi	r2,r2,2
   16c3c:	1000051e 	bne	r2,zero,16c54 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16c40:	e0bfff17 	ldw	r2,-4(fp)
   16c44:	00c00044 	movi	r3,1
   16c48:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16c4c:	e0bffd17 	ldw	r2,-12(fp)
   16c50:	00007d06 	br	16e48 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16c54:	d0a72b03 	ldbu	r2,-25428(gp)
   16c58:	10803fcc 	andi	r2,r2,255
   16c5c:	10000526 	beq	r2,zero,16c74 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   16c60:	e0bfff17 	ldw	r2,-4(fp)
   16c64:	00c003c4 	movi	r3,15
   16c68:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16c6c:	e0bffd17 	ldw	r2,-12(fp)
   16c70:	00007506 	br	16e48 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c74:	0005303a 	rdctl	r2,status
   16c78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c7c:	e0fffc17 	ldw	r3,-16(fp)
   16c80:	00bfff84 	movi	r2,-2
   16c84:	1884703a 	and	r2,r3,r2
   16c88:	1001703a 	wrctl	status,r2
  
  return context;
   16c8c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16c90:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   16c94:	e0bffd17 	ldw	r2,-12(fp)
   16c98:	10800283 	ldbu	r2,10(r2)
   16c9c:	10803fcc 	andi	r2,r2,255
   16ca0:	10000326 	beq	r2,zero,16cb0 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   16ca4:	00800044 	movi	r2,1
   16ca8:	e0bff405 	stb	r2,-48(fp)
   16cac:	00000106 	br	16cb4 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   16cb0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   16cb4:	e0bffe03 	ldbu	r2,-8(fp)
   16cb8:	10000326 	beq	r2,zero,16cc8 <OSQDel+0xec>
   16cbc:	10800060 	cmpeqi	r2,r2,1
   16cc0:	1000301e 	bne	r2,zero,16d84 <OSQDel+0x1a8>
   16cc4:	00005506 	br	16e1c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   16cc8:	e0bff403 	ldbu	r2,-48(fp)
   16ccc:	10001e1e 	bne	r2,zero,16d48 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   16cd0:	e0bffd17 	ldw	r2,-12(fp)
   16cd4:	00c00fc4 	movi	r3,63
   16cd8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16cdc:	e0bffd17 	ldw	r2,-12(fp)
   16ce0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   16ce4:	e0bffd17 	ldw	r2,-12(fp)
   16ce8:	10800117 	ldw	r2,4(r2)
   16cec:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   16cf0:	d0e72817 	ldw	r3,-25440(gp)
   16cf4:	e0bff817 	ldw	r2,-32(fp)
   16cf8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   16cfc:	e0bff817 	ldw	r2,-32(fp)
   16d00:	d0a72815 	stw	r2,-25440(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16d04:	e0bffd17 	ldw	r2,-12(fp)
   16d08:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   16d0c:	d0e72a17 	ldw	r3,-25432(gp)
   16d10:	e0bffd17 	ldw	r2,-12(fp)
   16d14:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   16d18:	e0bffd17 	ldw	r2,-12(fp)
   16d1c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   16d20:	e0bffd17 	ldw	r2,-12(fp)
   16d24:	d0a72a15 	stw	r2,-25432(gp)
   16d28:	e0bff617 	ldw	r2,-40(fp)
   16d2c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d30:	e0bff717 	ldw	r2,-36(fp)
   16d34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   16d38:	e0bfff17 	ldw	r2,-4(fp)
   16d3c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   16d40:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   16d44:	00003f06 	br	16e44 <OSQDel+0x268>
   16d48:	e0bff617 	ldw	r2,-40(fp)
   16d4c:	e0bff915 	stw	r2,-28(fp)
   16d50:	e0bff917 	ldw	r2,-28(fp)
   16d54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   16d58:	e0bfff17 	ldw	r2,-4(fp)
   16d5c:	00c01244 	movi	r3,73
   16d60:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   16d64:	e0bffd17 	ldw	r2,-12(fp)
   16d68:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   16d6c:	00003506 	br	16e44 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   16d70:	000f883a 	mov	r7,zero
   16d74:	01800104 	movi	r6,4
   16d78:	000b883a 	mov	r5,zero
   16d7c:	e13ffd17 	ldw	r4,-12(fp)
   16d80:	00137cc0 	call	137cc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   16d84:	e0bffd17 	ldw	r2,-12(fp)
   16d88:	10800283 	ldbu	r2,10(r2)
   16d8c:	10803fcc 	andi	r2,r2,255
   16d90:	103ff71e 	bne	r2,zero,16d70 <__alt_data_end+0xfffe6030>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   16d94:	e0bffd17 	ldw	r2,-12(fp)
   16d98:	00c00fc4 	movi	r3,63
   16d9c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   16da0:	e0bffd17 	ldw	r2,-12(fp)
   16da4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   16da8:	e0bffd17 	ldw	r2,-12(fp)
   16dac:	10800117 	ldw	r2,4(r2)
   16db0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   16db4:	d0e72817 	ldw	r3,-25440(gp)
   16db8:	e0bff817 	ldw	r2,-32(fp)
   16dbc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   16dc0:	e0bff817 	ldw	r2,-32(fp)
   16dc4:	d0a72815 	stw	r2,-25440(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16dc8:	e0bffd17 	ldw	r2,-12(fp)
   16dcc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   16dd0:	d0e72a17 	ldw	r3,-25432(gp)
   16dd4:	e0bffd17 	ldw	r2,-12(fp)
   16dd8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16ddc:	e0bffd17 	ldw	r2,-12(fp)
   16de0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   16de4:	e0bffd17 	ldw	r2,-12(fp)
   16de8:	d0a72a15 	stw	r2,-25432(gp)
   16dec:	e0bff617 	ldw	r2,-40(fp)
   16df0:	e0bffa15 	stw	r2,-24(fp)
   16df4:	e0bffa17 	ldw	r2,-24(fp)
   16df8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16dfc:	e0bff403 	ldbu	r2,-48(fp)
   16e00:	10800058 	cmpnei	r2,r2,1
   16e04:	1000011e 	bne	r2,zero,16e0c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   16e08:	00142180 	call	14218 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   16e0c:	e0bfff17 	ldw	r2,-4(fp)
   16e10:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   16e14:	e03ff515 	stw	zero,-44(fp)
             break;
   16e18:	00000a06 	br	16e44 <OSQDel+0x268>
   16e1c:	e0bff617 	ldw	r2,-40(fp)
   16e20:	e0bffb15 	stw	r2,-20(fp)
   16e24:	e0bffb17 	ldw	r2,-20(fp)
   16e28:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   16e2c:	e0bfff17 	ldw	r2,-4(fp)
   16e30:	00c001c4 	movi	r3,7
   16e34:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   16e38:	e0bffd17 	ldw	r2,-12(fp)
   16e3c:	e0bff515 	stw	r2,-44(fp)
             break;
   16e40:	0001883a 	nop
    }
    return (pevent_return);
   16e44:	e0bff517 	ldw	r2,-44(fp)
}
   16e48:	e037883a 	mov	sp,fp
   16e4c:	dfc00117 	ldw	ra,4(sp)
   16e50:	df000017 	ldw	fp,0(sp)
   16e54:	dec00204 	addi	sp,sp,8
   16e58:	f800283a 	ret

00016e5c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   16e5c:	defffa04 	addi	sp,sp,-24
   16e60:	df000515 	stw	fp,20(sp)
   16e64:	df000504 	addi	fp,sp,20
   16e68:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16e6c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16e70:	e0bfff17 	ldw	r2,-4(fp)
   16e74:	1000021e 	bne	r2,zero,16e80 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   16e78:	00800104 	movi	r2,4
   16e7c:	00002106 	br	16f04 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   16e80:	e0bfff17 	ldw	r2,-4(fp)
   16e84:	10800003 	ldbu	r2,0(r2)
   16e88:	10803fcc 	andi	r2,r2,255
   16e8c:	108000a0 	cmpeqi	r2,r2,2
   16e90:	1000021e 	bne	r2,zero,16e9c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   16e94:	00800044 	movi	r2,1
   16e98:	00001a06 	br	16f04 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e9c:	0005303a 	rdctl	r2,status
   16ea0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ea4:	e0fffd17 	ldw	r3,-12(fp)
   16ea8:	00bfff84 	movi	r2,-2
   16eac:	1884703a 	and	r2,r3,r2
   16eb0:	1001703a 	wrctl	status,r2
  
  return context;
   16eb4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16eb8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   16ebc:	e0bfff17 	ldw	r2,-4(fp)
   16ec0:	10800117 	ldw	r2,4(r2)
   16ec4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   16ec8:	e0bffc17 	ldw	r2,-16(fp)
   16ecc:	10c00117 	ldw	r3,4(r2)
   16ed0:	e0bffc17 	ldw	r2,-16(fp)
   16ed4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   16ed8:	e0bffc17 	ldw	r2,-16(fp)
   16edc:	10c00117 	ldw	r3,4(r2)
   16ee0:	e0bffc17 	ldw	r2,-16(fp)
   16ee4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   16ee8:	e0bffc17 	ldw	r2,-16(fp)
   16eec:	1000058d 	sth	zero,22(r2)
   16ef0:	e0bffb17 	ldw	r2,-20(fp)
   16ef4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ef8:	e0bffe17 	ldw	r2,-8(fp)
   16efc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16f00:	0005883a 	mov	r2,zero
}
   16f04:	e037883a 	mov	sp,fp
   16f08:	df000017 	ldw	fp,0(sp)
   16f0c:	dec00104 	addi	sp,sp,4
   16f10:	f800283a 	ret

00016f14 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   16f14:	defff304 	addi	sp,sp,-52
   16f18:	dfc00c15 	stw	ra,48(sp)
   16f1c:	df000b15 	stw	fp,44(sp)
   16f20:	df000b04 	addi	fp,sp,44
   16f24:	e13ffd15 	stw	r4,-12(fp)
   16f28:	2805883a 	mov	r2,r5
   16f2c:	e1bfff15 	stw	r6,-4(fp)
   16f30:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16f34:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16f38:	e0bfff17 	ldw	r2,-4(fp)
   16f3c:	1000021e 	bne	r2,zero,16f48 <OSQPend+0x34>
        return ((void *)0);
   16f40:	0005883a 	mov	r2,zero
   16f44:	00009106 	br	1718c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   16f48:	e0bffd17 	ldw	r2,-12(fp)
   16f4c:	1000051e 	bne	r2,zero,16f64 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16f50:	e0bfff17 	ldw	r2,-4(fp)
   16f54:	00c00104 	movi	r3,4
   16f58:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16f5c:	0005883a 	mov	r2,zero
   16f60:	00008a06 	br	1718c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   16f64:	e0bffd17 	ldw	r2,-12(fp)
   16f68:	10800003 	ldbu	r2,0(r2)
   16f6c:	10803fcc 	andi	r2,r2,255
   16f70:	108000a0 	cmpeqi	r2,r2,2
   16f74:	1000051e 	bne	r2,zero,16f8c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16f78:	e0bfff17 	ldw	r2,-4(fp)
   16f7c:	00c00044 	movi	r3,1
   16f80:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16f84:	0005883a 	mov	r2,zero
   16f88:	00008006 	br	1718c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   16f8c:	d0a72b03 	ldbu	r2,-25428(gp)
   16f90:	10803fcc 	andi	r2,r2,255
   16f94:	10000526 	beq	r2,zero,16fac <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   16f98:	e0bfff17 	ldw	r2,-4(fp)
   16f9c:	00c00084 	movi	r3,2
   16fa0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16fa4:	0005883a 	mov	r2,zero
   16fa8:	00007806 	br	1718c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   16fac:	d0a71d03 	ldbu	r2,-25484(gp)
   16fb0:	10803fcc 	andi	r2,r2,255
   16fb4:	10000526 	beq	r2,zero,16fcc <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   16fb8:	e0bfff17 	ldw	r2,-4(fp)
   16fbc:	00c00344 	movi	r3,13
   16fc0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16fc4:	0005883a 	mov	r2,zero
   16fc8:	00007006 	br	1718c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16fcc:	0005303a 	rdctl	r2,status
   16fd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16fd4:	e0fffc17 	ldw	r3,-16(fp)
   16fd8:	00bfff84 	movi	r2,-2
   16fdc:	1884703a 	and	r2,r3,r2
   16fe0:	1001703a 	wrctl	status,r2
  
  return context;
   16fe4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16fe8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   16fec:	e0bffd17 	ldw	r2,-12(fp)
   16ff0:	10800117 	ldw	r2,4(r2)
   16ff4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   16ff8:	e0bff817 	ldw	r2,-32(fp)
   16ffc:	1080058b 	ldhu	r2,22(r2)
   17000:	10bfffcc 	andi	r2,r2,65535
   17004:	10001e26 	beq	r2,zero,17080 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   17008:	e0bff817 	ldw	r2,-32(fp)
   1700c:	10800417 	ldw	r2,16(r2)
   17010:	11000104 	addi	r4,r2,4
   17014:	e0fff817 	ldw	r3,-32(fp)
   17018:	19000415 	stw	r4,16(r3)
   1701c:	10800017 	ldw	r2,0(r2)
   17020:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   17024:	e0bff817 	ldw	r2,-32(fp)
   17028:	1080058b 	ldhu	r2,22(r2)
   1702c:	10bfffc4 	addi	r2,r2,-1
   17030:	1007883a 	mov	r3,r2
   17034:	e0bff817 	ldw	r2,-32(fp)
   17038:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1703c:	e0bff817 	ldw	r2,-32(fp)
   17040:	10c00417 	ldw	r3,16(r2)
   17044:	e0bff817 	ldw	r2,-32(fp)
   17048:	10800217 	ldw	r2,8(r2)
   1704c:	1880041e 	bne	r3,r2,17060 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   17050:	e0bff817 	ldw	r2,-32(fp)
   17054:	10c00117 	ldw	r3,4(r2)
   17058:	e0bff817 	ldw	r2,-32(fp)
   1705c:	10c00415 	stw	r3,16(r2)
   17060:	e0bff617 	ldw	r2,-40(fp)
   17064:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17068:	e0bff717 	ldw	r2,-36(fp)
   1706c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   17070:	e0bfff17 	ldw	r2,-4(fp)
   17074:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   17078:	e0bff517 	ldw	r2,-44(fp)
   1707c:	00004306 	br	1718c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   17080:	d0a72c17 	ldw	r2,-25424(gp)
   17084:	d0e72c17 	ldw	r3,-25424(gp)
   17088:	18c00c03 	ldbu	r3,48(r3)
   1708c:	18c00114 	ori	r3,r3,4
   17090:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   17094:	d0a72c17 	ldw	r2,-25424(gp)
   17098:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   1709c:	d0a72c17 	ldw	r2,-25424(gp)
   170a0:	e0fffe0b 	ldhu	r3,-8(fp)
   170a4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   170a8:	e13ffd17 	ldw	r4,-12(fp)
   170ac:	00139640 	call	13964 <OS_EventTaskWait>
   170b0:	e0bff617 	ldw	r2,-40(fp)
   170b4:	e0bffb15 	stw	r2,-20(fp)
   170b8:	e0bffb17 	ldw	r2,-20(fp)
   170bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   170c0:	00142180 	call	14218 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   170c4:	0005303a 	rdctl	r2,status
   170c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   170cc:	e0fff917 	ldw	r3,-28(fp)
   170d0:	00bfff84 	movi	r2,-2
   170d4:	1884703a 	and	r2,r3,r2
   170d8:	1001703a 	wrctl	status,r2
  
  return context;
   170dc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   170e0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   170e4:	d0a72c17 	ldw	r2,-25424(gp)
   170e8:	10800c43 	ldbu	r2,49(r2)
   170ec:	10803fcc 	andi	r2,r2,255
   170f0:	10000326 	beq	r2,zero,17100 <OSQPend+0x1ec>
   170f4:	108000a0 	cmpeqi	r2,r2,2
   170f8:	1000071e 	bne	r2,zero,17118 <OSQPend+0x204>
   170fc:	00000b06 	br	1712c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   17100:	d0a72c17 	ldw	r2,-25424(gp)
   17104:	10800917 	ldw	r2,36(r2)
   17108:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   1710c:	e0bfff17 	ldw	r2,-4(fp)
   17110:	10000005 	stb	zero,0(r2)
             break;
   17114:	00000e06 	br	17150 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   17118:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1711c:	e0bfff17 	ldw	r2,-4(fp)
   17120:	00c00384 	movi	r3,14
   17124:	10c00005 	stb	r3,0(r2)
             break;
   17128:	00000906 	br	17150 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1712c:	d0a72c17 	ldw	r2,-25424(gp)
   17130:	e17ffd17 	ldw	r5,-12(fp)
   17134:	1009883a 	mov	r4,r2
   17138:	0013bc40 	call	13bc4 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1713c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   17140:	e0bfff17 	ldw	r2,-4(fp)
   17144:	00c00284 	movi	r3,10
   17148:	10c00005 	stb	r3,0(r2)
             break;
   1714c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   17150:	d0a72c17 	ldw	r2,-25424(gp)
   17154:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   17158:	d0a72c17 	ldw	r2,-25424(gp)
   1715c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   17160:	d0a72c17 	ldw	r2,-25424(gp)
   17164:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   17168:	d0a72c17 	ldw	r2,-25424(gp)
   1716c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   17170:	d0a72c17 	ldw	r2,-25424(gp)
   17174:	10000915 	stw	zero,36(r2)
   17178:	e0bff617 	ldw	r2,-40(fp)
   1717c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17180:	e0bffa17 	ldw	r2,-24(fp)
   17184:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   17188:	e0bff517 	ldw	r2,-44(fp)
}
   1718c:	e037883a 	mov	sp,fp
   17190:	dfc00117 	ldw	ra,4(sp)
   17194:	df000017 	ldw	fp,0(sp)
   17198:	dec00204 	addi	sp,sp,8
   1719c:	f800283a 	ret

000171a0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   171a0:	defff604 	addi	sp,sp,-40
   171a4:	dfc00915 	stw	ra,36(sp)
   171a8:	df000815 	stw	fp,32(sp)
   171ac:	df000804 	addi	fp,sp,32
   171b0:	e13ffd15 	stw	r4,-12(fp)
   171b4:	2805883a 	mov	r2,r5
   171b8:	e1bfff15 	stw	r6,-4(fp)
   171bc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   171c0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   171c4:	e0bfff17 	ldw	r2,-4(fp)
   171c8:	1000021e 	bne	r2,zero,171d4 <OSQPendAbort+0x34>
        return (0);
   171cc:	0005883a 	mov	r2,zero
   171d0:	00004906 	br	172f8 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   171d4:	e0bffd17 	ldw	r2,-12(fp)
   171d8:	1000051e 	bne	r2,zero,171f0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   171dc:	e0bfff17 	ldw	r2,-4(fp)
   171e0:	00c00104 	movi	r3,4
   171e4:	10c00005 	stb	r3,0(r2)
        return (0);
   171e8:	0005883a 	mov	r2,zero
   171ec:	00004206 	br	172f8 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   171f0:	e0bffd17 	ldw	r2,-12(fp)
   171f4:	10800003 	ldbu	r2,0(r2)
   171f8:	10803fcc 	andi	r2,r2,255
   171fc:	108000a0 	cmpeqi	r2,r2,2
   17200:	1000051e 	bne	r2,zero,17218 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17204:	e0bfff17 	ldw	r2,-4(fp)
   17208:	00c00044 	movi	r3,1
   1720c:	10c00005 	stb	r3,0(r2)
        return (0);
   17210:	0005883a 	mov	r2,zero
   17214:	00003806 	br	172f8 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17218:	0005303a 	rdctl	r2,status
   1721c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17220:	e0fffc17 	ldw	r3,-16(fp)
   17224:	00bfff84 	movi	r2,-2
   17228:	1884703a 	and	r2,r3,r2
   1722c:	1001703a 	wrctl	status,r2
  
  return context;
   17230:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17234:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   17238:	e0bffd17 	ldw	r2,-12(fp)
   1723c:	10800283 	ldbu	r2,10(r2)
   17240:	10803fcc 	andi	r2,r2,255
   17244:	10002526 	beq	r2,zero,172dc <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   17248:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1724c:	e0bffe03 	ldbu	r2,-8(fp)
   17250:	10800060 	cmpeqi	r2,r2,1
   17254:	10000e26 	beq	r2,zero,17290 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   17258:	00000806 	br	1727c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1725c:	01c00084 	movi	r7,2
   17260:	01800104 	movi	r6,4
   17264:	000b883a 	mov	r5,zero
   17268:	e13ffd17 	ldw	r4,-12(fp)
   1726c:	00137cc0 	call	137cc <OS_EventTaskRdy>
                     nbr_tasks++;
   17270:	e0bff803 	ldbu	r2,-32(fp)
   17274:	10800044 	addi	r2,r2,1
   17278:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1727c:	e0bffd17 	ldw	r2,-12(fp)
   17280:	10800283 	ldbu	r2,10(r2)
   17284:	10803fcc 	andi	r2,r2,255
   17288:	103ff41e 	bne	r2,zero,1725c <__alt_data_end+0xfffe651c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1728c:	00000906 	br	172b4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   17290:	01c00084 	movi	r7,2
   17294:	01800104 	movi	r6,4
   17298:	000b883a 	mov	r5,zero
   1729c:	e13ffd17 	ldw	r4,-12(fp)
   172a0:	00137cc0 	call	137cc <OS_EventTaskRdy>
                 nbr_tasks++;
   172a4:	e0bff803 	ldbu	r2,-32(fp)
   172a8:	10800044 	addi	r2,r2,1
   172ac:	e0bff805 	stb	r2,-32(fp)
                 break;
   172b0:	0001883a 	nop
   172b4:	e0bff917 	ldw	r2,-28(fp)
   172b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   172bc:	e0bffa17 	ldw	r2,-24(fp)
   172c0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   172c4:	00142180 	call	14218 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   172c8:	e0bfff17 	ldw	r2,-4(fp)
   172cc:	00c00384 	movi	r3,14
   172d0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   172d4:	e0bff803 	ldbu	r2,-32(fp)
   172d8:	00000706 	br	172f8 <OSQPendAbort+0x158>
   172dc:	e0bff917 	ldw	r2,-28(fp)
   172e0:	e0bffb15 	stw	r2,-20(fp)
   172e4:	e0bffb17 	ldw	r2,-20(fp)
   172e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   172ec:	e0bfff17 	ldw	r2,-4(fp)
   172f0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   172f4:	0005883a 	mov	r2,zero
}
   172f8:	e037883a 	mov	sp,fp
   172fc:	dfc00117 	ldw	ra,4(sp)
   17300:	df000017 	ldw	fp,0(sp)
   17304:	dec00204 	addi	sp,sp,8
   17308:	f800283a 	ret

0001730c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   1730c:	defff604 	addi	sp,sp,-40
   17310:	dfc00915 	stw	ra,36(sp)
   17314:	df000815 	stw	fp,32(sp)
   17318:	df000804 	addi	fp,sp,32
   1731c:	e13ffe15 	stw	r4,-8(fp)
   17320:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17324:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   17328:	e0bffe17 	ldw	r2,-8(fp)
   1732c:	1000021e 	bne	r2,zero,17338 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17330:	00800104 	movi	r2,4
   17334:	00004a06 	br	17460 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   17338:	e0bffe17 	ldw	r2,-8(fp)
   1733c:	10800003 	ldbu	r2,0(r2)
   17340:	10803fcc 	andi	r2,r2,255
   17344:	108000a0 	cmpeqi	r2,r2,2
   17348:	1000021e 	bne	r2,zero,17354 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   1734c:	00800044 	movi	r2,1
   17350:	00004306 	br	17460 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17354:	0005303a 	rdctl	r2,status
   17358:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1735c:	e0fffd17 	ldw	r3,-12(fp)
   17360:	00bfff84 	movi	r2,-2
   17364:	1884703a 	and	r2,r3,r2
   17368:	1001703a 	wrctl	status,r2
  
  return context;
   1736c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17370:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   17374:	e0bffe17 	ldw	r2,-8(fp)
   17378:	10800283 	ldbu	r2,10(r2)
   1737c:	10803fcc 	andi	r2,r2,255
   17380:	10000c26 	beq	r2,zero,173b4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17384:	000f883a 	mov	r7,zero
   17388:	01800104 	movi	r6,4
   1738c:	e17fff17 	ldw	r5,-4(fp)
   17390:	e13ffe17 	ldw	r4,-8(fp)
   17394:	00137cc0 	call	137cc <OS_EventTaskRdy>
   17398:	e0bff817 	ldw	r2,-32(fp)
   1739c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   173a0:	e0bff917 	ldw	r2,-28(fp)
   173a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   173a8:	00142180 	call	14218 <OS_Sched>
        return (OS_ERR_NONE);
   173ac:	0005883a 	mov	r2,zero
   173b0:	00002b06 	br	17460 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   173b4:	e0bffe17 	ldw	r2,-8(fp)
   173b8:	10800117 	ldw	r2,4(r2)
   173bc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   173c0:	e0bffb17 	ldw	r2,-20(fp)
   173c4:	10c0058b 	ldhu	r3,22(r2)
   173c8:	e0bffb17 	ldw	r2,-20(fp)
   173cc:	1080050b 	ldhu	r2,20(r2)
   173d0:	18ffffcc 	andi	r3,r3,65535
   173d4:	10bfffcc 	andi	r2,r2,65535
   173d8:	18800636 	bltu	r3,r2,173f4 <OSQPost+0xe8>
   173dc:	e0bff817 	ldw	r2,-32(fp)
   173e0:	e0bffa15 	stw	r2,-24(fp)
   173e4:	e0bffa17 	ldw	r2,-24(fp)
   173e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   173ec:	00800784 	movi	r2,30
   173f0:	00001b06 	br	17460 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   173f4:	e0bffb17 	ldw	r2,-20(fp)
   173f8:	10800317 	ldw	r2,12(r2)
   173fc:	11000104 	addi	r4,r2,4
   17400:	e0fffb17 	ldw	r3,-20(fp)
   17404:	19000315 	stw	r4,12(r3)
   17408:	e0ffff17 	ldw	r3,-4(fp)
   1740c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   17410:	e0bffb17 	ldw	r2,-20(fp)
   17414:	1080058b 	ldhu	r2,22(r2)
   17418:	10800044 	addi	r2,r2,1
   1741c:	1007883a 	mov	r3,r2
   17420:	e0bffb17 	ldw	r2,-20(fp)
   17424:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   17428:	e0bffb17 	ldw	r2,-20(fp)
   1742c:	10c00317 	ldw	r3,12(r2)
   17430:	e0bffb17 	ldw	r2,-20(fp)
   17434:	10800217 	ldw	r2,8(r2)
   17438:	1880041e 	bne	r3,r2,1744c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   1743c:	e0bffb17 	ldw	r2,-20(fp)
   17440:	10c00117 	ldw	r3,4(r2)
   17444:	e0bffb17 	ldw	r2,-20(fp)
   17448:	10c00315 	stw	r3,12(r2)
   1744c:	e0bff817 	ldw	r2,-32(fp)
   17450:	e0bffc15 	stw	r2,-16(fp)
   17454:	e0bffc17 	ldw	r2,-16(fp)
   17458:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1745c:	0005883a 	mov	r2,zero
}
   17460:	e037883a 	mov	sp,fp
   17464:	dfc00117 	ldw	ra,4(sp)
   17468:	df000017 	ldw	fp,0(sp)
   1746c:	dec00204 	addi	sp,sp,8
   17470:	f800283a 	ret

00017474 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   17474:	defff604 	addi	sp,sp,-40
   17478:	dfc00915 	stw	ra,36(sp)
   1747c:	df000815 	stw	fp,32(sp)
   17480:	df000804 	addi	fp,sp,32
   17484:	e13ffe15 	stw	r4,-8(fp)
   17488:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1748c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17490:	e0bffe17 	ldw	r2,-8(fp)
   17494:	1000021e 	bne	r2,zero,174a0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17498:	00800104 	movi	r2,4
   1749c:	00004c06 	br	175d0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   174a0:	e0bffe17 	ldw	r2,-8(fp)
   174a4:	10800003 	ldbu	r2,0(r2)
   174a8:	10803fcc 	andi	r2,r2,255
   174ac:	108000a0 	cmpeqi	r2,r2,2
   174b0:	1000021e 	bne	r2,zero,174bc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   174b4:	00800044 	movi	r2,1
   174b8:	00004506 	br	175d0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   174bc:	0005303a 	rdctl	r2,status
   174c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174c4:	e0fffd17 	ldw	r3,-12(fp)
   174c8:	00bfff84 	movi	r2,-2
   174cc:	1884703a 	and	r2,r3,r2
   174d0:	1001703a 	wrctl	status,r2
  
  return context;
   174d4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   174d8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   174dc:	e0bffe17 	ldw	r2,-8(fp)
   174e0:	10800283 	ldbu	r2,10(r2)
   174e4:	10803fcc 	andi	r2,r2,255
   174e8:	10000c26 	beq	r2,zero,1751c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   174ec:	000f883a 	mov	r7,zero
   174f0:	01800104 	movi	r6,4
   174f4:	e17fff17 	ldw	r5,-4(fp)
   174f8:	e13ffe17 	ldw	r4,-8(fp)
   174fc:	00137cc0 	call	137cc <OS_EventTaskRdy>
   17500:	e0bff817 	ldw	r2,-32(fp)
   17504:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17508:	e0bff917 	ldw	r2,-28(fp)
   1750c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17510:	00142180 	call	14218 <OS_Sched>
        return (OS_ERR_NONE);
   17514:	0005883a 	mov	r2,zero
   17518:	00002d06 	br	175d0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1751c:	e0bffe17 	ldw	r2,-8(fp)
   17520:	10800117 	ldw	r2,4(r2)
   17524:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   17528:	e0bffb17 	ldw	r2,-20(fp)
   1752c:	10c0058b 	ldhu	r3,22(r2)
   17530:	e0bffb17 	ldw	r2,-20(fp)
   17534:	1080050b 	ldhu	r2,20(r2)
   17538:	18ffffcc 	andi	r3,r3,65535
   1753c:	10bfffcc 	andi	r2,r2,65535
   17540:	18800636 	bltu	r3,r2,1755c <OSQPostFront+0xe8>
   17544:	e0bff817 	ldw	r2,-32(fp)
   17548:	e0bffa15 	stw	r2,-24(fp)
   1754c:	e0bffa17 	ldw	r2,-24(fp)
   17550:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17554:	00800784 	movi	r2,30
   17558:	00001d06 	br	175d0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   1755c:	e0bffb17 	ldw	r2,-20(fp)
   17560:	10c00417 	ldw	r3,16(r2)
   17564:	e0bffb17 	ldw	r2,-20(fp)
   17568:	10800117 	ldw	r2,4(r2)
   1756c:	1880041e 	bne	r3,r2,17580 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   17570:	e0bffb17 	ldw	r2,-20(fp)
   17574:	10c00217 	ldw	r3,8(r2)
   17578:	e0bffb17 	ldw	r2,-20(fp)
   1757c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   17580:	e0bffb17 	ldw	r2,-20(fp)
   17584:	10800417 	ldw	r2,16(r2)
   17588:	10ffff04 	addi	r3,r2,-4
   1758c:	e0bffb17 	ldw	r2,-20(fp)
   17590:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   17594:	e0bffb17 	ldw	r2,-20(fp)
   17598:	10800417 	ldw	r2,16(r2)
   1759c:	e0ffff17 	ldw	r3,-4(fp)
   175a0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   175a4:	e0bffb17 	ldw	r2,-20(fp)
   175a8:	1080058b 	ldhu	r2,22(r2)
   175ac:	10800044 	addi	r2,r2,1
   175b0:	1007883a 	mov	r3,r2
   175b4:	e0bffb17 	ldw	r2,-20(fp)
   175b8:	10c0058d 	sth	r3,22(r2)
   175bc:	e0bff817 	ldw	r2,-32(fp)
   175c0:	e0bffc15 	stw	r2,-16(fp)
   175c4:	e0bffc17 	ldw	r2,-16(fp)
   175c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   175cc:	0005883a 	mov	r2,zero
}
   175d0:	e037883a 	mov	sp,fp
   175d4:	dfc00117 	ldw	ra,4(sp)
   175d8:	df000017 	ldw	fp,0(sp)
   175dc:	dec00204 	addi	sp,sp,8
   175e0:	f800283a 	ret

000175e4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   175e4:	defff504 	addi	sp,sp,-44
   175e8:	dfc00a15 	stw	ra,40(sp)
   175ec:	df000915 	stw	fp,36(sp)
   175f0:	df000904 	addi	fp,sp,36
   175f4:	e13ffd15 	stw	r4,-12(fp)
   175f8:	e17ffe15 	stw	r5,-8(fp)
   175fc:	3005883a 	mov	r2,r6
   17600:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17604:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17608:	e0bffd17 	ldw	r2,-12(fp)
   1760c:	1000021e 	bne	r2,zero,17618 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   17610:	00800104 	movi	r2,4
   17614:	00007106 	br	177dc <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   17618:	e0bffd17 	ldw	r2,-12(fp)
   1761c:	10800003 	ldbu	r2,0(r2)
   17620:	10803fcc 	andi	r2,r2,255
   17624:	108000a0 	cmpeqi	r2,r2,2
   17628:	1000021e 	bne	r2,zero,17634 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   1762c:	00800044 	movi	r2,1
   17630:	00006a06 	br	177dc <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17634:	0005303a 	rdctl	r2,status
   17638:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1763c:	e0fffc17 	ldw	r3,-16(fp)
   17640:	00bfff84 	movi	r2,-2
   17644:	1884703a 	and	r2,r3,r2
   17648:	1001703a 	wrctl	status,r2
  
  return context;
   1764c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17650:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   17654:	e0bffd17 	ldw	r2,-12(fp)
   17658:	10800283 	ldbu	r2,10(r2)
   1765c:	10803fcc 	andi	r2,r2,255
   17660:	10001d26 	beq	r2,zero,176d8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   17664:	e0bfff03 	ldbu	r2,-4(fp)
   17668:	1080004c 	andi	r2,r2,1
   1766c:	10000b26 	beq	r2,zero,1769c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   17670:	00000506 	br	17688 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   17674:	000f883a 	mov	r7,zero
   17678:	01800104 	movi	r6,4
   1767c:	e17ffe17 	ldw	r5,-8(fp)
   17680:	e13ffd17 	ldw	r4,-12(fp)
   17684:	00137cc0 	call	137cc <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   17688:	e0bffd17 	ldw	r2,-12(fp)
   1768c:	10800283 	ldbu	r2,10(r2)
   17690:	10803fcc 	andi	r2,r2,255
   17694:	103ff71e 	bne	r2,zero,17674 <__alt_data_end+0xfffe6934>
   17698:	00000506 	br	176b0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1769c:	000f883a 	mov	r7,zero
   176a0:	01800104 	movi	r6,4
   176a4:	e17ffe17 	ldw	r5,-8(fp)
   176a8:	e13ffd17 	ldw	r4,-12(fp)
   176ac:	00137cc0 	call	137cc <OS_EventTaskRdy>
   176b0:	e0bff717 	ldw	r2,-36(fp)
   176b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   176b8:	e0bff817 	ldw	r2,-32(fp)
   176bc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   176c0:	e0bfff03 	ldbu	r2,-4(fp)
   176c4:	1080010c 	andi	r2,r2,4
   176c8:	1000011e 	bne	r2,zero,176d0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   176cc:	00142180 	call	14218 <OS_Sched>
        }
        return (OS_ERR_NONE);
   176d0:	0005883a 	mov	r2,zero
   176d4:	00004106 	br	177dc <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   176d8:	e0bffd17 	ldw	r2,-12(fp)
   176dc:	10800117 	ldw	r2,4(r2)
   176e0:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   176e4:	e0bffa17 	ldw	r2,-24(fp)
   176e8:	10c0058b 	ldhu	r3,22(r2)
   176ec:	e0bffa17 	ldw	r2,-24(fp)
   176f0:	1080050b 	ldhu	r2,20(r2)
   176f4:	18ffffcc 	andi	r3,r3,65535
   176f8:	10bfffcc 	andi	r2,r2,65535
   176fc:	18800636 	bltu	r3,r2,17718 <OSQPostOpt+0x134>
   17700:	e0bff717 	ldw	r2,-36(fp)
   17704:	e0bff915 	stw	r2,-28(fp)
   17708:	e0bff917 	ldw	r2,-28(fp)
   1770c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   17710:	00800784 	movi	r2,30
   17714:	00003106 	br	177dc <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   17718:	e0bfff03 	ldbu	r2,-4(fp)
   1771c:	1080008c 	andi	r2,r2,2
   17720:	10001326 	beq	r2,zero,17770 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   17724:	e0bffa17 	ldw	r2,-24(fp)
   17728:	10c00417 	ldw	r3,16(r2)
   1772c:	e0bffa17 	ldw	r2,-24(fp)
   17730:	10800117 	ldw	r2,4(r2)
   17734:	1880041e 	bne	r3,r2,17748 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   17738:	e0bffa17 	ldw	r2,-24(fp)
   1773c:	10c00217 	ldw	r3,8(r2)
   17740:	e0bffa17 	ldw	r2,-24(fp)
   17744:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   17748:	e0bffa17 	ldw	r2,-24(fp)
   1774c:	10800417 	ldw	r2,16(r2)
   17750:	10ffff04 	addi	r3,r2,-4
   17754:	e0bffa17 	ldw	r2,-24(fp)
   17758:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   1775c:	e0bffa17 	ldw	r2,-24(fp)
   17760:	10800417 	ldw	r2,16(r2)
   17764:	e0fffe17 	ldw	r3,-8(fp)
   17768:	10c00015 	stw	r3,0(r2)
   1776c:	00001006 	br	177b0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   17770:	e0bffa17 	ldw	r2,-24(fp)
   17774:	10800317 	ldw	r2,12(r2)
   17778:	11000104 	addi	r4,r2,4
   1777c:	e0fffa17 	ldw	r3,-24(fp)
   17780:	19000315 	stw	r4,12(r3)
   17784:	e0fffe17 	ldw	r3,-8(fp)
   17788:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   1778c:	e0bffa17 	ldw	r2,-24(fp)
   17790:	10c00317 	ldw	r3,12(r2)
   17794:	e0bffa17 	ldw	r2,-24(fp)
   17798:	10800217 	ldw	r2,8(r2)
   1779c:	1880041e 	bne	r3,r2,177b0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   177a0:	e0bffa17 	ldw	r2,-24(fp)
   177a4:	10c00117 	ldw	r3,4(r2)
   177a8:	e0bffa17 	ldw	r2,-24(fp)
   177ac:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   177b0:	e0bffa17 	ldw	r2,-24(fp)
   177b4:	1080058b 	ldhu	r2,22(r2)
   177b8:	10800044 	addi	r2,r2,1
   177bc:	1007883a 	mov	r3,r2
   177c0:	e0bffa17 	ldw	r2,-24(fp)
   177c4:	10c0058d 	sth	r3,22(r2)
   177c8:	e0bff717 	ldw	r2,-36(fp)
   177cc:	e0bffb15 	stw	r2,-20(fp)
   177d0:	e0bffb17 	ldw	r2,-20(fp)
   177d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   177d8:	0005883a 	mov	r2,zero
}
   177dc:	e037883a 	mov	sp,fp
   177e0:	dfc00117 	ldw	ra,4(sp)
   177e4:	df000017 	ldw	fp,0(sp)
   177e8:	dec00204 	addi	sp,sp,8
   177ec:	f800283a 	ret

000177f0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   177f0:	defff604 	addi	sp,sp,-40
   177f4:	df000915 	stw	fp,36(sp)
   177f8:	df000904 	addi	fp,sp,36
   177fc:	e13ffe15 	stw	r4,-8(fp)
   17800:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17804:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   17808:	e0bffe17 	ldw	r2,-8(fp)
   1780c:	1000021e 	bne	r2,zero,17818 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   17810:	00800104 	movi	r2,4
   17814:	00004906 	br	1793c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   17818:	e0bfff17 	ldw	r2,-4(fp)
   1781c:	1000021e 	bne	r2,zero,17828 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   17820:	00800244 	movi	r2,9
   17824:	00004506 	br	1793c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   17828:	e0bffe17 	ldw	r2,-8(fp)
   1782c:	10800003 	ldbu	r2,0(r2)
   17830:	10803fcc 	andi	r2,r2,255
   17834:	108000a0 	cmpeqi	r2,r2,2
   17838:	1000021e 	bne	r2,zero,17844 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1783c:	00800044 	movi	r2,1
   17840:	00003e06 	br	1793c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17844:	0005303a 	rdctl	r2,status
   17848:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1784c:	e0fffd17 	ldw	r3,-12(fp)
   17850:	00bfff84 	movi	r2,-2
   17854:	1884703a 	and	r2,r3,r2
   17858:	1001703a 	wrctl	status,r2
  
  return context;
   1785c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17860:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   17864:	e0bffe17 	ldw	r2,-8(fp)
   17868:	10c00283 	ldbu	r3,10(r2)
   1786c:	e0bfff17 	ldw	r2,-4(fp)
   17870:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   17874:	e0bffe17 	ldw	r2,-8(fp)
   17878:	108002c4 	addi	r2,r2,11
   1787c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   17880:	e0bfff17 	ldw	r2,-4(fp)
   17884:	10800204 	addi	r2,r2,8
   17888:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1788c:	e03ff705 	stb	zero,-36(fp)
   17890:	00000b06 	br	178c0 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   17894:	e0bff917 	ldw	r2,-28(fp)
   17898:	10c00044 	addi	r3,r2,1
   1789c:	e0fff915 	stw	r3,-28(fp)
   178a0:	e0fff817 	ldw	r3,-32(fp)
   178a4:	19000044 	addi	r4,r3,1
   178a8:	e13ff815 	stw	r4,-32(fp)
   178ac:	18c00003 	ldbu	r3,0(r3)
   178b0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   178b4:	e0bff703 	ldbu	r2,-36(fp)
   178b8:	10800044 	addi	r2,r2,1
   178bc:	e0bff705 	stb	r2,-36(fp)
   178c0:	e0bff703 	ldbu	r2,-36(fp)
   178c4:	108000f0 	cmpltui	r2,r2,3
   178c8:	103ff21e 	bne	r2,zero,17894 <__alt_data_end+0xfffe6b54>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   178cc:	e0bffe17 	ldw	r2,-8(fp)
   178d0:	10800117 	ldw	r2,4(r2)
   178d4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   178d8:	e0bffc17 	ldw	r2,-16(fp)
   178dc:	1080058b 	ldhu	r2,22(r2)
   178e0:	10bfffcc 	andi	r2,r2,65535
   178e4:	10000626 	beq	r2,zero,17900 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   178e8:	e0bffc17 	ldw	r2,-16(fp)
   178ec:	10800417 	ldw	r2,16(r2)
   178f0:	10c00017 	ldw	r3,0(r2)
   178f4:	e0bfff17 	ldw	r2,-4(fp)
   178f8:	10c00015 	stw	r3,0(r2)
   178fc:	00000206 	br	17908 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   17900:	e0bfff17 	ldw	r2,-4(fp)
   17904:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   17908:	e0bffc17 	ldw	r2,-16(fp)
   1790c:	10c0058b 	ldhu	r3,22(r2)
   17910:	e0bfff17 	ldw	r2,-4(fp)
   17914:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   17918:	e0bffc17 	ldw	r2,-16(fp)
   1791c:	10c0050b 	ldhu	r3,20(r2)
   17920:	e0bfff17 	ldw	r2,-4(fp)
   17924:	10c0018d 	sth	r3,6(r2)
   17928:	e0bffa17 	ldw	r2,-24(fp)
   1792c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17930:	e0bffb17 	ldw	r2,-20(fp)
   17934:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17938:	0005883a 	mov	r2,zero
}
   1793c:	e037883a 	mov	sp,fp
   17940:	df000017 	ldw	fp,0(sp)
   17944:	dec00104 	addi	sp,sp,4
   17948:	f800283a 	ret

0001794c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1794c:	defffb04 	addi	sp,sp,-20
   17950:	dfc00415 	stw	ra,16(sp)
   17954:	df000315 	stw	fp,12(sp)
   17958:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1795c:	01407804 	movi	r5,480
   17960:	010000b4 	movhi	r4,2
   17964:	210ece04 	addi	r4,r4,15160
   17968:	001415c0 	call	1415c <OS_MemClr>
    pq1 = &OSQTbl[0];
   1796c:	008000b4 	movhi	r2,2
   17970:	108ece04 	addi	r2,r2,15160
   17974:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   17978:	008000b4 	movhi	r2,2
   1797c:	108ed404 	addi	r2,r2,15184
   17980:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   17984:	e03ffd0d 	sth	zero,-12(fp)
   17988:	00000c06 	br	179bc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   1798c:	e0bffe17 	ldw	r2,-8(fp)
   17990:	e0ffff17 	ldw	r3,-4(fp)
   17994:	10c00015 	stw	r3,0(r2)
        pq1++;
   17998:	e0bffe17 	ldw	r2,-8(fp)
   1799c:	10800604 	addi	r2,r2,24
   179a0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   179a4:	e0bfff17 	ldw	r2,-4(fp)
   179a8:	10800604 	addi	r2,r2,24
   179ac:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   179b0:	e0bffd0b 	ldhu	r2,-12(fp)
   179b4:	10800044 	addi	r2,r2,1
   179b8:	e0bffd0d 	sth	r2,-12(fp)
   179bc:	e0bffd0b 	ldhu	r2,-12(fp)
   179c0:	108004f0 	cmpltui	r2,r2,19
   179c4:	103ff11e 	bne	r2,zero,1798c <__alt_data_end+0xfffe6c4c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   179c8:	e0bffe17 	ldw	r2,-8(fp)
   179cc:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   179d0:	008000b4 	movhi	r2,2
   179d4:	108ece04 	addi	r2,r2,15160
   179d8:	d0a72815 	stw	r2,-25440(gp)
#endif
}
   179dc:	0001883a 	nop
   179e0:	e037883a 	mov	sp,fp
   179e4:	dfc00117 	ldw	ra,4(sp)
   179e8:	df000017 	ldw	fp,0(sp)
   179ec:	dec00204 	addi	sp,sp,8
   179f0:	f800283a 	ret

000179f4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   179f4:	defffa04 	addi	sp,sp,-24
   179f8:	df000515 	stw	fp,20(sp)
   179fc:	df000504 	addi	fp,sp,20
   17a00:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17a04:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17a08:	e0bfff17 	ldw	r2,-4(fp)
   17a0c:	1000021e 	bne	r2,zero,17a18 <OSSemAccept+0x24>
        return (0);
   17a10:	0005883a 	mov	r2,zero
   17a14:	00001f06 	br	17a94 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   17a18:	e0bfff17 	ldw	r2,-4(fp)
   17a1c:	10800003 	ldbu	r2,0(r2)
   17a20:	10803fcc 	andi	r2,r2,255
   17a24:	108000e0 	cmpeqi	r2,r2,3
   17a28:	1000021e 	bne	r2,zero,17a34 <OSSemAccept+0x40>
        return (0);
   17a2c:	0005883a 	mov	r2,zero
   17a30:	00001806 	br	17a94 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a34:	0005303a 	rdctl	r2,status
   17a38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a3c:	e0fffe17 	ldw	r3,-8(fp)
   17a40:	00bfff84 	movi	r2,-2
   17a44:	1884703a 	and	r2,r3,r2
   17a48:	1001703a 	wrctl	status,r2
  
  return context;
   17a4c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   17a50:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   17a54:	e0bfff17 	ldw	r2,-4(fp)
   17a58:	1080020b 	ldhu	r2,8(r2)
   17a5c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   17a60:	e0bffd0b 	ldhu	r2,-12(fp)
   17a64:	10000626 	beq	r2,zero,17a80 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   17a68:	e0bfff17 	ldw	r2,-4(fp)
   17a6c:	1080020b 	ldhu	r2,8(r2)
   17a70:	10bfffc4 	addi	r2,r2,-1
   17a74:	1007883a 	mov	r3,r2
   17a78:	e0bfff17 	ldw	r2,-4(fp)
   17a7c:	10c0020d 	sth	r3,8(r2)
   17a80:	e0bffb17 	ldw	r2,-20(fp)
   17a84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a88:	e0bffc17 	ldw	r2,-16(fp)
   17a8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   17a90:	e0bffd0b 	ldhu	r2,-12(fp)
}
   17a94:	e037883a 	mov	sp,fp
   17a98:	df000017 	ldw	fp,0(sp)
   17a9c:	dec00104 	addi	sp,sp,4
   17aa0:	f800283a 	ret

00017aa4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   17aa4:	defff904 	addi	sp,sp,-28
   17aa8:	dfc00615 	stw	ra,24(sp)
   17aac:	df000515 	stw	fp,20(sp)
   17ab0:	df000504 	addi	fp,sp,20
   17ab4:	2005883a 	mov	r2,r4
   17ab8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17abc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17ac0:	d0a72b03 	ldbu	r2,-25428(gp)
   17ac4:	10803fcc 	andi	r2,r2,255
   17ac8:	10000226 	beq	r2,zero,17ad4 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   17acc:	0005883a 	mov	r2,zero
   17ad0:	00002506 	br	17b68 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ad4:	0005303a 	rdctl	r2,status
   17ad8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17adc:	e0fffe17 	ldw	r3,-8(fp)
   17ae0:	00bfff84 	movi	r2,-2
   17ae4:	1884703a 	and	r2,r3,r2
   17ae8:	1001703a 	wrctl	status,r2
  
  return context;
   17aec:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   17af0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   17af4:	d0a72a17 	ldw	r2,-25432(gp)
   17af8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   17afc:	d0a72a17 	ldw	r2,-25432(gp)
   17b00:	10000326 	beq	r2,zero,17b10 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   17b04:	d0a72a17 	ldw	r2,-25432(gp)
   17b08:	10800117 	ldw	r2,4(r2)
   17b0c:	d0a72a15 	stw	r2,-25432(gp)
   17b10:	e0bffb17 	ldw	r2,-20(fp)
   17b14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b18:	e0bffc17 	ldw	r2,-16(fp)
   17b1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   17b20:	e0bffd17 	ldw	r2,-12(fp)
   17b24:	10000f26 	beq	r2,zero,17b64 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   17b28:	e0bffd17 	ldw	r2,-12(fp)
   17b2c:	00c000c4 	movi	r3,3
   17b30:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   17b34:	e0bffd17 	ldw	r2,-12(fp)
   17b38:	e0ffff0b 	ldhu	r3,-4(fp)
   17b3c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   17b40:	e0bffd17 	ldw	r2,-12(fp)
   17b44:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   17b48:	e0bffd17 	ldw	r2,-12(fp)
   17b4c:	00c00fc4 	movi	r3,63
   17b50:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   17b54:	e0bffd17 	ldw	r2,-12(fp)
   17b58:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   17b5c:	e13ffd17 	ldw	r4,-12(fp)
   17b60:	0013d7c0 	call	13d7c <OS_EventWaitListInit>
    }
    return (pevent);
   17b64:	e0bffd17 	ldw	r2,-12(fp)
}
   17b68:	e037883a 	mov	sp,fp
   17b6c:	dfc00117 	ldw	ra,4(sp)
   17b70:	df000017 	ldw	fp,0(sp)
   17b74:	dec00204 	addi	sp,sp,8
   17b78:	f800283a 	ret

00017b7c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17b7c:	defff304 	addi	sp,sp,-52
   17b80:	dfc00c15 	stw	ra,48(sp)
   17b84:	df000b15 	stw	fp,44(sp)
   17b88:	df000b04 	addi	fp,sp,44
   17b8c:	e13ffd15 	stw	r4,-12(fp)
   17b90:	2805883a 	mov	r2,r5
   17b94:	e1bfff15 	stw	r6,-4(fp)
   17b98:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17b9c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17ba0:	e0bfff17 	ldw	r2,-4(fp)
   17ba4:	1000021e 	bne	r2,zero,17bb0 <OSSemDel+0x34>
        return (pevent);
   17ba8:	e0bffd17 	ldw	r2,-12(fp)
   17bac:	00007e06 	br	17da8 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17bb0:	e0bffd17 	ldw	r2,-12(fp)
   17bb4:	1000051e 	bne	r2,zero,17bcc <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17bb8:	e0bfff17 	ldw	r2,-4(fp)
   17bbc:	00c00104 	movi	r3,4
   17bc0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17bc4:	e0bffd17 	ldw	r2,-12(fp)
   17bc8:	00007706 	br	17da8 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   17bcc:	e0bffd17 	ldw	r2,-12(fp)
   17bd0:	10800003 	ldbu	r2,0(r2)
   17bd4:	10803fcc 	andi	r2,r2,255
   17bd8:	108000e0 	cmpeqi	r2,r2,3
   17bdc:	1000051e 	bne	r2,zero,17bf4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17be0:	e0bfff17 	ldw	r2,-4(fp)
   17be4:	00c00044 	movi	r3,1
   17be8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17bec:	e0bffd17 	ldw	r2,-12(fp)
   17bf0:	00006d06 	br	17da8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17bf4:	d0a72b03 	ldbu	r2,-25428(gp)
   17bf8:	10803fcc 	andi	r2,r2,255
   17bfc:	10000526 	beq	r2,zero,17c14 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   17c00:	e0bfff17 	ldw	r2,-4(fp)
   17c04:	00c003c4 	movi	r3,15
   17c08:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17c0c:	e0bffd17 	ldw	r2,-12(fp)
   17c10:	00006506 	br	17da8 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17c14:	0005303a 	rdctl	r2,status
   17c18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17c1c:	e0fffc17 	ldw	r3,-16(fp)
   17c20:	00bfff84 	movi	r2,-2
   17c24:	1884703a 	and	r2,r3,r2
   17c28:	1001703a 	wrctl	status,r2
  
  return context;
   17c2c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17c30:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   17c34:	e0bffd17 	ldw	r2,-12(fp)
   17c38:	10800283 	ldbu	r2,10(r2)
   17c3c:	10803fcc 	andi	r2,r2,255
   17c40:	10000326 	beq	r2,zero,17c50 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   17c44:	00800044 	movi	r2,1
   17c48:	e0bff505 	stb	r2,-44(fp)
   17c4c:	00000106 	br	17c54 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   17c50:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   17c54:	e0bffe03 	ldbu	r2,-8(fp)
   17c58:	10000326 	beq	r2,zero,17c68 <OSSemDel+0xec>
   17c5c:	10800060 	cmpeqi	r2,r2,1
   17c60:	1000281e 	bne	r2,zero,17d04 <OSSemDel+0x188>
   17c64:	00004506 	br	17d7c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   17c68:	e0bff503 	ldbu	r2,-44(fp)
   17c6c:	1000161e 	bne	r2,zero,17cc8 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   17c70:	e0bffd17 	ldw	r2,-12(fp)
   17c74:	00c00fc4 	movi	r3,63
   17c78:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   17c7c:	e0bffd17 	ldw	r2,-12(fp)
   17c80:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   17c84:	e0bffd17 	ldw	r2,-12(fp)
   17c88:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   17c8c:	d0e72a17 	ldw	r3,-25432(gp)
   17c90:	e0bffd17 	ldw	r2,-12(fp)
   17c94:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   17c98:	e0bffd17 	ldw	r2,-12(fp)
   17c9c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   17ca0:	e0bffd17 	ldw	r2,-12(fp)
   17ca4:	d0a72a15 	stw	r2,-25432(gp)
   17ca8:	e0bff717 	ldw	r2,-36(fp)
   17cac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17cb0:	e0bff817 	ldw	r2,-32(fp)
   17cb4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   17cb8:	e0bfff17 	ldw	r2,-4(fp)
   17cbc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   17cc0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   17cc4:	00003706 	br	17da4 <OSSemDel+0x228>
   17cc8:	e0bff717 	ldw	r2,-36(fp)
   17ccc:	e0bff915 	stw	r2,-28(fp)
   17cd0:	e0bff917 	ldw	r2,-28(fp)
   17cd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   17cd8:	e0bfff17 	ldw	r2,-4(fp)
   17cdc:	00c01244 	movi	r3,73
   17ce0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   17ce4:	e0bffd17 	ldw	r2,-12(fp)
   17ce8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   17cec:	00002d06 	br	17da4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   17cf0:	000f883a 	mov	r7,zero
   17cf4:	01800044 	movi	r6,1
   17cf8:	000b883a 	mov	r5,zero
   17cfc:	e13ffd17 	ldw	r4,-12(fp)
   17d00:	00137cc0 	call	137cc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   17d04:	e0bffd17 	ldw	r2,-12(fp)
   17d08:	10800283 	ldbu	r2,10(r2)
   17d0c:	10803fcc 	andi	r2,r2,255
   17d10:	103ff71e 	bne	r2,zero,17cf0 <__alt_data_end+0xfffe6fb0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   17d14:	e0bffd17 	ldw	r2,-12(fp)
   17d18:	00c00fc4 	movi	r3,63
   17d1c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   17d20:	e0bffd17 	ldw	r2,-12(fp)
   17d24:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   17d28:	e0bffd17 	ldw	r2,-12(fp)
   17d2c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   17d30:	d0e72a17 	ldw	r3,-25432(gp)
   17d34:	e0bffd17 	ldw	r2,-12(fp)
   17d38:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   17d3c:	e0bffd17 	ldw	r2,-12(fp)
   17d40:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   17d44:	e0bffd17 	ldw	r2,-12(fp)
   17d48:	d0a72a15 	stw	r2,-25432(gp)
   17d4c:	e0bff717 	ldw	r2,-36(fp)
   17d50:	e0bffa15 	stw	r2,-24(fp)
   17d54:	e0bffa17 	ldw	r2,-24(fp)
   17d58:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   17d5c:	e0bff503 	ldbu	r2,-44(fp)
   17d60:	10800058 	cmpnei	r2,r2,1
   17d64:	1000011e 	bne	r2,zero,17d6c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   17d68:	00142180 	call	14218 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   17d6c:	e0bfff17 	ldw	r2,-4(fp)
   17d70:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   17d74:	e03ff615 	stw	zero,-40(fp)
             break;
   17d78:	00000a06 	br	17da4 <OSSemDel+0x228>
   17d7c:	e0bff717 	ldw	r2,-36(fp)
   17d80:	e0bffb15 	stw	r2,-20(fp)
   17d84:	e0bffb17 	ldw	r2,-20(fp)
   17d88:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   17d8c:	e0bfff17 	ldw	r2,-4(fp)
   17d90:	00c001c4 	movi	r3,7
   17d94:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   17d98:	e0bffd17 	ldw	r2,-12(fp)
   17d9c:	e0bff615 	stw	r2,-40(fp)
             break;
   17da0:	0001883a 	nop
    }
    return (pevent_return);
   17da4:	e0bff617 	ldw	r2,-40(fp)
}
   17da8:	e037883a 	mov	sp,fp
   17dac:	dfc00117 	ldw	ra,4(sp)
   17db0:	df000017 	ldw	fp,0(sp)
   17db4:	dec00204 	addi	sp,sp,8
   17db8:	f800283a 	ret

00017dbc <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   17dbc:	defff504 	addi	sp,sp,-44
   17dc0:	dfc00a15 	stw	ra,40(sp)
   17dc4:	df000915 	stw	fp,36(sp)
   17dc8:	df000904 	addi	fp,sp,36
   17dcc:	e13ffd15 	stw	r4,-12(fp)
   17dd0:	2805883a 	mov	r2,r5
   17dd4:	e1bfff15 	stw	r6,-4(fp)
   17dd8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17ddc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17de0:	e0bfff17 	ldw	r2,-4(fp)
   17de4:	10007226 	beq	r2,zero,17fb0 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17de8:	e0bffd17 	ldw	r2,-12(fp)
   17dec:	1000041e 	bne	r2,zero,17e00 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   17df0:	e0bfff17 	ldw	r2,-4(fp)
   17df4:	00c00104 	movi	r3,4
   17df8:	10c00005 	stb	r3,0(r2)
        return;
   17dfc:	00006d06 	br	17fb4 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   17e00:	e0bffd17 	ldw	r2,-12(fp)
   17e04:	10800003 	ldbu	r2,0(r2)
   17e08:	10803fcc 	andi	r2,r2,255
   17e0c:	108000e0 	cmpeqi	r2,r2,3
   17e10:	1000041e 	bne	r2,zero,17e24 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   17e14:	e0bfff17 	ldw	r2,-4(fp)
   17e18:	00c00044 	movi	r3,1
   17e1c:	10c00005 	stb	r3,0(r2)
        return;
   17e20:	00006406 	br	17fb4 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   17e24:	d0a72b03 	ldbu	r2,-25428(gp)
   17e28:	10803fcc 	andi	r2,r2,255
   17e2c:	10000426 	beq	r2,zero,17e40 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   17e30:	e0bfff17 	ldw	r2,-4(fp)
   17e34:	00c00084 	movi	r3,2
   17e38:	10c00005 	stb	r3,0(r2)
        return;
   17e3c:	00005d06 	br	17fb4 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   17e40:	d0a71d03 	ldbu	r2,-25484(gp)
   17e44:	10803fcc 	andi	r2,r2,255
   17e48:	10000426 	beq	r2,zero,17e5c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   17e4c:	e0bfff17 	ldw	r2,-4(fp)
   17e50:	00c00344 	movi	r3,13
   17e54:	10c00005 	stb	r3,0(r2)
        return;
   17e58:	00005606 	br	17fb4 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e5c:	0005303a 	rdctl	r2,status
   17e60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e64:	e0fffc17 	ldw	r3,-16(fp)
   17e68:	00bfff84 	movi	r2,-2
   17e6c:	1884703a 	and	r2,r3,r2
   17e70:	1001703a 	wrctl	status,r2
  
  return context;
   17e74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17e78:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   17e7c:	e0bffd17 	ldw	r2,-12(fp)
   17e80:	1080020b 	ldhu	r2,8(r2)
   17e84:	10bfffcc 	andi	r2,r2,65535
   17e88:	10000d26 	beq	r2,zero,17ec0 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   17e8c:	e0bffd17 	ldw	r2,-12(fp)
   17e90:	1080020b 	ldhu	r2,8(r2)
   17e94:	10bfffc4 	addi	r2,r2,-1
   17e98:	1007883a 	mov	r3,r2
   17e9c:	e0bffd17 	ldw	r2,-12(fp)
   17ea0:	10c0020d 	sth	r3,8(r2)
   17ea4:	e0bff717 	ldw	r2,-36(fp)
   17ea8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17eac:	e0bff817 	ldw	r2,-32(fp)
   17eb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   17eb4:	e0bfff17 	ldw	r2,-4(fp)
   17eb8:	10000005 	stb	zero,0(r2)
        return;
   17ebc:	00003d06 	br	17fb4 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   17ec0:	d0a72c17 	ldw	r2,-25424(gp)
   17ec4:	d0e72c17 	ldw	r3,-25424(gp)
   17ec8:	18c00c03 	ldbu	r3,48(r3)
   17ecc:	18c00054 	ori	r3,r3,1
   17ed0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   17ed4:	d0a72c17 	ldw	r2,-25424(gp)
   17ed8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   17edc:	d0a72c17 	ldw	r2,-25424(gp)
   17ee0:	e0fffe0b 	ldhu	r3,-8(fp)
   17ee4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   17ee8:	e13ffd17 	ldw	r4,-12(fp)
   17eec:	00139640 	call	13964 <OS_EventTaskWait>
   17ef0:	e0bff717 	ldw	r2,-36(fp)
   17ef4:	e0bffb15 	stw	r2,-20(fp)
   17ef8:	e0bffb17 	ldw	r2,-20(fp)
   17efc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   17f00:	00142180 	call	14218 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17f04:	0005303a 	rdctl	r2,status
   17f08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17f0c:	e0fff917 	ldw	r3,-28(fp)
   17f10:	00bfff84 	movi	r2,-2
   17f14:	1884703a 	and	r2,r3,r2
   17f18:	1001703a 	wrctl	status,r2
  
  return context;
   17f1c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   17f20:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   17f24:	d0a72c17 	ldw	r2,-25424(gp)
   17f28:	10800c43 	ldbu	r2,49(r2)
   17f2c:	10803fcc 	andi	r2,r2,255
   17f30:	10000326 	beq	r2,zero,17f40 <OSSemPend+0x184>
   17f34:	108000a0 	cmpeqi	r2,r2,2
   17f38:	1000041e 	bne	r2,zero,17f4c <OSSemPend+0x190>
   17f3c:	00000706 	br	17f5c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   17f40:	e0bfff17 	ldw	r2,-4(fp)
   17f44:	10000005 	stb	zero,0(r2)
             break;
   17f48:	00000c06 	br	17f7c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   17f4c:	e0bfff17 	ldw	r2,-4(fp)
   17f50:	00c00384 	movi	r3,14
   17f54:	10c00005 	stb	r3,0(r2)
             break;
   17f58:	00000806 	br	17f7c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   17f5c:	d0a72c17 	ldw	r2,-25424(gp)
   17f60:	e17ffd17 	ldw	r5,-12(fp)
   17f64:	1009883a 	mov	r4,r2
   17f68:	0013bc40 	call	13bc4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   17f6c:	e0bfff17 	ldw	r2,-4(fp)
   17f70:	00c00284 	movi	r3,10
   17f74:	10c00005 	stb	r3,0(r2)
             break;
   17f78:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   17f7c:	d0a72c17 	ldw	r2,-25424(gp)
   17f80:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   17f84:	d0a72c17 	ldw	r2,-25424(gp)
   17f88:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   17f8c:	d0a72c17 	ldw	r2,-25424(gp)
   17f90:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   17f94:	d0a72c17 	ldw	r2,-25424(gp)
   17f98:	10000815 	stw	zero,32(r2)
   17f9c:	e0bff717 	ldw	r2,-36(fp)
   17fa0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17fa4:	e0bffa17 	ldw	r2,-24(fp)
   17fa8:	1001703a 	wrctl	status,r2
   17fac:	00000106 	br	17fb4 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   17fb0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   17fb4:	e037883a 	mov	sp,fp
   17fb8:	dfc00117 	ldw	ra,4(sp)
   17fbc:	df000017 	ldw	fp,0(sp)
   17fc0:	dec00204 	addi	sp,sp,8
   17fc4:	f800283a 	ret

00017fc8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17fc8:	defff604 	addi	sp,sp,-40
   17fcc:	dfc00915 	stw	ra,36(sp)
   17fd0:	df000815 	stw	fp,32(sp)
   17fd4:	df000804 	addi	fp,sp,32
   17fd8:	e13ffd15 	stw	r4,-12(fp)
   17fdc:	2805883a 	mov	r2,r5
   17fe0:	e1bfff15 	stw	r6,-4(fp)
   17fe4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17fe8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17fec:	e0bfff17 	ldw	r2,-4(fp)
   17ff0:	1000021e 	bne	r2,zero,17ffc <OSSemPendAbort+0x34>
        return (0);
   17ff4:	0005883a 	mov	r2,zero
   17ff8:	00004906 	br	18120 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17ffc:	e0bffd17 	ldw	r2,-12(fp)
   18000:	1000051e 	bne	r2,zero,18018 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18004:	e0bfff17 	ldw	r2,-4(fp)
   18008:	00c00104 	movi	r3,4
   1800c:	10c00005 	stb	r3,0(r2)
        return (0);
   18010:	0005883a 	mov	r2,zero
   18014:	00004206 	br	18120 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18018:	e0bffd17 	ldw	r2,-12(fp)
   1801c:	10800003 	ldbu	r2,0(r2)
   18020:	10803fcc 	andi	r2,r2,255
   18024:	108000e0 	cmpeqi	r2,r2,3
   18028:	1000051e 	bne	r2,zero,18040 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1802c:	e0bfff17 	ldw	r2,-4(fp)
   18030:	00c00044 	movi	r3,1
   18034:	10c00005 	stb	r3,0(r2)
        return (0);
   18038:	0005883a 	mov	r2,zero
   1803c:	00003806 	br	18120 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18040:	0005303a 	rdctl	r2,status
   18044:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18048:	e0fffc17 	ldw	r3,-16(fp)
   1804c:	00bfff84 	movi	r2,-2
   18050:	1884703a 	and	r2,r3,r2
   18054:	1001703a 	wrctl	status,r2
  
  return context;
   18058:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1805c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   18060:	e0bffd17 	ldw	r2,-12(fp)
   18064:	10800283 	ldbu	r2,10(r2)
   18068:	10803fcc 	andi	r2,r2,255
   1806c:	10002526 	beq	r2,zero,18104 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   18070:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   18074:	e0bffe03 	ldbu	r2,-8(fp)
   18078:	10800060 	cmpeqi	r2,r2,1
   1807c:	10000e26 	beq	r2,zero,180b8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   18080:	00000806 	br	180a4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   18084:	01c00084 	movi	r7,2
   18088:	01800044 	movi	r6,1
   1808c:	000b883a 	mov	r5,zero
   18090:	e13ffd17 	ldw	r4,-12(fp)
   18094:	00137cc0 	call	137cc <OS_EventTaskRdy>
                     nbr_tasks++;
   18098:	e0bff803 	ldbu	r2,-32(fp)
   1809c:	10800044 	addi	r2,r2,1
   180a0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   180a4:	e0bffd17 	ldw	r2,-12(fp)
   180a8:	10800283 	ldbu	r2,10(r2)
   180ac:	10803fcc 	andi	r2,r2,255
   180b0:	103ff41e 	bne	r2,zero,18084 <__alt_data_end+0xfffe7344>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   180b4:	00000906 	br	180dc <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   180b8:	01c00084 	movi	r7,2
   180bc:	01800044 	movi	r6,1
   180c0:	000b883a 	mov	r5,zero
   180c4:	e13ffd17 	ldw	r4,-12(fp)
   180c8:	00137cc0 	call	137cc <OS_EventTaskRdy>
                 nbr_tasks++;
   180cc:	e0bff803 	ldbu	r2,-32(fp)
   180d0:	10800044 	addi	r2,r2,1
   180d4:	e0bff805 	stb	r2,-32(fp)
                 break;
   180d8:	0001883a 	nop
   180dc:	e0bff917 	ldw	r2,-28(fp)
   180e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   180e4:	e0bffa17 	ldw	r2,-24(fp)
   180e8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   180ec:	00142180 	call	14218 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   180f0:	e0bfff17 	ldw	r2,-4(fp)
   180f4:	00c00384 	movi	r3,14
   180f8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   180fc:	e0bff803 	ldbu	r2,-32(fp)
   18100:	00000706 	br	18120 <OSSemPendAbort+0x158>
   18104:	e0bff917 	ldw	r2,-28(fp)
   18108:	e0bffb15 	stw	r2,-20(fp)
   1810c:	e0bffb17 	ldw	r2,-20(fp)
   18110:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18114:	e0bfff17 	ldw	r2,-4(fp)
   18118:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   1811c:	0005883a 	mov	r2,zero
}
   18120:	e037883a 	mov	sp,fp
   18124:	dfc00117 	ldw	ra,4(sp)
   18128:	df000017 	ldw	fp,0(sp)
   1812c:	dec00204 	addi	sp,sp,8
   18130:	f800283a 	ret

00018134 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   18134:	defff804 	addi	sp,sp,-32
   18138:	dfc00715 	stw	ra,28(sp)
   1813c:	df000615 	stw	fp,24(sp)
   18140:	df000604 	addi	fp,sp,24
   18144:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18148:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1814c:	e0bfff17 	ldw	r2,-4(fp)
   18150:	1000021e 	bne	r2,zero,1815c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   18154:	00800104 	movi	r2,4
   18158:	00003506 	br	18230 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1815c:	e0bfff17 	ldw	r2,-4(fp)
   18160:	10800003 	ldbu	r2,0(r2)
   18164:	10803fcc 	andi	r2,r2,255
   18168:	108000e0 	cmpeqi	r2,r2,3
   1816c:	1000021e 	bne	r2,zero,18178 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   18170:	00800044 	movi	r2,1
   18174:	00002e06 	br	18230 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18178:	0005303a 	rdctl	r2,status
   1817c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18180:	e0fffe17 	ldw	r3,-8(fp)
   18184:	00bfff84 	movi	r2,-2
   18188:	1884703a 	and	r2,r3,r2
   1818c:	1001703a 	wrctl	status,r2
  
  return context;
   18190:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18194:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   18198:	e0bfff17 	ldw	r2,-4(fp)
   1819c:	10800283 	ldbu	r2,10(r2)
   181a0:	10803fcc 	andi	r2,r2,255
   181a4:	10000c26 	beq	r2,zero,181d8 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   181a8:	000f883a 	mov	r7,zero
   181ac:	01800044 	movi	r6,1
   181b0:	000b883a 	mov	r5,zero
   181b4:	e13fff17 	ldw	r4,-4(fp)
   181b8:	00137cc0 	call	137cc <OS_EventTaskRdy>
   181bc:	e0bffa17 	ldw	r2,-24(fp)
   181c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181c4:	e0bffb17 	ldw	r2,-20(fp)
   181c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   181cc:	00142180 	call	14218 <OS_Sched>
        return (OS_ERR_NONE);
   181d0:	0005883a 	mov	r2,zero
   181d4:	00001606 	br	18230 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   181d8:	e0bfff17 	ldw	r2,-4(fp)
   181dc:	1080020b 	ldhu	r2,8(r2)
   181e0:	10ffffcc 	andi	r3,r2,65535
   181e4:	00bfffd4 	movui	r2,65535
   181e8:	18800c26 	beq	r3,r2,1821c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   181ec:	e0bfff17 	ldw	r2,-4(fp)
   181f0:	1080020b 	ldhu	r2,8(r2)
   181f4:	10800044 	addi	r2,r2,1
   181f8:	1007883a 	mov	r3,r2
   181fc:	e0bfff17 	ldw	r2,-4(fp)
   18200:	10c0020d 	sth	r3,8(r2)
   18204:	e0bffa17 	ldw	r2,-24(fp)
   18208:	e0bffc15 	stw	r2,-16(fp)
   1820c:	e0bffc17 	ldw	r2,-16(fp)
   18210:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   18214:	0005883a 	mov	r2,zero
   18218:	00000506 	br	18230 <OSSemPost+0xfc>
   1821c:	e0bffa17 	ldw	r2,-24(fp)
   18220:	e0bffd15 	stw	r2,-12(fp)
   18224:	e0bffd17 	ldw	r2,-12(fp)
   18228:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   1822c:	00800c84 	movi	r2,50
}
   18230:	e037883a 	mov	sp,fp
   18234:	dfc00117 	ldw	ra,4(sp)
   18238:	df000017 	ldw	fp,0(sp)
   1823c:	dec00204 	addi	sp,sp,8
   18240:	f800283a 	ret

00018244 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   18244:	defff704 	addi	sp,sp,-36
   18248:	df000815 	stw	fp,32(sp)
   1824c:	df000804 	addi	fp,sp,32
   18250:	e13ffe15 	stw	r4,-8(fp)
   18254:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18258:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1825c:	e0bffe17 	ldw	r2,-8(fp)
   18260:	1000021e 	bne	r2,zero,1826c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18264:	00800104 	movi	r2,4
   18268:	00003606 	br	18344 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1826c:	e0bfff17 	ldw	r2,-4(fp)
   18270:	1000021e 	bne	r2,zero,1827c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18274:	00800244 	movi	r2,9
   18278:	00003206 	br	18344 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1827c:	e0bffe17 	ldw	r2,-8(fp)
   18280:	10800003 	ldbu	r2,0(r2)
   18284:	10803fcc 	andi	r2,r2,255
   18288:	108000e0 	cmpeqi	r2,r2,3
   1828c:	1000021e 	bne	r2,zero,18298 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18290:	00800044 	movi	r2,1
   18294:	00002b06 	br	18344 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18298:	0005303a 	rdctl	r2,status
   1829c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   182a0:	e0fffd17 	ldw	r3,-12(fp)
   182a4:	00bfff84 	movi	r2,-2
   182a8:	1884703a 	and	r2,r3,r2
   182ac:	1001703a 	wrctl	status,r2
  
  return context;
   182b0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   182b4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   182b8:	e0bffe17 	ldw	r2,-8(fp)
   182bc:	10c00283 	ldbu	r3,10(r2)
   182c0:	e0bfff17 	ldw	r2,-4(fp)
   182c4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   182c8:	e0bffe17 	ldw	r2,-8(fp)
   182cc:	108002c4 	addi	r2,r2,11
   182d0:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   182d4:	e0bfff17 	ldw	r2,-4(fp)
   182d8:	10800084 	addi	r2,r2,2
   182dc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   182e0:	e03ffa05 	stb	zero,-24(fp)
   182e4:	00000b06 	br	18314 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   182e8:	e0bff917 	ldw	r2,-28(fp)
   182ec:	10c00044 	addi	r3,r2,1
   182f0:	e0fff915 	stw	r3,-28(fp)
   182f4:	e0fff817 	ldw	r3,-32(fp)
   182f8:	19000044 	addi	r4,r3,1
   182fc:	e13ff815 	stw	r4,-32(fp)
   18300:	18c00003 	ldbu	r3,0(r3)
   18304:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18308:	e0bffa03 	ldbu	r2,-24(fp)
   1830c:	10800044 	addi	r2,r2,1
   18310:	e0bffa05 	stb	r2,-24(fp)
   18314:	e0bffa03 	ldbu	r2,-24(fp)
   18318:	108000f0 	cmpltui	r2,r2,3
   1831c:	103ff21e 	bne	r2,zero,182e8 <__alt_data_end+0xfffe75a8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   18320:	e0bffe17 	ldw	r2,-8(fp)
   18324:	10c0020b 	ldhu	r3,8(r2)
   18328:	e0bfff17 	ldw	r2,-4(fp)
   1832c:	10c0000d 	sth	r3,0(r2)
   18330:	e0bffb17 	ldw	r2,-20(fp)
   18334:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18338:	e0bffc17 	ldw	r2,-16(fp)
   1833c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18340:	0005883a 	mov	r2,zero
}
   18344:	e037883a 	mov	sp,fp
   18348:	df000017 	ldw	fp,0(sp)
   1834c:	dec00104 	addi	sp,sp,4
   18350:	f800283a 	ret

00018354 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   18354:	defff904 	addi	sp,sp,-28
   18358:	df000615 	stw	fp,24(sp)
   1835c:	df000604 	addi	fp,sp,24
   18360:	e13ffd15 	stw	r4,-12(fp)
   18364:	2805883a 	mov	r2,r5
   18368:	e1bfff15 	stw	r6,-4(fp)
   1836c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18370:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18374:	e0bfff17 	ldw	r2,-4(fp)
   18378:	10003126 	beq	r2,zero,18440 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1837c:	e0bffd17 	ldw	r2,-12(fp)
   18380:	1000041e 	bne	r2,zero,18394 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   18384:	e0bfff17 	ldw	r2,-4(fp)
   18388:	00c00104 	movi	r3,4
   1838c:	10c00005 	stb	r3,0(r2)
        return;
   18390:	00002c06 	br	18444 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18394:	e0bffd17 	ldw	r2,-12(fp)
   18398:	10800003 	ldbu	r2,0(r2)
   1839c:	10803fcc 	andi	r2,r2,255
   183a0:	108000e0 	cmpeqi	r2,r2,3
   183a4:	1000041e 	bne	r2,zero,183b8 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   183a8:	e0bfff17 	ldw	r2,-4(fp)
   183ac:	00c00044 	movi	r3,1
   183b0:	10c00005 	stb	r3,0(r2)
        return;
   183b4:	00002306 	br	18444 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   183b8:	0005303a 	rdctl	r2,status
   183bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   183c0:	e0fffc17 	ldw	r3,-16(fp)
   183c4:	00bfff84 	movi	r2,-2
   183c8:	1884703a 	and	r2,r3,r2
   183cc:	1001703a 	wrctl	status,r2
  
  return context;
   183d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   183d4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   183d8:	e0bfff17 	ldw	r2,-4(fp)
   183dc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   183e0:	e0bffd17 	ldw	r2,-12(fp)
   183e4:	1080020b 	ldhu	r2,8(r2)
   183e8:	10bfffcc 	andi	r2,r2,65535
   183ec:	10000426 	beq	r2,zero,18400 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   183f0:	e0bffd17 	ldw	r2,-12(fp)
   183f4:	e0fffe0b 	ldhu	r3,-8(fp)
   183f8:	10c0020d 	sth	r3,8(r2)
   183fc:	00000b06 	br	1842c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   18400:	e0bffd17 	ldw	r2,-12(fp)
   18404:	10800283 	ldbu	r2,10(r2)
   18408:	10803fcc 	andi	r2,r2,255
   1840c:	1000041e 	bne	r2,zero,18420 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   18410:	e0bffd17 	ldw	r2,-12(fp)
   18414:	e0fffe0b 	ldhu	r3,-8(fp)
   18418:	10c0020d 	sth	r3,8(r2)
   1841c:	00000306 	br	1842c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   18420:	e0bfff17 	ldw	r2,-4(fp)
   18424:	00c01244 	movi	r3,73
   18428:	10c00005 	stb	r3,0(r2)
   1842c:	e0bffa17 	ldw	r2,-24(fp)
   18430:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18434:	e0bffb17 	ldw	r2,-20(fp)
   18438:	1001703a 	wrctl	status,r2
   1843c:	00000106 	br	18444 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   18440:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   18444:	e037883a 	mov	sp,fp
   18448:	df000017 	ldw	fp,0(sp)
   1844c:	dec00104 	addi	sp,sp,4
   18450:	f800283a 	ret

00018454 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   18454:	defff104 	addi	sp,sp,-60
   18458:	dfc00e15 	stw	ra,56(sp)
   1845c:	df000d15 	stw	fp,52(sp)
   18460:	df000d04 	addi	fp,sp,52
   18464:	2007883a 	mov	r3,r4
   18468:	2805883a 	mov	r2,r5
   1846c:	e0fffe05 	stb	r3,-8(fp)
   18470:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   18474:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   18478:	e0bffe03 	ldbu	r2,-8(fp)
   1847c:	10800530 	cmpltui	r2,r2,20
   18480:	1000051e 	bne	r2,zero,18498 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   18484:	e0bffe03 	ldbu	r2,-8(fp)
   18488:	10803fe0 	cmpeqi	r2,r2,255
   1848c:	1000021e 	bne	r2,zero,18498 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   18490:	00800a84 	movi	r2,42
   18494:	00012606 	br	18930 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   18498:	e0bfff03 	ldbu	r2,-4(fp)
   1849c:	10800530 	cmpltui	r2,r2,20
   184a0:	1000021e 	bne	r2,zero,184ac <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   184a4:	00800a84 	movi	r2,42
   184a8:	00012106 	br	18930 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   184ac:	0005303a 	rdctl	r2,status
   184b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   184b4:	e0fffd17 	ldw	r3,-12(fp)
   184b8:	00bfff84 	movi	r2,-2
   184bc:	1884703a 	and	r2,r3,r2
   184c0:	1001703a 	wrctl	status,r2
  
  return context;
   184c4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   184c8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   184cc:	e0ffff03 	ldbu	r3,-4(fp)
   184d0:	008000b4 	movhi	r2,2
   184d4:	10955a04 	addi	r2,r2,21864
   184d8:	18c7883a 	add	r3,r3,r3
   184dc:	18c7883a 	add	r3,r3,r3
   184e0:	10c5883a 	add	r2,r2,r3
   184e4:	10800017 	ldw	r2,0(r2)
   184e8:	10000626 	beq	r2,zero,18504 <OSTaskChangePrio+0xb0>
   184ec:	e0bff517 	ldw	r2,-44(fp)
   184f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   184f4:	e0bff617 	ldw	r2,-40(fp)
   184f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   184fc:	00800a04 	movi	r2,40
   18500:	00010b06 	br	18930 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   18504:	e0bffe03 	ldbu	r2,-8(fp)
   18508:	10803fd8 	cmpnei	r2,r2,255
   1850c:	1000031e 	bne	r2,zero,1851c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   18510:	d0a72c17 	ldw	r2,-25424(gp)
   18514:	10800c83 	ldbu	r2,50(r2)
   18518:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   1851c:	e0fffe03 	ldbu	r3,-8(fp)
   18520:	008000b4 	movhi	r2,2
   18524:	10955a04 	addi	r2,r2,21864
   18528:	18c7883a 	add	r3,r3,r3
   1852c:	18c7883a 	add	r3,r3,r3
   18530:	10c5883a 	add	r2,r2,r3
   18534:	10800017 	ldw	r2,0(r2)
   18538:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   1853c:	e0bff817 	ldw	r2,-32(fp)
   18540:	1000061e 	bne	r2,zero,1855c <OSTaskChangePrio+0x108>
   18544:	e0bff517 	ldw	r2,-44(fp)
   18548:	e0bff715 	stw	r2,-36(fp)
   1854c:	e0bff717 	ldw	r2,-36(fp)
   18550:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   18554:	00800a44 	movi	r2,41
   18558:	0000f506 	br	18930 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   1855c:	e0bff817 	ldw	r2,-32(fp)
   18560:	10800058 	cmpnei	r2,r2,1
   18564:	1000061e 	bne	r2,zero,18580 <OSTaskChangePrio+0x12c>
   18568:	e0bff517 	ldw	r2,-44(fp)
   1856c:	e0bff915 	stw	r2,-28(fp)
   18570:	e0bff917 	ldw	r2,-28(fp)
   18574:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   18578:	008010c4 	movi	r2,67
   1857c:	0000ec06 	br	18930 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   18580:	e0bfff03 	ldbu	r2,-4(fp)
   18584:	1004d0fa 	srli	r2,r2,3
   18588:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1858c:	e0bfff03 	ldbu	r2,-4(fp)
   18590:	108001cc 	andi	r2,r2,7
   18594:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   18598:	e0bffb03 	ldbu	r2,-20(fp)
   1859c:	00c00044 	movi	r3,1
   185a0:	1884983a 	sll	r2,r3,r2
   185a4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   185a8:	e0bffb43 	ldbu	r2,-19(fp)
   185ac:	00c00044 	movi	r3,1
   185b0:	1884983a 	sll	r2,r3,r2
   185b4:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   185b8:	e0fffe03 	ldbu	r3,-8(fp)
   185bc:	008000b4 	movhi	r2,2
   185c0:	10955a04 	addi	r2,r2,21864
   185c4:	18c7883a 	add	r3,r3,r3
   185c8:	18c7883a 	add	r3,r3,r3
   185cc:	10c5883a 	add	r2,r2,r3
   185d0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   185d4:	e0ffff03 	ldbu	r3,-4(fp)
   185d8:	008000b4 	movhi	r2,2
   185dc:	10955a04 	addi	r2,r2,21864
   185e0:	18c7883a 	add	r3,r3,r3
   185e4:	18c7883a 	add	r3,r3,r3
   185e8:	10c5883a 	add	r2,r2,r3
   185ec:	e0fff817 	ldw	r3,-32(fp)
   185f0:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   185f4:	e0bff817 	ldw	r2,-32(fp)
   185f8:	10800d03 	ldbu	r2,52(r2)
   185fc:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   18600:	e0bff817 	ldw	r2,-32(fp)
   18604:	10800d83 	ldbu	r2,54(r2)
   18608:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   1860c:	e0bff817 	ldw	r2,-32(fp)
   18610:	10800d43 	ldbu	r2,53(r2)
   18614:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   18618:	e0fffc03 	ldbu	r3,-16(fp)
   1861c:	d0a72944 	addi	r2,gp,-25435
   18620:	1885883a 	add	r2,r3,r2
   18624:	10c00003 	ldbu	r3,0(r2)
   18628:	e0bffc83 	ldbu	r2,-14(fp)
   1862c:	1884703a 	and	r2,r3,r2
   18630:	10803fcc 	andi	r2,r2,255
   18634:	10002826 	beq	r2,zero,186d8 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   18638:	e0fffc03 	ldbu	r3,-16(fp)
   1863c:	e13ffc03 	ldbu	r4,-16(fp)
   18640:	d0a72944 	addi	r2,gp,-25435
   18644:	2085883a 	add	r2,r4,r2
   18648:	10800003 	ldbu	r2,0(r2)
   1864c:	1009883a 	mov	r4,r2
   18650:	e0bffc83 	ldbu	r2,-14(fp)
   18654:	0084303a 	nor	r2,zero,r2
   18658:	2084703a 	and	r2,r4,r2
   1865c:	1009883a 	mov	r4,r2
   18660:	d0a72944 	addi	r2,gp,-25435
   18664:	1885883a 	add	r2,r3,r2
   18668:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1866c:	e0fffc03 	ldbu	r3,-16(fp)
   18670:	d0a72944 	addi	r2,gp,-25435
   18674:	1885883a 	add	r2,r3,r2
   18678:	10800003 	ldbu	r2,0(r2)
   1867c:	10803fcc 	andi	r2,r2,255
   18680:	1000061e 	bne	r2,zero,1869c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   18684:	e0bffc43 	ldbu	r2,-15(fp)
   18688:	0084303a 	nor	r2,zero,r2
   1868c:	1007883a 	mov	r3,r2
   18690:	d0a72903 	ldbu	r2,-25436(gp)
   18694:	1884703a 	and	r2,r3,r2
   18698:	d0a72905 	stb	r2,-25436(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   1869c:	d0e72903 	ldbu	r3,-25436(gp)
   186a0:	e0bffb83 	ldbu	r2,-18(fp)
   186a4:	1884b03a 	or	r2,r3,r2
   186a8:	d0a72905 	stb	r2,-25436(gp)
         OSRdyTbl[y_new] |= bitx_new;
   186ac:	e0fffb03 	ldbu	r3,-20(fp)
   186b0:	e13ffb03 	ldbu	r4,-20(fp)
   186b4:	d0a72944 	addi	r2,gp,-25435
   186b8:	2085883a 	add	r2,r4,r2
   186bc:	11000003 	ldbu	r4,0(r2)
   186c0:	e0bffbc3 	ldbu	r2,-17(fp)
   186c4:	2084b03a 	or	r2,r4,r2
   186c8:	1009883a 	mov	r4,r2
   186cc:	d0a72944 	addi	r2,gp,-25435
   186d0:	1885883a 	add	r2,r3,r2
   186d4:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   186d8:	e0bff817 	ldw	r2,-32(fp)
   186dc:	10800717 	ldw	r2,28(r2)
   186e0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   186e4:	e0bff317 	ldw	r2,-52(fp)
   186e8:	10003326 	beq	r2,zero,187b8 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   186ec:	e0bffc03 	ldbu	r2,-16(fp)
   186f0:	e0fffc03 	ldbu	r3,-16(fp)
   186f4:	e13ff317 	ldw	r4,-52(fp)
   186f8:	20c7883a 	add	r3,r4,r3
   186fc:	18c002c4 	addi	r3,r3,11
   18700:	18c00003 	ldbu	r3,0(r3)
   18704:	1809883a 	mov	r4,r3
   18708:	e0fffc83 	ldbu	r3,-14(fp)
   1870c:	00c6303a 	nor	r3,zero,r3
   18710:	20c6703a 	and	r3,r4,r3
   18714:	1809883a 	mov	r4,r3
   18718:	e0fff317 	ldw	r3,-52(fp)
   1871c:	1885883a 	add	r2,r3,r2
   18720:	108002c4 	addi	r2,r2,11
   18724:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   18728:	e0bffc03 	ldbu	r2,-16(fp)
   1872c:	e0fff317 	ldw	r3,-52(fp)
   18730:	1885883a 	add	r2,r3,r2
   18734:	108002c4 	addi	r2,r2,11
   18738:	10800003 	ldbu	r2,0(r2)
   1873c:	10803fcc 	andi	r2,r2,255
   18740:	1000091e 	bne	r2,zero,18768 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   18744:	e0bff317 	ldw	r2,-52(fp)
   18748:	10800283 	ldbu	r2,10(r2)
   1874c:	1007883a 	mov	r3,r2
   18750:	e0bffc43 	ldbu	r2,-15(fp)
   18754:	0084303a 	nor	r2,zero,r2
   18758:	1884703a 	and	r2,r3,r2
   1875c:	1007883a 	mov	r3,r2
   18760:	e0bff317 	ldw	r2,-52(fp)
   18764:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   18768:	e0bff317 	ldw	r2,-52(fp)
   1876c:	10c00283 	ldbu	r3,10(r2)
   18770:	e0bffb83 	ldbu	r2,-18(fp)
   18774:	1884b03a 	or	r2,r3,r2
   18778:	1007883a 	mov	r3,r2
   1877c:	e0bff317 	ldw	r2,-52(fp)
   18780:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   18784:	e0bffb03 	ldbu	r2,-20(fp)
   18788:	e0fffb03 	ldbu	r3,-20(fp)
   1878c:	e13ff317 	ldw	r4,-52(fp)
   18790:	20c7883a 	add	r3,r4,r3
   18794:	18c002c4 	addi	r3,r3,11
   18798:	19000003 	ldbu	r4,0(r3)
   1879c:	e0fffbc3 	ldbu	r3,-17(fp)
   187a0:	20c6b03a 	or	r3,r4,r3
   187a4:	1809883a 	mov	r4,r3
   187a8:	e0fff317 	ldw	r3,-52(fp)
   187ac:	1885883a 	add	r2,r3,r2
   187b0:	108002c4 	addi	r2,r2,11
   187b4:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   187b8:	e0bff817 	ldw	r2,-32(fp)
   187bc:	10800817 	ldw	r2,32(r2)
   187c0:	10004226 	beq	r2,zero,188cc <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   187c4:	e0bff817 	ldw	r2,-32(fp)
   187c8:	10800817 	ldw	r2,32(r2)
   187cc:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   187d0:	e0bff417 	ldw	r2,-48(fp)
   187d4:	10800017 	ldw	r2,0(r2)
   187d8:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   187dc:	00003906 	br	188c4 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   187e0:	e0bffc03 	ldbu	r2,-16(fp)
   187e4:	e0fffc03 	ldbu	r3,-16(fp)
   187e8:	e13ff317 	ldw	r4,-52(fp)
   187ec:	20c7883a 	add	r3,r4,r3
   187f0:	18c002c4 	addi	r3,r3,11
   187f4:	18c00003 	ldbu	r3,0(r3)
   187f8:	1809883a 	mov	r4,r3
   187fc:	e0fffc83 	ldbu	r3,-14(fp)
   18800:	00c6303a 	nor	r3,zero,r3
   18804:	20c6703a 	and	r3,r4,r3
   18808:	1809883a 	mov	r4,r3
   1880c:	e0fff317 	ldw	r3,-52(fp)
   18810:	1885883a 	add	r2,r3,r2
   18814:	108002c4 	addi	r2,r2,11
   18818:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   1881c:	e0bffc03 	ldbu	r2,-16(fp)
   18820:	e0fff317 	ldw	r3,-52(fp)
   18824:	1885883a 	add	r2,r3,r2
   18828:	108002c4 	addi	r2,r2,11
   1882c:	10800003 	ldbu	r2,0(r2)
   18830:	10803fcc 	andi	r2,r2,255
   18834:	1000091e 	bne	r2,zero,1885c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   18838:	e0bff317 	ldw	r2,-52(fp)
   1883c:	10800283 	ldbu	r2,10(r2)
   18840:	1007883a 	mov	r3,r2
   18844:	e0bffc43 	ldbu	r2,-15(fp)
   18848:	0084303a 	nor	r2,zero,r2
   1884c:	1884703a 	and	r2,r3,r2
   18850:	1007883a 	mov	r3,r2
   18854:	e0bff317 	ldw	r2,-52(fp)
   18858:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   1885c:	e0bff317 	ldw	r2,-52(fp)
   18860:	10c00283 	ldbu	r3,10(r2)
   18864:	e0bffb83 	ldbu	r2,-18(fp)
   18868:	1884b03a 	or	r2,r3,r2
   1886c:	1007883a 	mov	r3,r2
   18870:	e0bff317 	ldw	r2,-52(fp)
   18874:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   18878:	e0bffb03 	ldbu	r2,-20(fp)
   1887c:	e0fffb03 	ldbu	r3,-20(fp)
   18880:	e13ff317 	ldw	r4,-52(fp)
   18884:	20c7883a 	add	r3,r4,r3
   18888:	18c002c4 	addi	r3,r3,11
   1888c:	19000003 	ldbu	r4,0(r3)
   18890:	e0fffbc3 	ldbu	r3,-17(fp)
   18894:	20c6b03a 	or	r3,r4,r3
   18898:	1809883a 	mov	r4,r3
   1889c:	e0fff317 	ldw	r3,-52(fp)
   188a0:	1885883a 	add	r2,r3,r2
   188a4:	108002c4 	addi	r2,r2,11
   188a8:	11000005 	stb	r4,0(r2)
            pevents++;
   188ac:	e0bff417 	ldw	r2,-48(fp)
   188b0:	10800104 	addi	r2,r2,4
   188b4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   188b8:	e0bff417 	ldw	r2,-48(fp)
   188bc:	10800017 	ldw	r2,0(r2)
   188c0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   188c4:	e0bff317 	ldw	r2,-52(fp)
   188c8:	103fc51e 	bne	r2,zero,187e0 <__alt_data_end+0xfffe7aa0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   188cc:	e0bff817 	ldw	r2,-32(fp)
   188d0:	e0ffff03 	ldbu	r3,-4(fp)
   188d4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   188d8:	e0bff817 	ldw	r2,-32(fp)
   188dc:	e0fffb03 	ldbu	r3,-20(fp)
   188e0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   188e4:	e0bff817 	ldw	r2,-32(fp)
   188e8:	e0fffb43 	ldbu	r3,-19(fp)
   188ec:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   188f0:	e0bff817 	ldw	r2,-32(fp)
   188f4:	e0fffb83 	ldbu	r3,-18(fp)
   188f8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   188fc:	e0bff817 	ldw	r2,-32(fp)
   18900:	e0fffbc3 	ldbu	r3,-17(fp)
   18904:	10c00d45 	stb	r3,53(r2)
   18908:	e0bff517 	ldw	r2,-44(fp)
   1890c:	e0bffa15 	stw	r2,-24(fp)
   18910:	e0bffa17 	ldw	r2,-24(fp)
   18914:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   18918:	d0a71d43 	ldbu	r2,-25483(gp)
   1891c:	10803fcc 	andi	r2,r2,255
   18920:	10800058 	cmpnei	r2,r2,1
   18924:	1000011e 	bne	r2,zero,1892c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   18928:	00142180 	call	14218 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1892c:	0005883a 	mov	r2,zero
}
   18930:	e037883a 	mov	sp,fp
   18934:	dfc00117 	ldw	ra,4(sp)
   18938:	df000017 	ldw	fp,0(sp)
   1893c:	dec00204 	addi	sp,sp,8
   18940:	f800283a 	ret

00018944 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   18944:	deffee04 	addi	sp,sp,-72
   18948:	dfc01115 	stw	ra,68(sp)
   1894c:	df001015 	stw	fp,64(sp)
   18950:	df001004 	addi	fp,sp,64
   18954:	e13ffc15 	stw	r4,-16(fp)
   18958:	e17ffd15 	stw	r5,-12(fp)
   1895c:	e1bffe15 	stw	r6,-8(fp)
   18960:	3805883a 	mov	r2,r7
   18964:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   18968:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1896c:	e0bfff03 	ldbu	r2,-4(fp)
   18970:	10800570 	cmpltui	r2,r2,21
   18974:	1000021e 	bne	r2,zero,18980 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   18978:	00800a84 	movi	r2,42
   1897c:	00005706 	br	18adc <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18980:	0005303a 	rdctl	r2,status
   18984:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18988:	e0fffb17 	ldw	r3,-20(fp)
   1898c:	00bfff84 	movi	r2,-2
   18990:	1884703a 	and	r2,r3,r2
   18994:	1001703a 	wrctl	status,r2
  
  return context;
   18998:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1899c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   189a0:	d0a72b03 	ldbu	r2,-25428(gp)
   189a4:	10803fcc 	andi	r2,r2,255
   189a8:	10000626 	beq	r2,zero,189c4 <OSTaskCreate+0x80>
   189ac:	e0bff317 	ldw	r2,-52(fp)
   189b0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   189b4:	e0bff417 	ldw	r2,-48(fp)
   189b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   189bc:	00800f04 	movi	r2,60
   189c0:	00004606 	br	18adc <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   189c4:	e0ffff03 	ldbu	r3,-4(fp)
   189c8:	008000b4 	movhi	r2,2
   189cc:	10955a04 	addi	r2,r2,21864
   189d0:	18c7883a 	add	r3,r3,r3
   189d4:	18c7883a 	add	r3,r3,r3
   189d8:	10c5883a 	add	r2,r2,r3
   189dc:	10800017 	ldw	r2,0(r2)
   189e0:	1000391e 	bne	r2,zero,18ac8 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   189e4:	e0ffff03 	ldbu	r3,-4(fp)
   189e8:	008000b4 	movhi	r2,2
   189ec:	10955a04 	addi	r2,r2,21864
   189f0:	18c7883a 	add	r3,r3,r3
   189f4:	18c7883a 	add	r3,r3,r3
   189f8:	10c5883a 	add	r2,r2,r3
   189fc:	00c00044 	movi	r3,1
   18a00:	10c00015 	stw	r3,0(r2)
   18a04:	e0bff317 	ldw	r2,-52(fp)
   18a08:	e0bff515 	stw	r2,-44(fp)
   18a0c:	e0bff517 	ldw	r2,-44(fp)
   18a10:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   18a14:	000f883a 	mov	r7,zero
   18a18:	e1bffe17 	ldw	r6,-8(fp)
   18a1c:	e17ffd17 	ldw	r5,-12(fp)
   18a20:	e13ffc17 	ldw	r4,-16(fp)
   18a24:	001bbec0 	call	1bbec <OSTaskStkInit>
   18a28:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   18a2c:	e0bfff03 	ldbu	r2,-4(fp)
   18a30:	d8000215 	stw	zero,8(sp)
   18a34:	d8000115 	stw	zero,4(sp)
   18a38:	d8000015 	stw	zero,0(sp)
   18a3c:	000f883a 	mov	r7,zero
   18a40:	000d883a 	mov	r6,zero
   18a44:	e17ff717 	ldw	r5,-36(fp)
   18a48:	1009883a 	mov	r4,r2
   18a4c:	00146180 	call	14618 <OS_TCBInit>
   18a50:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   18a54:	e0bff803 	ldbu	r2,-32(fp)
   18a58:	1000061e 	bne	r2,zero,18a74 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   18a5c:	d0a71d43 	ldbu	r2,-25483(gp)
   18a60:	10803fcc 	andi	r2,r2,255
   18a64:	10800058 	cmpnei	r2,r2,1
   18a68:	1000151e 	bne	r2,zero,18ac0 <OSTaskCreate+0x17c>
                OS_Sched();
   18a6c:	00142180 	call	14218 <OS_Sched>
   18a70:	00001306 	br	18ac0 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a74:	0005303a 	rdctl	r2,status
   18a78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a7c:	e0fffa17 	ldw	r3,-24(fp)
   18a80:	00bfff84 	movi	r2,-2
   18a84:	1884703a 	and	r2,r3,r2
   18a88:	1001703a 	wrctl	status,r2
  
  return context;
   18a8c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   18a90:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   18a94:	e0ffff03 	ldbu	r3,-4(fp)
   18a98:	008000b4 	movhi	r2,2
   18a9c:	10955a04 	addi	r2,r2,21864
   18aa0:	18c7883a 	add	r3,r3,r3
   18aa4:	18c7883a 	add	r3,r3,r3
   18aa8:	10c5883a 	add	r2,r2,r3
   18aac:	10000015 	stw	zero,0(r2)
   18ab0:	e0bff317 	ldw	r2,-52(fp)
   18ab4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18ab8:	e0bff617 	ldw	r2,-40(fp)
   18abc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   18ac0:	e0bff803 	ldbu	r2,-32(fp)
   18ac4:	00000506 	br	18adc <OSTaskCreate+0x198>
   18ac8:	e0bff317 	ldw	r2,-52(fp)
   18acc:	e0bff915 	stw	r2,-28(fp)
   18ad0:	e0bff917 	ldw	r2,-28(fp)
   18ad4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   18ad8:	00800a04 	movi	r2,40
}
   18adc:	e037883a 	mov	sp,fp
   18ae0:	dfc00117 	ldw	ra,4(sp)
   18ae4:	df000017 	ldw	fp,0(sp)
   18ae8:	dec00204 	addi	sp,sp,8
   18aec:	f800283a 	ret

00018af0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   18af0:	deffec04 	addi	sp,sp,-80
   18af4:	dfc01315 	stw	ra,76(sp)
   18af8:	df001215 	stw	fp,72(sp)
   18afc:	df001204 	addi	fp,sp,72
   18b00:	e13ffa15 	stw	r4,-24(fp)
   18b04:	e17ffb15 	stw	r5,-20(fp)
   18b08:	e1bffc15 	stw	r6,-16(fp)
   18b0c:	3809883a 	mov	r4,r7
   18b10:	e0c00217 	ldw	r3,8(fp)
   18b14:	e0800617 	ldw	r2,24(fp)
   18b18:	e13ffd05 	stb	r4,-12(fp)
   18b1c:	e0fffe0d 	sth	r3,-8(fp)
   18b20:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   18b24:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   18b28:	e0bffd03 	ldbu	r2,-12(fp)
   18b2c:	10800570 	cmpltui	r2,r2,21
   18b30:	1000021e 	bne	r2,zero,18b3c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   18b34:	00800a84 	movi	r2,42
   18b38:	00006106 	br	18cc0 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b3c:	0005303a 	rdctl	r2,status
   18b40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b44:	e0fff917 	ldw	r3,-28(fp)
   18b48:	00bfff84 	movi	r2,-2
   18b4c:	1884703a 	and	r2,r3,r2
   18b50:	1001703a 	wrctl	status,r2
  
  return context;
   18b54:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18b58:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   18b5c:	d0a72b03 	ldbu	r2,-25428(gp)
   18b60:	10803fcc 	andi	r2,r2,255
   18b64:	10000626 	beq	r2,zero,18b80 <OSTaskCreateExt+0x90>
   18b68:	e0bff117 	ldw	r2,-60(fp)
   18b6c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b70:	e0bff217 	ldw	r2,-56(fp)
   18b74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   18b78:	00800f04 	movi	r2,60
   18b7c:	00005006 	br	18cc0 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   18b80:	e0fffd03 	ldbu	r3,-12(fp)
   18b84:	008000b4 	movhi	r2,2
   18b88:	10955a04 	addi	r2,r2,21864
   18b8c:	18c7883a 	add	r3,r3,r3
   18b90:	18c7883a 	add	r3,r3,r3
   18b94:	10c5883a 	add	r2,r2,r3
   18b98:	10800017 	ldw	r2,0(r2)
   18b9c:	1000431e 	bne	r2,zero,18cac <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   18ba0:	e0fffd03 	ldbu	r3,-12(fp)
   18ba4:	008000b4 	movhi	r2,2
   18ba8:	10955a04 	addi	r2,r2,21864
   18bac:	18c7883a 	add	r3,r3,r3
   18bb0:	18c7883a 	add	r3,r3,r3
   18bb4:	10c5883a 	add	r2,r2,r3
   18bb8:	00c00044 	movi	r3,1
   18bbc:	10c00015 	stw	r3,0(r2)
   18bc0:	e0bff117 	ldw	r2,-60(fp)
   18bc4:	e0bff315 	stw	r2,-52(fp)
   18bc8:	e0bff317 	ldw	r2,-52(fp)
   18bcc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   18bd0:	e0bfff0b 	ldhu	r2,-4(fp)
   18bd4:	100d883a 	mov	r6,r2
   18bd8:	e1400417 	ldw	r5,16(fp)
   18bdc:	e1000317 	ldw	r4,12(fp)
   18be0:	0019b500 	call	19b50 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   18be4:	e0bfff0b 	ldhu	r2,-4(fp)
   18be8:	100f883a 	mov	r7,r2
   18bec:	e1bffc17 	ldw	r6,-16(fp)
   18bf0:	e17ffb17 	ldw	r5,-20(fp)
   18bf4:	e13ffa17 	ldw	r4,-24(fp)
   18bf8:	001bbec0 	call	1bbec <OSTaskStkInit>
   18bfc:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   18c00:	e0fffd03 	ldbu	r3,-12(fp)
   18c04:	e13ffe0b 	ldhu	r4,-8(fp)
   18c08:	e0bfff0b 	ldhu	r2,-4(fp)
   18c0c:	d8800215 	stw	r2,8(sp)
   18c10:	e0800517 	ldw	r2,20(fp)
   18c14:	d8800115 	stw	r2,4(sp)
   18c18:	e0800417 	ldw	r2,16(fp)
   18c1c:	d8800015 	stw	r2,0(sp)
   18c20:	200f883a 	mov	r7,r4
   18c24:	e1800317 	ldw	r6,12(fp)
   18c28:	e17ff517 	ldw	r5,-44(fp)
   18c2c:	1809883a 	mov	r4,r3
   18c30:	00146180 	call	14618 <OS_TCBInit>
   18c34:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   18c38:	e0bff603 	ldbu	r2,-40(fp)
   18c3c:	1000061e 	bne	r2,zero,18c58 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   18c40:	d0a71d43 	ldbu	r2,-25483(gp)
   18c44:	10803fcc 	andi	r2,r2,255
   18c48:	10800058 	cmpnei	r2,r2,1
   18c4c:	1000151e 	bne	r2,zero,18ca4 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   18c50:	00142180 	call	14218 <OS_Sched>
   18c54:	00001306 	br	18ca4 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c58:	0005303a 	rdctl	r2,status
   18c5c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c60:	e0fff817 	ldw	r3,-32(fp)
   18c64:	00bfff84 	movi	r2,-2
   18c68:	1884703a 	and	r2,r3,r2
   18c6c:	1001703a 	wrctl	status,r2
  
  return context;
   18c70:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   18c74:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   18c78:	e0fffd03 	ldbu	r3,-12(fp)
   18c7c:	008000b4 	movhi	r2,2
   18c80:	10955a04 	addi	r2,r2,21864
   18c84:	18c7883a 	add	r3,r3,r3
   18c88:	18c7883a 	add	r3,r3,r3
   18c8c:	10c5883a 	add	r2,r2,r3
   18c90:	10000015 	stw	zero,0(r2)
   18c94:	e0bff117 	ldw	r2,-60(fp)
   18c98:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18c9c:	e0bff417 	ldw	r2,-48(fp)
   18ca0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   18ca4:	e0bff603 	ldbu	r2,-40(fp)
   18ca8:	00000506 	br	18cc0 <OSTaskCreateExt+0x1d0>
   18cac:	e0bff117 	ldw	r2,-60(fp)
   18cb0:	e0bff715 	stw	r2,-36(fp)
   18cb4:	e0bff717 	ldw	r2,-36(fp)
   18cb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   18cbc:	00800a04 	movi	r2,40
}
   18cc0:	e037883a 	mov	sp,fp
   18cc4:	dfc00117 	ldw	ra,4(sp)
   18cc8:	df000017 	ldw	fp,0(sp)
   18ccc:	dec00204 	addi	sp,sp,8
   18cd0:	f800283a 	ret

00018cd4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   18cd4:	defff404 	addi	sp,sp,-48
   18cd8:	dfc00b15 	stw	ra,44(sp)
   18cdc:	df000a15 	stw	fp,40(sp)
   18ce0:	df000a04 	addi	fp,sp,40
   18ce4:	2005883a 	mov	r2,r4
   18ce8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   18cec:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   18cf0:	d0a72b03 	ldbu	r2,-25428(gp)
   18cf4:	10803fcc 	andi	r2,r2,255
   18cf8:	10000226 	beq	r2,zero,18d04 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   18cfc:	00801004 	movi	r2,64
   18d00:	0000c006 	br	19004 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   18d04:	e0bfff03 	ldbu	r2,-4(fp)
   18d08:	10800518 	cmpnei	r2,r2,20
   18d0c:	1000021e 	bne	r2,zero,18d18 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   18d10:	00800f84 	movi	r2,62
   18d14:	0000bb06 	br	19004 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   18d18:	e0bfff03 	ldbu	r2,-4(fp)
   18d1c:	10800530 	cmpltui	r2,r2,20
   18d20:	1000051e 	bne	r2,zero,18d38 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   18d24:	e0bfff03 	ldbu	r2,-4(fp)
   18d28:	10803fe0 	cmpeqi	r2,r2,255
   18d2c:	1000021e 	bne	r2,zero,18d38 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   18d30:	00800a84 	movi	r2,42
   18d34:	0000b306 	br	19004 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d38:	0005303a 	rdctl	r2,status
   18d3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18d40:	e0fffe17 	ldw	r3,-8(fp)
   18d44:	00bfff84 	movi	r2,-2
   18d48:	1884703a 	and	r2,r3,r2
   18d4c:	1001703a 	wrctl	status,r2
  
  return context;
   18d50:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   18d54:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   18d58:	e0bfff03 	ldbu	r2,-4(fp)
   18d5c:	10803fd8 	cmpnei	r2,r2,255
   18d60:	1000031e 	bne	r2,zero,18d70 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   18d64:	d0a72c17 	ldw	r2,-25424(gp)
   18d68:	10800c83 	ldbu	r2,50(r2)
   18d6c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   18d70:	e0ffff03 	ldbu	r3,-4(fp)
   18d74:	008000b4 	movhi	r2,2
   18d78:	10955a04 	addi	r2,r2,21864
   18d7c:	18c7883a 	add	r3,r3,r3
   18d80:	18c7883a 	add	r3,r3,r3
   18d84:	10c5883a 	add	r2,r2,r3
   18d88:	10800017 	ldw	r2,0(r2)
   18d8c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   18d90:	e0bff817 	ldw	r2,-32(fp)
   18d94:	1000061e 	bne	r2,zero,18db0 <OSTaskDel+0xdc>
   18d98:	e0bff617 	ldw	r2,-40(fp)
   18d9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18da0:	e0bff717 	ldw	r2,-36(fp)
   18da4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18da8:	008010c4 	movi	r2,67
   18dac:	00009506 	br	19004 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   18db0:	e0bff817 	ldw	r2,-32(fp)
   18db4:	10800058 	cmpnei	r2,r2,1
   18db8:	1000061e 	bne	r2,zero,18dd4 <OSTaskDel+0x100>
   18dbc:	e0bff617 	ldw	r2,-40(fp)
   18dc0:	e0bff915 	stw	r2,-28(fp)
   18dc4:	e0bff917 	ldw	r2,-28(fp)
   18dc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   18dcc:	00800f44 	movi	r2,61
   18dd0:	00008c06 	br	19004 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   18dd4:	e0bff817 	ldw	r2,-32(fp)
   18dd8:	10800d03 	ldbu	r2,52(r2)
   18ddc:	10c03fcc 	andi	r3,r2,255
   18de0:	e0bff817 	ldw	r2,-32(fp)
   18de4:	10800d03 	ldbu	r2,52(r2)
   18de8:	11003fcc 	andi	r4,r2,255
   18dec:	d0a72944 	addi	r2,gp,-25435
   18df0:	2085883a 	add	r2,r4,r2
   18df4:	10800003 	ldbu	r2,0(r2)
   18df8:	1009883a 	mov	r4,r2
   18dfc:	e0bff817 	ldw	r2,-32(fp)
   18e00:	10800d43 	ldbu	r2,53(r2)
   18e04:	0084303a 	nor	r2,zero,r2
   18e08:	2084703a 	and	r2,r4,r2
   18e0c:	1009883a 	mov	r4,r2
   18e10:	d0a72944 	addi	r2,gp,-25435
   18e14:	1885883a 	add	r2,r3,r2
   18e18:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   18e1c:	e0bff817 	ldw	r2,-32(fp)
   18e20:	10800d03 	ldbu	r2,52(r2)
   18e24:	10c03fcc 	andi	r3,r2,255
   18e28:	d0a72944 	addi	r2,gp,-25435
   18e2c:	1885883a 	add	r2,r3,r2
   18e30:	10800003 	ldbu	r2,0(r2)
   18e34:	10803fcc 	andi	r2,r2,255
   18e38:	1000071e 	bne	r2,zero,18e58 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   18e3c:	e0bff817 	ldw	r2,-32(fp)
   18e40:	10800d83 	ldbu	r2,54(r2)
   18e44:	0084303a 	nor	r2,zero,r2
   18e48:	1007883a 	mov	r3,r2
   18e4c:	d0a72903 	ldbu	r2,-25436(gp)
   18e50:	1884703a 	and	r2,r3,r2
   18e54:	d0a72905 	stb	r2,-25436(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   18e58:	e0bff817 	ldw	r2,-32(fp)
   18e5c:	10800717 	ldw	r2,28(r2)
   18e60:	10000526 	beq	r2,zero,18e78 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   18e64:	e0bff817 	ldw	r2,-32(fp)
   18e68:	10800717 	ldw	r2,28(r2)
   18e6c:	100b883a 	mov	r5,r2
   18e70:	e13ff817 	ldw	r4,-32(fp)
   18e74:	0013bc40 	call	13bc4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   18e78:	e0bff817 	ldw	r2,-32(fp)
   18e7c:	10800817 	ldw	r2,32(r2)
   18e80:	10000526 	beq	r2,zero,18e98 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   18e84:	e0bff817 	ldw	r2,-32(fp)
   18e88:	10800817 	ldw	r2,32(r2)
   18e8c:	100b883a 	mov	r5,r2
   18e90:	e13ff817 	ldw	r4,-32(fp)
   18e94:	0013c7c0 	call	13c7c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   18e98:	e0bff817 	ldw	r2,-32(fp)
   18e9c:	10800a17 	ldw	r2,40(r2)
   18ea0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   18ea4:	e0bffb17 	ldw	r2,-20(fp)
   18ea8:	10000226 	beq	r2,zero,18eb4 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   18eac:	e13ffb17 	ldw	r4,-20(fp)
   18eb0:	00160ec0 	call	160ec <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   18eb4:	e0bff817 	ldw	r2,-32(fp)
   18eb8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   18ebc:	e0bff817 	ldw	r2,-32(fp)
   18ec0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   18ec4:	e0bff817 	ldw	r2,-32(fp)
   18ec8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   18ecc:	d0a71d03 	ldbu	r2,-25484(gp)
   18ed0:	10803fcc 	andi	r2,r2,255
   18ed4:	10803fe0 	cmpeqi	r2,r2,255
   18ed8:	1000031e 	bne	r2,zero,18ee8 <OSTaskDel+0x214>
        OSLockNesting++;
   18edc:	d0a71d03 	ldbu	r2,-25484(gp)
   18ee0:	10800044 	addi	r2,r2,1
   18ee4:	d0a71d05 	stb	r2,-25484(gp)
   18ee8:	e0bff617 	ldw	r2,-40(fp)
   18eec:	e0bffd15 	stw	r2,-12(fp)
   18ef0:	e0bffd17 	ldw	r2,-12(fp)
   18ef4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   18ef8:	00137ac0 	call	137ac <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18efc:	0005303a 	rdctl	r2,status
   18f00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18f04:	e0fffa17 	ldw	r3,-24(fp)
   18f08:	00bfff84 	movi	r2,-2
   18f0c:	1884703a 	and	r2,r3,r2
   18f10:	1001703a 	wrctl	status,r2
  
  return context;
   18f14:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   18f18:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   18f1c:	d0a71d03 	ldbu	r2,-25484(gp)
   18f20:	10803fcc 	andi	r2,r2,255
   18f24:	10000326 	beq	r2,zero,18f34 <OSTaskDel+0x260>
        OSLockNesting--;
   18f28:	d0a71d03 	ldbu	r2,-25484(gp)
   18f2c:	10bfffc4 	addi	r2,r2,-1
   18f30:	d0a71d05 	stb	r2,-25484(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   18f34:	e13ff817 	ldw	r4,-32(fp)
   18f38:	001bd6c0 	call	1bd6c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   18f3c:	d0a72543 	ldbu	r2,-25451(gp)
   18f40:	10bfffc4 	addi	r2,r2,-1
   18f44:	d0a72545 	stb	r2,-25451(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   18f48:	e0ffff03 	ldbu	r3,-4(fp)
   18f4c:	008000b4 	movhi	r2,2
   18f50:	10955a04 	addi	r2,r2,21864
   18f54:	18c7883a 	add	r3,r3,r3
   18f58:	18c7883a 	add	r3,r3,r3
   18f5c:	10c5883a 	add	r2,r2,r3
   18f60:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   18f64:	e0bff817 	ldw	r2,-32(fp)
   18f68:	10800617 	ldw	r2,24(r2)
   18f6c:	1000071e 	bne	r2,zero,18f8c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   18f70:	e0bff817 	ldw	r2,-32(fp)
   18f74:	10800517 	ldw	r2,20(r2)
   18f78:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   18f7c:	e0bff817 	ldw	r2,-32(fp)
   18f80:	10800517 	ldw	r2,20(r2)
   18f84:	d0a72015 	stw	r2,-25472(gp)
   18f88:	00000a06 	br	18fb4 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   18f8c:	e0bff817 	ldw	r2,-32(fp)
   18f90:	10800617 	ldw	r2,24(r2)
   18f94:	e0fff817 	ldw	r3,-32(fp)
   18f98:	18c00517 	ldw	r3,20(r3)
   18f9c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   18fa0:	e0bff817 	ldw	r2,-32(fp)
   18fa4:	10800517 	ldw	r2,20(r2)
   18fa8:	e0fff817 	ldw	r3,-32(fp)
   18fac:	18c00617 	ldw	r3,24(r3)
   18fb0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   18fb4:	d0e72417 	ldw	r3,-25456(gp)
   18fb8:	e0bff817 	ldw	r2,-32(fp)
   18fbc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   18fc0:	e0bff817 	ldw	r2,-32(fp)
   18fc4:	d0a72415 	stw	r2,-25456(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   18fc8:	e0bff817 	ldw	r2,-32(fp)
   18fcc:	00c00fc4 	movi	r3,63
   18fd0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   18fd4:	e0bff817 	ldw	r2,-32(fp)
   18fd8:	10001345 	stb	zero,77(r2)
   18fdc:	e0bff617 	ldw	r2,-40(fp)
   18fe0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18fe4:	e0bffc17 	ldw	r2,-16(fp)
   18fe8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   18fec:	d0a71d43 	ldbu	r2,-25483(gp)
   18ff0:	10803fcc 	andi	r2,r2,255
   18ff4:	10800058 	cmpnei	r2,r2,1
   18ff8:	1000011e 	bne	r2,zero,19000 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   18ffc:	00142180 	call	14218 <OS_Sched>
    }
    return (OS_ERR_NONE);
   19000:	0005883a 	mov	r2,zero
}
   19004:	e037883a 	mov	sp,fp
   19008:	dfc00117 	ldw	ra,4(sp)
   1900c:	df000017 	ldw	fp,0(sp)
   19010:	dec00204 	addi	sp,sp,8
   19014:	f800283a 	ret

00019018 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   19018:	defff504 	addi	sp,sp,-44
   1901c:	df000a15 	stw	fp,40(sp)
   19020:	df000a04 	addi	fp,sp,40
   19024:	2005883a 	mov	r2,r4
   19028:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1902c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   19030:	e0bfff03 	ldbu	r2,-4(fp)
   19034:	10800518 	cmpnei	r2,r2,20
   19038:	1000021e 	bne	r2,zero,19044 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1903c:	00800f84 	movi	r2,62
   19040:	00004506 	br	19158 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   19044:	e0bfff03 	ldbu	r2,-4(fp)
   19048:	10800530 	cmpltui	r2,r2,20
   1904c:	1000051e 	bne	r2,zero,19064 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   19050:	e0bfff03 	ldbu	r2,-4(fp)
   19054:	10803fe0 	cmpeqi	r2,r2,255
   19058:	1000021e 	bne	r2,zero,19064 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1905c:	00800a84 	movi	r2,42
   19060:	00003d06 	br	19158 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   19064:	e0bfff03 	ldbu	r2,-4(fp)
   19068:	10803fd8 	cmpnei	r2,r2,255
   1906c:	1000111e 	bne	r2,zero,190b4 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19070:	0005303a 	rdctl	r2,status
   19074:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19078:	e0fff917 	ldw	r3,-28(fp)
   1907c:	00bfff84 	movi	r2,-2
   19080:	1884703a 	and	r2,r3,r2
   19084:	1001703a 	wrctl	status,r2
  
  return context;
   19088:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1908c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   19090:	d0a72c17 	ldw	r2,-25424(gp)
   19094:	10800dc3 	ldbu	r2,55(r2)
   19098:	e0bff805 	stb	r2,-32(fp)
   1909c:	e0bff617 	ldw	r2,-40(fp)
   190a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   190a4:	e0bffe17 	ldw	r2,-8(fp)
   190a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   190ac:	e0bff803 	ldbu	r2,-32(fp)
   190b0:	00002906 	br	19158 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   190b4:	0005303a 	rdctl	r2,status
   190b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   190bc:	e0fff717 	ldw	r3,-36(fp)
   190c0:	00bfff84 	movi	r2,-2
   190c4:	1884703a 	and	r2,r3,r2
   190c8:	1001703a 	wrctl	status,r2
  
  return context;
   190cc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   190d0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   190d4:	e0ffff03 	ldbu	r3,-4(fp)
   190d8:	008000b4 	movhi	r2,2
   190dc:	10955a04 	addi	r2,r2,21864
   190e0:	18c7883a 	add	r3,r3,r3
   190e4:	18c7883a 	add	r3,r3,r3
   190e8:	10c5883a 	add	r2,r2,r3
   190ec:	10800017 	ldw	r2,0(r2)
   190f0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   190f4:	e0bffb17 	ldw	r2,-20(fp)
   190f8:	1000061e 	bne	r2,zero,19114 <OSTaskDelReq+0xfc>
   190fc:	e0bff617 	ldw	r2,-40(fp)
   19100:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19104:	e0bffa17 	ldw	r2,-24(fp)
   19108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1910c:	008010c4 	movi	r2,67
   19110:	00001106 	br	19158 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   19114:	e0bffb17 	ldw	r2,-20(fp)
   19118:	10800058 	cmpnei	r2,r2,1
   1911c:	1000061e 	bne	r2,zero,19138 <OSTaskDelReq+0x120>
   19120:	e0bff617 	ldw	r2,-40(fp)
   19124:	e0bffc15 	stw	r2,-16(fp)
   19128:	e0bffc17 	ldw	r2,-16(fp)
   1912c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   19130:	00800f44 	movi	r2,61
   19134:	00000806 	br	19158 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   19138:	e0bffb17 	ldw	r2,-20(fp)
   1913c:	00c00fc4 	movi	r3,63
   19140:	10c00dc5 	stb	r3,55(r2)
   19144:	e0bff617 	ldw	r2,-40(fp)
   19148:	e0bffd15 	stw	r2,-12(fp)
   1914c:	e0bffd17 	ldw	r2,-12(fp)
   19150:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19154:	0005883a 	mov	r2,zero
}
   19158:	e037883a 	mov	sp,fp
   1915c:	df000017 	ldw	fp,0(sp)
   19160:	dec00104 	addi	sp,sp,4
   19164:	f800283a 	ret

00019168 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19168:	defff404 	addi	sp,sp,-48
   1916c:	dfc00b15 	stw	ra,44(sp)
   19170:	df000a15 	stw	fp,40(sp)
   19174:	df000a04 	addi	fp,sp,40
   19178:	2005883a 	mov	r2,r4
   1917c:	e17ffe15 	stw	r5,-8(fp)
   19180:	e1bfff15 	stw	r6,-4(fp)
   19184:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   19188:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1918c:	e0bfff17 	ldw	r2,-4(fp)
   19190:	1000021e 	bne	r2,zero,1919c <OSTaskNameGet+0x34>
        return (0);
   19194:	0005883a 	mov	r2,zero
   19198:	00005406 	br	192ec <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1919c:	e0bffd03 	ldbu	r2,-12(fp)
   191a0:	10800570 	cmpltui	r2,r2,21
   191a4:	1000081e 	bne	r2,zero,191c8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   191a8:	e0bffd03 	ldbu	r2,-12(fp)
   191ac:	10803fe0 	cmpeqi	r2,r2,255
   191b0:	1000051e 	bne	r2,zero,191c8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   191b4:	e0bfff17 	ldw	r2,-4(fp)
   191b8:	00c00a84 	movi	r3,42
   191bc:	10c00005 	stb	r3,0(r2)
            return (0);
   191c0:	0005883a 	mov	r2,zero
   191c4:	00004906 	br	192ec <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   191c8:	e0bffe17 	ldw	r2,-8(fp)
   191cc:	1000051e 	bne	r2,zero,191e4 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   191d0:	e0bfff17 	ldw	r2,-4(fp)
   191d4:	00c00304 	movi	r3,12
   191d8:	10c00005 	stb	r3,0(r2)
        return (0);
   191dc:	0005883a 	mov	r2,zero
   191e0:	00004206 	br	192ec <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   191e4:	d0a72b03 	ldbu	r2,-25428(gp)
   191e8:	10803fcc 	andi	r2,r2,255
   191ec:	10000526 	beq	r2,zero,19204 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   191f0:	e0bfff17 	ldw	r2,-4(fp)
   191f4:	00c00444 	movi	r3,17
   191f8:	10c00005 	stb	r3,0(r2)
        return (0);
   191fc:	0005883a 	mov	r2,zero
   19200:	00003a06 	br	192ec <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19204:	0005303a 	rdctl	r2,status
   19208:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1920c:	e0fffc17 	ldw	r3,-16(fp)
   19210:	00bfff84 	movi	r2,-2
   19214:	1884703a 	and	r2,r3,r2
   19218:	1001703a 	wrctl	status,r2
  
  return context;
   1921c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19220:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   19224:	e0bffd03 	ldbu	r2,-12(fp)
   19228:	10803fd8 	cmpnei	r2,r2,255
   1922c:	1000031e 	bne	r2,zero,1923c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   19230:	d0a72c17 	ldw	r2,-25424(gp)
   19234:	10800c83 	ldbu	r2,50(r2)
   19238:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1923c:	e0fffd03 	ldbu	r3,-12(fp)
   19240:	008000b4 	movhi	r2,2
   19244:	10955a04 	addi	r2,r2,21864
   19248:	18c7883a 	add	r3,r3,r3
   1924c:	18c7883a 	add	r3,r3,r3
   19250:	10c5883a 	add	r2,r2,r3
   19254:	10800017 	ldw	r2,0(r2)
   19258:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1925c:	e0bff817 	ldw	r2,-32(fp)
   19260:	1000091e 	bne	r2,zero,19288 <OSTaskNameGet+0x120>
   19264:	e0bff617 	ldw	r2,-40(fp)
   19268:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1926c:	e0bff717 	ldw	r2,-36(fp)
   19270:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19274:	e0bfff17 	ldw	r2,-4(fp)
   19278:	00c010c4 	movi	r3,67
   1927c:	10c00005 	stb	r3,0(r2)
        return (0);
   19280:	0005883a 	mov	r2,zero
   19284:	00001906 	br	192ec <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   19288:	e0bff817 	ldw	r2,-32(fp)
   1928c:	10800058 	cmpnei	r2,r2,1
   19290:	1000091e 	bne	r2,zero,192b8 <OSTaskNameGet+0x150>
   19294:	e0bff617 	ldw	r2,-40(fp)
   19298:	e0bff915 	stw	r2,-28(fp)
   1929c:	e0bff917 	ldw	r2,-28(fp)
   192a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   192a4:	e0bfff17 	ldw	r2,-4(fp)
   192a8:	00c010c4 	movi	r3,67
   192ac:	10c00005 	stb	r3,0(r2)
        return (0);
   192b0:	0005883a 	mov	r2,zero
   192b4:	00000d06 	br	192ec <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   192b8:	e0bff817 	ldw	r2,-32(fp)
   192bc:	10801304 	addi	r2,r2,76
   192c0:	100b883a 	mov	r5,r2
   192c4:	e13ffe17 	ldw	r4,-8(fp)
   192c8:	001435c0 	call	1435c <OS_StrCopy>
   192cc:	e0bffb05 	stb	r2,-20(fp)
   192d0:	e0bff617 	ldw	r2,-40(fp)
   192d4:	e0bffa15 	stw	r2,-24(fp)
   192d8:	e0bffa17 	ldw	r2,-24(fp)
   192dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   192e0:	e0bfff17 	ldw	r2,-4(fp)
   192e4:	10000005 	stb	zero,0(r2)
    return (len);
   192e8:	e0bffb03 	ldbu	r2,-20(fp)
}
   192ec:	e037883a 	mov	sp,fp
   192f0:	dfc00117 	ldw	ra,4(sp)
   192f4:	df000017 	ldw	fp,0(sp)
   192f8:	dec00204 	addi	sp,sp,8
   192fc:	f800283a 	ret

00019300 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   19300:	defff304 	addi	sp,sp,-52
   19304:	dfc00c15 	stw	ra,48(sp)
   19308:	df000b15 	stw	fp,44(sp)
   1930c:	df000b04 	addi	fp,sp,44
   19310:	2005883a 	mov	r2,r4
   19314:	e17ffe15 	stw	r5,-8(fp)
   19318:	e1bfff15 	stw	r6,-4(fp)
   1931c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   19320:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   19324:	e0bfff17 	ldw	r2,-4(fp)
   19328:	10005c26 	beq	r2,zero,1949c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1932c:	e0bffd03 	ldbu	r2,-12(fp)
   19330:	10800570 	cmpltui	r2,r2,21
   19334:	1000071e 	bne	r2,zero,19354 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   19338:	e0bffd03 	ldbu	r2,-12(fp)
   1933c:	10803fe0 	cmpeqi	r2,r2,255
   19340:	1000041e 	bne	r2,zero,19354 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   19344:	e0bfff17 	ldw	r2,-4(fp)
   19348:	00c00a84 	movi	r3,42
   1934c:	10c00005 	stb	r3,0(r2)
            return;
   19350:	00005306 	br	194a0 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   19354:	e0bffe17 	ldw	r2,-8(fp)
   19358:	1000041e 	bne	r2,zero,1936c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1935c:	e0bfff17 	ldw	r2,-4(fp)
   19360:	00c00304 	movi	r3,12
   19364:	10c00005 	stb	r3,0(r2)
        return;
   19368:	00004d06 	br	194a0 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1936c:	d0a72b03 	ldbu	r2,-25428(gp)
   19370:	10803fcc 	andi	r2,r2,255
   19374:	10000426 	beq	r2,zero,19388 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   19378:	e0bfff17 	ldw	r2,-4(fp)
   1937c:	00c00484 	movi	r3,18
   19380:	10c00005 	stb	r3,0(r2)
        return;
   19384:	00004606 	br	194a0 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19388:	0005303a 	rdctl	r2,status
   1938c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19390:	e0fffc17 	ldw	r3,-16(fp)
   19394:	00bfff84 	movi	r2,-2
   19398:	1884703a 	and	r2,r3,r2
   1939c:	1001703a 	wrctl	status,r2
  
  return context;
   193a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   193a4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   193a8:	e0bffd03 	ldbu	r2,-12(fp)
   193ac:	10803fd8 	cmpnei	r2,r2,255
   193b0:	1000031e 	bne	r2,zero,193c0 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   193b4:	d0a72c17 	ldw	r2,-25424(gp)
   193b8:	10800c83 	ldbu	r2,50(r2)
   193bc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   193c0:	e0fffd03 	ldbu	r3,-12(fp)
   193c4:	008000b4 	movhi	r2,2
   193c8:	10955a04 	addi	r2,r2,21864
   193cc:	18c7883a 	add	r3,r3,r3
   193d0:	18c7883a 	add	r3,r3,r3
   193d4:	10c5883a 	add	r2,r2,r3
   193d8:	10800017 	ldw	r2,0(r2)
   193dc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   193e0:	e0bff717 	ldw	r2,-36(fp)
   193e4:	1000081e 	bne	r2,zero,19408 <OSTaskNameSet+0x108>
   193e8:	e0bff517 	ldw	r2,-44(fp)
   193ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   193f0:	e0bff617 	ldw	r2,-40(fp)
   193f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   193f8:	e0bfff17 	ldw	r2,-4(fp)
   193fc:	00c010c4 	movi	r3,67
   19400:	10c00005 	stb	r3,0(r2)
        return;
   19404:	00002606 	br	194a0 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   19408:	e0bff717 	ldw	r2,-36(fp)
   1940c:	10800058 	cmpnei	r2,r2,1
   19410:	1000081e 	bne	r2,zero,19434 <OSTaskNameSet+0x134>
   19414:	e0bff517 	ldw	r2,-44(fp)
   19418:	e0bff815 	stw	r2,-32(fp)
   1941c:	e0bff817 	ldw	r2,-32(fp)
   19420:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   19424:	e0bfff17 	ldw	r2,-4(fp)
   19428:	00c010c4 	movi	r3,67
   1942c:	10c00005 	stb	r3,0(r2)
        return;
   19430:	00001b06 	br	194a0 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   19434:	e13ffe17 	ldw	r4,-8(fp)
   19438:	00143d00 	call	143d0 <OS_StrLen>
   1943c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   19440:	e0bffa03 	ldbu	r2,-24(fp)
   19444:	10800830 	cmpltui	r2,r2,32
   19448:	1000081e 	bne	r2,zero,1946c <OSTaskNameSet+0x16c>
   1944c:	e0bff517 	ldw	r2,-44(fp)
   19450:	e0bff915 	stw	r2,-28(fp)
   19454:	e0bff917 	ldw	r2,-28(fp)
   19458:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1945c:	e0bfff17 	ldw	r2,-4(fp)
   19460:	00c01044 	movi	r3,65
   19464:	10c00005 	stb	r3,0(r2)
        return;
   19468:	00000d06 	br	194a0 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1946c:	e0bff717 	ldw	r2,-36(fp)
   19470:	10801304 	addi	r2,r2,76
   19474:	e17ffe17 	ldw	r5,-8(fp)
   19478:	1009883a 	mov	r4,r2
   1947c:	001435c0 	call	1435c <OS_StrCopy>
   19480:	e0bff517 	ldw	r2,-44(fp)
   19484:	e0bffb15 	stw	r2,-20(fp)
   19488:	e0bffb17 	ldw	r2,-20(fp)
   1948c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19490:	e0bfff17 	ldw	r2,-4(fp)
   19494:	10000005 	stb	zero,0(r2)
   19498:	00000106 	br	194a0 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   1949c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   194a0:	e037883a 	mov	sp,fp
   194a4:	dfc00117 	ldw	ra,4(sp)
   194a8:	df000017 	ldw	fp,0(sp)
   194ac:	dec00204 	addi	sp,sp,8
   194b0:	f800283a 	ret

000194b4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   194b4:	defff404 	addi	sp,sp,-48
   194b8:	dfc00b15 	stw	ra,44(sp)
   194bc:	df000a15 	stw	fp,40(sp)
   194c0:	df000a04 	addi	fp,sp,40
   194c4:	2005883a 	mov	r2,r4
   194c8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   194cc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   194d0:	e0bfff03 	ldbu	r2,-4(fp)
   194d4:	10800530 	cmpltui	r2,r2,20
   194d8:	1000021e 	bne	r2,zero,194e4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   194dc:	00800a84 	movi	r2,42
   194e0:	00006406 	br	19674 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   194e4:	0005303a 	rdctl	r2,status
   194e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   194ec:	e0fffe17 	ldw	r3,-8(fp)
   194f0:	00bfff84 	movi	r2,-2
   194f4:	1884703a 	and	r2,r3,r2
   194f8:	1001703a 	wrctl	status,r2
  
  return context;
   194fc:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19500:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   19504:	e0ffff03 	ldbu	r3,-4(fp)
   19508:	008000b4 	movhi	r2,2
   1950c:	10955a04 	addi	r2,r2,21864
   19510:	18c7883a 	add	r3,r3,r3
   19514:	18c7883a 	add	r3,r3,r3
   19518:	10c5883a 	add	r2,r2,r3
   1951c:	10800017 	ldw	r2,0(r2)
   19520:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   19524:	e0bff817 	ldw	r2,-32(fp)
   19528:	1000061e 	bne	r2,zero,19544 <OSTaskResume+0x90>
   1952c:	e0bff617 	ldw	r2,-40(fp)
   19530:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19534:	e0bff717 	ldw	r2,-36(fp)
   19538:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1953c:	00801184 	movi	r2,70
   19540:	00004c06 	br	19674 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   19544:	e0bff817 	ldw	r2,-32(fp)
   19548:	10800058 	cmpnei	r2,r2,1
   1954c:	1000061e 	bne	r2,zero,19568 <OSTaskResume+0xb4>
   19550:	e0bff617 	ldw	r2,-40(fp)
   19554:	e0bff915 	stw	r2,-28(fp)
   19558:	e0bff917 	ldw	r2,-28(fp)
   1955c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19560:	008010c4 	movi	r2,67
   19564:	00004306 	br	19674 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   19568:	e0bff817 	ldw	r2,-32(fp)
   1956c:	10800c03 	ldbu	r2,48(r2)
   19570:	10803fcc 	andi	r2,r2,255
   19574:	1080020c 	andi	r2,r2,8
   19578:	10003926 	beq	r2,zero,19660 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1957c:	e0bff817 	ldw	r2,-32(fp)
   19580:	10c00c03 	ldbu	r3,48(r2)
   19584:	00bffdc4 	movi	r2,-9
   19588:	1884703a 	and	r2,r3,r2
   1958c:	1007883a 	mov	r3,r2
   19590:	e0bff817 	ldw	r2,-32(fp)
   19594:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   19598:	e0bff817 	ldw	r2,-32(fp)
   1959c:	10800c03 	ldbu	r2,48(r2)
   195a0:	10803fcc 	andi	r2,r2,255
   195a4:	1000281e 	bne	r2,zero,19648 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   195a8:	e0bff817 	ldw	r2,-32(fp)
   195ac:	10800b8b 	ldhu	r2,46(r2)
   195b0:	10bfffcc 	andi	r2,r2,65535
   195b4:	10001f1e 	bne	r2,zero,19634 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   195b8:	e0bff817 	ldw	r2,-32(fp)
   195bc:	10c00d83 	ldbu	r3,54(r2)
   195c0:	d0a72903 	ldbu	r2,-25436(gp)
   195c4:	1884b03a 	or	r2,r3,r2
   195c8:	d0a72905 	stb	r2,-25436(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   195cc:	e0bff817 	ldw	r2,-32(fp)
   195d0:	10800d03 	ldbu	r2,52(r2)
   195d4:	10c03fcc 	andi	r3,r2,255
   195d8:	e0bff817 	ldw	r2,-32(fp)
   195dc:	10800d03 	ldbu	r2,52(r2)
   195e0:	11003fcc 	andi	r4,r2,255
   195e4:	d0a72944 	addi	r2,gp,-25435
   195e8:	2085883a 	add	r2,r4,r2
   195ec:	11000003 	ldbu	r4,0(r2)
   195f0:	e0bff817 	ldw	r2,-32(fp)
   195f4:	10800d43 	ldbu	r2,53(r2)
   195f8:	2084b03a 	or	r2,r4,r2
   195fc:	1009883a 	mov	r4,r2
   19600:	d0a72944 	addi	r2,gp,-25435
   19604:	1885883a 	add	r2,r3,r2
   19608:	11000005 	stb	r4,0(r2)
   1960c:	e0bff617 	ldw	r2,-40(fp)
   19610:	e0bffa15 	stw	r2,-24(fp)
   19614:	e0bffa17 	ldw	r2,-24(fp)
   19618:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1961c:	d0a71d43 	ldbu	r2,-25483(gp)
   19620:	10803fcc 	andi	r2,r2,255
   19624:	10800058 	cmpnei	r2,r2,1
   19628:	10000b1e 	bne	r2,zero,19658 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   1962c:	00142180 	call	14218 <OS_Sched>
   19630:	00000906 	br	19658 <OSTaskResume+0x1a4>
   19634:	e0bff617 	ldw	r2,-40(fp)
   19638:	e0bffb15 	stw	r2,-20(fp)
   1963c:	e0bffb17 	ldw	r2,-20(fp)
   19640:	1001703a 	wrctl	status,r2
   19644:	00000406 	br	19658 <OSTaskResume+0x1a4>
   19648:	e0bff617 	ldw	r2,-40(fp)
   1964c:	e0bffc15 	stw	r2,-16(fp)
   19650:	e0bffc17 	ldw	r2,-16(fp)
   19654:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   19658:	0005883a 	mov	r2,zero
   1965c:	00000506 	br	19674 <OSTaskResume+0x1c0>
   19660:	e0bff617 	ldw	r2,-40(fp)
   19664:	e0bffd15 	stw	r2,-12(fp)
   19668:	e0bffd17 	ldw	r2,-12(fp)
   1966c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   19670:	00801104 	movi	r2,68
}
   19674:	e037883a 	mov	sp,fp
   19678:	dfc00117 	ldw	ra,4(sp)
   1967c:	df000017 	ldw	fp,0(sp)
   19680:	dec00204 	addi	sp,sp,8
   19684:	f800283a 	ret

00019688 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   19688:	defff304 	addi	sp,sp,-52
   1968c:	df000c15 	stw	fp,48(sp)
   19690:	df000c04 	addi	fp,sp,48
   19694:	2005883a 	mov	r2,r4
   19698:	e17fff15 	stw	r5,-4(fp)
   1969c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   196a0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   196a4:	e0bffe03 	ldbu	r2,-8(fp)
   196a8:	10800570 	cmpltui	r2,r2,21
   196ac:	1000051e 	bne	r2,zero,196c4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   196b0:	e0bffe03 	ldbu	r2,-8(fp)
   196b4:	10803fe0 	cmpeqi	r2,r2,255
   196b8:	1000021e 	bne	r2,zero,196c4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   196bc:	00800a84 	movi	r2,42
   196c0:	00005d06 	br	19838 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   196c4:	e0bfff17 	ldw	r2,-4(fp)
   196c8:	1000021e 	bne	r2,zero,196d4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   196cc:	00800244 	movi	r2,9
   196d0:	00005906 	br	19838 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   196d4:	e0bfff17 	ldw	r2,-4(fp)
   196d8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   196dc:	e0bfff17 	ldw	r2,-4(fp)
   196e0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   196e4:	0005303a 	rdctl	r2,status
   196e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   196ec:	e0fffd17 	ldw	r3,-12(fp)
   196f0:	00bfff84 	movi	r2,-2
   196f4:	1884703a 	and	r2,r3,r2
   196f8:	1001703a 	wrctl	status,r2
  
  return context;
   196fc:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   19700:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   19704:	e0bffe03 	ldbu	r2,-8(fp)
   19708:	10803fd8 	cmpnei	r2,r2,255
   1970c:	1000031e 	bne	r2,zero,1971c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   19710:	d0a72c17 	ldw	r2,-25424(gp)
   19714:	10800c83 	ldbu	r2,50(r2)
   19718:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1971c:	e0fffe03 	ldbu	r3,-8(fp)
   19720:	008000b4 	movhi	r2,2
   19724:	10955a04 	addi	r2,r2,21864
   19728:	18c7883a 	add	r3,r3,r3
   1972c:	18c7883a 	add	r3,r3,r3
   19730:	10c5883a 	add	r2,r2,r3
   19734:	10800017 	ldw	r2,0(r2)
   19738:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1973c:	e0bff817 	ldw	r2,-32(fp)
   19740:	1000061e 	bne	r2,zero,1975c <OSTaskStkChk+0xd4>
   19744:	e0bff617 	ldw	r2,-40(fp)
   19748:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1974c:	e0bff717 	ldw	r2,-36(fp)
   19750:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19754:	008010c4 	movi	r2,67
   19758:	00003706 	br	19838 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1975c:	e0bff817 	ldw	r2,-32(fp)
   19760:	10800058 	cmpnei	r2,r2,1
   19764:	1000061e 	bne	r2,zero,19780 <OSTaskStkChk+0xf8>
   19768:	e0bff617 	ldw	r2,-40(fp)
   1976c:	e0bff915 	stw	r2,-28(fp)
   19770:	e0bff917 	ldw	r2,-28(fp)
   19774:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19778:	008010c4 	movi	r2,67
   1977c:	00002e06 	br	19838 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   19780:	e0bff817 	ldw	r2,-32(fp)
   19784:	1080040b 	ldhu	r2,16(r2)
   19788:	10bfffcc 	andi	r2,r2,65535
   1978c:	1080004c 	andi	r2,r2,1
   19790:	1000061e 	bne	r2,zero,197ac <OSTaskStkChk+0x124>
   19794:	e0bff617 	ldw	r2,-40(fp)
   19798:	e0bffa15 	stw	r2,-24(fp)
   1979c:	e0bffa17 	ldw	r2,-24(fp)
   197a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   197a4:	00801144 	movi	r2,69
   197a8:	00002306 	br	19838 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   197ac:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   197b0:	e0bff817 	ldw	r2,-32(fp)
   197b4:	10800317 	ldw	r2,12(r2)
   197b8:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   197bc:	e0bff817 	ldw	r2,-32(fp)
   197c0:	10800217 	ldw	r2,8(r2)
   197c4:	e0bff415 	stw	r2,-48(fp)
   197c8:	e0bff617 	ldw	r2,-40(fp)
   197cc:	e0bffb15 	stw	r2,-20(fp)
   197d0:	e0bffb17 	ldw	r2,-20(fp)
   197d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   197d8:	00000306 	br	197e8 <OSTaskStkChk+0x160>
        nfree++;
   197dc:	e0bff517 	ldw	r2,-44(fp)
   197e0:	10800044 	addi	r2,r2,1
   197e4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   197e8:	e0bff417 	ldw	r2,-48(fp)
   197ec:	10c00104 	addi	r3,r2,4
   197f0:	e0fff415 	stw	r3,-48(fp)
   197f4:	10800017 	ldw	r2,0(r2)
   197f8:	103ff826 	beq	r2,zero,197dc <__alt_data_end+0xfffe8a9c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   197fc:	e0bff517 	ldw	r2,-44(fp)
   19800:	1085883a 	add	r2,r2,r2
   19804:	1085883a 	add	r2,r2,r2
   19808:	1007883a 	mov	r3,r2
   1980c:	e0bfff17 	ldw	r2,-4(fp)
   19810:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   19814:	e0fffc17 	ldw	r3,-16(fp)
   19818:	e0bff517 	ldw	r2,-44(fp)
   1981c:	1885c83a 	sub	r2,r3,r2
   19820:	1085883a 	add	r2,r2,r2
   19824:	1085883a 	add	r2,r2,r2
   19828:	1007883a 	mov	r3,r2
   1982c:	e0bfff17 	ldw	r2,-4(fp)
   19830:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   19834:	0005883a 	mov	r2,zero
}
   19838:	e037883a 	mov	sp,fp
   1983c:	df000017 	ldw	fp,0(sp)
   19840:	dec00104 	addi	sp,sp,4
   19844:	f800283a 	ret

00019848 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   19848:	defff504 	addi	sp,sp,-44
   1984c:	dfc00a15 	stw	ra,40(sp)
   19850:	df000915 	stw	fp,36(sp)
   19854:	df000904 	addi	fp,sp,36
   19858:	2005883a 	mov	r2,r4
   1985c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19860:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   19864:	e0bfff03 	ldbu	r2,-4(fp)
   19868:	10800518 	cmpnei	r2,r2,20
   1986c:	1000021e 	bne	r2,zero,19878 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   19870:	008011c4 	movi	r2,71
   19874:	00006806 	br	19a18 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   19878:	e0bfff03 	ldbu	r2,-4(fp)
   1987c:	10800530 	cmpltui	r2,r2,20
   19880:	1000051e 	bne	r2,zero,19898 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   19884:	e0bfff03 	ldbu	r2,-4(fp)
   19888:	10803fe0 	cmpeqi	r2,r2,255
   1988c:	1000021e 	bne	r2,zero,19898 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   19890:	00800a84 	movi	r2,42
   19894:	00006006 	br	19a18 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19898:	0005303a 	rdctl	r2,status
   1989c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   198a0:	e0fffe17 	ldw	r3,-8(fp)
   198a4:	00bfff84 	movi	r2,-2
   198a8:	1884703a 	and	r2,r3,r2
   198ac:	1001703a 	wrctl	status,r2
  
  return context;
   198b0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   198b4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   198b8:	e0bfff03 	ldbu	r2,-4(fp)
   198bc:	10803fd8 	cmpnei	r2,r2,255
   198c0:	1000061e 	bne	r2,zero,198dc <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   198c4:	d0a72c17 	ldw	r2,-25424(gp)
   198c8:	10800c83 	ldbu	r2,50(r2)
   198cc:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   198d0:	00800044 	movi	r2,1
   198d4:	e0bff705 	stb	r2,-36(fp)
   198d8:	00000906 	br	19900 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   198dc:	d0a72c17 	ldw	r2,-25424(gp)
   198e0:	10800c83 	ldbu	r2,50(r2)
   198e4:	10c03fcc 	andi	r3,r2,255
   198e8:	e0bfff03 	ldbu	r2,-4(fp)
   198ec:	1880031e 	bne	r3,r2,198fc <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   198f0:	00800044 	movi	r2,1
   198f4:	e0bff705 	stb	r2,-36(fp)
   198f8:	00000106 	br	19900 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   198fc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19900:	e0ffff03 	ldbu	r3,-4(fp)
   19904:	008000b4 	movhi	r2,2
   19908:	10955a04 	addi	r2,r2,21864
   1990c:	18c7883a 	add	r3,r3,r3
   19910:	18c7883a 	add	r3,r3,r3
   19914:	10c5883a 	add	r2,r2,r3
   19918:	10800017 	ldw	r2,0(r2)
   1991c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   19920:	e0bffa17 	ldw	r2,-24(fp)
   19924:	1000061e 	bne	r2,zero,19940 <OSTaskSuspend+0xf8>
   19928:	e0bff817 	ldw	r2,-32(fp)
   1992c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19930:	e0bff917 	ldw	r2,-28(fp)
   19934:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   19938:	00801204 	movi	r2,72
   1993c:	00003606 	br	19a18 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   19940:	e0bffa17 	ldw	r2,-24(fp)
   19944:	10800058 	cmpnei	r2,r2,1
   19948:	1000061e 	bne	r2,zero,19964 <OSTaskSuspend+0x11c>
   1994c:	e0bff817 	ldw	r2,-32(fp)
   19950:	e0bffb15 	stw	r2,-20(fp)
   19954:	e0bffb17 	ldw	r2,-20(fp)
   19958:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1995c:	008010c4 	movi	r2,67
   19960:	00002d06 	br	19a18 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   19964:	e0bffa17 	ldw	r2,-24(fp)
   19968:	10800d03 	ldbu	r2,52(r2)
   1996c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   19970:	e0fffd03 	ldbu	r3,-12(fp)
   19974:	e13ffd03 	ldbu	r4,-12(fp)
   19978:	d0a72944 	addi	r2,gp,-25435
   1997c:	2085883a 	add	r2,r4,r2
   19980:	10800003 	ldbu	r2,0(r2)
   19984:	1009883a 	mov	r4,r2
   19988:	e0bffa17 	ldw	r2,-24(fp)
   1998c:	10800d43 	ldbu	r2,53(r2)
   19990:	0084303a 	nor	r2,zero,r2
   19994:	2084703a 	and	r2,r4,r2
   19998:	1009883a 	mov	r4,r2
   1999c:	d0a72944 	addi	r2,gp,-25435
   199a0:	1885883a 	add	r2,r3,r2
   199a4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   199a8:	e0fffd03 	ldbu	r3,-12(fp)
   199ac:	d0a72944 	addi	r2,gp,-25435
   199b0:	1885883a 	add	r2,r3,r2
   199b4:	10800003 	ldbu	r2,0(r2)
   199b8:	10803fcc 	andi	r2,r2,255
   199bc:	1000071e 	bne	r2,zero,199dc <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   199c0:	e0bffa17 	ldw	r2,-24(fp)
   199c4:	10800d83 	ldbu	r2,54(r2)
   199c8:	0084303a 	nor	r2,zero,r2
   199cc:	1007883a 	mov	r3,r2
   199d0:	d0a72903 	ldbu	r2,-25436(gp)
   199d4:	1884703a 	and	r2,r3,r2
   199d8:	d0a72905 	stb	r2,-25436(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   199dc:	e0bffa17 	ldw	r2,-24(fp)
   199e0:	10800c03 	ldbu	r2,48(r2)
   199e4:	10800214 	ori	r2,r2,8
   199e8:	1007883a 	mov	r3,r2
   199ec:	e0bffa17 	ldw	r2,-24(fp)
   199f0:	10c00c05 	stb	r3,48(r2)
   199f4:	e0bff817 	ldw	r2,-32(fp)
   199f8:	e0bffc15 	stw	r2,-16(fp)
   199fc:	e0bffc17 	ldw	r2,-16(fp)
   19a00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   19a04:	e0bff703 	ldbu	r2,-36(fp)
   19a08:	10800058 	cmpnei	r2,r2,1
   19a0c:	1000011e 	bne	r2,zero,19a14 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   19a10:	00142180 	call	14218 <OS_Sched>
    }
    return (OS_ERR_NONE);
   19a14:	0005883a 	mov	r2,zero
}
   19a18:	e037883a 	mov	sp,fp
   19a1c:	dfc00117 	ldw	ra,4(sp)
   19a20:	df000017 	ldw	fp,0(sp)
   19a24:	dec00204 	addi	sp,sp,8
   19a28:	f800283a 	ret

00019a2c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   19a2c:	defff604 	addi	sp,sp,-40
   19a30:	dfc00915 	stw	ra,36(sp)
   19a34:	df000815 	stw	fp,32(sp)
   19a38:	df000804 	addi	fp,sp,32
   19a3c:	2005883a 	mov	r2,r4
   19a40:	e17fff15 	stw	r5,-4(fp)
   19a44:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19a48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   19a4c:	e0bffe03 	ldbu	r2,-8(fp)
   19a50:	10800570 	cmpltui	r2,r2,21
   19a54:	1000051e 	bne	r2,zero,19a6c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   19a58:	e0bffe03 	ldbu	r2,-8(fp)
   19a5c:	10803fe0 	cmpeqi	r2,r2,255
   19a60:	1000021e 	bne	r2,zero,19a6c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   19a64:	00800a84 	movi	r2,42
   19a68:	00003406 	br	19b3c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   19a6c:	e0bfff17 	ldw	r2,-4(fp)
   19a70:	1000021e 	bne	r2,zero,19a7c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   19a74:	00800244 	movi	r2,9
   19a78:	00003006 	br	19b3c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19a7c:	0005303a 	rdctl	r2,status
   19a80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19a84:	e0fffd17 	ldw	r3,-12(fp)
   19a88:	00bfff84 	movi	r2,-2
   19a8c:	1884703a 	and	r2,r3,r2
   19a90:	1001703a 	wrctl	status,r2
  
  return context;
   19a94:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19a98:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   19a9c:	e0bffe03 	ldbu	r2,-8(fp)
   19aa0:	10803fd8 	cmpnei	r2,r2,255
   19aa4:	1000031e 	bne	r2,zero,19ab4 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   19aa8:	d0a72c17 	ldw	r2,-25424(gp)
   19aac:	10800c83 	ldbu	r2,50(r2)
   19ab0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19ab4:	e0fffe03 	ldbu	r3,-8(fp)
   19ab8:	008000b4 	movhi	r2,2
   19abc:	10955a04 	addi	r2,r2,21864
   19ac0:	18c7883a 	add	r3,r3,r3
   19ac4:	18c7883a 	add	r3,r3,r3
   19ac8:	10c5883a 	add	r2,r2,r3
   19acc:	10800017 	ldw	r2,0(r2)
   19ad0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   19ad4:	e0bffa17 	ldw	r2,-24(fp)
   19ad8:	1000061e 	bne	r2,zero,19af4 <OSTaskQuery+0xc8>
   19adc:	e0bff817 	ldw	r2,-32(fp)
   19ae0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ae4:	e0bff917 	ldw	r2,-28(fp)
   19ae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   19aec:	00800a44 	movi	r2,41
   19af0:	00001206 	br	19b3c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   19af4:	e0bffa17 	ldw	r2,-24(fp)
   19af8:	10800058 	cmpnei	r2,r2,1
   19afc:	1000061e 	bne	r2,zero,19b18 <OSTaskQuery+0xec>
   19b00:	e0bff817 	ldw	r2,-32(fp)
   19b04:	e0bffb15 	stw	r2,-20(fp)
   19b08:	e0bffb17 	ldw	r2,-20(fp)
   19b0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19b10:	008010c4 	movi	r2,67
   19b14:	00000906 	br	19b3c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   19b18:	01801b04 	movi	r6,108
   19b1c:	e17ffa17 	ldw	r5,-24(fp)
   19b20:	e13fff17 	ldw	r4,-4(fp)
   19b24:	00141b00 	call	141b0 <OS_MemCopy>
   19b28:	e0bff817 	ldw	r2,-32(fp)
   19b2c:	e0bffc15 	stw	r2,-16(fp)
   19b30:	e0bffc17 	ldw	r2,-16(fp)
   19b34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19b38:	0005883a 	mov	r2,zero
}
   19b3c:	e037883a 	mov	sp,fp
   19b40:	dfc00117 	ldw	ra,4(sp)
   19b44:	df000017 	ldw	fp,0(sp)
   19b48:	dec00204 	addi	sp,sp,8
   19b4c:	f800283a 	ret

00019b50 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   19b50:	defffc04 	addi	sp,sp,-16
   19b54:	df000315 	stw	fp,12(sp)
   19b58:	df000304 	addi	fp,sp,12
   19b5c:	e13ffd15 	stw	r4,-12(fp)
   19b60:	e17ffe15 	stw	r5,-8(fp)
   19b64:	3005883a 	mov	r2,r6
   19b68:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   19b6c:	e0bfff0b 	ldhu	r2,-4(fp)
   19b70:	1080004c 	andi	r2,r2,1
   19b74:	10000d26 	beq	r2,zero,19bac <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   19b78:	e0bfff0b 	ldhu	r2,-4(fp)
   19b7c:	1080008c 	andi	r2,r2,2
   19b80:	10000a26 	beq	r2,zero,19bac <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   19b84:	00000706 	br	19ba4 <OS_TaskStkClr+0x54>
                size--;
   19b88:	e0bffe17 	ldw	r2,-8(fp)
   19b8c:	10bfffc4 	addi	r2,r2,-1
   19b90:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   19b94:	e0bffd17 	ldw	r2,-12(fp)
   19b98:	10c00104 	addi	r3,r2,4
   19b9c:	e0fffd15 	stw	r3,-12(fp)
   19ba0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   19ba4:	e0bffe17 	ldw	r2,-8(fp)
   19ba8:	103ff71e 	bne	r2,zero,19b88 <__alt_data_end+0xfffe8e48>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   19bac:	0001883a 	nop
   19bb0:	e037883a 	mov	sp,fp
   19bb4:	df000017 	ldw	fp,0(sp)
   19bb8:	dec00104 	addi	sp,sp,4
   19bbc:	f800283a 	ret

00019bc0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   19bc0:	defff904 	addi	sp,sp,-28
   19bc4:	dfc00615 	stw	ra,24(sp)
   19bc8:	df000515 	stw	fp,20(sp)
   19bcc:	df000504 	addi	fp,sp,20
   19bd0:	2005883a 	mov	r2,r4
   19bd4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19bd8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   19bdc:	d0a72b03 	ldbu	r2,-25428(gp)
   19be0:	10803fcc 	andi	r2,r2,255
   19be4:	1000311e 	bne	r2,zero,19cac <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   19be8:	e0bfff0b 	ldhu	r2,-4(fp)
   19bec:	10003026 	beq	r2,zero,19cb0 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19bf0:	0005303a 	rdctl	r2,status
   19bf4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19bf8:	e0fffe17 	ldw	r3,-8(fp)
   19bfc:	00bfff84 	movi	r2,-2
   19c00:	1884703a 	and	r2,r3,r2
   19c04:	1001703a 	wrctl	status,r2
  
  return context;
   19c08:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   19c0c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   19c10:	d0a72c17 	ldw	r2,-25424(gp)
   19c14:	10800d03 	ldbu	r2,52(r2)
   19c18:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   19c1c:	e0fffd03 	ldbu	r3,-12(fp)
   19c20:	e13ffd03 	ldbu	r4,-12(fp)
   19c24:	d0a72944 	addi	r2,gp,-25435
   19c28:	2085883a 	add	r2,r4,r2
   19c2c:	10800003 	ldbu	r2,0(r2)
   19c30:	1009883a 	mov	r4,r2
   19c34:	d0a72c17 	ldw	r2,-25424(gp)
   19c38:	10800d43 	ldbu	r2,53(r2)
   19c3c:	0084303a 	nor	r2,zero,r2
   19c40:	2084703a 	and	r2,r4,r2
   19c44:	1009883a 	mov	r4,r2
   19c48:	d0a72944 	addi	r2,gp,-25435
   19c4c:	1885883a 	add	r2,r3,r2
   19c50:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   19c54:	e0fffd03 	ldbu	r3,-12(fp)
   19c58:	d0a72944 	addi	r2,gp,-25435
   19c5c:	1885883a 	add	r2,r3,r2
   19c60:	10800003 	ldbu	r2,0(r2)
   19c64:	10803fcc 	andi	r2,r2,255
   19c68:	1000071e 	bne	r2,zero,19c88 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   19c6c:	d0a72c17 	ldw	r2,-25424(gp)
   19c70:	10800d83 	ldbu	r2,54(r2)
   19c74:	0084303a 	nor	r2,zero,r2
   19c78:	1007883a 	mov	r3,r2
   19c7c:	d0a72903 	ldbu	r2,-25436(gp)
   19c80:	1884703a 	and	r2,r3,r2
   19c84:	d0a72905 	stb	r2,-25436(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   19c88:	d0a72c17 	ldw	r2,-25424(gp)
   19c8c:	e0ffff0b 	ldhu	r3,-4(fp)
   19c90:	10c00b8d 	sth	r3,46(r2)
   19c94:	e0bffb17 	ldw	r2,-20(fp)
   19c98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19c9c:	e0bffc17 	ldw	r2,-16(fp)
   19ca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   19ca4:	00142180 	call	14218 <OS_Sched>
   19ca8:	00000106 	br	19cb0 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   19cac:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   19cb0:	e037883a 	mov	sp,fp
   19cb4:	dfc00117 	ldw	ra,4(sp)
   19cb8:	df000017 	ldw	fp,0(sp)
   19cbc:	dec00204 	addi	sp,sp,8
   19cc0:	f800283a 	ret

00019cc4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   19cc4:	defff704 	addi	sp,sp,-36
   19cc8:	dfc00815 	stw	ra,32(sp)
   19ccc:	df000715 	stw	fp,28(sp)
   19cd0:	dc000615 	stw	r16,24(sp)
   19cd4:	df000704 	addi	fp,sp,28
   19cd8:	2011883a 	mov	r8,r4
   19cdc:	2809883a 	mov	r4,r5
   19ce0:	3007883a 	mov	r3,r6
   19ce4:	3805883a 	mov	r2,r7
   19ce8:	e23ffb05 	stb	r8,-20(fp)
   19cec:	e13ffc05 	stb	r4,-16(fp)
   19cf0:	e0fffd05 	stb	r3,-12(fp)
   19cf4:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   19cf8:	d0a72b03 	ldbu	r2,-25428(gp)
   19cfc:	10803fcc 	andi	r2,r2,255
   19d00:	10000226 	beq	r2,zero,19d0c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   19d04:	00801544 	movi	r2,85
   19d08:	00004806 	br	19e2c <OSTimeDlyHMSM+0x168>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   19d0c:	e0bffb03 	ldbu	r2,-20(fp)
   19d10:	1000081e 	bne	r2,zero,19d34 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   19d14:	e0bffc03 	ldbu	r2,-16(fp)
   19d18:	1000061e 	bne	r2,zero,19d34 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   19d1c:	e0bffd03 	ldbu	r2,-12(fp)
   19d20:	1000041e 	bne	r2,zero,19d34 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   19d24:	e0bffe0b 	ldhu	r2,-8(fp)
   19d28:	1000021e 	bne	r2,zero,19d34 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   19d2c:	00801504 	movi	r2,84
   19d30:	00003e06 	br	19e2c <OSTimeDlyHMSM+0x168>
                }
            }
        }
    }
    if (minutes > 59) {
   19d34:	e0bffc03 	ldbu	r2,-16(fp)
   19d38:	10800f30 	cmpltui	r2,r2,60
   19d3c:	1000021e 	bne	r2,zero,19d48 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   19d40:	00801444 	movi	r2,81
   19d44:	00003906 	br	19e2c <OSTimeDlyHMSM+0x168>
    }
    if (seconds > 59) {
   19d48:	e0bffd03 	ldbu	r2,-12(fp)
   19d4c:	10800f30 	cmpltui	r2,r2,60
   19d50:	1000021e 	bne	r2,zero,19d5c <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   19d54:	00801484 	movi	r2,82
   19d58:	00003406 	br	19e2c <OSTimeDlyHMSM+0x168>
    }
    if (ms > 999) {
   19d5c:	e0bffe0b 	ldhu	r2,-8(fp)
   19d60:	1080fa30 	cmpltui	r2,r2,1000
   19d64:	1000021e 	bne	r2,zero,19d70 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   19d68:	008014c4 	movi	r2,83
   19d6c:	00002f06 	br	19e2c <OSTimeDlyHMSM+0x168>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   19d70:	e0bffb03 	ldbu	r2,-20(fp)
   19d74:	01438404 	movi	r5,3600
   19d78:	1009883a 	mov	r4,r2
   19d7c:	0004f140 	call	4f14 <__mulsi3>
   19d80:	1021883a 	mov	r16,r2
   19d84:	e0bffc03 	ldbu	r2,-16(fp)
   19d88:	01400f04 	movi	r5,60
   19d8c:	1009883a 	mov	r4,r2
   19d90:	0004f140 	call	4f14 <__mulsi3>
   19d94:	8087883a 	add	r3,r16,r2
   19d98:	e0bffd03 	ldbu	r2,-12(fp)
   19d9c:	1885883a 	add	r2,r3,r2
   19da0:	01401904 	movi	r5,100
   19da4:	1009883a 	mov	r4,r2
   19da8:	0004f140 	call	4f14 <__mulsi3>
   19dac:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   19db0:	e0bffe0b 	ldhu	r2,-8(fp)
   19db4:	01401904 	movi	r5,100
   19db8:	1009883a 	mov	r4,r2
   19dbc:	0004f140 	call	4f14 <__mulsi3>
   19dc0:	10807d04 	addi	r2,r2,500
   19dc4:	0140fa04 	movi	r5,1000
   19dc8:	1009883a 	mov	r4,r2
   19dcc:	0004e580 	call	4e58 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   19dd0:	8085883a 	add	r2,r16,r2
   19dd4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   19dd8:	e0bffa17 	ldw	r2,-24(fp)
   19ddc:	1004d43a 	srli	r2,r2,16
   19de0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   19de4:	e0bffa17 	ldw	r2,-24(fp)
   19de8:	10bfffcc 	andi	r2,r2,65535
   19dec:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   19df0:	e0bffa17 	ldw	r2,-24(fp)
   19df4:	10bfffcc 	andi	r2,r2,65535
   19df8:	1009883a 	mov	r4,r2
   19dfc:	0019bc00 	call	19bc0 <OSTimeDly>
    while (loops > 0) {
   19e00:	00000706 	br	19e20 <OSTimeDlyHMSM+0x15c>
        OSTimeDly((INT16U)32768u);
   19e04:	01200014 	movui	r4,32768
   19e08:	0019bc00 	call	19bc0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   19e0c:	01200014 	movui	r4,32768
   19e10:	0019bc00 	call	19bc0 <OSTimeDly>
        loops--;
   19e14:	e0bff90b 	ldhu	r2,-28(fp)
   19e18:	10bfffc4 	addi	r2,r2,-1
   19e1c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   19e20:	e0bff90b 	ldhu	r2,-28(fp)
   19e24:	103ff71e 	bne	r2,zero,19e04 <__alt_data_end+0xfffe90c4>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   19e28:	0005883a 	mov	r2,zero
}
   19e2c:	e6ffff04 	addi	sp,fp,-4
   19e30:	dfc00217 	ldw	ra,8(sp)
   19e34:	df000117 	ldw	fp,4(sp)
   19e38:	dc000017 	ldw	r16,0(sp)
   19e3c:	dec00304 	addi	sp,sp,12
   19e40:	f800283a 	ret

00019e44 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   19e44:	defff504 	addi	sp,sp,-44
   19e48:	dfc00a15 	stw	ra,40(sp)
   19e4c:	df000915 	stw	fp,36(sp)
   19e50:	df000904 	addi	fp,sp,36
   19e54:	2005883a 	mov	r2,r4
   19e58:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19e5c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   19e60:	e0bfff03 	ldbu	r2,-4(fp)
   19e64:	10800530 	cmpltui	r2,r2,20
   19e68:	1000021e 	bne	r2,zero,19e74 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   19e6c:	00800a84 	movi	r2,42
   19e70:	00006406 	br	1a004 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19e74:	0005303a 	rdctl	r2,status
   19e78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19e7c:	e0fffe17 	ldw	r3,-8(fp)
   19e80:	00bfff84 	movi	r2,-2
   19e84:	1884703a 	and	r2,r3,r2
   19e88:	1001703a 	wrctl	status,r2
  
  return context;
   19e8c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   19e90:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   19e94:	e0ffff03 	ldbu	r3,-4(fp)
   19e98:	008000b4 	movhi	r2,2
   19e9c:	10955a04 	addi	r2,r2,21864
   19ea0:	18c7883a 	add	r3,r3,r3
   19ea4:	18c7883a 	add	r3,r3,r3
   19ea8:	10c5883a 	add	r2,r2,r3
   19eac:	10800017 	ldw	r2,0(r2)
   19eb0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   19eb4:	e0bff917 	ldw	r2,-28(fp)
   19eb8:	1000061e 	bne	r2,zero,19ed4 <OSTimeDlyResume+0x90>
   19ebc:	e0bff717 	ldw	r2,-36(fp)
   19ec0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ec4:	e0bff817 	ldw	r2,-32(fp)
   19ec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   19ecc:	008010c4 	movi	r2,67
   19ed0:	00004c06 	br	1a004 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   19ed4:	e0bff917 	ldw	r2,-28(fp)
   19ed8:	10800058 	cmpnei	r2,r2,1
   19edc:	1000061e 	bne	r2,zero,19ef8 <OSTimeDlyResume+0xb4>
   19ee0:	e0bff717 	ldw	r2,-36(fp)
   19ee4:	e0bffa15 	stw	r2,-24(fp)
   19ee8:	e0bffa17 	ldw	r2,-24(fp)
   19eec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   19ef0:	008010c4 	movi	r2,67
   19ef4:	00004306 	br	1a004 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   19ef8:	e0bff917 	ldw	r2,-28(fp)
   19efc:	10800b8b 	ldhu	r2,46(r2)
   19f00:	10bfffcc 	andi	r2,r2,65535
   19f04:	1000061e 	bne	r2,zero,19f20 <OSTimeDlyResume+0xdc>
   19f08:	e0bff717 	ldw	r2,-36(fp)
   19f0c:	e0bffb15 	stw	r2,-20(fp)
   19f10:	e0bffb17 	ldw	r2,-20(fp)
   19f14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   19f18:	00801404 	movi	r2,80
   19f1c:	00003906 	br	1a004 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   19f20:	e0bff917 	ldw	r2,-28(fp)
   19f24:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   19f28:	e0bff917 	ldw	r2,-28(fp)
   19f2c:	10800c03 	ldbu	r2,48(r2)
   19f30:	10803fcc 	andi	r2,r2,255
   19f34:	10800dcc 	andi	r2,r2,55
   19f38:	10000b26 	beq	r2,zero,19f68 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   19f3c:	e0bff917 	ldw	r2,-28(fp)
   19f40:	10c00c03 	ldbu	r3,48(r2)
   19f44:	00bff204 	movi	r2,-56
   19f48:	1884703a 	and	r2,r3,r2
   19f4c:	1007883a 	mov	r3,r2
   19f50:	e0bff917 	ldw	r2,-28(fp)
   19f54:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   19f58:	e0bff917 	ldw	r2,-28(fp)
   19f5c:	00c00044 	movi	r3,1
   19f60:	10c00c45 	stb	r3,49(r2)
   19f64:	00000206 	br	19f70 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   19f68:	e0bff917 	ldw	r2,-28(fp)
   19f6c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   19f70:	e0bff917 	ldw	r2,-28(fp)
   19f74:	10800c03 	ldbu	r2,48(r2)
   19f78:	10803fcc 	andi	r2,r2,255
   19f7c:	1080020c 	andi	r2,r2,8
   19f80:	10001b1e 	bne	r2,zero,19ff0 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   19f84:	e0bff917 	ldw	r2,-28(fp)
   19f88:	10c00d83 	ldbu	r3,54(r2)
   19f8c:	d0a72903 	ldbu	r2,-25436(gp)
   19f90:	1884b03a 	or	r2,r3,r2
   19f94:	d0a72905 	stb	r2,-25436(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   19f98:	e0bff917 	ldw	r2,-28(fp)
   19f9c:	10800d03 	ldbu	r2,52(r2)
   19fa0:	10c03fcc 	andi	r3,r2,255
   19fa4:	e0bff917 	ldw	r2,-28(fp)
   19fa8:	10800d03 	ldbu	r2,52(r2)
   19fac:	11003fcc 	andi	r4,r2,255
   19fb0:	d0a72944 	addi	r2,gp,-25435
   19fb4:	2085883a 	add	r2,r4,r2
   19fb8:	11000003 	ldbu	r4,0(r2)
   19fbc:	e0bff917 	ldw	r2,-28(fp)
   19fc0:	10800d43 	ldbu	r2,53(r2)
   19fc4:	2084b03a 	or	r2,r4,r2
   19fc8:	1009883a 	mov	r4,r2
   19fcc:	d0a72944 	addi	r2,gp,-25435
   19fd0:	1885883a 	add	r2,r3,r2
   19fd4:	11000005 	stb	r4,0(r2)
   19fd8:	e0bff717 	ldw	r2,-36(fp)
   19fdc:	e0bffc15 	stw	r2,-16(fp)
   19fe0:	e0bffc17 	ldw	r2,-16(fp)
   19fe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   19fe8:	00142180 	call	14218 <OS_Sched>
   19fec:	00000406 	br	1a000 <OSTimeDlyResume+0x1bc>
   19ff0:	e0bff717 	ldw	r2,-36(fp)
   19ff4:	e0bffd15 	stw	r2,-12(fp)
   19ff8:	e0bffd17 	ldw	r2,-12(fp)
   19ffc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1a000:	0005883a 	mov	r2,zero
}
   1a004:	e037883a 	mov	sp,fp
   1a008:	dfc00117 	ldw	ra,4(sp)
   1a00c:	df000017 	ldw	fp,0(sp)
   1a010:	dec00204 	addi	sp,sp,8
   1a014:	f800283a 	ret

0001a018 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1a018:	defffb04 	addi	sp,sp,-20
   1a01c:	df000415 	stw	fp,16(sp)
   1a020:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a024:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a028:	0005303a 	rdctl	r2,status
   1a02c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a030:	e0fffe17 	ldw	r3,-8(fp)
   1a034:	00bfff84 	movi	r2,-2
   1a038:	1884703a 	and	r2,r3,r2
   1a03c:	1001703a 	wrctl	status,r2
  
  return context;
   1a040:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1a044:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1a048:	d0a72d17 	ldw	r2,-25420(gp)
   1a04c:	e0bffd15 	stw	r2,-12(fp)
   1a050:	e0bffc17 	ldw	r2,-16(fp)
   1a054:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a058:	e0bfff17 	ldw	r2,-4(fp)
   1a05c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1a060:	e0bffd17 	ldw	r2,-12(fp)
}
   1a064:	e037883a 	mov	sp,fp
   1a068:	df000017 	ldw	fp,0(sp)
   1a06c:	dec00104 	addi	sp,sp,4
   1a070:	f800283a 	ret

0001a074 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1a074:	defffb04 	addi	sp,sp,-20
   1a078:	df000415 	stw	fp,16(sp)
   1a07c:	df000404 	addi	fp,sp,16
   1a080:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a084:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a088:	0005303a 	rdctl	r2,status
   1a08c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a090:	e0fffd17 	ldw	r3,-12(fp)
   1a094:	00bfff84 	movi	r2,-2
   1a098:	1884703a 	and	r2,r3,r2
   1a09c:	1001703a 	wrctl	status,r2
  
  return context;
   1a0a0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1a0a4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1a0a8:	e0bfff17 	ldw	r2,-4(fp)
   1a0ac:	d0a72d15 	stw	r2,-25420(gp)
   1a0b0:	e0bffc17 	ldw	r2,-16(fp)
   1a0b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a0b8:	e0bffe17 	ldw	r2,-8(fp)
   1a0bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1a0c0:	0001883a 	nop
   1a0c4:	e037883a 	mov	sp,fp
   1a0c8:	df000017 	ldw	fp,0(sp)
   1a0cc:	dec00104 	addi	sp,sp,4
   1a0d0:	f800283a 	ret

0001a0d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a0d4:	defffd04 	addi	sp,sp,-12
   1a0d8:	dfc00215 	stw	ra,8(sp)
   1a0dc:	df000115 	stw	fp,4(sp)
   1a0e0:	df000104 	addi	fp,sp,4
   1a0e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a0e8:	d1600904 	addi	r5,gp,-32732
   1a0ec:	e13fff17 	ldw	r4,-4(fp)
   1a0f0:	001b14c0 	call	1b14c <alt_dev_llist_insert>
}
   1a0f4:	e037883a 	mov	sp,fp
   1a0f8:	dfc00117 	ldw	ra,4(sp)
   1a0fc:	df000017 	ldw	fp,0(sp)
   1a100:	dec00204 	addi	sp,sp,8
   1a104:	f800283a 	ret

0001a108 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a108:	defffd04 	addi	sp,sp,-12
   1a10c:	dfc00215 	stw	ra,8(sp)
   1a110:	df000115 	stw	fp,4(sp)
   1a114:	df000104 	addi	fp,sp,4
   1a118:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   1a11c:	001baf80 	call	1baf8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a120:	00800044 	movi	r2,1
   1a124:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a128:	0001883a 	nop
   1a12c:	e037883a 	mov	sp,fp
   1a130:	dfc00117 	ldw	ra,4(sp)
   1a134:	df000017 	ldw	fp,0(sp)
   1a138:	dec00204 	addi	sp,sp,8
   1a13c:	f800283a 	ret

0001a140 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a140:	defffe04 	addi	sp,sp,-8
   1a144:	dfc00115 	stw	ra,4(sp)
   1a148:	df000015 	stw	fp,0(sp)
   1a14c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1a150:	01c01904 	movi	r7,100
   1a154:	000d883a 	mov	r6,zero
   1a158:	000b883a 	mov	r5,zero
   1a15c:	01000134 	movhi	r4,4
   1a160:	21040004 	addi	r4,r4,4096
   1a164:	001af480 	call	1af48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1a168:	01800204 	movi	r6,8
   1a16c:	000b883a 	mov	r5,zero
   1a170:	010000b4 	movhi	r4,2
   1a174:	21358704 	addi	r4,r4,-10724
   1a178:	001a3080 	call	1a308 <altera_avalon_jtag_uart_init>
   1a17c:	010000b4 	movhi	r4,2
   1a180:	21357d04 	addi	r4,r4,-10764
   1a184:	001a0d40 	call	1a0d4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1a188:	0001883a 	nop
}
   1a18c:	0001883a 	nop
   1a190:	e037883a 	mov	sp,fp
   1a194:	dfc00117 	ldw	ra,4(sp)
   1a198:	df000017 	ldw	fp,0(sp)
   1a19c:	dec00204 	addi	sp,sp,8
   1a1a0:	f800283a 	ret

0001a1a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1a1a4:	defffa04 	addi	sp,sp,-24
   1a1a8:	dfc00515 	stw	ra,20(sp)
   1a1ac:	df000415 	stw	fp,16(sp)
   1a1b0:	df000404 	addi	fp,sp,16
   1a1b4:	e13ffd15 	stw	r4,-12(fp)
   1a1b8:	e17ffe15 	stw	r5,-8(fp)
   1a1bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a1c0:	e0bffd17 	ldw	r2,-12(fp)
   1a1c4:	10800017 	ldw	r2,0(r2)
   1a1c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a1cc:	e0bffc17 	ldw	r2,-16(fp)
   1a1d0:	10c00a04 	addi	r3,r2,40
   1a1d4:	e0bffd17 	ldw	r2,-12(fp)
   1a1d8:	10800217 	ldw	r2,8(r2)
   1a1dc:	100f883a 	mov	r7,r2
   1a1e0:	e1bfff17 	ldw	r6,-4(fp)
   1a1e4:	e17ffe17 	ldw	r5,-8(fp)
   1a1e8:	1809883a 	mov	r4,r3
   1a1ec:	001a9500 	call	1a950 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1a1f0:	e037883a 	mov	sp,fp
   1a1f4:	dfc00117 	ldw	ra,4(sp)
   1a1f8:	df000017 	ldw	fp,0(sp)
   1a1fc:	dec00204 	addi	sp,sp,8
   1a200:	f800283a 	ret

0001a204 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1a204:	defffa04 	addi	sp,sp,-24
   1a208:	dfc00515 	stw	ra,20(sp)
   1a20c:	df000415 	stw	fp,16(sp)
   1a210:	df000404 	addi	fp,sp,16
   1a214:	e13ffd15 	stw	r4,-12(fp)
   1a218:	e17ffe15 	stw	r5,-8(fp)
   1a21c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a220:	e0bffd17 	ldw	r2,-12(fp)
   1a224:	10800017 	ldw	r2,0(r2)
   1a228:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a22c:	e0bffc17 	ldw	r2,-16(fp)
   1a230:	10c00a04 	addi	r3,r2,40
   1a234:	e0bffd17 	ldw	r2,-12(fp)
   1a238:	10800217 	ldw	r2,8(r2)
   1a23c:	100f883a 	mov	r7,r2
   1a240:	e1bfff17 	ldw	r6,-4(fp)
   1a244:	e17ffe17 	ldw	r5,-8(fp)
   1a248:	1809883a 	mov	r4,r3
   1a24c:	001ac0c0 	call	1ac0c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1a250:	e037883a 	mov	sp,fp
   1a254:	dfc00117 	ldw	ra,4(sp)
   1a258:	df000017 	ldw	fp,0(sp)
   1a25c:	dec00204 	addi	sp,sp,8
   1a260:	f800283a 	ret

0001a264 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1a264:	defffc04 	addi	sp,sp,-16
   1a268:	dfc00315 	stw	ra,12(sp)
   1a26c:	df000215 	stw	fp,8(sp)
   1a270:	df000204 	addi	fp,sp,8
   1a274:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a278:	e0bfff17 	ldw	r2,-4(fp)
   1a27c:	10800017 	ldw	r2,0(r2)
   1a280:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1a284:	e0bffe17 	ldw	r2,-8(fp)
   1a288:	10c00a04 	addi	r3,r2,40
   1a28c:	e0bfff17 	ldw	r2,-4(fp)
   1a290:	10800217 	ldw	r2,8(r2)
   1a294:	100b883a 	mov	r5,r2
   1a298:	1809883a 	mov	r4,r3
   1a29c:	001a7f80 	call	1a7f8 <altera_avalon_jtag_uart_close>
}
   1a2a0:	e037883a 	mov	sp,fp
   1a2a4:	dfc00117 	ldw	ra,4(sp)
   1a2a8:	df000017 	ldw	fp,0(sp)
   1a2ac:	dec00204 	addi	sp,sp,8
   1a2b0:	f800283a 	ret

0001a2b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1a2b4:	defffa04 	addi	sp,sp,-24
   1a2b8:	dfc00515 	stw	ra,20(sp)
   1a2bc:	df000415 	stw	fp,16(sp)
   1a2c0:	df000404 	addi	fp,sp,16
   1a2c4:	e13ffd15 	stw	r4,-12(fp)
   1a2c8:	e17ffe15 	stw	r5,-8(fp)
   1a2cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1a2d0:	e0bffd17 	ldw	r2,-12(fp)
   1a2d4:	10800017 	ldw	r2,0(r2)
   1a2d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1a2dc:	e0bffc17 	ldw	r2,-16(fp)
   1a2e0:	10800a04 	addi	r2,r2,40
   1a2e4:	e1bfff17 	ldw	r6,-4(fp)
   1a2e8:	e17ffe17 	ldw	r5,-8(fp)
   1a2ec:	1009883a 	mov	r4,r2
   1a2f0:	001a8600 	call	1a860 <altera_avalon_jtag_uart_ioctl>
}
   1a2f4:	e037883a 	mov	sp,fp
   1a2f8:	dfc00117 	ldw	ra,4(sp)
   1a2fc:	df000017 	ldw	fp,0(sp)
   1a300:	dec00204 	addi	sp,sp,8
   1a304:	f800283a 	ret

0001a308 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1a308:	defff104 	addi	sp,sp,-60
   1a30c:	dfc00e15 	stw	ra,56(sp)
   1a310:	df000d15 	stw	fp,52(sp)
   1a314:	df000d04 	addi	fp,sp,52
   1a318:	e13ff915 	stw	r4,-28(fp)
   1a31c:	e17ffa15 	stw	r5,-24(fp)
   1a320:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1a324:	e0bff917 	ldw	r2,-28(fp)
   1a328:	10800c04 	addi	r2,r2,48
   1a32c:	e0bff415 	stw	r2,-48(fp)
   1a330:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1a334:	e0bff80b 	ldhu	r2,-32(fp)
   1a338:	e0fff884 	addi	r3,fp,-30
   1a33c:	180b883a 	mov	r5,r3
   1a340:	1009883a 	mov	r4,r2
   1a344:	0014d840 	call	14d84 <OSFlagCreate>
   1a348:	1007883a 	mov	r3,r2
   1a34c:	e0bff417 	ldw	r2,-48(fp)
   1a350:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1a354:	e0bff917 	ldw	r2,-28(fp)
   1a358:	10800a04 	addi	r2,r2,40
   1a35c:	e0bff515 	stw	r2,-44(fp)
   1a360:	00800044 	movi	r2,1
   1a364:	e0bff78d 	sth	r2,-34(fp)
   1a368:	e0bff78b 	ldhu	r2,-34(fp)
   1a36c:	1009883a 	mov	r4,r2
   1a370:	0017aa40 	call	17aa4 <OSSemCreate>
   1a374:	1007883a 	mov	r3,r2
   1a378:	e0bff517 	ldw	r2,-44(fp)
   1a37c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1a380:	e0bff917 	ldw	r2,-28(fp)
   1a384:	10800b04 	addi	r2,r2,44
   1a388:	e0bff615 	stw	r2,-40(fp)
   1a38c:	00800044 	movi	r2,1
   1a390:	e0bff70d 	sth	r2,-36(fp)
   1a394:	e0bff70b 	ldhu	r2,-36(fp)
   1a398:	1009883a 	mov	r4,r2
   1a39c:	0017aa40 	call	17aa4 <OSSemCreate>
   1a3a0:	1007883a 	mov	r3,r2
   1a3a4:	e0bff617 	ldw	r2,-40(fp)
   1a3a8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a3ac:	e0bff917 	ldw	r2,-28(fp)
   1a3b0:	00c00044 	movi	r3,1
   1a3b4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1a3b8:	e0bff917 	ldw	r2,-28(fp)
   1a3bc:	10800017 	ldw	r2,0(r2)
   1a3c0:	10800104 	addi	r2,r2,4
   1a3c4:	1007883a 	mov	r3,r2
   1a3c8:	e0bff917 	ldw	r2,-28(fp)
   1a3cc:	10800817 	ldw	r2,32(r2)
   1a3d0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1a3d4:	e0bffa17 	ldw	r2,-24(fp)
   1a3d8:	e0fffb17 	ldw	r3,-20(fp)
   1a3dc:	d8000015 	stw	zero,0(sp)
   1a3e0:	e1fff917 	ldw	r7,-28(fp)
   1a3e4:	018000b4 	movhi	r6,2
   1a3e8:	31a91404 	addi	r6,r6,-23472
   1a3ec:	180b883a 	mov	r5,r3
   1a3f0:	1009883a 	mov	r4,r2
   1a3f4:	001b2d00 	call	1b2d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1a3f8:	e0bff917 	ldw	r2,-28(fp)
   1a3fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1a400:	e0bff917 	ldw	r2,-28(fp)
   1a404:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a408:	d0e73217 	ldw	r3,-25400(gp)
   1a40c:	e1fff917 	ldw	r7,-28(fp)
   1a410:	018000b4 	movhi	r6,2
   1a414:	31a9bd04 	addi	r6,r6,-22796
   1a418:	180b883a 	mov	r5,r3
   1a41c:	1009883a 	mov	r4,r2
   1a420:	001afc40 	call	1afc4 <alt_alarm_start>
   1a424:	1000040e 	bge	r2,zero,1a438 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1a428:	e0fff917 	ldw	r3,-28(fp)
   1a42c:	00a00034 	movhi	r2,32768
   1a430:	10bfffc4 	addi	r2,r2,-1
   1a434:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1a438:	0001883a 	nop
   1a43c:	e037883a 	mov	sp,fp
   1a440:	dfc00117 	ldw	ra,4(sp)
   1a444:	df000017 	ldw	fp,0(sp)
   1a448:	dec00204 	addi	sp,sp,8
   1a44c:	f800283a 	ret

0001a450 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1a450:	defff204 	addi	sp,sp,-56
   1a454:	dfc00d15 	stw	ra,52(sp)
   1a458:	df000c15 	stw	fp,48(sp)
   1a45c:	df000c04 	addi	fp,sp,48
   1a460:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1a464:	e0bfff17 	ldw	r2,-4(fp)
   1a468:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   1a46c:	e0bff617 	ldw	r2,-40(fp)
   1a470:	10800017 	ldw	r2,0(r2)
   1a474:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a478:	e0bff717 	ldw	r2,-36(fp)
   1a47c:	10800104 	addi	r2,r2,4
   1a480:	10800037 	ldwio	r2,0(r2)
   1a484:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1a488:	e0bff817 	ldw	r2,-32(fp)
   1a48c:	1080c00c 	andi	r2,r2,768
   1a490:	10009126 	beq	r2,zero,1a6d8 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1a494:	e0bff817 	ldw	r2,-32(fp)
   1a498:	1080400c 	andi	r2,r2,256
   1a49c:	10004726 	beq	r2,zero,1a5bc <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1a4a0:	00800074 	movhi	r2,1
   1a4a4:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a4a8:	e0bff617 	ldw	r2,-40(fp)
   1a4ac:	10800d17 	ldw	r2,52(r2)
   1a4b0:	10800044 	addi	r2,r2,1
   1a4b4:	1081ffcc 	andi	r2,r2,2047
   1a4b8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   1a4bc:	e0bff617 	ldw	r2,-40(fp)
   1a4c0:	10c00e17 	ldw	r3,56(r2)
   1a4c4:	e0bff917 	ldw	r2,-28(fp)
   1a4c8:	18802726 	beq	r3,r2,1a568 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1a4cc:	e0bff717 	ldw	r2,-36(fp)
   1a4d0:	10800037 	ldwio	r2,0(r2)
   1a4d4:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1a4d8:	e0bff417 	ldw	r2,-48(fp)
   1a4dc:	10a0000c 	andi	r2,r2,32768
   1a4e0:	10002326 	beq	r2,zero,1a570 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1a4e4:	e0bff617 	ldw	r2,-40(fp)
   1a4e8:	10800d17 	ldw	r2,52(r2)
   1a4ec:	e0fff417 	ldw	r3,-48(fp)
   1a4f0:	1809883a 	mov	r4,r3
   1a4f4:	e0fff617 	ldw	r3,-40(fp)
   1a4f8:	1885883a 	add	r2,r3,r2
   1a4fc:	10801104 	addi	r2,r2,68
   1a500:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a504:	e0bff617 	ldw	r2,-40(fp)
   1a508:	10800d17 	ldw	r2,52(r2)
   1a50c:	10800044 	addi	r2,r2,1
   1a510:	10c1ffcc 	andi	r3,r2,2047
   1a514:	e0bff617 	ldw	r2,-40(fp)
   1a518:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1a51c:	e0bff617 	ldw	r2,-40(fp)
   1a520:	10800c17 	ldw	r2,48(r2)
   1a524:	e0bffb15 	stw	r2,-20(fp)
   1a528:	00800044 	movi	r2,1
   1a52c:	e0bffc0d 	sth	r2,-16(fp)
   1a530:	00800044 	movi	r2,1
   1a534:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1a538:	d0a71d43 	ldbu	r2,-25483(gp)
   1a53c:	10803fcc 	andi	r2,r2,255
   1a540:	103fd926 	beq	r2,zero,1a4a8 <__alt_data_end+0xfffe9768>
  {
    OSFlagPost (group, flags, opt, &err);
   1a544:	e0bffc0b 	ldhu	r2,-16(fp)
   1a548:	e0fffc83 	ldbu	r3,-14(fp)
   1a54c:	e13ffdc4 	addi	r4,fp,-9
   1a550:	200f883a 	mov	r7,r4
   1a554:	180d883a 	mov	r6,r3
   1a558:	100b883a 	mov	r5,r2
   1a55c:	e13ffb17 	ldw	r4,-20(fp)
   1a560:	00159600 	call	15960 <OSFlagPost>
      }
   1a564:	003fd006 	br	1a4a8 <__alt_data_end+0xfffe9768>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1a568:	0001883a 	nop
   1a56c:	00000106 	br	1a574 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1a570:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1a574:	e0bff417 	ldw	r2,-48(fp)
   1a578:	10bfffec 	andhi	r2,r2,65535
   1a57c:	10000f26 	beq	r2,zero,1a5bc <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a580:	e0bff617 	ldw	r2,-40(fp)
   1a584:	10c00817 	ldw	r3,32(r2)
   1a588:	00bfff84 	movi	r2,-2
   1a58c:	1886703a 	and	r3,r3,r2
   1a590:	e0bff617 	ldw	r2,-40(fp)
   1a594:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1a598:	e0bff717 	ldw	r2,-36(fp)
   1a59c:	10800104 	addi	r2,r2,4
   1a5a0:	1007883a 	mov	r3,r2
   1a5a4:	e0bff617 	ldw	r2,-40(fp)
   1a5a8:	10800817 	ldw	r2,32(r2)
   1a5ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a5b0:	e0bff717 	ldw	r2,-36(fp)
   1a5b4:	10800104 	addi	r2,r2,4
   1a5b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1a5bc:	e0bff817 	ldw	r2,-32(fp)
   1a5c0:	1080800c 	andi	r2,r2,512
   1a5c4:	103fac26 	beq	r2,zero,1a478 <__alt_data_end+0xfffe9738>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1a5c8:	e0bff817 	ldw	r2,-32(fp)
   1a5cc:	1004d43a 	srli	r2,r2,16
   1a5d0:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a5d4:	00002606 	br	1a670 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1a5d8:	e0bff717 	ldw	r2,-36(fp)
   1a5dc:	e0fff617 	ldw	r3,-40(fp)
   1a5e0:	18c01017 	ldw	r3,64(r3)
   1a5e4:	e13ff617 	ldw	r4,-40(fp)
   1a5e8:	20c7883a 	add	r3,r4,r3
   1a5ec:	18c21104 	addi	r3,r3,2116
   1a5f0:	18c00003 	ldbu	r3,0(r3)
   1a5f4:	18c03fcc 	andi	r3,r3,255
   1a5f8:	18c0201c 	xori	r3,r3,128
   1a5fc:	18ffe004 	addi	r3,r3,-128
   1a600:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a604:	e0bff617 	ldw	r2,-40(fp)
   1a608:	10801017 	ldw	r2,64(r2)
   1a60c:	10800044 	addi	r2,r2,1
   1a610:	10c1ffcc 	andi	r3,r2,2047
   1a614:	e0bff617 	ldw	r2,-40(fp)
   1a618:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1a61c:	e0bff617 	ldw	r2,-40(fp)
   1a620:	10800c17 	ldw	r2,48(r2)
   1a624:	e0bffa15 	stw	r2,-24(fp)
   1a628:	00800084 	movi	r2,2
   1a62c:	e0bffd0d 	sth	r2,-12(fp)
   1a630:	00800044 	movi	r2,1
   1a634:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1a638:	d0a71d43 	ldbu	r2,-25483(gp)
   1a63c:	10803fcc 	andi	r2,r2,255
   1a640:	10000826 	beq	r2,zero,1a664 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   1a644:	e0bffd0b 	ldhu	r2,-12(fp)
   1a648:	e0fffd83 	ldbu	r3,-10(fp)
   1a64c:	e13ffe04 	addi	r4,fp,-8
   1a650:	200f883a 	mov	r7,r4
   1a654:	180d883a 	mov	r6,r3
   1a658:	100b883a 	mov	r5,r2
   1a65c:	e13ffa17 	ldw	r4,-24(fp)
   1a660:	00159600 	call	15960 <OSFlagPost>

        space--;
   1a664:	e0bff517 	ldw	r2,-44(fp)
   1a668:	10bfffc4 	addi	r2,r2,-1
   1a66c:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a670:	e0bff517 	ldw	r2,-44(fp)
   1a674:	10000526 	beq	r2,zero,1a68c <altera_avalon_jtag_uart_irq+0x23c>
   1a678:	e0bff617 	ldw	r2,-40(fp)
   1a67c:	10c01017 	ldw	r3,64(r2)
   1a680:	e0bff617 	ldw	r2,-40(fp)
   1a684:	10800f17 	ldw	r2,60(r2)
   1a688:	18bfd31e 	bne	r3,r2,1a5d8 <__alt_data_end+0xfffe9898>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1a68c:	e0bff517 	ldw	r2,-44(fp)
   1a690:	103f7926 	beq	r2,zero,1a478 <__alt_data_end+0xfffe9738>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1a694:	e0bff617 	ldw	r2,-40(fp)
   1a698:	10c00817 	ldw	r3,32(r2)
   1a69c:	00bfff44 	movi	r2,-3
   1a6a0:	1886703a 	and	r3,r3,r2
   1a6a4:	e0bff617 	ldw	r2,-40(fp)
   1a6a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a6ac:	e0bff617 	ldw	r2,-40(fp)
   1a6b0:	10800017 	ldw	r2,0(r2)
   1a6b4:	10800104 	addi	r2,r2,4
   1a6b8:	1007883a 	mov	r3,r2
   1a6bc:	e0bff617 	ldw	r2,-40(fp)
   1a6c0:	10800817 	ldw	r2,32(r2)
   1a6c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a6c8:	e0bff717 	ldw	r2,-36(fp)
   1a6cc:	10800104 	addi	r2,r2,4
   1a6d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1a6d4:	003f6806 	br	1a478 <__alt_data_end+0xfffe9738>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1a6d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1a6dc:	0001883a 	nop
   1a6e0:	e037883a 	mov	sp,fp
   1a6e4:	dfc00117 	ldw	ra,4(sp)
   1a6e8:	df000017 	ldw	fp,0(sp)
   1a6ec:	dec00204 	addi	sp,sp,8
   1a6f0:	f800283a 	ret

0001a6f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1a6f4:	defff904 	addi	sp,sp,-28
   1a6f8:	dfc00615 	stw	ra,24(sp)
   1a6fc:	df000515 	stw	fp,20(sp)
   1a700:	df000504 	addi	fp,sp,20
   1a704:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1a708:	e0bfff17 	ldw	r2,-4(fp)
   1a70c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1a710:	e0bffb17 	ldw	r2,-20(fp)
   1a714:	10800017 	ldw	r2,0(r2)
   1a718:	10800104 	addi	r2,r2,4
   1a71c:	10800037 	ldwio	r2,0(r2)
   1a720:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1a724:	e0bffc17 	ldw	r2,-16(fp)
   1a728:	1081000c 	andi	r2,r2,1024
   1a72c:	10000b26 	beq	r2,zero,1a75c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1a730:	e0bffb17 	ldw	r2,-20(fp)
   1a734:	10800017 	ldw	r2,0(r2)
   1a738:	10800104 	addi	r2,r2,4
   1a73c:	1007883a 	mov	r3,r2
   1a740:	e0bffb17 	ldw	r2,-20(fp)
   1a744:	10800817 	ldw	r2,32(r2)
   1a748:	10810014 	ori	r2,r2,1024
   1a74c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1a750:	e0bffb17 	ldw	r2,-20(fp)
   1a754:	10000915 	stw	zero,36(r2)
   1a758:	00002106 	br	1a7e0 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1a75c:	e0bffb17 	ldw	r2,-20(fp)
   1a760:	10c00917 	ldw	r3,36(r2)
   1a764:	00a00034 	movhi	r2,32768
   1a768:	10bfff04 	addi	r2,r2,-4
   1a76c:	10c01c36 	bltu	r2,r3,1a7e0 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   1a770:	e0bffb17 	ldw	r2,-20(fp)
   1a774:	10800917 	ldw	r2,36(r2)
   1a778:	10c00044 	addi	r3,r2,1
   1a77c:	e0bffb17 	ldw	r2,-20(fp)
   1a780:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1a784:	e0bffb17 	ldw	r2,-20(fp)
   1a788:	10c00917 	ldw	r3,36(r2)
   1a78c:	e0bffb17 	ldw	r2,-20(fp)
   1a790:	10800117 	ldw	r2,4(r2)
   1a794:	18801236 	bltu	r3,r2,1a7e0 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1a798:	e0bffb17 	ldw	r2,-20(fp)
   1a79c:	10800c17 	ldw	r2,48(r2)
   1a7a0:	e0bffd15 	stw	r2,-12(fp)
   1a7a4:	00800104 	movi	r2,4
   1a7a8:	e0bffe0d 	sth	r2,-8(fp)
   1a7ac:	00800044 	movi	r2,1
   1a7b0:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1a7b4:	d0a71d43 	ldbu	r2,-25483(gp)
   1a7b8:	10803fcc 	andi	r2,r2,255
   1a7bc:	10000826 	beq	r2,zero,1a7e0 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   1a7c0:	e0bffe0b 	ldhu	r2,-8(fp)
   1a7c4:	e0fffe83 	ldbu	r3,-6(fp)
   1a7c8:	e13ffec4 	addi	r4,fp,-5
   1a7cc:	200f883a 	mov	r7,r4
   1a7d0:	180d883a 	mov	r6,r3
   1a7d4:	100b883a 	mov	r5,r2
   1a7d8:	e13ffd17 	ldw	r4,-12(fp)
   1a7dc:	00159600 	call	15960 <OSFlagPost>
   1a7e0:	d0a73217 	ldw	r2,-25400(gp)
    }
  }

  return alt_ticks_per_second();
}
   1a7e4:	e037883a 	mov	sp,fp
   1a7e8:	dfc00117 	ldw	ra,4(sp)
   1a7ec:	df000017 	ldw	fp,0(sp)
   1a7f0:	dec00204 	addi	sp,sp,8
   1a7f4:	f800283a 	ret

0001a7f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1a7f8:	defffd04 	addi	sp,sp,-12
   1a7fc:	df000215 	stw	fp,8(sp)
   1a800:	df000204 	addi	fp,sp,8
   1a804:	e13ffe15 	stw	r4,-8(fp)
   1a808:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a80c:	00000506 	br	1a824 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1a810:	e0bfff17 	ldw	r2,-4(fp)
   1a814:	1090000c 	andi	r2,r2,16384
   1a818:	10000226 	beq	r2,zero,1a824 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1a81c:	00bffd44 	movi	r2,-11
   1a820:	00000b06 	br	1a850 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a824:	e0bffe17 	ldw	r2,-8(fp)
   1a828:	10c01017 	ldw	r3,64(r2)
   1a82c:	e0bffe17 	ldw	r2,-8(fp)
   1a830:	10800f17 	ldw	r2,60(r2)
   1a834:	18800526 	beq	r3,r2,1a84c <altera_avalon_jtag_uart_close+0x54>
   1a838:	e0bffe17 	ldw	r2,-8(fp)
   1a83c:	10c00917 	ldw	r3,36(r2)
   1a840:	e0bffe17 	ldw	r2,-8(fp)
   1a844:	10800117 	ldw	r2,4(r2)
   1a848:	18bff136 	bltu	r3,r2,1a810 <__alt_data_end+0xfffe9ad0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1a84c:	0005883a 	mov	r2,zero
}
   1a850:	e037883a 	mov	sp,fp
   1a854:	df000017 	ldw	fp,0(sp)
   1a858:	dec00104 	addi	sp,sp,4
   1a85c:	f800283a 	ret

0001a860 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1a860:	defffa04 	addi	sp,sp,-24
   1a864:	df000515 	stw	fp,20(sp)
   1a868:	df000504 	addi	fp,sp,20
   1a86c:	e13ffd15 	stw	r4,-12(fp)
   1a870:	e17ffe15 	stw	r5,-8(fp)
   1a874:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1a878:	00bff9c4 	movi	r2,-25
   1a87c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1a880:	e0bffe17 	ldw	r2,-8(fp)
   1a884:	10da8060 	cmpeqi	r3,r2,27137
   1a888:	1800031e 	bne	r3,zero,1a898 <altera_avalon_jtag_uart_ioctl+0x38>
   1a88c:	109a80a0 	cmpeqi	r2,r2,27138
   1a890:	1000181e 	bne	r2,zero,1a8f4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1a894:	00002906 	br	1a93c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1a898:	e0bffd17 	ldw	r2,-12(fp)
   1a89c:	10c00117 	ldw	r3,4(r2)
   1a8a0:	00a00034 	movhi	r2,32768
   1a8a4:	10bfffc4 	addi	r2,r2,-1
   1a8a8:	18802126 	beq	r3,r2,1a930 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1a8ac:	e0bfff17 	ldw	r2,-4(fp)
   1a8b0:	10800017 	ldw	r2,0(r2)
   1a8b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1a8b8:	e0bffc17 	ldw	r2,-16(fp)
   1a8bc:	10800090 	cmplti	r2,r2,2
   1a8c0:	1000061e 	bne	r2,zero,1a8dc <altera_avalon_jtag_uart_ioctl+0x7c>
   1a8c4:	e0fffc17 	ldw	r3,-16(fp)
   1a8c8:	00a00034 	movhi	r2,32768
   1a8cc:	10bfffc4 	addi	r2,r2,-1
   1a8d0:	18800226 	beq	r3,r2,1a8dc <altera_avalon_jtag_uart_ioctl+0x7c>
   1a8d4:	e0bffc17 	ldw	r2,-16(fp)
   1a8d8:	00000206 	br	1a8e4 <altera_avalon_jtag_uart_ioctl+0x84>
   1a8dc:	00a00034 	movhi	r2,32768
   1a8e0:	10bfff84 	addi	r2,r2,-2
   1a8e4:	e0fffd17 	ldw	r3,-12(fp)
   1a8e8:	18800115 	stw	r2,4(r3)
      rc = 0;
   1a8ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a8f0:	00000f06 	br	1a930 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1a8f4:	e0bffd17 	ldw	r2,-12(fp)
   1a8f8:	10c00117 	ldw	r3,4(r2)
   1a8fc:	00a00034 	movhi	r2,32768
   1a900:	10bfffc4 	addi	r2,r2,-1
   1a904:	18800c26 	beq	r3,r2,1a938 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1a908:	e0bffd17 	ldw	r2,-12(fp)
   1a90c:	10c00917 	ldw	r3,36(r2)
   1a910:	e0bffd17 	ldw	r2,-12(fp)
   1a914:	10800117 	ldw	r2,4(r2)
   1a918:	1885803a 	cmpltu	r2,r3,r2
   1a91c:	10c03fcc 	andi	r3,r2,255
   1a920:	e0bfff17 	ldw	r2,-4(fp)
   1a924:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1a928:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a92c:	00000206 	br	1a938 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1a930:	0001883a 	nop
   1a934:	00000106 	br	1a93c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1a938:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1a93c:	e0bffb17 	ldw	r2,-20(fp)
}
   1a940:	e037883a 	mov	sp,fp
   1a944:	df000017 	ldw	fp,0(sp)
   1a948:	dec00104 	addi	sp,sp,4
   1a94c:	f800283a 	ret

0001a950 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1a950:	deffed04 	addi	sp,sp,-76
   1a954:	dfc01215 	stw	ra,72(sp)
   1a958:	df001115 	stw	fp,68(sp)
   1a95c:	df001104 	addi	fp,sp,68
   1a960:	e13ffc15 	stw	r4,-16(fp)
   1a964:	e17ffd15 	stw	r5,-12(fp)
   1a968:	e1bffe15 	stw	r6,-8(fp)
   1a96c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1a970:	e0bffd17 	ldw	r2,-12(fp)
   1a974:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1a978:	e0bffc17 	ldw	r2,-16(fp)
   1a97c:	10800a17 	ldw	r2,40(r2)
   1a980:	e0bff815 	stw	r2,-32(fp)
   1a984:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1a988:	e0bff90b 	ldhu	r2,-28(fp)
   1a98c:	e0fffb04 	addi	r3,fp,-20
   1a990:	180d883a 	mov	r6,r3
   1a994:	100b883a 	mov	r5,r2
   1a998:	e13ff817 	ldw	r4,-32(fp)
   1a99c:	0017dbc0 	call	17dbc <OSSemPend>

  while (space > 0)
   1a9a0:	00006106 	br	1ab28 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1a9a4:	e0bffc17 	ldw	r2,-16(fp)
   1a9a8:	10800d17 	ldw	r2,52(r2)
   1a9ac:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   1a9b0:	e0bffc17 	ldw	r2,-16(fp)
   1a9b4:	10800e17 	ldw	r2,56(r2)
   1a9b8:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   1a9bc:	e0fff317 	ldw	r3,-52(fp)
   1a9c0:	e0bff417 	ldw	r2,-48(fp)
   1a9c4:	18800536 	bltu	r3,r2,1a9dc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1a9c8:	e0fff317 	ldw	r3,-52(fp)
   1a9cc:	e0bff417 	ldw	r2,-48(fp)
   1a9d0:	1885c83a 	sub	r2,r3,r2
   1a9d4:	e0bff115 	stw	r2,-60(fp)
   1a9d8:	00000406 	br	1a9ec <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1a9dc:	00c20004 	movi	r3,2048
   1a9e0:	e0bff417 	ldw	r2,-48(fp)
   1a9e4:	1885c83a 	sub	r2,r3,r2
   1a9e8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1a9ec:	e0bff117 	ldw	r2,-60(fp)
   1a9f0:	10001e26 	beq	r2,zero,1aa6c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   1a9f4:	e0fffe17 	ldw	r3,-8(fp)
   1a9f8:	e0bff117 	ldw	r2,-60(fp)
   1a9fc:	1880022e 	bgeu	r3,r2,1aa08 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   1aa00:	e0bffe17 	ldw	r2,-8(fp)
   1aa04:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1aa08:	e0bffc17 	ldw	r2,-16(fp)
   1aa0c:	10c01104 	addi	r3,r2,68
   1aa10:	e0bff417 	ldw	r2,-48(fp)
   1aa14:	1885883a 	add	r2,r3,r2
   1aa18:	e1bff117 	ldw	r6,-60(fp)
   1aa1c:	100b883a 	mov	r5,r2
   1aa20:	e13ff017 	ldw	r4,-64(fp)
   1aa24:	000d33c0 	call	d33c <memcpy>
      ptr   += n;
   1aa28:	e0fff017 	ldw	r3,-64(fp)
   1aa2c:	e0bff117 	ldw	r2,-60(fp)
   1aa30:	1885883a 	add	r2,r3,r2
   1aa34:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   1aa38:	e0fffe17 	ldw	r3,-8(fp)
   1aa3c:	e0bff117 	ldw	r2,-60(fp)
   1aa40:	1885c83a 	sub	r2,r3,r2
   1aa44:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1aa48:	e0fff417 	ldw	r3,-48(fp)
   1aa4c:	e0bff117 	ldw	r2,-60(fp)
   1aa50:	1885883a 	add	r2,r3,r2
   1aa54:	10c1ffcc 	andi	r3,r2,2047
   1aa58:	e0bffc17 	ldw	r2,-16(fp)
   1aa5c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1aa60:	e0bffe17 	ldw	r2,-8(fp)
   1aa64:	00bfcf16 	blt	zero,r2,1a9a4 <__alt_data_end+0xfffe9c64>
   1aa68:	00000106 	br	1aa70 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1aa6c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1aa70:	e0fff017 	ldw	r3,-64(fp)
   1aa74:	e0bffd17 	ldw	r2,-12(fp)
   1aa78:	18802e1e 	bne	r3,r2,1ab34 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1aa7c:	e0bfff17 	ldw	r2,-4(fp)
   1aa80:	1090000c 	andi	r2,r2,16384
   1aa84:	10002d1e 	bne	r2,zero,1ab3c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1aa88:	d0a71d43 	ldbu	r2,-25483(gp)
   1aa8c:	10803fcc 	andi	r2,r2,255
   1aa90:	10800058 	cmpnei	r2,r2,1
   1aa94:	1000161e 	bne	r2,zero,1aaf0 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1aa98:	e0bffc17 	ldw	r2,-16(fp)
   1aa9c:	10800c17 	ldw	r2,48(r2)
   1aaa0:	e0bff215 	stw	r2,-56(fp)
   1aaa4:	00800144 	movi	r2,5
   1aaa8:	e0bff98d 	sth	r2,-26(fp)
   1aaac:	00bfe0c4 	movi	r2,-125
   1aab0:	e0bffa05 	stb	r2,-24(fp)
   1aab4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1aab8:	d0a71d43 	ldbu	r2,-25483(gp)
   1aabc:	10803fcc 	andi	r2,r2,255
   1aac0:	10001526 	beq	r2,zero,1ab18 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1aac4:	e0fff98b 	ldhu	r3,-26(fp)
   1aac8:	e13ffa03 	ldbu	r4,-24(fp)
   1aacc:	e17ffa8b 	ldhu	r5,-22(fp)
   1aad0:	e0bffb44 	addi	r2,fp,-19
   1aad4:	d8800015 	stw	r2,0(sp)
   1aad8:	280f883a 	mov	r7,r5
   1aadc:	200d883a 	mov	r6,r4
   1aae0:	180b883a 	mov	r5,r3
   1aae4:	e13ff217 	ldw	r4,-56(fp)
   1aae8:	00153480 	call	15348 <OSFlagPend>
   1aaec:	00000a06 	br	1ab18 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1aaf0:	0001883a 	nop
   1aaf4:	e0bffc17 	ldw	r2,-16(fp)
   1aaf8:	10c00d17 	ldw	r3,52(r2)
   1aafc:	e0bff317 	ldw	r2,-52(fp)
   1ab00:	1880051e 	bne	r3,r2,1ab18 <altera_avalon_jtag_uart_read+0x1c8>
   1ab04:	e0bffc17 	ldw	r2,-16(fp)
   1ab08:	10c00917 	ldw	r3,36(r2)
   1ab0c:	e0bffc17 	ldw	r2,-16(fp)
   1ab10:	10800117 	ldw	r2,4(r2)
   1ab14:	18bff736 	bltu	r3,r2,1aaf4 <__alt_data_end+0xfffe9db4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1ab18:	e0bffc17 	ldw	r2,-16(fp)
   1ab1c:	10c00d17 	ldw	r3,52(r2)
   1ab20:	e0bff317 	ldw	r2,-52(fp)
   1ab24:	18800726 	beq	r3,r2,1ab44 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1ab28:	e0bffe17 	ldw	r2,-8(fp)
   1ab2c:	00bf9d16 	blt	zero,r2,1a9a4 <__alt_data_end+0xfffe9c64>
   1ab30:	00000506 	br	1ab48 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1ab34:	0001883a 	nop
   1ab38:	00000306 	br	1ab48 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1ab3c:	0001883a 	nop
   1ab40:	00000106 	br	1ab48 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1ab44:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1ab48:	e0bffc17 	ldw	r2,-16(fp)
   1ab4c:	10800a17 	ldw	r2,40(r2)
   1ab50:	1009883a 	mov	r4,r2
   1ab54:	00181340 	call	18134 <OSSemPost>

  if (ptr != buffer)
   1ab58:	e0fff017 	ldw	r3,-64(fp)
   1ab5c:	e0bffd17 	ldw	r2,-12(fp)
   1ab60:	18801826 	beq	r3,r2,1abc4 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ab64:	0005303a 	rdctl	r2,status
   1ab68:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ab6c:	e0fff717 	ldw	r3,-36(fp)
   1ab70:	00bfff84 	movi	r2,-2
   1ab74:	1884703a 	and	r2,r3,r2
   1ab78:	1001703a 	wrctl	status,r2
  
  return context;
   1ab7c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1ab80:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ab84:	e0bffc17 	ldw	r2,-16(fp)
   1ab88:	10800817 	ldw	r2,32(r2)
   1ab8c:	10c00054 	ori	r3,r2,1
   1ab90:	e0bffc17 	ldw	r2,-16(fp)
   1ab94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ab98:	e0bffc17 	ldw	r2,-16(fp)
   1ab9c:	10800017 	ldw	r2,0(r2)
   1aba0:	10800104 	addi	r2,r2,4
   1aba4:	1007883a 	mov	r3,r2
   1aba8:	e0bffc17 	ldw	r2,-16(fp)
   1abac:	10800817 	ldw	r2,32(r2)
   1abb0:	18800035 	stwio	r2,0(r3)
   1abb4:	e0bff617 	ldw	r2,-40(fp)
   1abb8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1abbc:	e0bff517 	ldw	r2,-44(fp)
   1abc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1abc4:	e0fff017 	ldw	r3,-64(fp)
   1abc8:	e0bffd17 	ldw	r2,-12(fp)
   1abcc:	18800426 	beq	r3,r2,1abe0 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   1abd0:	e0fff017 	ldw	r3,-64(fp)
   1abd4:	e0bffd17 	ldw	r2,-12(fp)
   1abd8:	1885c83a 	sub	r2,r3,r2
   1abdc:	00000606 	br	1abf8 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   1abe0:	e0bfff17 	ldw	r2,-4(fp)
   1abe4:	1090000c 	andi	r2,r2,16384
   1abe8:	10000226 	beq	r2,zero,1abf4 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   1abec:	00bffd44 	movi	r2,-11
   1abf0:	00000106 	br	1abf8 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   1abf4:	00bffec4 	movi	r2,-5
}
   1abf8:	e037883a 	mov	sp,fp
   1abfc:	dfc00117 	ldw	ra,4(sp)
   1ac00:	df000017 	ldw	fp,0(sp)
   1ac04:	dec00204 	addi	sp,sp,8
   1ac08:	f800283a 	ret

0001ac0c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1ac0c:	deffed04 	addi	sp,sp,-76
   1ac10:	dfc01215 	stw	ra,72(sp)
   1ac14:	df001115 	stw	fp,68(sp)
   1ac18:	df001104 	addi	fp,sp,68
   1ac1c:	e13ffc15 	stw	r4,-16(fp)
   1ac20:	e17ffd15 	stw	r5,-12(fp)
   1ac24:	e1bffe15 	stw	r6,-8(fp)
   1ac28:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1ac2c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1ac30:	e0bffd17 	ldw	r2,-12(fp)
   1ac34:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1ac38:	e0bffc17 	ldw	r2,-16(fp)
   1ac3c:	10800b17 	ldw	r2,44(r2)
   1ac40:	e0bff815 	stw	r2,-32(fp)
   1ac44:	e03ff90d 	sth	zero,-28(fp)
   1ac48:	e0bff90b 	ldhu	r2,-28(fp)
   1ac4c:	e0fffb44 	addi	r3,fp,-19
   1ac50:	180d883a 	mov	r6,r3
   1ac54:	100b883a 	mov	r5,r2
   1ac58:	e13ff817 	ldw	r4,-32(fp)
   1ac5c:	0017dbc0 	call	17dbc <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1ac60:	00003706 	br	1ad40 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1ac64:	e0bffc17 	ldw	r2,-16(fp)
   1ac68:	10800f17 	ldw	r2,60(r2)
   1ac6c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   1ac70:	e0bffc17 	ldw	r2,-16(fp)
   1ac74:	10801017 	ldw	r2,64(r2)
   1ac78:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1ac7c:	e0fff417 	ldw	r3,-48(fp)
   1ac80:	e0bff017 	ldw	r2,-64(fp)
   1ac84:	1880062e 	bgeu	r3,r2,1aca0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1ac88:	e0fff017 	ldw	r3,-64(fp)
   1ac8c:	e0bff417 	ldw	r2,-48(fp)
   1ac90:	1885c83a 	sub	r2,r3,r2
   1ac94:	10bfffc4 	addi	r2,r2,-1
   1ac98:	e0bff115 	stw	r2,-60(fp)
   1ac9c:	00000b06 	br	1accc <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1aca0:	e0bff017 	ldw	r2,-64(fp)
   1aca4:	10000526 	beq	r2,zero,1acbc <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1aca8:	00c20004 	movi	r3,2048
   1acac:	e0bff417 	ldw	r2,-48(fp)
   1acb0:	1885c83a 	sub	r2,r3,r2
   1acb4:	e0bff115 	stw	r2,-60(fp)
   1acb8:	00000406 	br	1accc <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1acbc:	00c1ffc4 	movi	r3,2047
   1acc0:	e0bff417 	ldw	r2,-48(fp)
   1acc4:	1885c83a 	sub	r2,r3,r2
   1acc8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1accc:	e0bff117 	ldw	r2,-60(fp)
   1acd0:	10001e26 	beq	r2,zero,1ad4c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   1acd4:	e0fffe17 	ldw	r3,-8(fp)
   1acd8:	e0bff117 	ldw	r2,-60(fp)
   1acdc:	1880022e 	bgeu	r3,r2,1ace8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   1ace0:	e0bffe17 	ldw	r2,-8(fp)
   1ace4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1ace8:	e0bffc17 	ldw	r2,-16(fp)
   1acec:	10c21104 	addi	r3,r2,2116
   1acf0:	e0bff417 	ldw	r2,-48(fp)
   1acf4:	1885883a 	add	r2,r3,r2
   1acf8:	e1bff117 	ldw	r6,-60(fp)
   1acfc:	e17ffd17 	ldw	r5,-12(fp)
   1ad00:	1009883a 	mov	r4,r2
   1ad04:	000d33c0 	call	d33c <memcpy>
      ptr   += n;
   1ad08:	e0fffd17 	ldw	r3,-12(fp)
   1ad0c:	e0bff117 	ldw	r2,-60(fp)
   1ad10:	1885883a 	add	r2,r3,r2
   1ad14:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1ad18:	e0fffe17 	ldw	r3,-8(fp)
   1ad1c:	e0bff117 	ldw	r2,-60(fp)
   1ad20:	1885c83a 	sub	r2,r3,r2
   1ad24:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ad28:	e0fff417 	ldw	r3,-48(fp)
   1ad2c:	e0bff117 	ldw	r2,-60(fp)
   1ad30:	1885883a 	add	r2,r3,r2
   1ad34:	10c1ffcc 	andi	r3,r2,2047
   1ad38:	e0bffc17 	ldw	r2,-16(fp)
   1ad3c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1ad40:	e0bffe17 	ldw	r2,-8(fp)
   1ad44:	00bfc716 	blt	zero,r2,1ac64 <__alt_data_end+0xfffe9f24>
   1ad48:	00000106 	br	1ad50 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1ad4c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad50:	0005303a 	rdctl	r2,status
   1ad54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad58:	e0fff717 	ldw	r3,-36(fp)
   1ad5c:	00bfff84 	movi	r2,-2
   1ad60:	1884703a 	and	r2,r3,r2
   1ad64:	1001703a 	wrctl	status,r2
  
  return context;
   1ad68:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1ad6c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1ad70:	e0bffc17 	ldw	r2,-16(fp)
   1ad74:	10800817 	ldw	r2,32(r2)
   1ad78:	10c00094 	ori	r3,r2,2
   1ad7c:	e0bffc17 	ldw	r2,-16(fp)
   1ad80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ad84:	e0bffc17 	ldw	r2,-16(fp)
   1ad88:	10800017 	ldw	r2,0(r2)
   1ad8c:	10800104 	addi	r2,r2,4
   1ad90:	1007883a 	mov	r3,r2
   1ad94:	e0bffc17 	ldw	r2,-16(fp)
   1ad98:	10800817 	ldw	r2,32(r2)
   1ad9c:	18800035 	stwio	r2,0(r3)
   1ada0:	e0bff617 	ldw	r2,-40(fp)
   1ada4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ada8:	e0bff317 	ldw	r2,-52(fp)
   1adac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1adb0:	e0bffe17 	ldw	r2,-8(fp)
   1adb4:	00802a0e 	bge	zero,r2,1ae60 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   1adb8:	e0bfff17 	ldw	r2,-4(fp)
   1adbc:	1090000c 	andi	r2,r2,16384
   1adc0:	10002a1e 	bne	r2,zero,1ae6c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1adc4:	d0a71d43 	ldbu	r2,-25483(gp)
   1adc8:	10803fcc 	andi	r2,r2,255
   1adcc:	10800058 	cmpnei	r2,r2,1
   1add0:	1000161e 	bne	r2,zero,1ae2c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1add4:	e0bffc17 	ldw	r2,-16(fp)
   1add8:	10800c17 	ldw	r2,48(r2)
   1addc:	e0bff515 	stw	r2,-44(fp)
   1ade0:	00800184 	movi	r2,6
   1ade4:	e0bff98d 	sth	r2,-26(fp)
   1ade8:	00bfe0c4 	movi	r2,-125
   1adec:	e0bffa05 	stb	r2,-24(fp)
   1adf0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1adf4:	d0a71d43 	ldbu	r2,-25483(gp)
   1adf8:	10803fcc 	andi	r2,r2,255
   1adfc:	10001526 	beq	r2,zero,1ae54 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1ae00:	e0fff98b 	ldhu	r3,-26(fp)
   1ae04:	e13ffa03 	ldbu	r4,-24(fp)
   1ae08:	e17ffa8b 	ldhu	r5,-22(fp)
   1ae0c:	e0bffb04 	addi	r2,fp,-20
   1ae10:	d8800015 	stw	r2,0(sp)
   1ae14:	280f883a 	mov	r7,r5
   1ae18:	200d883a 	mov	r6,r4
   1ae1c:	180b883a 	mov	r5,r3
   1ae20:	e13ff517 	ldw	r4,-44(fp)
   1ae24:	00153480 	call	15348 <OSFlagPend>
   1ae28:	00000a06 	br	1ae54 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1ae2c:	0001883a 	nop
   1ae30:	e0bffc17 	ldw	r2,-16(fp)
   1ae34:	10c01017 	ldw	r3,64(r2)
   1ae38:	e0bff017 	ldw	r2,-64(fp)
   1ae3c:	1880051e 	bne	r3,r2,1ae54 <altera_avalon_jtag_uart_write+0x248>
   1ae40:	e0bffc17 	ldw	r2,-16(fp)
   1ae44:	10c00917 	ldw	r3,36(r2)
   1ae48:	e0bffc17 	ldw	r2,-16(fp)
   1ae4c:	10800117 	ldw	r2,4(r2)
   1ae50:	18bff736 	bltu	r3,r2,1ae30 <__alt_data_end+0xfffea0f0>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1ae54:	e0bffc17 	ldw	r2,-16(fp)
   1ae58:	10800917 	ldw	r2,36(r2)
   1ae5c:	1000051e 	bne	r2,zero,1ae74 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   1ae60:	e0bffe17 	ldw	r2,-8(fp)
   1ae64:	00bfb616 	blt	zero,r2,1ad40 <__alt_data_end+0xfffea000>
   1ae68:	00000306 	br	1ae78 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1ae6c:	0001883a 	nop
   1ae70:	00000106 	br	1ae78 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1ae74:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1ae78:	e0bffc17 	ldw	r2,-16(fp)
   1ae7c:	10800b17 	ldw	r2,44(r2)
   1ae80:	1009883a 	mov	r4,r2
   1ae84:	00181340 	call	18134 <OSSemPost>

  if (ptr != start)
   1ae88:	e0fffd17 	ldw	r3,-12(fp)
   1ae8c:	e0bff217 	ldw	r2,-56(fp)
   1ae90:	18800426 	beq	r3,r2,1aea4 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   1ae94:	e0fffd17 	ldw	r3,-12(fp)
   1ae98:	e0bff217 	ldw	r2,-56(fp)
   1ae9c:	1885c83a 	sub	r2,r3,r2
   1aea0:	00000606 	br	1aebc <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   1aea4:	e0bfff17 	ldw	r2,-4(fp)
   1aea8:	1090000c 	andi	r2,r2,16384
   1aeac:	10000226 	beq	r2,zero,1aeb8 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   1aeb0:	00bffd44 	movi	r2,-11
   1aeb4:	00000106 	br	1aebc <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1aeb8:	00bffec4 	movi	r2,-5
}
   1aebc:	e037883a 	mov	sp,fp
   1aec0:	dfc00117 	ldw	ra,4(sp)
   1aec4:	df000017 	ldw	fp,0(sp)
   1aec8:	dec00204 	addi	sp,sp,8
   1aecc:	f800283a 	ret

0001aed0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1aed0:	defffa04 	addi	sp,sp,-24
   1aed4:	dfc00515 	stw	ra,20(sp)
   1aed8:	df000415 	stw	fp,16(sp)
   1aedc:	df000404 	addi	fp,sp,16
   1aee0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1aee4:	0007883a 	mov	r3,zero
   1aee8:	e0bfff17 	ldw	r2,-4(fp)
   1aeec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1aef0:	e0bfff17 	ldw	r2,-4(fp)
   1aef4:	10800104 	addi	r2,r2,4
   1aef8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aefc:	0005303a 	rdctl	r2,status
   1af00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1af04:	e0fffd17 	ldw	r3,-12(fp)
   1af08:	00bfff84 	movi	r2,-2
   1af0c:	1884703a 	and	r2,r3,r2
   1af10:	1001703a 	wrctl	status,r2
  
  return context;
   1af14:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1af18:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1af1c:	001b9f00 	call	1b9f0 <alt_tick>
   1af20:	e0bffc17 	ldw	r2,-16(fp)
   1af24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1af28:	e0bffe17 	ldw	r2,-8(fp)
   1af2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1af30:	0001883a 	nop
   1af34:	e037883a 	mov	sp,fp
   1af38:	dfc00117 	ldw	ra,4(sp)
   1af3c:	df000017 	ldw	fp,0(sp)
   1af40:	dec00204 	addi	sp,sp,8
   1af44:	f800283a 	ret

0001af48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1af48:	defff804 	addi	sp,sp,-32
   1af4c:	dfc00715 	stw	ra,28(sp)
   1af50:	df000615 	stw	fp,24(sp)
   1af54:	df000604 	addi	fp,sp,24
   1af58:	e13ffc15 	stw	r4,-16(fp)
   1af5c:	e17ffd15 	stw	r5,-12(fp)
   1af60:	e1bffe15 	stw	r6,-8(fp)
   1af64:	e1ffff15 	stw	r7,-4(fp)
   1af68:	e0bfff17 	ldw	r2,-4(fp)
   1af6c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1af70:	d0a73217 	ldw	r2,-25400(gp)
   1af74:	1000021e 	bne	r2,zero,1af80 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1af78:	e0bffb17 	ldw	r2,-20(fp)
   1af7c:	d0a73215 	stw	r2,-25400(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1af80:	e0bffc17 	ldw	r2,-16(fp)
   1af84:	10800104 	addi	r2,r2,4
   1af88:	00c001c4 	movi	r3,7
   1af8c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1af90:	d8000015 	stw	zero,0(sp)
   1af94:	e1fffc17 	ldw	r7,-16(fp)
   1af98:	018000b4 	movhi	r6,2
   1af9c:	31abb404 	addi	r6,r6,-20784
   1afa0:	e17ffe17 	ldw	r5,-8(fp)
   1afa4:	e13ffd17 	ldw	r4,-12(fp)
   1afa8:	001b2d00 	call	1b2d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1afac:	0001883a 	nop
   1afb0:	e037883a 	mov	sp,fp
   1afb4:	dfc00117 	ldw	ra,4(sp)
   1afb8:	df000017 	ldw	fp,0(sp)
   1afbc:	dec00204 	addi	sp,sp,8
   1afc0:	f800283a 	ret

0001afc4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1afc4:	defff504 	addi	sp,sp,-44
   1afc8:	df000a15 	stw	fp,40(sp)
   1afcc:	df000a04 	addi	fp,sp,40
   1afd0:	e13ffc15 	stw	r4,-16(fp)
   1afd4:	e17ffd15 	stw	r5,-12(fp)
   1afd8:	e1bffe15 	stw	r6,-8(fp)
   1afdc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1afe0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1afe4:	d0a73217 	ldw	r2,-25400(gp)
  
  if (alt_ticks_per_second ())
   1afe8:	10003c26 	beq	r2,zero,1b0dc <alt_alarm_start+0x118>
  {
    if (alarm)
   1afec:	e0bffc17 	ldw	r2,-16(fp)
   1aff0:	10003826 	beq	r2,zero,1b0d4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1aff4:	e0bffc17 	ldw	r2,-16(fp)
   1aff8:	e0fffe17 	ldw	r3,-8(fp)
   1affc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1b000:	e0bffc17 	ldw	r2,-16(fp)
   1b004:	e0ffff17 	ldw	r3,-4(fp)
   1b008:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b00c:	0005303a 	rdctl	r2,status
   1b010:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b014:	e0fff917 	ldw	r3,-28(fp)
   1b018:	00bfff84 	movi	r2,-2
   1b01c:	1884703a 	and	r2,r3,r2
   1b020:	1001703a 	wrctl	status,r2
  
  return context;
   1b024:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1b028:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b02c:	d0a73317 	ldw	r2,-25396(gp)
      
      current_nticks = alt_nticks();
   1b030:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b034:	e0fffd17 	ldw	r3,-12(fp)
   1b038:	e0bff617 	ldw	r2,-40(fp)
   1b03c:	1885883a 	add	r2,r3,r2
   1b040:	10c00044 	addi	r3,r2,1
   1b044:	e0bffc17 	ldw	r2,-16(fp)
   1b048:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b04c:	e0bffc17 	ldw	r2,-16(fp)
   1b050:	10c00217 	ldw	r3,8(r2)
   1b054:	e0bff617 	ldw	r2,-40(fp)
   1b058:	1880042e 	bgeu	r3,r2,1b06c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1b05c:	e0bffc17 	ldw	r2,-16(fp)
   1b060:	00c00044 	movi	r3,1
   1b064:	10c00405 	stb	r3,16(r2)
   1b068:	00000206 	br	1b074 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1b06c:	e0bffc17 	ldw	r2,-16(fp)
   1b070:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b074:	e0bffc17 	ldw	r2,-16(fp)
   1b078:	d0e02e04 	addi	r3,gp,-32584
   1b07c:	e0fffa15 	stw	r3,-24(fp)
   1b080:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b084:	e0bffb17 	ldw	r2,-20(fp)
   1b088:	e0fffa17 	ldw	r3,-24(fp)
   1b08c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b090:	e0bffa17 	ldw	r2,-24(fp)
   1b094:	10c00017 	ldw	r3,0(r2)
   1b098:	e0bffb17 	ldw	r2,-20(fp)
   1b09c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b0a0:	e0bffa17 	ldw	r2,-24(fp)
   1b0a4:	10800017 	ldw	r2,0(r2)
   1b0a8:	e0fffb17 	ldw	r3,-20(fp)
   1b0ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b0b0:	e0bffa17 	ldw	r2,-24(fp)
   1b0b4:	e0fffb17 	ldw	r3,-20(fp)
   1b0b8:	10c00015 	stw	r3,0(r2)
   1b0bc:	e0bff817 	ldw	r2,-32(fp)
   1b0c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b0c4:	e0bff717 	ldw	r2,-36(fp)
   1b0c8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b0cc:	0005883a 	mov	r2,zero
   1b0d0:	00000306 	br	1b0e0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1b0d4:	00bffa84 	movi	r2,-22
   1b0d8:	00000106 	br	1b0e0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1b0dc:	00bfde84 	movi	r2,-134
  }
}
   1b0e0:	e037883a 	mov	sp,fp
   1b0e4:	df000017 	ldw	fp,0(sp)
   1b0e8:	dec00104 	addi	sp,sp,4
   1b0ec:	f800283a 	ret

0001b0f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b0f0:	deffff04 	addi	sp,sp,-4
   1b0f4:	df000015 	stw	fp,0(sp)
   1b0f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b0fc:	0001883a 	nop
   1b100:	e037883a 	mov	sp,fp
   1b104:	df000017 	ldw	fp,0(sp)
   1b108:	dec00104 	addi	sp,sp,4
   1b10c:	f800283a 	ret

0001b110 <alt_get_errno>:
   1b110:	defffe04 	addi	sp,sp,-8
   1b114:	dfc00115 	stw	ra,4(sp)
   1b118:	df000015 	stw	fp,0(sp)
   1b11c:	d839883a 	mov	fp,sp
   1b120:	d0a00c17 	ldw	r2,-32720(gp)
   1b124:	10000326 	beq	r2,zero,1b134 <alt_get_errno+0x24>
   1b128:	d0a00c17 	ldw	r2,-32720(gp)
   1b12c:	103ee83a 	callr	r2
   1b130:	00000106 	br	1b138 <alt_get_errno+0x28>
   1b134:	d0a71404 	addi	r2,gp,-25520
   1b138:	e037883a 	mov	sp,fp
   1b13c:	dfc00117 	ldw	ra,4(sp)
   1b140:	df000017 	ldw	fp,0(sp)
   1b144:	dec00204 	addi	sp,sp,8
   1b148:	f800283a 	ret

0001b14c <alt_dev_llist_insert>:
   1b14c:	defffa04 	addi	sp,sp,-24
   1b150:	dfc00515 	stw	ra,20(sp)
   1b154:	df000415 	stw	fp,16(sp)
   1b158:	df000404 	addi	fp,sp,16
   1b15c:	e13ffe15 	stw	r4,-8(fp)
   1b160:	e17fff15 	stw	r5,-4(fp)
   1b164:	e0bffe17 	ldw	r2,-8(fp)
   1b168:	10000326 	beq	r2,zero,1b178 <alt_dev_llist_insert+0x2c>
   1b16c:	e0bffe17 	ldw	r2,-8(fp)
   1b170:	10800217 	ldw	r2,8(r2)
   1b174:	1000061e 	bne	r2,zero,1b190 <alt_dev_llist_insert+0x44>
   1b178:	001b1100 	call	1b110 <alt_get_errno>
   1b17c:	1007883a 	mov	r3,r2
   1b180:	00800584 	movi	r2,22
   1b184:	18800015 	stw	r2,0(r3)
   1b188:	00bffa84 	movi	r2,-22
   1b18c:	00001306 	br	1b1dc <alt_dev_llist_insert+0x90>
   1b190:	e0bffe17 	ldw	r2,-8(fp)
   1b194:	e0ffff17 	ldw	r3,-4(fp)
   1b198:	e0fffc15 	stw	r3,-16(fp)
   1b19c:	e0bffd15 	stw	r2,-12(fp)
   1b1a0:	e0bffd17 	ldw	r2,-12(fp)
   1b1a4:	e0fffc17 	ldw	r3,-16(fp)
   1b1a8:	10c00115 	stw	r3,4(r2)
   1b1ac:	e0bffc17 	ldw	r2,-16(fp)
   1b1b0:	10c00017 	ldw	r3,0(r2)
   1b1b4:	e0bffd17 	ldw	r2,-12(fp)
   1b1b8:	10c00015 	stw	r3,0(r2)
   1b1bc:	e0bffc17 	ldw	r2,-16(fp)
   1b1c0:	10800017 	ldw	r2,0(r2)
   1b1c4:	e0fffd17 	ldw	r3,-12(fp)
   1b1c8:	10c00115 	stw	r3,4(r2)
   1b1cc:	e0bffc17 	ldw	r2,-16(fp)
   1b1d0:	e0fffd17 	ldw	r3,-12(fp)
   1b1d4:	10c00015 	stw	r3,0(r2)
   1b1d8:	0005883a 	mov	r2,zero
   1b1dc:	e037883a 	mov	sp,fp
   1b1e0:	dfc00117 	ldw	ra,4(sp)
   1b1e4:	df000017 	ldw	fp,0(sp)
   1b1e8:	dec00204 	addi	sp,sp,8
   1b1ec:	f800283a 	ret

0001b1f0 <_do_ctors>:
   1b1f0:	defffd04 	addi	sp,sp,-12
   1b1f4:	dfc00215 	stw	ra,8(sp)
   1b1f8:	df000115 	stw	fp,4(sp)
   1b1fc:	df000104 	addi	fp,sp,4
   1b200:	008000b4 	movhi	r2,2
   1b204:	10b14b04 	addi	r2,r2,-15060
   1b208:	e0bfff15 	stw	r2,-4(fp)
   1b20c:	00000606 	br	1b228 <_do_ctors+0x38>
   1b210:	e0bfff17 	ldw	r2,-4(fp)
   1b214:	10800017 	ldw	r2,0(r2)
   1b218:	103ee83a 	callr	r2
   1b21c:	e0bfff17 	ldw	r2,-4(fp)
   1b220:	10bfff04 	addi	r2,r2,-4
   1b224:	e0bfff15 	stw	r2,-4(fp)
   1b228:	e0ffff17 	ldw	r3,-4(fp)
   1b22c:	008000b4 	movhi	r2,2
   1b230:	10b14c04 	addi	r2,r2,-15056
   1b234:	18bff62e 	bgeu	r3,r2,1b210 <__alt_data_end+0xfffea4d0>
   1b238:	0001883a 	nop
   1b23c:	e037883a 	mov	sp,fp
   1b240:	dfc00117 	ldw	ra,4(sp)
   1b244:	df000017 	ldw	fp,0(sp)
   1b248:	dec00204 	addi	sp,sp,8
   1b24c:	f800283a 	ret

0001b250 <_do_dtors>:
   1b250:	defffd04 	addi	sp,sp,-12
   1b254:	dfc00215 	stw	ra,8(sp)
   1b258:	df000115 	stw	fp,4(sp)
   1b25c:	df000104 	addi	fp,sp,4
   1b260:	008000b4 	movhi	r2,2
   1b264:	10b14b04 	addi	r2,r2,-15060
   1b268:	e0bfff15 	stw	r2,-4(fp)
   1b26c:	00000606 	br	1b288 <_do_dtors+0x38>
   1b270:	e0bfff17 	ldw	r2,-4(fp)
   1b274:	10800017 	ldw	r2,0(r2)
   1b278:	103ee83a 	callr	r2
   1b27c:	e0bfff17 	ldw	r2,-4(fp)
   1b280:	10bfff04 	addi	r2,r2,-4
   1b284:	e0bfff15 	stw	r2,-4(fp)
   1b288:	e0ffff17 	ldw	r3,-4(fp)
   1b28c:	008000b4 	movhi	r2,2
   1b290:	10b14c04 	addi	r2,r2,-15056
   1b294:	18bff62e 	bgeu	r3,r2,1b270 <__alt_data_end+0xfffea530>
   1b298:	0001883a 	nop
   1b29c:	e037883a 	mov	sp,fp
   1b2a0:	dfc00117 	ldw	ra,4(sp)
   1b2a4:	df000017 	ldw	fp,0(sp)
   1b2a8:	dec00204 	addi	sp,sp,8
   1b2ac:	f800283a 	ret

0001b2b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b2b0:	deffff04 	addi	sp,sp,-4
   1b2b4:	df000015 	stw	fp,0(sp)
   1b2b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1b2bc:	0001883a 	nop
   1b2c0:	e037883a 	mov	sp,fp
   1b2c4:	df000017 	ldw	fp,0(sp)
   1b2c8:	dec00104 	addi	sp,sp,4
   1b2cc:	f800283a 	ret

0001b2d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b2d0:	defff904 	addi	sp,sp,-28
   1b2d4:	dfc00615 	stw	ra,24(sp)
   1b2d8:	df000515 	stw	fp,20(sp)
   1b2dc:	df000504 	addi	fp,sp,20
   1b2e0:	e13ffc15 	stw	r4,-16(fp)
   1b2e4:	e17ffd15 	stw	r5,-12(fp)
   1b2e8:	e1bffe15 	stw	r6,-8(fp)
   1b2ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1b2f0:	e0800217 	ldw	r2,8(fp)
   1b2f4:	d8800015 	stw	r2,0(sp)
   1b2f8:	e1ffff17 	ldw	r7,-4(fp)
   1b2fc:	e1bffe17 	ldw	r6,-8(fp)
   1b300:	e17ffd17 	ldw	r5,-12(fp)
   1b304:	e13ffc17 	ldw	r4,-16(fp)
   1b308:	001b4800 	call	1b480 <alt_iic_isr_register>
}  
   1b30c:	e037883a 	mov	sp,fp
   1b310:	dfc00117 	ldw	ra,4(sp)
   1b314:	df000017 	ldw	fp,0(sp)
   1b318:	dec00204 	addi	sp,sp,8
   1b31c:	f800283a 	ret

0001b320 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1b320:	defff904 	addi	sp,sp,-28
   1b324:	df000615 	stw	fp,24(sp)
   1b328:	df000604 	addi	fp,sp,24
   1b32c:	e13ffe15 	stw	r4,-8(fp)
   1b330:	e17fff15 	stw	r5,-4(fp)
   1b334:	e0bfff17 	ldw	r2,-4(fp)
   1b338:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b33c:	0005303a 	rdctl	r2,status
   1b340:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b344:	e0fffb17 	ldw	r3,-20(fp)
   1b348:	00bfff84 	movi	r2,-2
   1b34c:	1884703a 	and	r2,r3,r2
   1b350:	1001703a 	wrctl	status,r2
  
  return context;
   1b354:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b358:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1b35c:	00c00044 	movi	r3,1
   1b360:	e0bffa17 	ldw	r2,-24(fp)
   1b364:	1884983a 	sll	r2,r3,r2
   1b368:	1007883a 	mov	r3,r2
   1b36c:	d0a73117 	ldw	r2,-25404(gp)
   1b370:	1884b03a 	or	r2,r3,r2
   1b374:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b378:	d0a73117 	ldw	r2,-25404(gp)
   1b37c:	100170fa 	wrctl	ienable,r2
   1b380:	e0bffc17 	ldw	r2,-16(fp)
   1b384:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b388:	e0bffd17 	ldw	r2,-12(fp)
   1b38c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b390:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1b394:	0001883a 	nop
}
   1b398:	e037883a 	mov	sp,fp
   1b39c:	df000017 	ldw	fp,0(sp)
   1b3a0:	dec00104 	addi	sp,sp,4
   1b3a4:	f800283a 	ret

0001b3a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1b3a8:	defff904 	addi	sp,sp,-28
   1b3ac:	df000615 	stw	fp,24(sp)
   1b3b0:	df000604 	addi	fp,sp,24
   1b3b4:	e13ffe15 	stw	r4,-8(fp)
   1b3b8:	e17fff15 	stw	r5,-4(fp)
   1b3bc:	e0bfff17 	ldw	r2,-4(fp)
   1b3c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b3c4:	0005303a 	rdctl	r2,status
   1b3c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b3cc:	e0fffb17 	ldw	r3,-20(fp)
   1b3d0:	00bfff84 	movi	r2,-2
   1b3d4:	1884703a 	and	r2,r3,r2
   1b3d8:	1001703a 	wrctl	status,r2
  
  return context;
   1b3dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b3e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1b3e4:	00c00044 	movi	r3,1
   1b3e8:	e0bffa17 	ldw	r2,-24(fp)
   1b3ec:	1884983a 	sll	r2,r3,r2
   1b3f0:	0084303a 	nor	r2,zero,r2
   1b3f4:	1007883a 	mov	r3,r2
   1b3f8:	d0a73117 	ldw	r2,-25404(gp)
   1b3fc:	1884703a 	and	r2,r3,r2
   1b400:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b404:	d0a73117 	ldw	r2,-25404(gp)
   1b408:	100170fa 	wrctl	ienable,r2
   1b40c:	e0bffc17 	ldw	r2,-16(fp)
   1b410:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b414:	e0bffd17 	ldw	r2,-12(fp)
   1b418:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b41c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1b420:	0001883a 	nop
}
   1b424:	e037883a 	mov	sp,fp
   1b428:	df000017 	ldw	fp,0(sp)
   1b42c:	dec00104 	addi	sp,sp,4
   1b430:	f800283a 	ret

0001b434 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1b434:	defffc04 	addi	sp,sp,-16
   1b438:	df000315 	stw	fp,12(sp)
   1b43c:	df000304 	addi	fp,sp,12
   1b440:	e13ffe15 	stw	r4,-8(fp)
   1b444:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1b448:	000530fa 	rdctl	r2,ienable
   1b44c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1b450:	00c00044 	movi	r3,1
   1b454:	e0bfff17 	ldw	r2,-4(fp)
   1b458:	1884983a 	sll	r2,r3,r2
   1b45c:	1007883a 	mov	r3,r2
   1b460:	e0bffd17 	ldw	r2,-12(fp)
   1b464:	1884703a 	and	r2,r3,r2
   1b468:	1004c03a 	cmpne	r2,r2,zero
   1b46c:	10803fcc 	andi	r2,r2,255
}
   1b470:	e037883a 	mov	sp,fp
   1b474:	df000017 	ldw	fp,0(sp)
   1b478:	dec00104 	addi	sp,sp,4
   1b47c:	f800283a 	ret

0001b480 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b480:	defff504 	addi	sp,sp,-44
   1b484:	dfc00a15 	stw	ra,40(sp)
   1b488:	df000915 	stw	fp,36(sp)
   1b48c:	df000904 	addi	fp,sp,36
   1b490:	e13ffc15 	stw	r4,-16(fp)
   1b494:	e17ffd15 	stw	r5,-12(fp)
   1b498:	e1bffe15 	stw	r6,-8(fp)
   1b49c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1b4a0:	00bffa84 	movi	r2,-22
   1b4a4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1b4a8:	e0bffd17 	ldw	r2,-12(fp)
   1b4ac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1b4b0:	e0bff817 	ldw	r2,-32(fp)
   1b4b4:	10800808 	cmpgei	r2,r2,32
   1b4b8:	1000271e 	bne	r2,zero,1b558 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b4bc:	0005303a 	rdctl	r2,status
   1b4c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b4c4:	e0fffb17 	ldw	r3,-20(fp)
   1b4c8:	00bfff84 	movi	r2,-2
   1b4cc:	1884703a 	and	r2,r3,r2
   1b4d0:	1001703a 	wrctl	status,r2
  
  return context;
   1b4d4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1b4d8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   1b4dc:	008000b4 	movhi	r2,2
   1b4e0:	10956f04 	addi	r2,r2,21948
   1b4e4:	e0fff817 	ldw	r3,-32(fp)
   1b4e8:	180690fa 	slli	r3,r3,3
   1b4ec:	10c5883a 	add	r2,r2,r3
   1b4f0:	e0fffe17 	ldw	r3,-8(fp)
   1b4f4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1b4f8:	008000b4 	movhi	r2,2
   1b4fc:	10956f04 	addi	r2,r2,21948
   1b500:	e0fff817 	ldw	r3,-32(fp)
   1b504:	180690fa 	slli	r3,r3,3
   1b508:	10c5883a 	add	r2,r2,r3
   1b50c:	10800104 	addi	r2,r2,4
   1b510:	e0ffff17 	ldw	r3,-4(fp)
   1b514:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1b518:	e0bffe17 	ldw	r2,-8(fp)
   1b51c:	10000526 	beq	r2,zero,1b534 <alt_iic_isr_register+0xb4>
   1b520:	e0bff817 	ldw	r2,-32(fp)
   1b524:	100b883a 	mov	r5,r2
   1b528:	e13ffc17 	ldw	r4,-16(fp)
   1b52c:	001b3200 	call	1b320 <alt_ic_irq_enable>
   1b530:	00000406 	br	1b544 <alt_iic_isr_register+0xc4>
   1b534:	e0bff817 	ldw	r2,-32(fp)
   1b538:	100b883a 	mov	r5,r2
   1b53c:	e13ffc17 	ldw	r4,-16(fp)
   1b540:	001b3a80 	call	1b3a8 <alt_ic_irq_disable>
   1b544:	e0bff715 	stw	r2,-36(fp)
   1b548:	e0bffa17 	ldw	r2,-24(fp)
   1b54c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b550:	e0bff917 	ldw	r2,-28(fp)
   1b554:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1b558:	e0bff717 	ldw	r2,-36(fp)
}
   1b55c:	e037883a 	mov	sp,fp
   1b560:	dfc00117 	ldw	ra,4(sp)
   1b564:	df000017 	ldw	fp,0(sp)
   1b568:	dec00204 	addi	sp,sp,8
   1b56c:	f800283a 	ret

0001b570 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1b570:	defff804 	addi	sp,sp,-32
   1b574:	dfc00715 	stw	ra,28(sp)
   1b578:	df000615 	stw	fp,24(sp)
   1b57c:	dc000515 	stw	r16,20(sp)
   1b580:	df000604 	addi	fp,sp,24
   1b584:	e13ffb15 	stw	r4,-20(fp)
   1b588:	e17ffc15 	stw	r5,-16(fp)
   1b58c:	e1bffd15 	stw	r6,-12(fp)
   1b590:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1b594:	e1bffe17 	ldw	r6,-8(fp)
   1b598:	e17ffd17 	ldw	r5,-12(fp)
   1b59c:	e13ffc17 	ldw	r4,-16(fp)
   1b5a0:	001b7f80 	call	1b7f8 <open>
   1b5a4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1b5a8:	e0bffa17 	ldw	r2,-24(fp)
   1b5ac:	10002216 	blt	r2,zero,1b638 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1b5b0:	040000b4 	movhi	r16,2
   1b5b4:	84351d04 	addi	r16,r16,-11148
   1b5b8:	e0bffa17 	ldw	r2,-24(fp)
   1b5bc:	01400304 	movi	r5,12
   1b5c0:	1009883a 	mov	r4,r2
   1b5c4:	0004f140 	call	4f14 <__mulsi3>
   1b5c8:	8085883a 	add	r2,r16,r2
   1b5cc:	10c00017 	ldw	r3,0(r2)
   1b5d0:	e0bffb17 	ldw	r2,-20(fp)
   1b5d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1b5d8:	040000b4 	movhi	r16,2
   1b5dc:	84351d04 	addi	r16,r16,-11148
   1b5e0:	e0bffa17 	ldw	r2,-24(fp)
   1b5e4:	01400304 	movi	r5,12
   1b5e8:	1009883a 	mov	r4,r2
   1b5ec:	0004f140 	call	4f14 <__mulsi3>
   1b5f0:	8085883a 	add	r2,r16,r2
   1b5f4:	10800104 	addi	r2,r2,4
   1b5f8:	10c00017 	ldw	r3,0(r2)
   1b5fc:	e0bffb17 	ldw	r2,-20(fp)
   1b600:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1b604:	040000b4 	movhi	r16,2
   1b608:	84351d04 	addi	r16,r16,-11148
   1b60c:	e0bffa17 	ldw	r2,-24(fp)
   1b610:	01400304 	movi	r5,12
   1b614:	1009883a 	mov	r4,r2
   1b618:	0004f140 	call	4f14 <__mulsi3>
   1b61c:	8085883a 	add	r2,r16,r2
   1b620:	10800204 	addi	r2,r2,8
   1b624:	10c00017 	ldw	r3,0(r2)
   1b628:	e0bffb17 	ldw	r2,-20(fp)
   1b62c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1b630:	e13ffa17 	ldw	r4,-24(fp)
   1b634:	00123580 	call	12358 <alt_release_fd>
  }
} 
   1b638:	0001883a 	nop
   1b63c:	e6ffff04 	addi	sp,fp,-4
   1b640:	dfc00217 	ldw	ra,8(sp)
   1b644:	df000117 	ldw	fp,4(sp)
   1b648:	dc000017 	ldw	r16,0(sp)
   1b64c:	dec00304 	addi	sp,sp,12
   1b650:	f800283a 	ret

0001b654 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1b654:	defffb04 	addi	sp,sp,-20
   1b658:	dfc00415 	stw	ra,16(sp)
   1b65c:	df000315 	stw	fp,12(sp)
   1b660:	df000304 	addi	fp,sp,12
   1b664:	e13ffd15 	stw	r4,-12(fp)
   1b668:	e17ffe15 	stw	r5,-8(fp)
   1b66c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1b670:	01c07fc4 	movi	r7,511
   1b674:	01800044 	movi	r6,1
   1b678:	e17ffd17 	ldw	r5,-12(fp)
   1b67c:	010000b4 	movhi	r4,2
   1b680:	21352004 	addi	r4,r4,-11136
   1b684:	001b5700 	call	1b570 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1b688:	01c07fc4 	movi	r7,511
   1b68c:	000d883a 	mov	r6,zero
   1b690:	e17ffe17 	ldw	r5,-8(fp)
   1b694:	010000b4 	movhi	r4,2
   1b698:	21351d04 	addi	r4,r4,-11148
   1b69c:	001b5700 	call	1b570 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1b6a0:	01c07fc4 	movi	r7,511
   1b6a4:	01800044 	movi	r6,1
   1b6a8:	e17fff17 	ldw	r5,-4(fp)
   1b6ac:	010000b4 	movhi	r4,2
   1b6b0:	21352304 	addi	r4,r4,-11124
   1b6b4:	001b5700 	call	1b570 <alt_open_fd>
}  
   1b6b8:	0001883a 	nop
   1b6bc:	e037883a 	mov	sp,fp
   1b6c0:	dfc00117 	ldw	ra,4(sp)
   1b6c4:	df000017 	ldw	fp,0(sp)
   1b6c8:	dec00204 	addi	sp,sp,8
   1b6cc:	f800283a 	ret

0001b6d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b6d0:	defffe04 	addi	sp,sp,-8
   1b6d4:	dfc00115 	stw	ra,4(sp)
   1b6d8:	df000015 	stw	fp,0(sp)
   1b6dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b6e0:	d0a00c17 	ldw	r2,-32720(gp)
   1b6e4:	10000326 	beq	r2,zero,1b6f4 <alt_get_errno+0x24>
   1b6e8:	d0a00c17 	ldw	r2,-32720(gp)
   1b6ec:	103ee83a 	callr	r2
   1b6f0:	00000106 	br	1b6f8 <alt_get_errno+0x28>
   1b6f4:	d0a71404 	addi	r2,gp,-25520
}
   1b6f8:	e037883a 	mov	sp,fp
   1b6fc:	dfc00117 	ldw	ra,4(sp)
   1b700:	df000017 	ldw	fp,0(sp)
   1b704:	dec00204 	addi	sp,sp,8
   1b708:	f800283a 	ret

0001b70c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1b70c:	defffb04 	addi	sp,sp,-20
   1b710:	dfc00415 	stw	ra,16(sp)
   1b714:	df000315 	stw	fp,12(sp)
   1b718:	dc000215 	stw	r16,8(sp)
   1b71c:	df000304 	addi	fp,sp,12
   1b720:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1b724:	e0bffe17 	ldw	r2,-8(fp)
   1b728:	10800217 	ldw	r2,8(r2)
   1b72c:	10d00034 	orhi	r3,r2,16384
   1b730:	e0bffe17 	ldw	r2,-8(fp)
   1b734:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b738:	e03ffd15 	stw	zero,-12(fp)
   1b73c:	00002306 	br	1b7cc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b740:	040000b4 	movhi	r16,2
   1b744:	84351d04 	addi	r16,r16,-11148
   1b748:	e0bffd17 	ldw	r2,-12(fp)
   1b74c:	01400304 	movi	r5,12
   1b750:	1009883a 	mov	r4,r2
   1b754:	0004f140 	call	4f14 <__mulsi3>
   1b758:	8085883a 	add	r2,r16,r2
   1b75c:	10c00017 	ldw	r3,0(r2)
   1b760:	e0bffe17 	ldw	r2,-8(fp)
   1b764:	10800017 	ldw	r2,0(r2)
   1b768:	1880151e 	bne	r3,r2,1b7c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b76c:	040000b4 	movhi	r16,2
   1b770:	84351d04 	addi	r16,r16,-11148
   1b774:	e0bffd17 	ldw	r2,-12(fp)
   1b778:	01400304 	movi	r5,12
   1b77c:	1009883a 	mov	r4,r2
   1b780:	0004f140 	call	4f14 <__mulsi3>
   1b784:	8085883a 	add	r2,r16,r2
   1b788:	10800204 	addi	r2,r2,8
   1b78c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b790:	10000b0e 	bge	r2,zero,1b7c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1b794:	01400304 	movi	r5,12
   1b798:	e13ffd17 	ldw	r4,-12(fp)
   1b79c:	0004f140 	call	4f14 <__mulsi3>
   1b7a0:	1007883a 	mov	r3,r2
   1b7a4:	008000b4 	movhi	r2,2
   1b7a8:	10b51d04 	addi	r2,r2,-11148
   1b7ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b7b0:	e0bffe17 	ldw	r2,-8(fp)
   1b7b4:	18800226 	beq	r3,r2,1b7c0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1b7b8:	00bffcc4 	movi	r2,-13
   1b7bc:	00000806 	br	1b7e0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b7c0:	e0bffd17 	ldw	r2,-12(fp)
   1b7c4:	10800044 	addi	r2,r2,1
   1b7c8:	e0bffd15 	stw	r2,-12(fp)
   1b7cc:	d0a00b17 	ldw	r2,-32724(gp)
   1b7d0:	1007883a 	mov	r3,r2
   1b7d4:	e0bffd17 	ldw	r2,-12(fp)
   1b7d8:	18bfd92e 	bgeu	r3,r2,1b740 <__alt_data_end+0xfffeaa00>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1b7dc:	0005883a 	mov	r2,zero
}
   1b7e0:	e6ffff04 	addi	sp,fp,-4
   1b7e4:	dfc00217 	ldw	ra,8(sp)
   1b7e8:	df000117 	ldw	fp,4(sp)
   1b7ec:	dc000017 	ldw	r16,0(sp)
   1b7f0:	dec00304 	addi	sp,sp,12
   1b7f4:	f800283a 	ret

0001b7f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1b7f8:	defff604 	addi	sp,sp,-40
   1b7fc:	dfc00915 	stw	ra,36(sp)
   1b800:	df000815 	stw	fp,32(sp)
   1b804:	df000804 	addi	fp,sp,32
   1b808:	e13ffd15 	stw	r4,-12(fp)
   1b80c:	e17ffe15 	stw	r5,-8(fp)
   1b810:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1b814:	00bfffc4 	movi	r2,-1
   1b818:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1b81c:	00bffb44 	movi	r2,-19
   1b820:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1b824:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1b828:	d1600904 	addi	r5,gp,-32732
   1b82c:	e13ffd17 	ldw	r4,-12(fp)
   1b830:	001be740 	call	1be74 <alt_find_dev>
   1b834:	e0bff815 	stw	r2,-32(fp)
   1b838:	e0bff817 	ldw	r2,-32(fp)
   1b83c:	1000051e 	bne	r2,zero,1b854 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1b840:	e13ffd17 	ldw	r4,-12(fp)
   1b844:	001bf040 	call	1bf04 <alt_find_file>
   1b848:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1b84c:	00800044 	movi	r2,1
   1b850:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1b854:	e0bff817 	ldw	r2,-32(fp)
   1b858:	10002b26 	beq	r2,zero,1b908 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1b85c:	e13ff817 	ldw	r4,-32(fp)
   1b860:	001c00c0 	call	1c00c <alt_get_fd>
   1b864:	e0bff915 	stw	r2,-28(fp)
   1b868:	e0bff917 	ldw	r2,-28(fp)
   1b86c:	1000030e 	bge	r2,zero,1b87c <open+0x84>
    {
      status = index;
   1b870:	e0bff917 	ldw	r2,-28(fp)
   1b874:	e0bffa15 	stw	r2,-24(fp)
   1b878:	00002506 	br	1b910 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1b87c:	01400304 	movi	r5,12
   1b880:	e13ff917 	ldw	r4,-28(fp)
   1b884:	0004f140 	call	4f14 <__mulsi3>
   1b888:	1007883a 	mov	r3,r2
   1b88c:	008000b4 	movhi	r2,2
   1b890:	10b51d04 	addi	r2,r2,-11148
   1b894:	1885883a 	add	r2,r3,r2
   1b898:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1b89c:	e0fffe17 	ldw	r3,-8(fp)
   1b8a0:	00900034 	movhi	r2,16384
   1b8a4:	10bfffc4 	addi	r2,r2,-1
   1b8a8:	1886703a 	and	r3,r3,r2
   1b8ac:	e0bffc17 	ldw	r2,-16(fp)
   1b8b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1b8b4:	e0bffb17 	ldw	r2,-20(fp)
   1b8b8:	1000051e 	bne	r2,zero,1b8d0 <open+0xd8>
   1b8bc:	e13ffc17 	ldw	r4,-16(fp)
   1b8c0:	001b70c0 	call	1b70c <alt_file_locked>
   1b8c4:	e0bffa15 	stw	r2,-24(fp)
   1b8c8:	e0bffa17 	ldw	r2,-24(fp)
   1b8cc:	10001016 	blt	r2,zero,1b910 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1b8d0:	e0bff817 	ldw	r2,-32(fp)
   1b8d4:	10800317 	ldw	r2,12(r2)
   1b8d8:	10000826 	beq	r2,zero,1b8fc <open+0x104>
   1b8dc:	e0bff817 	ldw	r2,-32(fp)
   1b8e0:	10800317 	ldw	r2,12(r2)
   1b8e4:	e1ffff17 	ldw	r7,-4(fp)
   1b8e8:	e1bffe17 	ldw	r6,-8(fp)
   1b8ec:	e17ffd17 	ldw	r5,-12(fp)
   1b8f0:	e13ffc17 	ldw	r4,-16(fp)
   1b8f4:	103ee83a 	callr	r2
   1b8f8:	00000106 	br	1b900 <open+0x108>
   1b8fc:	0005883a 	mov	r2,zero
   1b900:	e0bffa15 	stw	r2,-24(fp)
   1b904:	00000206 	br	1b910 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1b908:	00bffb44 	movi	r2,-19
   1b90c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1b910:	e0bffa17 	ldw	r2,-24(fp)
   1b914:	1000090e 	bge	r2,zero,1b93c <open+0x144>
  {
    alt_release_fd (index);  
   1b918:	e13ff917 	ldw	r4,-28(fp)
   1b91c:	00123580 	call	12358 <alt_release_fd>
    ALT_ERRNO = -status;
   1b920:	001b6d00 	call	1b6d0 <alt_get_errno>
   1b924:	1007883a 	mov	r3,r2
   1b928:	e0bffa17 	ldw	r2,-24(fp)
   1b92c:	0085c83a 	sub	r2,zero,r2
   1b930:	18800015 	stw	r2,0(r3)
    return -1;
   1b934:	00bfffc4 	movi	r2,-1
   1b938:	00000106 	br	1b940 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   1b93c:	e0bff917 	ldw	r2,-28(fp)
}
   1b940:	e037883a 	mov	sp,fp
   1b944:	dfc00117 	ldw	ra,4(sp)
   1b948:	df000017 	ldw	fp,0(sp)
   1b94c:	dec00204 	addi	sp,sp,8
   1b950:	f800283a 	ret

0001b954 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1b954:	defffa04 	addi	sp,sp,-24
   1b958:	df000515 	stw	fp,20(sp)
   1b95c:	df000504 	addi	fp,sp,20
   1b960:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b964:	0005303a 	rdctl	r2,status
   1b968:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b96c:	e0fffc17 	ldw	r3,-16(fp)
   1b970:	00bfff84 	movi	r2,-2
   1b974:	1884703a 	and	r2,r3,r2
   1b978:	1001703a 	wrctl	status,r2
  
  return context;
   1b97c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1b980:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1b984:	e0bfff17 	ldw	r2,-4(fp)
   1b988:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1b98c:	e0bffd17 	ldw	r2,-12(fp)
   1b990:	10800017 	ldw	r2,0(r2)
   1b994:	e0fffd17 	ldw	r3,-12(fp)
   1b998:	18c00117 	ldw	r3,4(r3)
   1b99c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1b9a0:	e0bffd17 	ldw	r2,-12(fp)
   1b9a4:	10800117 	ldw	r2,4(r2)
   1b9a8:	e0fffd17 	ldw	r3,-12(fp)
   1b9ac:	18c00017 	ldw	r3,0(r3)
   1b9b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1b9b4:	e0bffd17 	ldw	r2,-12(fp)
   1b9b8:	e0fffd17 	ldw	r3,-12(fp)
   1b9bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1b9c0:	e0bffd17 	ldw	r2,-12(fp)
   1b9c4:	e0fffd17 	ldw	r3,-12(fp)
   1b9c8:	10c00015 	stw	r3,0(r2)
   1b9cc:	e0bffb17 	ldw	r2,-20(fp)
   1b9d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b9d4:	e0bffe17 	ldw	r2,-8(fp)
   1b9d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1b9dc:	0001883a 	nop
   1b9e0:	e037883a 	mov	sp,fp
   1b9e4:	df000017 	ldw	fp,0(sp)
   1b9e8:	dec00104 	addi	sp,sp,4
   1b9ec:	f800283a 	ret

0001b9f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1b9f0:	defffb04 	addi	sp,sp,-20
   1b9f4:	dfc00415 	stw	ra,16(sp)
   1b9f8:	df000315 	stw	fp,12(sp)
   1b9fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1ba00:	d0a02e17 	ldw	r2,-32584(gp)
   1ba04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1ba08:	d0a73317 	ldw	r2,-25396(gp)
   1ba0c:	10800044 	addi	r2,r2,1
   1ba10:	d0a73315 	stw	r2,-25396(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ba14:	00002e06 	br	1bad0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1ba18:	e0bffd17 	ldw	r2,-12(fp)
   1ba1c:	10800017 	ldw	r2,0(r2)
   1ba20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1ba24:	e0bffd17 	ldw	r2,-12(fp)
   1ba28:	10800403 	ldbu	r2,16(r2)
   1ba2c:	10803fcc 	andi	r2,r2,255
   1ba30:	10000426 	beq	r2,zero,1ba44 <alt_tick+0x54>
   1ba34:	d0a73317 	ldw	r2,-25396(gp)
   1ba38:	1000021e 	bne	r2,zero,1ba44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1ba3c:	e0bffd17 	ldw	r2,-12(fp)
   1ba40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1ba44:	e0bffd17 	ldw	r2,-12(fp)
   1ba48:	10800217 	ldw	r2,8(r2)
   1ba4c:	d0e73317 	ldw	r3,-25396(gp)
   1ba50:	18801d36 	bltu	r3,r2,1bac8 <alt_tick+0xd8>
   1ba54:	e0bffd17 	ldw	r2,-12(fp)
   1ba58:	10800403 	ldbu	r2,16(r2)
   1ba5c:	10803fcc 	andi	r2,r2,255
   1ba60:	1000191e 	bne	r2,zero,1bac8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1ba64:	e0bffd17 	ldw	r2,-12(fp)
   1ba68:	10800317 	ldw	r2,12(r2)
   1ba6c:	e0fffd17 	ldw	r3,-12(fp)
   1ba70:	18c00517 	ldw	r3,20(r3)
   1ba74:	1809883a 	mov	r4,r3
   1ba78:	103ee83a 	callr	r2
   1ba7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1ba80:	e0bfff17 	ldw	r2,-4(fp)
   1ba84:	1000031e 	bne	r2,zero,1ba94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1ba88:	e13ffd17 	ldw	r4,-12(fp)
   1ba8c:	001b9540 	call	1b954 <alt_alarm_stop>
   1ba90:	00000d06 	br	1bac8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1ba94:	e0bffd17 	ldw	r2,-12(fp)
   1ba98:	10c00217 	ldw	r3,8(r2)
   1ba9c:	e0bfff17 	ldw	r2,-4(fp)
   1baa0:	1887883a 	add	r3,r3,r2
   1baa4:	e0bffd17 	ldw	r2,-12(fp)
   1baa8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1baac:	e0bffd17 	ldw	r2,-12(fp)
   1bab0:	10c00217 	ldw	r3,8(r2)
   1bab4:	d0a73317 	ldw	r2,-25396(gp)
   1bab8:	1880032e 	bgeu	r3,r2,1bac8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1babc:	e0bffd17 	ldw	r2,-12(fp)
   1bac0:	00c00044 	movi	r3,1
   1bac4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1bac8:	e0bffe17 	ldw	r2,-8(fp)
   1bacc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1bad0:	e0fffd17 	ldw	r3,-12(fp)
   1bad4:	d0a02e04 	addi	r2,gp,-32584
   1bad8:	18bfcf1e 	bne	r3,r2,1ba18 <__alt_data_end+0xfffeacd8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1badc:	001356c0 	call	1356c <OSTimeTick>
}
   1bae0:	0001883a 	nop
   1bae4:	e037883a 	mov	sp,fp
   1bae8:	dfc00117 	ldw	ra,4(sp)
   1baec:	df000017 	ldw	fp,0(sp)
   1baf0:	dec00204 	addi	sp,sp,8
   1baf4:	f800283a 	ret

0001baf8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1baf8:	deffff04 	addi	sp,sp,-4
   1bafc:	df000015 	stw	fp,0(sp)
   1bb00:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1bb04:	000170fa 	wrctl	ienable,zero
}
   1bb08:	0001883a 	nop
   1bb0c:	e037883a 	mov	sp,fp
   1bb10:	df000017 	ldw	fp,0(sp)
   1bb14:	dec00104 	addi	sp,sp,4
   1bb18:	f800283a 	ret

0001bb1c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1bb1c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1bb20:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1bb24:	d1272c17 	ldw	r4,-25424(gp)

      stw ra,  0(sp)
   1bb28:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1bb2c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1bb30:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1bb34:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1bb38:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1bb3c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1bb40:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1bb44:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1bb48:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1bb4c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1bb50:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1bb54:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1bb58:	001bd900 	call	1bd90 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1bb5c:	d1272717 	ldw	r4,-25444(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1bb60:	d1671f07 	ldb	r5,-25476(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1bb64:	d1272c15 	stw	r4,-25424(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1bb68:	d1671f45 	stb	r5,-25475(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1bb6c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1bb70:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1bb74:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1bb78:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1bb7c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1bb80:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1bb84:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1bb88:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1bb8c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1bb90:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1bb94:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1bb98:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1bb9c:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1bba0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1bba4:	f800283a 	ret

0001bba8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1bba8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1bbac:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1bbb0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1bbb4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1bbb8:	001bd900 	call	1bd90 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1bbbc:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1bbc0:	d4a71d45 	stb	r18,-25483(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1bbc4:	003fe506 	br	1bb5c <__alt_data_end+0xfffeae1c>

0001bbc8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1bbc8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1bbcc:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1bbd0:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1bbd4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1bbd8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1bbdc:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1bbe0:	dec00204 	addi	sp,sp,8

      callr r2
   1bbe4:	103ee83a 	callr	r2

      nop
   1bbe8:	0001883a 	nop

0001bbec <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1bbec:	defff704 	addi	sp,sp,-36
   1bbf0:	dfc00815 	stw	ra,32(sp)
   1bbf4:	df000715 	stw	fp,28(sp)
   1bbf8:	df000704 	addi	fp,sp,28
   1bbfc:	e13ffc15 	stw	r4,-16(fp)
   1bc00:	e17ffd15 	stw	r5,-12(fp)
   1bc04:	e1bffe15 	stw	r6,-8(fp)
   1bc08:	3805883a 	mov	r2,r7
   1bc0c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1bc10:	e0fffe17 	ldw	r3,-8(fp)
   1bc14:	00bfff04 	movi	r2,-4
   1bc18:	1884703a 	and	r2,r3,r2
   1bc1c:	10bef704 	addi	r2,r2,-1060
   1bc20:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1bc24:	01810904 	movi	r6,1060
   1bc28:	000b883a 	mov	r5,zero
   1bc2c:	e13ff917 	ldw	r4,-28(fp)
   1bc30:	000d5e00 	call	d5e0 <memset>
   1bc34:	e0bff917 	ldw	r2,-28(fp)
   1bc38:	10c0bb04 	addi	r3,r2,748
   1bc3c:	e0bff917 	ldw	r2,-28(fp)
   1bc40:	10c00115 	stw	r3,4(r2)
   1bc44:	e0bff917 	ldw	r2,-28(fp)
   1bc48:	10c0d504 	addi	r3,r2,852
   1bc4c:	e0bff917 	ldw	r2,-28(fp)
   1bc50:	10c00215 	stw	r3,8(r2)
   1bc54:	e0bff917 	ldw	r2,-28(fp)
   1bc58:	10c0ef04 	addi	r3,r2,956
   1bc5c:	e0bff917 	ldw	r2,-28(fp)
   1bc60:	10c00315 	stw	r3,12(r2)
   1bc64:	e0fff917 	ldw	r3,-28(fp)
   1bc68:	008000b4 	movhi	r2,2
   1bc6c:	10b2e904 	addi	r2,r2,-13404
   1bc70:	18800d15 	stw	r2,52(r3)
   1bc74:	e0bff917 	ldw	r2,-28(fp)
   1bc78:	00c00044 	movi	r3,1
   1bc7c:	10c02915 	stw	r3,164(r2)
   1bc80:	10002a15 	stw	zero,168(r2)
   1bc84:	e0bff917 	ldw	r2,-28(fp)
   1bc88:	00ccc384 	movi	r3,13070
   1bc8c:	10c02b0d 	sth	r3,172(r2)
   1bc90:	e0bff917 	ldw	r2,-28(fp)
   1bc94:	00eaf344 	movi	r3,-21555
   1bc98:	10c02b8d 	sth	r3,174(r2)
   1bc9c:	e0bff917 	ldw	r2,-28(fp)
   1bca0:	00c48d04 	movi	r3,4660
   1bca4:	10c02c0d 	sth	r3,176(r2)
   1bca8:	e0bff917 	ldw	r2,-28(fp)
   1bcac:	00f99b44 	movi	r3,-6547
   1bcb0:	10c02c8d 	sth	r3,178(r2)
   1bcb4:	e0bff917 	ldw	r2,-28(fp)
   1bcb8:	00f7bb04 	movi	r3,-8468
   1bcbc:	10c02d0d 	sth	r3,180(r2)
   1bcc0:	e0bff917 	ldw	r2,-28(fp)
   1bcc4:	00c00144 	movi	r3,5
   1bcc8:	10c02d8d 	sth	r3,182(r2)
   1bccc:	e0bff917 	ldw	r2,-28(fp)
   1bcd0:	00c002c4 	movi	r3,11
   1bcd4:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1bcd8:	e0bff917 	ldw	r2,-28(fp)
   1bcdc:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1bce0:	e0bffa17 	ldw	r2,-24(fp)
   1bce4:	10bff304 	addi	r2,r2,-52
   1bce8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1bcec:	e0bffb17 	ldw	r2,-20(fp)
   1bcf0:	10800c04 	addi	r2,r2,48
   1bcf4:	e0fffc17 	ldw	r3,-16(fp)
   1bcf8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1bcfc:	e0bffb17 	ldw	r2,-20(fp)
   1bd00:	10800b04 	addi	r2,r2,44
   1bd04:	e0fffd17 	ldw	r3,-12(fp)
   1bd08:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1bd0c:	e0bffb17 	ldw	r2,-20(fp)
   1bd10:	10800a04 	addi	r2,r2,40
   1bd14:	e0fff917 	ldw	r3,-28(fp)
   1bd18:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1bd1c:	008000b4 	movhi	r2,2
   1bd20:	10aef204 	addi	r2,r2,-17464
   1bd24:	10c00104 	addi	r3,r2,4
   1bd28:	e0bffb17 	ldw	r2,-20(fp)
   1bd2c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1bd30:	e0bffb17 	ldw	r2,-20(fp)
}
   1bd34:	e037883a 	mov	sp,fp
   1bd38:	dfc00117 	ldw	ra,4(sp)
   1bd3c:	df000017 	ldw	fp,0(sp)
   1bd40:	dec00204 	addi	sp,sp,8
   1bd44:	f800283a 	ret

0001bd48 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1bd48:	defffe04 	addi	sp,sp,-8
   1bd4c:	df000115 	stw	fp,4(sp)
   1bd50:	df000104 	addi	fp,sp,4
   1bd54:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1bd58:	0001883a 	nop
   1bd5c:	e037883a 	mov	sp,fp
   1bd60:	df000017 	ldw	fp,0(sp)
   1bd64:	dec00104 	addi	sp,sp,4
   1bd68:	f800283a 	ret

0001bd6c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1bd6c:	defffe04 	addi	sp,sp,-8
   1bd70:	df000115 	stw	fp,4(sp)
   1bd74:	df000104 	addi	fp,sp,4
   1bd78:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1bd7c:	0001883a 	nop
   1bd80:	e037883a 	mov	sp,fp
   1bd84:	df000017 	ldw	fp,0(sp)
   1bd88:	dec00104 	addi	sp,sp,4
   1bd8c:	f800283a 	ret

0001bd90 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1bd90:	deffff04 	addi	sp,sp,-4
   1bd94:	df000015 	stw	fp,0(sp)
   1bd98:	d839883a 	mov	fp,sp
}
   1bd9c:	0001883a 	nop
   1bda0:	e037883a 	mov	sp,fp
   1bda4:	df000017 	ldw	fp,0(sp)
   1bda8:	dec00104 	addi	sp,sp,4
   1bdac:	f800283a 	ret

0001bdb0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1bdb0:	deffff04 	addi	sp,sp,-4
   1bdb4:	df000015 	stw	fp,0(sp)
   1bdb8:	d839883a 	mov	fp,sp
}
   1bdbc:	0001883a 	nop
   1bdc0:	e037883a 	mov	sp,fp
   1bdc4:	df000017 	ldw	fp,0(sp)
   1bdc8:	dec00104 	addi	sp,sp,4
   1bdcc:	f800283a 	ret

0001bdd0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1bdd0:	deffff04 	addi	sp,sp,-4
   1bdd4:	df000015 	stw	fp,0(sp)
   1bdd8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1bddc:	0001883a 	nop
   1bde0:	e037883a 	mov	sp,fp
   1bde4:	df000017 	ldw	fp,0(sp)
   1bde8:	dec00104 	addi	sp,sp,4
   1bdec:	f800283a 	ret

0001bdf0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1bdf0:	deffff04 	addi	sp,sp,-4
   1bdf4:	df000015 	stw	fp,0(sp)
   1bdf8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1bdfc:	0001883a 	nop
   1be00:	e037883a 	mov	sp,fp
   1be04:	df000017 	ldw	fp,0(sp)
   1be08:	dec00104 	addi	sp,sp,4
   1be0c:	f800283a 	ret

0001be10 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1be10:	deffff04 	addi	sp,sp,-4
   1be14:	df000015 	stw	fp,0(sp)
   1be18:	d839883a 	mov	fp,sp
}
   1be1c:	0001883a 	nop
   1be20:	e037883a 	mov	sp,fp
   1be24:	df000017 	ldw	fp,0(sp)
   1be28:	dec00104 	addi	sp,sp,4
   1be2c:	f800283a 	ret

0001be30 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1be30:	deffff04 	addi	sp,sp,-4
   1be34:	df000015 	stw	fp,0(sp)
   1be38:	d839883a 	mov	fp,sp
}
   1be3c:	0001883a 	nop
   1be40:	e037883a 	mov	sp,fp
   1be44:	df000017 	ldw	fp,0(sp)
   1be48:	dec00104 	addi	sp,sp,4
   1be4c:	f800283a 	ret

0001be50 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1be50:	defffe04 	addi	sp,sp,-8
   1be54:	df000115 	stw	fp,4(sp)
   1be58:	df000104 	addi	fp,sp,4
   1be5c:	e13fff15 	stw	r4,-4(fp)
}
   1be60:	0001883a 	nop
   1be64:	e037883a 	mov	sp,fp
   1be68:	df000017 	ldw	fp,0(sp)
   1be6c:	dec00104 	addi	sp,sp,4
   1be70:	f800283a 	ret

0001be74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1be74:	defffa04 	addi	sp,sp,-24
   1be78:	dfc00515 	stw	ra,20(sp)
   1be7c:	df000415 	stw	fp,16(sp)
   1be80:	df000404 	addi	fp,sp,16
   1be84:	e13ffe15 	stw	r4,-8(fp)
   1be88:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1be8c:	e0bfff17 	ldw	r2,-4(fp)
   1be90:	10800017 	ldw	r2,0(r2)
   1be94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1be98:	e13ffe17 	ldw	r4,-8(fp)
   1be9c:	00078880 	call	7888 <strlen>
   1bea0:	10800044 	addi	r2,r2,1
   1bea4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1bea8:	00000d06 	br	1bee0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1beac:	e0bffc17 	ldw	r2,-16(fp)
   1beb0:	10800217 	ldw	r2,8(r2)
   1beb4:	e0fffd17 	ldw	r3,-12(fp)
   1beb8:	180d883a 	mov	r6,r3
   1bebc:	e17ffe17 	ldw	r5,-8(fp)
   1bec0:	1009883a 	mov	r4,r2
   1bec4:	001c1e80 	call	1c1e8 <memcmp>
   1bec8:	1000021e 	bne	r2,zero,1bed4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1becc:	e0bffc17 	ldw	r2,-16(fp)
   1bed0:	00000706 	br	1bef0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1bed4:	e0bffc17 	ldw	r2,-16(fp)
   1bed8:	10800017 	ldw	r2,0(r2)
   1bedc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1bee0:	e0fffc17 	ldw	r3,-16(fp)
   1bee4:	e0bfff17 	ldw	r2,-4(fp)
   1bee8:	18bff01e 	bne	r3,r2,1beac <__alt_data_end+0xfffeb16c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1beec:	0005883a 	mov	r2,zero
}
   1bef0:	e037883a 	mov	sp,fp
   1bef4:	dfc00117 	ldw	ra,4(sp)
   1bef8:	df000017 	ldw	fp,0(sp)
   1befc:	dec00204 	addi	sp,sp,8
   1bf00:	f800283a 	ret

0001bf04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1bf04:	defffb04 	addi	sp,sp,-20
   1bf08:	dfc00415 	stw	ra,16(sp)
   1bf0c:	df000315 	stw	fp,12(sp)
   1bf10:	df000304 	addi	fp,sp,12
   1bf14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1bf18:	d0a00717 	ldw	r2,-32740(gp)
   1bf1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bf20:	00003106 	br	1bfe8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1bf24:	e0bffd17 	ldw	r2,-12(fp)
   1bf28:	10800217 	ldw	r2,8(r2)
   1bf2c:	1009883a 	mov	r4,r2
   1bf30:	00078880 	call	7888 <strlen>
   1bf34:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1bf38:	e0bffd17 	ldw	r2,-12(fp)
   1bf3c:	10c00217 	ldw	r3,8(r2)
   1bf40:	e0bffe17 	ldw	r2,-8(fp)
   1bf44:	10bfffc4 	addi	r2,r2,-1
   1bf48:	1885883a 	add	r2,r3,r2
   1bf4c:	10800003 	ldbu	r2,0(r2)
   1bf50:	10803fcc 	andi	r2,r2,255
   1bf54:	1080201c 	xori	r2,r2,128
   1bf58:	10bfe004 	addi	r2,r2,-128
   1bf5c:	10800bd8 	cmpnei	r2,r2,47
   1bf60:	1000031e 	bne	r2,zero,1bf70 <alt_find_file+0x6c>
    {
      len -= 1;
   1bf64:	e0bffe17 	ldw	r2,-8(fp)
   1bf68:	10bfffc4 	addi	r2,r2,-1
   1bf6c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bf70:	e0bffe17 	ldw	r2,-8(fp)
   1bf74:	e0ffff17 	ldw	r3,-4(fp)
   1bf78:	1885883a 	add	r2,r3,r2
   1bf7c:	10800003 	ldbu	r2,0(r2)
   1bf80:	10803fcc 	andi	r2,r2,255
   1bf84:	1080201c 	xori	r2,r2,128
   1bf88:	10bfe004 	addi	r2,r2,-128
   1bf8c:	10800be0 	cmpeqi	r2,r2,47
   1bf90:	1000081e 	bne	r2,zero,1bfb4 <alt_find_file+0xb0>
   1bf94:	e0bffe17 	ldw	r2,-8(fp)
   1bf98:	e0ffff17 	ldw	r3,-4(fp)
   1bf9c:	1885883a 	add	r2,r3,r2
   1bfa0:	10800003 	ldbu	r2,0(r2)
   1bfa4:	10803fcc 	andi	r2,r2,255
   1bfa8:	1080201c 	xori	r2,r2,128
   1bfac:	10bfe004 	addi	r2,r2,-128
   1bfb0:	10000a1e 	bne	r2,zero,1bfdc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1bfb4:	e0bffd17 	ldw	r2,-12(fp)
   1bfb8:	10800217 	ldw	r2,8(r2)
   1bfbc:	e0fffe17 	ldw	r3,-8(fp)
   1bfc0:	180d883a 	mov	r6,r3
   1bfc4:	e17fff17 	ldw	r5,-4(fp)
   1bfc8:	1009883a 	mov	r4,r2
   1bfcc:	001c1e80 	call	1c1e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bfd0:	1000021e 	bne	r2,zero,1bfdc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1bfd4:	e0bffd17 	ldw	r2,-12(fp)
   1bfd8:	00000706 	br	1bff8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1bfdc:	e0bffd17 	ldw	r2,-12(fp)
   1bfe0:	10800017 	ldw	r2,0(r2)
   1bfe4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bfe8:	e0fffd17 	ldw	r3,-12(fp)
   1bfec:	d0a00704 	addi	r2,gp,-32740
   1bff0:	18bfcc1e 	bne	r3,r2,1bf24 <__alt_data_end+0xfffeb1e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1bff4:	0005883a 	mov	r2,zero
}
   1bff8:	e037883a 	mov	sp,fp
   1bffc:	dfc00117 	ldw	ra,4(sp)
   1c000:	df000017 	ldw	fp,0(sp)
   1c004:	dec00204 	addi	sp,sp,8
   1c008:	f800283a 	ret

0001c00c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1c00c:	defff804 	addi	sp,sp,-32
   1c010:	dfc00715 	stw	ra,28(sp)
   1c014:	df000615 	stw	fp,24(sp)
   1c018:	dc000515 	stw	r16,20(sp)
   1c01c:	df000604 	addi	fp,sp,24
   1c020:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1c024:	00bffa04 	movi	r2,-24
   1c028:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1c02c:	d0a71517 	ldw	r2,-25516(gp)
   1c030:	e0bffc15 	stw	r2,-16(fp)
   1c034:	e03ffd0d 	sth	zero,-12(fp)
   1c038:	e0bffd0b 	ldhu	r2,-12(fp)
   1c03c:	e0fffd84 	addi	r3,fp,-10
   1c040:	180d883a 	mov	r6,r3
   1c044:	100b883a 	mov	r5,r2
   1c048:	e13ffc17 	ldw	r4,-16(fp)
   1c04c:	0017dbc0 	call	17dbc <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c050:	e03ffa15 	stw	zero,-24(fp)
   1c054:	00001d06 	br	1c0cc <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   1c058:	040000b4 	movhi	r16,2
   1c05c:	84351d04 	addi	r16,r16,-11148
   1c060:	e0bffa17 	ldw	r2,-24(fp)
   1c064:	01400304 	movi	r5,12
   1c068:	1009883a 	mov	r4,r2
   1c06c:	0004f140 	call	4f14 <__mulsi3>
   1c070:	8085883a 	add	r2,r16,r2
   1c074:	10800017 	ldw	r2,0(r2)
   1c078:	1000111e 	bne	r2,zero,1c0c0 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   1c07c:	040000b4 	movhi	r16,2
   1c080:	84351d04 	addi	r16,r16,-11148
   1c084:	e0bffa17 	ldw	r2,-24(fp)
   1c088:	01400304 	movi	r5,12
   1c08c:	1009883a 	mov	r4,r2
   1c090:	0004f140 	call	4f14 <__mulsi3>
   1c094:	8085883a 	add	r2,r16,r2
   1c098:	e0fffe17 	ldw	r3,-8(fp)
   1c09c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1c0a0:	d0e00b17 	ldw	r3,-32724(gp)
   1c0a4:	e0bffa17 	ldw	r2,-24(fp)
   1c0a8:	1880020e 	bge	r3,r2,1c0b4 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   1c0ac:	e0bffa17 	ldw	r2,-24(fp)
   1c0b0:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   1c0b4:	e0bffa17 	ldw	r2,-24(fp)
   1c0b8:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   1c0bc:	00000606 	br	1c0d8 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c0c0:	e0bffa17 	ldw	r2,-24(fp)
   1c0c4:	10800044 	addi	r2,r2,1
   1c0c8:	e0bffa15 	stw	r2,-24(fp)
   1c0cc:	e0bffa17 	ldw	r2,-24(fp)
   1c0d0:	10800810 	cmplti	r2,r2,32
   1c0d4:	103fe01e 	bne	r2,zero,1c058 <__alt_data_end+0xfffeb318>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1c0d8:	d0a71517 	ldw	r2,-25516(gp)
   1c0dc:	1009883a 	mov	r4,r2
   1c0e0:	00181340 	call	18134 <OSSemPost>

  return rc;
   1c0e4:	e0bffb17 	ldw	r2,-20(fp)
}
   1c0e8:	e6ffff04 	addi	sp,fp,-4
   1c0ec:	dfc00217 	ldw	ra,8(sp)
   1c0f0:	df000117 	ldw	fp,4(sp)
   1c0f4:	dc000017 	ldw	r16,0(sp)
   1c0f8:	dec00304 	addi	sp,sp,12
   1c0fc:	f800283a 	ret

0001c100 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1c100:	defffe04 	addi	sp,sp,-8
   1c104:	df000115 	stw	fp,4(sp)
   1c108:	df000104 	addi	fp,sp,4
   1c10c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1c110:	e0bfff17 	ldw	r2,-4(fp)
   1c114:	10bffe84 	addi	r2,r2,-6
   1c118:	10c00428 	cmpgeui	r3,r2,16
   1c11c:	18001a1e 	bne	r3,zero,1c188 <alt_exception_cause_generated_bad_addr+0x88>
   1c120:	100690ba 	slli	r3,r2,2
   1c124:	008000b4 	movhi	r2,2
   1c128:	10b04e04 	addi	r2,r2,-16072
   1c12c:	1885883a 	add	r2,r3,r2
   1c130:	10800017 	ldw	r2,0(r2)
   1c134:	1000683a 	jmp	r2
   1c138:	0001c178 	rdprs	zero,zero,1797
   1c13c:	0001c178 	rdprs	zero,zero,1797
   1c140:	0001c188 	cmpgei	zero,zero,1798
   1c144:	0001c188 	cmpgei	zero,zero,1798
   1c148:	0001c188 	cmpgei	zero,zero,1798
   1c14c:	0001c178 	rdprs	zero,zero,1797
   1c150:	0001c180 	call	1c18 <__ieee754_pow+0x4a0>
   1c154:	0001c188 	cmpgei	zero,zero,1798
   1c158:	0001c178 	rdprs	zero,zero,1797
   1c15c:	0001c178 	rdprs	zero,zero,1797
   1c160:	0001c188 	cmpgei	zero,zero,1798
   1c164:	0001c178 	rdprs	zero,zero,1797
   1c168:	0001c180 	call	1c18 <__ieee754_pow+0x4a0>
   1c16c:	0001c188 	cmpgei	zero,zero,1798
   1c170:	0001c188 	cmpgei	zero,zero,1798
   1c174:	0001c178 	rdprs	zero,zero,1797
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1c178:	00800044 	movi	r2,1
   1c17c:	00000306 	br	1c18c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1c180:	0005883a 	mov	r2,zero
   1c184:	00000106 	br	1c18c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1c188:	0005883a 	mov	r2,zero
  }
}
   1c18c:	e037883a 	mov	sp,fp
   1c190:	df000017 	ldw	fp,0(sp)
   1c194:	dec00104 	addi	sp,sp,4
   1c198:	f800283a 	ret

0001c19c <atexit>:
   1c19c:	200b883a 	mov	r5,r4
   1c1a0:	000f883a 	mov	r7,zero
   1c1a4:	000d883a 	mov	r6,zero
   1c1a8:	0009883a 	mov	r4,zero
   1c1ac:	001c2641 	jmpi	1c264 <__register_exitproc>

0001c1b0 <exit>:
   1c1b0:	defffe04 	addi	sp,sp,-8
   1c1b4:	000b883a 	mov	r5,zero
   1c1b8:	dc000015 	stw	r16,0(sp)
   1c1bc:	dfc00115 	stw	ra,4(sp)
   1c1c0:	2021883a 	mov	r16,r4
   1c1c4:	001c37c0 	call	1c37c <__call_exitprocs>
   1c1c8:	008000b4 	movhi	r2,2
   1c1cc:	10b99904 	addi	r2,r2,-6556
   1c1d0:	11000017 	ldw	r4,0(r2)
   1c1d4:	20800f17 	ldw	r2,60(r4)
   1c1d8:	10000126 	beq	r2,zero,1c1e0 <exit+0x30>
   1c1dc:	103ee83a 	callr	r2
   1c1e0:	8009883a 	mov	r4,r16
   1c1e4:	001c4fc0 	call	1c4fc <_exit>

0001c1e8 <memcmp>:
   1c1e8:	01c000c4 	movi	r7,3
   1c1ec:	3980192e 	bgeu	r7,r6,1c254 <memcmp+0x6c>
   1c1f0:	2144b03a 	or	r2,r4,r5
   1c1f4:	11c4703a 	and	r2,r2,r7
   1c1f8:	10000f26 	beq	r2,zero,1c238 <memcmp+0x50>
   1c1fc:	20800003 	ldbu	r2,0(r4)
   1c200:	28c00003 	ldbu	r3,0(r5)
   1c204:	10c0151e 	bne	r2,r3,1c25c <memcmp+0x74>
   1c208:	31bfff84 	addi	r6,r6,-2
   1c20c:	01ffffc4 	movi	r7,-1
   1c210:	00000406 	br	1c224 <memcmp+0x3c>
   1c214:	20800003 	ldbu	r2,0(r4)
   1c218:	28c00003 	ldbu	r3,0(r5)
   1c21c:	31bfffc4 	addi	r6,r6,-1
   1c220:	10c00e1e 	bne	r2,r3,1c25c <memcmp+0x74>
   1c224:	21000044 	addi	r4,r4,1
   1c228:	29400044 	addi	r5,r5,1
   1c22c:	31fff91e 	bne	r6,r7,1c214 <__alt_data_end+0xfffeb4d4>
   1c230:	0005883a 	mov	r2,zero
   1c234:	f800283a 	ret
   1c238:	20c00017 	ldw	r3,0(r4)
   1c23c:	28800017 	ldw	r2,0(r5)
   1c240:	18bfee1e 	bne	r3,r2,1c1fc <__alt_data_end+0xfffeb4bc>
   1c244:	31bfff04 	addi	r6,r6,-4
   1c248:	21000104 	addi	r4,r4,4
   1c24c:	29400104 	addi	r5,r5,4
   1c250:	39bff936 	bltu	r7,r6,1c238 <__alt_data_end+0xfffeb4f8>
   1c254:	303fe91e 	bne	r6,zero,1c1fc <__alt_data_end+0xfffeb4bc>
   1c258:	003ff506 	br	1c230 <__alt_data_end+0xfffeb4f0>
   1c25c:	10c5c83a 	sub	r2,r2,r3
   1c260:	f800283a 	ret

0001c264 <__register_exitproc>:
   1c264:	defffa04 	addi	sp,sp,-24
   1c268:	dc000315 	stw	r16,12(sp)
   1c26c:	040000b4 	movhi	r16,2
   1c270:	84399904 	addi	r16,r16,-6556
   1c274:	80c00017 	ldw	r3,0(r16)
   1c278:	dc400415 	stw	r17,16(sp)
   1c27c:	dfc00515 	stw	ra,20(sp)
   1c280:	18805217 	ldw	r2,328(r3)
   1c284:	2023883a 	mov	r17,r4
   1c288:	10003726 	beq	r2,zero,1c368 <__register_exitproc+0x104>
   1c28c:	10c00117 	ldw	r3,4(r2)
   1c290:	010007c4 	movi	r4,31
   1c294:	20c00e16 	blt	r4,r3,1c2d0 <__register_exitproc+0x6c>
   1c298:	1a000044 	addi	r8,r3,1
   1c29c:	8800221e 	bne	r17,zero,1c328 <__register_exitproc+0xc4>
   1c2a0:	18c00084 	addi	r3,r3,2
   1c2a4:	18c7883a 	add	r3,r3,r3
   1c2a8:	18c7883a 	add	r3,r3,r3
   1c2ac:	12000115 	stw	r8,4(r2)
   1c2b0:	10c7883a 	add	r3,r2,r3
   1c2b4:	19400015 	stw	r5,0(r3)
   1c2b8:	0005883a 	mov	r2,zero
   1c2bc:	dfc00517 	ldw	ra,20(sp)
   1c2c0:	dc400417 	ldw	r17,16(sp)
   1c2c4:	dc000317 	ldw	r16,12(sp)
   1c2c8:	dec00604 	addi	sp,sp,24
   1c2cc:	f800283a 	ret
   1c2d0:	00800034 	movhi	r2,0
   1c2d4:	10800004 	addi	r2,r2,0
   1c2d8:	10002626 	beq	r2,zero,1c374 <__register_exitproc+0x110>
   1c2dc:	01006404 	movi	r4,400
   1c2e0:	d9400015 	stw	r5,0(sp)
   1c2e4:	d9800115 	stw	r6,4(sp)
   1c2e8:	d9c00215 	stw	r7,8(sp)
   1c2ec:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   1c2f0:	d9400017 	ldw	r5,0(sp)
   1c2f4:	d9800117 	ldw	r6,4(sp)
   1c2f8:	d9c00217 	ldw	r7,8(sp)
   1c2fc:	10001d26 	beq	r2,zero,1c374 <__register_exitproc+0x110>
   1c300:	81000017 	ldw	r4,0(r16)
   1c304:	10000115 	stw	zero,4(r2)
   1c308:	02000044 	movi	r8,1
   1c30c:	22405217 	ldw	r9,328(r4)
   1c310:	0007883a 	mov	r3,zero
   1c314:	12400015 	stw	r9,0(r2)
   1c318:	20805215 	stw	r2,328(r4)
   1c31c:	10006215 	stw	zero,392(r2)
   1c320:	10006315 	stw	zero,396(r2)
   1c324:	883fde26 	beq	r17,zero,1c2a0 <__alt_data_end+0xfffeb560>
   1c328:	18c9883a 	add	r4,r3,r3
   1c32c:	2109883a 	add	r4,r4,r4
   1c330:	1109883a 	add	r4,r2,r4
   1c334:	21802215 	stw	r6,136(r4)
   1c338:	01800044 	movi	r6,1
   1c33c:	12406217 	ldw	r9,392(r2)
   1c340:	30cc983a 	sll	r6,r6,r3
   1c344:	4992b03a 	or	r9,r9,r6
   1c348:	12406215 	stw	r9,392(r2)
   1c34c:	21c04215 	stw	r7,264(r4)
   1c350:	01000084 	movi	r4,2
   1c354:	893fd21e 	bne	r17,r4,1c2a0 <__alt_data_end+0xfffeb560>
   1c358:	11006317 	ldw	r4,396(r2)
   1c35c:	218cb03a 	or	r6,r4,r6
   1c360:	11806315 	stw	r6,396(r2)
   1c364:	003fce06 	br	1c2a0 <__alt_data_end+0xfffeb560>
   1c368:	18805304 	addi	r2,r3,332
   1c36c:	18805215 	stw	r2,328(r3)
   1c370:	003fc606 	br	1c28c <__alt_data_end+0xfffeb54c>
   1c374:	00bfffc4 	movi	r2,-1
   1c378:	003fd006 	br	1c2bc <__alt_data_end+0xfffeb57c>

0001c37c <__call_exitprocs>:
   1c37c:	defff504 	addi	sp,sp,-44
   1c380:	df000915 	stw	fp,36(sp)
   1c384:	dd400615 	stw	r21,24(sp)
   1c388:	dc800315 	stw	r18,12(sp)
   1c38c:	dfc00a15 	stw	ra,40(sp)
   1c390:	ddc00815 	stw	r23,32(sp)
   1c394:	dd800715 	stw	r22,28(sp)
   1c398:	dd000515 	stw	r20,20(sp)
   1c39c:	dcc00415 	stw	r19,16(sp)
   1c3a0:	dc400215 	stw	r17,8(sp)
   1c3a4:	dc000115 	stw	r16,4(sp)
   1c3a8:	d9000015 	stw	r4,0(sp)
   1c3ac:	2839883a 	mov	fp,r5
   1c3b0:	04800044 	movi	r18,1
   1c3b4:	057fffc4 	movi	r21,-1
   1c3b8:	008000b4 	movhi	r2,2
   1c3bc:	10b99904 	addi	r2,r2,-6556
   1c3c0:	12000017 	ldw	r8,0(r2)
   1c3c4:	45005217 	ldw	r20,328(r8)
   1c3c8:	44c05204 	addi	r19,r8,328
   1c3cc:	a0001c26 	beq	r20,zero,1c440 <__call_exitprocs+0xc4>
   1c3d0:	a0800117 	ldw	r2,4(r20)
   1c3d4:	15ffffc4 	addi	r23,r2,-1
   1c3d8:	b8000d16 	blt	r23,zero,1c410 <__call_exitprocs+0x94>
   1c3dc:	14000044 	addi	r16,r2,1
   1c3e0:	8421883a 	add	r16,r16,r16
   1c3e4:	8421883a 	add	r16,r16,r16
   1c3e8:	84402004 	addi	r17,r16,128
   1c3ec:	a463883a 	add	r17,r20,r17
   1c3f0:	a421883a 	add	r16,r20,r16
   1c3f4:	e0001e26 	beq	fp,zero,1c470 <__call_exitprocs+0xf4>
   1c3f8:	80804017 	ldw	r2,256(r16)
   1c3fc:	e0801c26 	beq	fp,r2,1c470 <__call_exitprocs+0xf4>
   1c400:	bdffffc4 	addi	r23,r23,-1
   1c404:	843fff04 	addi	r16,r16,-4
   1c408:	8c7fff04 	addi	r17,r17,-4
   1c40c:	bd7ff91e 	bne	r23,r21,1c3f4 <__alt_data_end+0xfffeb6b4>
   1c410:	00800034 	movhi	r2,0
   1c414:	10800004 	addi	r2,r2,0
   1c418:	10000926 	beq	r2,zero,1c440 <__call_exitprocs+0xc4>
   1c41c:	a0800117 	ldw	r2,4(r20)
   1c420:	1000301e 	bne	r2,zero,1c4e4 <__call_exitprocs+0x168>
   1c424:	a0800017 	ldw	r2,0(r20)
   1c428:	10003226 	beq	r2,zero,1c4f4 <__call_exitprocs+0x178>
   1c42c:	a009883a 	mov	r4,r20
   1c430:	98800015 	stw	r2,0(r19)
   1c434:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   1c438:	9d000017 	ldw	r20,0(r19)
   1c43c:	a03fe41e 	bne	r20,zero,1c3d0 <__alt_data_end+0xfffeb690>
   1c440:	dfc00a17 	ldw	ra,40(sp)
   1c444:	df000917 	ldw	fp,36(sp)
   1c448:	ddc00817 	ldw	r23,32(sp)
   1c44c:	dd800717 	ldw	r22,28(sp)
   1c450:	dd400617 	ldw	r21,24(sp)
   1c454:	dd000517 	ldw	r20,20(sp)
   1c458:	dcc00417 	ldw	r19,16(sp)
   1c45c:	dc800317 	ldw	r18,12(sp)
   1c460:	dc400217 	ldw	r17,8(sp)
   1c464:	dc000117 	ldw	r16,4(sp)
   1c468:	dec00b04 	addi	sp,sp,44
   1c46c:	f800283a 	ret
   1c470:	a0800117 	ldw	r2,4(r20)
   1c474:	80c00017 	ldw	r3,0(r16)
   1c478:	10bfffc4 	addi	r2,r2,-1
   1c47c:	15c01426 	beq	r2,r23,1c4d0 <__call_exitprocs+0x154>
   1c480:	80000015 	stw	zero,0(r16)
   1c484:	183fde26 	beq	r3,zero,1c400 <__alt_data_end+0xfffeb6c0>
   1c488:	95c8983a 	sll	r4,r18,r23
   1c48c:	a0806217 	ldw	r2,392(r20)
   1c490:	a5800117 	ldw	r22,4(r20)
   1c494:	2084703a 	and	r2,r4,r2
   1c498:	10000b26 	beq	r2,zero,1c4c8 <__call_exitprocs+0x14c>
   1c49c:	a0806317 	ldw	r2,396(r20)
   1c4a0:	2088703a 	and	r4,r4,r2
   1c4a4:	20000c1e 	bne	r4,zero,1c4d8 <__call_exitprocs+0x15c>
   1c4a8:	89400017 	ldw	r5,0(r17)
   1c4ac:	d9000017 	ldw	r4,0(sp)
   1c4b0:	183ee83a 	callr	r3
   1c4b4:	a0800117 	ldw	r2,4(r20)
   1c4b8:	15bfbf1e 	bne	r2,r22,1c3b8 <__alt_data_end+0xfffeb678>
   1c4bc:	98800017 	ldw	r2,0(r19)
   1c4c0:	153fcf26 	beq	r2,r20,1c400 <__alt_data_end+0xfffeb6c0>
   1c4c4:	003fbc06 	br	1c3b8 <__alt_data_end+0xfffeb678>
   1c4c8:	183ee83a 	callr	r3
   1c4cc:	003ff906 	br	1c4b4 <__alt_data_end+0xfffeb774>
   1c4d0:	a5c00115 	stw	r23,4(r20)
   1c4d4:	003feb06 	br	1c484 <__alt_data_end+0xfffeb744>
   1c4d8:	89000017 	ldw	r4,0(r17)
   1c4dc:	183ee83a 	callr	r3
   1c4e0:	003ff406 	br	1c4b4 <__alt_data_end+0xfffeb774>
   1c4e4:	a0800017 	ldw	r2,0(r20)
   1c4e8:	a027883a 	mov	r19,r20
   1c4ec:	1029883a 	mov	r20,r2
   1c4f0:	003fb606 	br	1c3cc <__alt_data_end+0xfffeb68c>
   1c4f4:	0005883a 	mov	r2,zero
   1c4f8:	003ffb06 	br	1c4e8 <__alt_data_end+0xfffeb7a8>

0001c4fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1c4fc:	defffd04 	addi	sp,sp,-12
   1c500:	df000215 	stw	fp,8(sp)
   1c504:	df000204 	addi	fp,sp,8
   1c508:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1c50c:	d0271d45 	stb	zero,-25483(gp)
   1c510:	e0bfff17 	ldw	r2,-4(fp)
   1c514:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1c518:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1c51c:	10000226 	beq	r2,zero,1c528 <_exit+0x2c>
    ALT_SIM_FAIL();
   1c520:	002af070 	cmpltui	zero,zero,43969
   1c524:	00000106 	br	1c52c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1c528:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1c52c:	003fff06 	br	1c52c <__alt_data_end+0xfffeb7ec>
